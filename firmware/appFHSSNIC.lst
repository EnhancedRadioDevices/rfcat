                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Jun 20 2015) (MINGW32)
                                      4 ; This file was generated Wed Nov 30 16:38:16 2016
                                      5 ;--------------------------------------------------------
                                      6 	.module appFHSSNIC
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _initBoard
                                     14 	.globl _appHandleEP0
                                     15 	.globl _appHandleEP0OUT
                                     16 	.globl _appHandleEP0OUTdone
                                     17 	.globl _appMainLoop
                                     18 	.globl _appMainInit
                                     19 	.globl _init_MAC
                                     20 	.globl _init_FHSS
                                     21 	.globl _MAC_set_NIC_ID
                                     22 	.globl _MAC_do_Master_scanny_thingy
                                     23 	.globl _MAC_become_master
                                     24 	.globl _MAC_stop_sync
                                     25 	.globl _transmit_long
                                     26 	.globl _registerCb_ep5
                                     27 	.globl _usb_up
                                     28 	.globl _usbProcessEvents
                                     29 	.globl _waitForUSBsetup
                                     30 	.globl _initUSB
                                     31 	.globl _memcpy
                                     32 	.globl _decAES
                                     33 	.globl _encAES
                                     34 	.globl _padAES
                                     35 	.globl _setAES
                                     36 	.globl _initAES
                                     37 	.globl _resetRFSTATE
                                     38 	.globl _init_RF
                                     39 	.globl _transmit
                                     40 	.globl _IdleMode
                                     41 	.globl _RxMode
                                     42 	.globl _initDMA
                                     43 	.globl _appReturn
                                     44 	.globl _txdata
                                     45 	.globl _clock_init
                                     46 	.globl _debughex16
                                     47 	.globl _debughex
                                     48 	.globl _debugx
                                     49 	.globl _debug
                                     50 	.globl _io_init
                                     51 	.globl _sleepMillis
                                     52 	.globl _USBIF
                                     53 	.globl _MODE
                                     54 	.globl _RE
                                     55 	.globl _SLAVE
                                     56 	.globl _FE
                                     57 	.globl _ERR
                                     58 	.globl _RX_BYTE
                                     59 	.globl _TX_BYTE
                                     60 	.globl _ACTIVE
                                     61 	.globl _B_7
                                     62 	.globl _B_6
                                     63 	.globl _B_5
                                     64 	.globl _B_4
                                     65 	.globl _B_3
                                     66 	.globl _B_2
                                     67 	.globl _B_1
                                     68 	.globl _B_0
                                     69 	.globl _WDTIF
                                     70 	.globl _P1IF
                                     71 	.globl _UTX1IF
                                     72 	.globl _UTX0IF
                                     73 	.globl _P2IF
                                     74 	.globl _ACC_7
                                     75 	.globl _ACC_6
                                     76 	.globl _ACC_5
                                     77 	.globl _ACC_4
                                     78 	.globl _ACC_3
                                     79 	.globl _ACC_2
                                     80 	.globl _ACC_1
                                     81 	.globl _ACC_0
                                     82 	.globl _OVFIM
                                     83 	.globl _T4CH1IF
                                     84 	.globl _T4CH0IF
                                     85 	.globl _T4OVFIF
                                     86 	.globl _T3CH1IF
                                     87 	.globl _T3CH0IF
                                     88 	.globl _T3OVFIF
                                     89 	.globl _CY
                                     90 	.globl _AC
                                     91 	.globl _F0
                                     92 	.globl _RS1
                                     93 	.globl _RS0
                                     94 	.globl _OV
                                     95 	.globl _F1
                                     96 	.globl _P
                                     97 	.globl _STIF
                                     98 	.globl _P0IF
                                     99 	.globl _T4IF
                                    100 	.globl _T3IF
                                    101 	.globl _T2IF
                                    102 	.globl _T1IF
                                    103 	.globl _DMAIF
                                    104 	.globl _P0IE
                                    105 	.globl _T4IE
                                    106 	.globl _T3IE
                                    107 	.globl _T2IE
                                    108 	.globl _T1IE
                                    109 	.globl _DMAIE
                                    110 	.globl _EA
                                    111 	.globl _STIE
                                    112 	.globl _ENCIE
                                    113 	.globl _URX1IE
                                    114 	.globl _URX0IE
                                    115 	.globl _ADCIE
                                    116 	.globl _RFTXRXIE
                                    117 	.globl _P2_7
                                    118 	.globl _P2_6
                                    119 	.globl _P2_5
                                    120 	.globl _P2_4
                                    121 	.globl _P2_3
                                    122 	.globl _P2_2
                                    123 	.globl _P2_1
                                    124 	.globl _P2_0
                                    125 	.globl _ENCIF_1
                                    126 	.globl _ENCIF_0
                                    127 	.globl _P1_7
                                    128 	.globl _P1_6
                                    129 	.globl _P1_5
                                    130 	.globl _P1_4
                                    131 	.globl _P1_3
                                    132 	.globl _P1_2
                                    133 	.globl _P1_1
                                    134 	.globl _P1_0
                                    135 	.globl _URX1IF
                                    136 	.globl _ADCIF
                                    137 	.globl _URX0IF
                                    138 	.globl _IT1
                                    139 	.globl _RFTXRXIF
                                    140 	.globl _IT0
                                    141 	.globl _P0_7
                                    142 	.globl _P0_6
                                    143 	.globl _P0_5
                                    144 	.globl _P0_4
                                    145 	.globl _P0_3
                                    146 	.globl _P0_2
                                    147 	.globl _P0_1
                                    148 	.globl _P0_0
                                    149 	.globl _P2DIR
                                    150 	.globl _P1DIR
                                    151 	.globl _P0DIR
                                    152 	.globl _U1GCR
                                    153 	.globl _U1UCR
                                    154 	.globl _U1BAUD
                                    155 	.globl _U1DBUF
                                    156 	.globl _U1CSR
                                    157 	.globl _P2INP
                                    158 	.globl _P1INP
                                    159 	.globl _P2SEL
                                    160 	.globl _P1SEL
                                    161 	.globl _P0SEL
                                    162 	.globl _ADCCFG
                                    163 	.globl _PERCFG
                                    164 	.globl _B
                                    165 	.globl _T4CC1
                                    166 	.globl _T4CCTL1
                                    167 	.globl _T4CC0
                                    168 	.globl _T4CCTL0
                                    169 	.globl _T4CTL
                                    170 	.globl _T4CNT
                                    171 	.globl _RFIF
                                    172 	.globl _IRCON2
                                    173 	.globl _T1CCTL2
                                    174 	.globl _T1CCTL1
                                    175 	.globl _T1CCTL0
                                    176 	.globl _T1CTL
                                    177 	.globl _T1CNTH
                                    178 	.globl _T1CNTL
                                    179 	.globl _RFST
                                    180 	.globl _ACC
                                    181 	.globl _T1CC2H
                                    182 	.globl _T1CC2L
                                    183 	.globl _T1CC1H
                                    184 	.globl _T1CC1L
                                    185 	.globl _T1CC0H
                                    186 	.globl _T1CC0L
                                    187 	.globl _RFD
                                    188 	.globl _TIMIF
                                    189 	.globl _DMAREQ
                                    190 	.globl _DMAARM
                                    191 	.globl _DMA0CFGH
                                    192 	.globl _DMA0CFGL
                                    193 	.globl _DMA1CFGH
                                    194 	.globl _DMA1CFGL
                                    195 	.globl _DMAIRQ
                                    196 	.globl _PSW
                                    197 	.globl _T3CC1
                                    198 	.globl _T3CCTL1
                                    199 	.globl _T3CC0
                                    200 	.globl _T3CCTL0
                                    201 	.globl _T3CTL
                                    202 	.globl _T3CNT
                                    203 	.globl _WDCTL
                                    204 	.globl __SFRC8
                                    205 	.globl _MEMCTR
                                    206 	.globl _CLKCON
                                    207 	.globl _U0GCR
                                    208 	.globl _U0UCR
                                    209 	.globl __SFRC3
                                    210 	.globl _U0BAUD
                                    211 	.globl _U0DBUF
                                    212 	.globl _IRCON
                                    213 	.globl __SFRBF
                                    214 	.globl _SLEEP
                                    215 	.globl _RNDH
                                    216 	.globl _RNDL
                                    217 	.globl _ADCH
                                    218 	.globl _ADCL
                                    219 	.globl _IP1
                                    220 	.globl _IEN1
                                    221 	.globl __SFRB7
                                    222 	.globl _ADCCON3
                                    223 	.globl _ADCCON2
                                    224 	.globl _ADCCON1
                                    225 	.globl _ENCCS
                                    226 	.globl _ENCDO
                                    227 	.globl _ENCDI
                                    228 	.globl __SFRB0
                                    229 	.globl _FWDATA
                                    230 	.globl _FCTL
                                    231 	.globl _FADDRH
                                    232 	.globl _FADDRL
                                    233 	.globl _FWT
                                    234 	.globl __SFRAA
                                    235 	.globl _IP0
                                    236 	.globl _IEN0
                                    237 	.globl __SFRA7
                                    238 	.globl _WORTIME1
                                    239 	.globl _WORTIME0
                                    240 	.globl _WOREVT1
                                    241 	.globl _WOREVT0
                                    242 	.globl _WORCTRL
                                    243 	.globl _WORIRQ
                                    244 	.globl _P2
                                    245 	.globl __SFR9F
                                    246 	.globl _T2CTL
                                    247 	.globl _T2PR
                                    248 	.globl _T2CT
                                    249 	.globl _S1CON
                                    250 	.globl _IEN2
                                    251 	.globl __SFR99
                                    252 	.globl _S0CON
                                    253 	.globl __SFR97
                                    254 	.globl __SFR96
                                    255 	.globl __SFR95
                                    256 	.globl __SFR94
                                    257 	.globl __XPAGE
                                    258 	.globl _MPAGE
                                    259 	.globl _DPS
                                    260 	.globl _RFIM
                                    261 	.globl _P1
                                    262 	.globl _P0INP
                                    263 	.globl __SFR8E
                                    264 	.globl _P1IEN
                                    265 	.globl _PICTL
                                    266 	.globl _P2IFG
                                    267 	.globl _P1IFG
                                    268 	.globl _P0IFG
                                    269 	.globl _TCON
                                    270 	.globl _PCON
                                    271 	.globl _U0CSR
                                    272 	.globl _DPH1
                                    273 	.globl _DPL1
                                    274 	.globl _DPH0
                                    275 	.globl _DPL0
                                    276 	.globl _SP
                                    277 	.globl _P0
                                    278 	.globl _chan_table
                                    279 	.globl _processbuffer
                                    280 	.globl _MAC_rx_handle_PARM_2
                                    281 	.globl _MAC_tx_PARM_2
                                    282 	.globl _transmit_long_PARM_3
                                    283 	.globl _transmit_long_PARM_2
                                    284 	.globl _g_txMsgQueue
                                    285 	.globl _g_NIC_ID
                                    286 	.globl _g_Channels
                                    287 	.globl _USBF5
                                    288 	.globl _USBF4
                                    289 	.globl _USBF3
                                    290 	.globl _USBF2
                                    291 	.globl _USBF1
                                    292 	.globl _USBF0
                                    293 	.globl _USBCNTH
                                    294 	.globl _USBCNTL
                                    295 	.globl _USBCNT0
                                    296 	.globl _USBCSOH
                                    297 	.globl _USBCSOL
                                    298 	.globl _USBMAXO
                                    299 	.globl _USBCSIH
                                    300 	.globl _USBCSIL
                                    301 	.globl _USBCS0
                                    302 	.globl _USBMAXI
                                    303 	.globl _USBINDEX
                                    304 	.globl _USBFRMH
                                    305 	.globl _USBFRML
                                    306 	.globl _USBCIE
                                    307 	.globl _USBOIE
                                    308 	.globl _USBIIE
                                    309 	.globl _USBCIF
                                    310 	.globl _USBOIF
                                    311 	.globl _USBIIF
                                    312 	.globl _USBPOW
                                    313 	.globl _USBADDR
                                    314 	.globl _X_P2DIR
                                    315 	.globl _X_P1DIR
                                    316 	.globl _X_P0DIR
                                    317 	.globl _X_U1GCR
                                    318 	.globl _X_U1UCR
                                    319 	.globl _X_U1BAUD
                                    320 	.globl _X_U1DBUF
                                    321 	.globl _X_U1CSR
                                    322 	.globl _X_P2INP
                                    323 	.globl _X_P1INP
                                    324 	.globl _X_P2SEL
                                    325 	.globl _X_P1SEL
                                    326 	.globl _X_P0SEL
                                    327 	.globl _X_ADCCFG
                                    328 	.globl _X_PERCFG
                                    329 	.globl __NA_B
                                    330 	.globl _X_T4CC1
                                    331 	.globl _X_T4CCTL1
                                    332 	.globl _X_T4CC0
                                    333 	.globl _X_T4CCTL0
                                    334 	.globl _X_T4CTL
                                    335 	.globl _X_T4CNT
                                    336 	.globl _X_RFIF
                                    337 	.globl __NA_IRCON2
                                    338 	.globl _X_T1CCTL2
                                    339 	.globl _X_T1CCTL1
                                    340 	.globl _X_T1CCTL0
                                    341 	.globl _X_T1CTL
                                    342 	.globl _X_T1CNTH
                                    343 	.globl _X_T1CNTL
                                    344 	.globl _X_RFST
                                    345 	.globl __NA_ACC
                                    346 	.globl _X_T1CC2H
                                    347 	.globl _X_T1CC2L
                                    348 	.globl _X_T1CC1H
                                    349 	.globl _X_T1CC1L
                                    350 	.globl _X_T1CC0H
                                    351 	.globl _X_T1CC0L
                                    352 	.globl _X_RFD
                                    353 	.globl _X_TIMIF
                                    354 	.globl _X_DMAREQ
                                    355 	.globl _X_DMAARM
                                    356 	.globl _X_DMA0CFGH
                                    357 	.globl _X_DMA0CFGL
                                    358 	.globl _X_DMA1CFGH
                                    359 	.globl _X_DMA1CFGL
                                    360 	.globl _X_DMAIRQ
                                    361 	.globl __NA_PSW
                                    362 	.globl _X_T3CC1
                                    363 	.globl _X_T3CCTL1
                                    364 	.globl _X_T3CC0
                                    365 	.globl _X_T3CCTL0
                                    366 	.globl _X_T3CTL
                                    367 	.globl _X_T3CNT
                                    368 	.globl _X_WDCTL
                                    369 	.globl __X_SFRC8
                                    370 	.globl _X_MEMCTR
                                    371 	.globl _X_CLKCON
                                    372 	.globl _X_U0GCR
                                    373 	.globl _X_U0UCR
                                    374 	.globl __X_SFRC3
                                    375 	.globl _X_U0BAUD
                                    376 	.globl _X_U0DBUF
                                    377 	.globl __NA_IRCON
                                    378 	.globl __X_SFRBF
                                    379 	.globl _X_SLEEP
                                    380 	.globl _X_RNDH
                                    381 	.globl _X_RNDL
                                    382 	.globl _X_ADCH
                                    383 	.globl _X_ADCL
                                    384 	.globl __NA_IP1
                                    385 	.globl __NA_IEN1
                                    386 	.globl __X_SFRB7
                                    387 	.globl _X_ADCCON3
                                    388 	.globl _X_ADCCON2
                                    389 	.globl _X_ADCCON1
                                    390 	.globl _X_ENCCS
                                    391 	.globl _X_ENCDO
                                    392 	.globl _X_ENCDI
                                    393 	.globl __X_SFRB0
                                    394 	.globl _X_FWDATA
                                    395 	.globl _X_FCTL
                                    396 	.globl _X_FADDRH
                                    397 	.globl _X_FADDRL
                                    398 	.globl _X_FWT
                                    399 	.globl __X_SFRAA
                                    400 	.globl __NA_IP0
                                    401 	.globl __NA_IEN0
                                    402 	.globl __X_SFRA7
                                    403 	.globl _X_WORTIME1
                                    404 	.globl _X_WORTIME0
                                    405 	.globl _X_WOREVT1
                                    406 	.globl _X_WOREVT0
                                    407 	.globl _X_WORCTRL
                                    408 	.globl _X_WORIRQ
                                    409 	.globl __NA_P2
                                    410 	.globl __X_SFR9F
                                    411 	.globl _X_T2CTL
                                    412 	.globl _X_T2PR
                                    413 	.globl _X_T2CT
                                    414 	.globl __NA_S1CON
                                    415 	.globl __NA_IEN2
                                    416 	.globl __X_SFR99
                                    417 	.globl __NA_S0CON
                                    418 	.globl __X_SFR97
                                    419 	.globl __X_SFR96
                                    420 	.globl __X_SFR95
                                    421 	.globl __X_SFR94
                                    422 	.globl _X_MPAGE
                                    423 	.globl __NA_DPS
                                    424 	.globl _X_RFIM
                                    425 	.globl __NA_P1
                                    426 	.globl _X_P0INP
                                    427 	.globl __X_SFR8E
                                    428 	.globl _X_P1IEN
                                    429 	.globl _X_PICTL
                                    430 	.globl _X_P2IFG
                                    431 	.globl _X_P1IFG
                                    432 	.globl _X_P0IFG
                                    433 	.globl __NA_TCON
                                    434 	.globl __NA_PCON
                                    435 	.globl _X_U0CSR
                                    436 	.globl __NA_DPH1
                                    437 	.globl __NA_DPL1
                                    438 	.globl __NA_DPH0
                                    439 	.globl __NA_DPL0
                                    440 	.globl __NA_SP
                                    441 	.globl __NA_P0
                                    442 	.globl _I2SCLKF2
                                    443 	.globl _I2SCLKF1
                                    444 	.globl _I2SCLKF0
                                    445 	.globl _I2SSTAT
                                    446 	.globl _I2SWCNT
                                    447 	.globl _I2SDATH
                                    448 	.globl _I2SDATL
                                    449 	.globl _I2SCFG1
                                    450 	.globl _I2SCFG0
                                    451 	.globl _VCO_VC_DAC
                                    452 	.globl _PKTSTATUS
                                    453 	.globl _MARCSTATE
                                    454 	.globl _RSSI
                                    455 	.globl _LQI
                                    456 	.globl _FREQEST
                                    457 	.globl _VERSION
                                    458 	.globl _PARTNUM
                                    459 	.globl __XREGDF35
                                    460 	.globl __XREGDF34
                                    461 	.globl __XREGDF33
                                    462 	.globl __XREGDF32
                                    463 	.globl _IOCFG0
                                    464 	.globl _IOCFG1
                                    465 	.globl _IOCFG2
                                    466 	.globl _PA_TABLE0
                                    467 	.globl _PA_TABLE1
                                    468 	.globl _PA_TABLE2
                                    469 	.globl _PA_TABLE3
                                    470 	.globl _PA_TABLE4
                                    471 	.globl _PA_TABLE5
                                    472 	.globl _PA_TABLE6
                                    473 	.globl _PA_TABLE7
                                    474 	.globl __XREGDF26
                                    475 	.globl _TEST0
                                    476 	.globl _TEST1
                                    477 	.globl _TEST2
                                    478 	.globl __XREGDF22
                                    479 	.globl __XREGDF21
                                    480 	.globl __XREGDF20
                                    481 	.globl _FSCAL0
                                    482 	.globl _FSCAL1
                                    483 	.globl _FSCAL2
                                    484 	.globl _FSCAL3
                                    485 	.globl _FREND0
                                    486 	.globl _FREND1
                                    487 	.globl _AGCCTRL0
                                    488 	.globl _AGCCTRL1
                                    489 	.globl _AGCCTRL2
                                    490 	.globl _BSCFG
                                    491 	.globl _FOCCFG
                                    492 	.globl _MCSM0
                                    493 	.globl _MCSM1
                                    494 	.globl _MCSM2
                                    495 	.globl _DEVIATN
                                    496 	.globl _MDMCFG0
                                    497 	.globl _MDMCFG1
                                    498 	.globl _MDMCFG2
                                    499 	.globl _MDMCFG3
                                    500 	.globl _MDMCFG4
                                    501 	.globl _FREQ0
                                    502 	.globl _FREQ1
                                    503 	.globl _FREQ2
                                    504 	.globl _FSCTRL0
                                    505 	.globl _FSCTRL1
                                    506 	.globl _CHANNR
                                    507 	.globl _ADDR
                                    508 	.globl _PKTCTRL0
                                    509 	.globl _PKTCTRL1
                                    510 	.globl _PKTLEN
                                    511 	.globl _SYNC0
                                    512 	.globl _SYNC1
                                    513 	.globl _MDMCTRL0H
                                    514 	.globl _PHY_set_channel
                                    515 	.globl _MAC_initChannels
                                    516 	.globl _begin_hopping
                                    517 	.globl _stop_hopping
                                    518 	.globl _MAC_tx
                                    519 	.globl _MAC_sync
                                    520 	.globl _MAC_set_chanidx
                                    521 	.globl _MAC_rx_handle
                                    522 	.globl _MAC_getNextChannel
                                    523 	.globl _t2IntHandler
                                    524 	.globl _t3IntHandler
                                    525 	.globl _appHandleEP5
                                    526 	.globl _appInitRf
                                    527 ;--------------------------------------------------------
                                    528 ; special function registers
                                    529 ;--------------------------------------------------------
                                    530 	.area RSEG    (ABS,DATA)
      000000                        531 	.org 0x0000
                           000080   532 _P0	=	0x0080
                           000081   533 _SP	=	0x0081
                           000082   534 _DPL0	=	0x0082
                           000083   535 _DPH0	=	0x0083
                           000084   536 _DPL1	=	0x0084
                           000085   537 _DPH1	=	0x0085
                           000086   538 _U0CSR	=	0x0086
                           000087   539 _PCON	=	0x0087
                           000088   540 _TCON	=	0x0088
                           000089   541 _P0IFG	=	0x0089
                           00008A   542 _P1IFG	=	0x008a
                           00008B   543 _P2IFG	=	0x008b
                           00008C   544 _PICTL	=	0x008c
                           00008D   545 _P1IEN	=	0x008d
                           00008E   546 __SFR8E	=	0x008e
                           00008F   547 _P0INP	=	0x008f
                           000090   548 _P1	=	0x0090
                           000091   549 _RFIM	=	0x0091
                           000092   550 _DPS	=	0x0092
                           000093   551 _MPAGE	=	0x0093
                           000093   552 __XPAGE	=	0x0093
                           000094   553 __SFR94	=	0x0094
                           000095   554 __SFR95	=	0x0095
                           000096   555 __SFR96	=	0x0096
                           000097   556 __SFR97	=	0x0097
                           000098   557 _S0CON	=	0x0098
                           000099   558 __SFR99	=	0x0099
                           00009A   559 _IEN2	=	0x009a
                           00009B   560 _S1CON	=	0x009b
                           00009C   561 _T2CT	=	0x009c
                           00009D   562 _T2PR	=	0x009d
                           00009E   563 _T2CTL	=	0x009e
                           00009F   564 __SFR9F	=	0x009f
                           0000A0   565 _P2	=	0x00a0
                           0000A1   566 _WORIRQ	=	0x00a1
                           0000A2   567 _WORCTRL	=	0x00a2
                           0000A3   568 _WOREVT0	=	0x00a3
                           0000A4   569 _WOREVT1	=	0x00a4
                           0000A5   570 _WORTIME0	=	0x00a5
                           0000A6   571 _WORTIME1	=	0x00a6
                           0000A7   572 __SFRA7	=	0x00a7
                           0000A8   573 _IEN0	=	0x00a8
                           0000A9   574 _IP0	=	0x00a9
                           0000AA   575 __SFRAA	=	0x00aa
                           0000AB   576 _FWT	=	0x00ab
                           0000AC   577 _FADDRL	=	0x00ac
                           0000AD   578 _FADDRH	=	0x00ad
                           0000AE   579 _FCTL	=	0x00ae
                           0000AF   580 _FWDATA	=	0x00af
                           0000B0   581 __SFRB0	=	0x00b0
                           0000B1   582 _ENCDI	=	0x00b1
                           0000B2   583 _ENCDO	=	0x00b2
                           0000B3   584 _ENCCS	=	0x00b3
                           0000B4   585 _ADCCON1	=	0x00b4
                           0000B5   586 _ADCCON2	=	0x00b5
                           0000B6   587 _ADCCON3	=	0x00b6
                           0000B7   588 __SFRB7	=	0x00b7
                           0000B8   589 _IEN1	=	0x00b8
                           0000B9   590 _IP1	=	0x00b9
                           0000BA   591 _ADCL	=	0x00ba
                           0000BB   592 _ADCH	=	0x00bb
                           0000BC   593 _RNDL	=	0x00bc
                           0000BD   594 _RNDH	=	0x00bd
                           0000BE   595 _SLEEP	=	0x00be
                           0000BF   596 __SFRBF	=	0x00bf
                           0000C0   597 _IRCON	=	0x00c0
                           0000C1   598 _U0DBUF	=	0x00c1
                           0000C2   599 _U0BAUD	=	0x00c2
                           0000C3   600 __SFRC3	=	0x00c3
                           0000C4   601 _U0UCR	=	0x00c4
                           0000C5   602 _U0GCR	=	0x00c5
                           0000C6   603 _CLKCON	=	0x00c6
                           0000C7   604 _MEMCTR	=	0x00c7
                           0000C8   605 __SFRC8	=	0x00c8
                           0000C9   606 _WDCTL	=	0x00c9
                           0000CA   607 _T3CNT	=	0x00ca
                           0000CB   608 _T3CTL	=	0x00cb
                           0000CC   609 _T3CCTL0	=	0x00cc
                           0000CD   610 _T3CC0	=	0x00cd
                           0000CE   611 _T3CCTL1	=	0x00ce
                           0000CF   612 _T3CC1	=	0x00cf
                           0000D0   613 _PSW	=	0x00d0
                           0000D1   614 _DMAIRQ	=	0x00d1
                           0000D2   615 _DMA1CFGL	=	0x00d2
                           0000D3   616 _DMA1CFGH	=	0x00d3
                           0000D4   617 _DMA0CFGL	=	0x00d4
                           0000D5   618 _DMA0CFGH	=	0x00d5
                           0000D6   619 _DMAARM	=	0x00d6
                           0000D7   620 _DMAREQ	=	0x00d7
                           0000D8   621 _TIMIF	=	0x00d8
                           0000D9   622 _RFD	=	0x00d9
                           0000DA   623 _T1CC0L	=	0x00da
                           0000DB   624 _T1CC0H	=	0x00db
                           0000DC   625 _T1CC1L	=	0x00dc
                           0000DD   626 _T1CC1H	=	0x00dd
                           0000DE   627 _T1CC2L	=	0x00de
                           0000DF   628 _T1CC2H	=	0x00df
                           0000E0   629 _ACC	=	0x00e0
                           0000E1   630 _RFST	=	0x00e1
                           0000E2   631 _T1CNTL	=	0x00e2
                           0000E3   632 _T1CNTH	=	0x00e3
                           0000E4   633 _T1CTL	=	0x00e4
                           0000E5   634 _T1CCTL0	=	0x00e5
                           0000E6   635 _T1CCTL1	=	0x00e6
                           0000E7   636 _T1CCTL2	=	0x00e7
                           0000E8   637 _IRCON2	=	0x00e8
                           0000E9   638 _RFIF	=	0x00e9
                           0000EA   639 _T4CNT	=	0x00ea
                           0000EB   640 _T4CTL	=	0x00eb
                           0000EC   641 _T4CCTL0	=	0x00ec
                           0000ED   642 _T4CC0	=	0x00ed
                           0000EE   643 _T4CCTL1	=	0x00ee
                           0000EF   644 _T4CC1	=	0x00ef
                           0000F0   645 _B	=	0x00f0
                           0000F1   646 _PERCFG	=	0x00f1
                           0000F2   647 _ADCCFG	=	0x00f2
                           0000F3   648 _P0SEL	=	0x00f3
                           0000F4   649 _P1SEL	=	0x00f4
                           0000F5   650 _P2SEL	=	0x00f5
                           0000F6   651 _P1INP	=	0x00f6
                           0000F7   652 _P2INP	=	0x00f7
                           0000F8   653 _U1CSR	=	0x00f8
                           0000F9   654 _U1DBUF	=	0x00f9
                           0000FA   655 _U1BAUD	=	0x00fa
                           0000FB   656 _U1UCR	=	0x00fb
                           0000FC   657 _U1GCR	=	0x00fc
                           0000FD   658 _P0DIR	=	0x00fd
                           0000FE   659 _P1DIR	=	0x00fe
                           0000FF   660 _P2DIR	=	0x00ff
                                    661 ;--------------------------------------------------------
                                    662 ; special function bits
                                    663 ;--------------------------------------------------------
                                    664 	.area RSEG    (ABS,DATA)
      000000                        665 	.org 0x0000
                           000080   666 _P0_0	=	0x0080
                           000081   667 _P0_1	=	0x0081
                           000082   668 _P0_2	=	0x0082
                           000083   669 _P0_3	=	0x0083
                           000084   670 _P0_4	=	0x0084
                           000085   671 _P0_5	=	0x0085
                           000086   672 _P0_6	=	0x0086
                           000087   673 _P0_7	=	0x0087
                           000088   674 _IT0	=	0x0088
                           000089   675 _RFTXRXIF	=	0x0089
                           00008A   676 _IT1	=	0x008a
                           00008B   677 _URX0IF	=	0x008b
                           00008D   678 _ADCIF	=	0x008d
                           00008F   679 _URX1IF	=	0x008f
                           000090   680 _P1_0	=	0x0090
                           000091   681 _P1_1	=	0x0091
                           000092   682 _P1_2	=	0x0092
                           000093   683 _P1_3	=	0x0093
                           000094   684 _P1_4	=	0x0094
                           000095   685 _P1_5	=	0x0095
                           000096   686 _P1_6	=	0x0096
                           000097   687 _P1_7	=	0x0097
                           000098   688 _ENCIF_0	=	0x0098
                           000099   689 _ENCIF_1	=	0x0099
                           0000A0   690 _P2_0	=	0x00a0
                           0000A1   691 _P2_1	=	0x00a1
                           0000A2   692 _P2_2	=	0x00a2
                           0000A3   693 _P2_3	=	0x00a3
                           0000A4   694 _P2_4	=	0x00a4
                           0000A5   695 _P2_5	=	0x00a5
                           0000A6   696 _P2_6	=	0x00a6
                           0000A7   697 _P2_7	=	0x00a7
                           0000A8   698 _RFTXRXIE	=	0x00a8
                           0000A9   699 _ADCIE	=	0x00a9
                           0000AA   700 _URX0IE	=	0x00aa
                           0000AB   701 _URX1IE	=	0x00ab
                           0000AC   702 _ENCIE	=	0x00ac
                           0000AD   703 _STIE	=	0x00ad
                           0000AF   704 _EA	=	0x00af
                           0000B8   705 _DMAIE	=	0x00b8
                           0000B9   706 _T1IE	=	0x00b9
                           0000BA   707 _T2IE	=	0x00ba
                           0000BB   708 _T3IE	=	0x00bb
                           0000BC   709 _T4IE	=	0x00bc
                           0000BD   710 _P0IE	=	0x00bd
                           0000C0   711 _DMAIF	=	0x00c0
                           0000C1   712 _T1IF	=	0x00c1
                           0000C2   713 _T2IF	=	0x00c2
                           0000C3   714 _T3IF	=	0x00c3
                           0000C4   715 _T4IF	=	0x00c4
                           0000C5   716 _P0IF	=	0x00c5
                           0000C7   717 _STIF	=	0x00c7
                           0000D0   718 _P	=	0x00d0
                           0000D1   719 _F1	=	0x00d1
                           0000D2   720 _OV	=	0x00d2
                           0000D3   721 _RS0	=	0x00d3
                           0000D4   722 _RS1	=	0x00d4
                           0000D5   723 _F0	=	0x00d5
                           0000D6   724 _AC	=	0x00d6
                           0000D7   725 _CY	=	0x00d7
                           0000D8   726 _T3OVFIF	=	0x00d8
                           0000D9   727 _T3CH0IF	=	0x00d9
                           0000DA   728 _T3CH1IF	=	0x00da
                           0000DB   729 _T4OVFIF	=	0x00db
                           0000DC   730 _T4CH0IF	=	0x00dc
                           0000DD   731 _T4CH1IF	=	0x00dd
                           0000DE   732 _OVFIM	=	0x00de
                           0000E0   733 _ACC_0	=	0x00e0
                           0000E1   734 _ACC_1	=	0x00e1
                           0000E2   735 _ACC_2	=	0x00e2
                           0000E3   736 _ACC_3	=	0x00e3
                           0000E4   737 _ACC_4	=	0x00e4
                           0000E5   738 _ACC_5	=	0x00e5
                           0000E6   739 _ACC_6	=	0x00e6
                           0000E7   740 _ACC_7	=	0x00e7
                           0000E8   741 _P2IF	=	0x00e8
                           0000E9   742 _UTX0IF	=	0x00e9
                           0000EA   743 _UTX1IF	=	0x00ea
                           0000EB   744 _P1IF	=	0x00eb
                           0000EC   745 _WDTIF	=	0x00ec
                           0000F0   746 _B_0	=	0x00f0
                           0000F1   747 _B_1	=	0x00f1
                           0000F2   748 _B_2	=	0x00f2
                           0000F3   749 _B_3	=	0x00f3
                           0000F4   750 _B_4	=	0x00f4
                           0000F5   751 _B_5	=	0x00f5
                           0000F6   752 _B_6	=	0x00f6
                           0000F7   753 _B_7	=	0x00f7
                           0000F8   754 _ACTIVE	=	0x00f8
                           0000F9   755 _TX_BYTE	=	0x00f9
                           0000FA   756 _RX_BYTE	=	0x00fa
                           0000FB   757 _ERR	=	0x00fb
                           0000FC   758 _FE	=	0x00fc
                           0000FD   759 _SLAVE	=	0x00fd
                           0000FE   760 _RE	=	0x00fe
                           0000FF   761 _MODE	=	0x00ff
                           0000E8   762 _USBIF	=	0x00e8
                                    763 ;--------------------------------------------------------
                                    764 ; overlayable register banks
                                    765 ;--------------------------------------------------------
                                    766 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        767 	.ds 8
                                    768 ;--------------------------------------------------------
                                    769 ; overlayable bit register bank
                                    770 ;--------------------------------------------------------
                                    771 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        772 bits:
      000000                        773 	.ds 1
                           008000   774 	b0 = bits[0]
                           008100   775 	b1 = bits[1]
                           008200   776 	b2 = bits[2]
                           008300   777 	b3 = bits[3]
                           008400   778 	b4 = bits[4]
                           008500   779 	b5 = bits[5]
                           008600   780 	b6 = bits[6]
                           008700   781 	b7 = bits[7]
                                    782 ;--------------------------------------------------------
                                    783 ; internal ram data
                                    784 ;--------------------------------------------------------
                                    785 	.area DSEG    (DATA)
      000000                        786 _appHandleEP5_sloc0_1_0:
      000000                        787 	.ds 2
      000002                        788 _appHandleEP5_sloc1_1_0:
      000002                        789 	.ds 3
                                    790 ;--------------------------------------------------------
                                    791 ; overlayable items in internal ram 
                                    792 ;--------------------------------------------------------
                                    793 	.area	OSEG    (OVR,DATA)
                                    794 ;--------------------------------------------------------
                                    795 ; Stack segment in internal ram 
                                    796 ;--------------------------------------------------------
                                    797 	.area	SSEG
      000000                        798 __start__stack:
      000000                        799 	.ds	1
                                    800 
                                    801 ;--------------------------------------------------------
                                    802 ; indirectly addressable internal ram data
                                    803 ;--------------------------------------------------------
                                    804 	.area ISEG    (DATA)
                                    805 ;--------------------------------------------------------
                                    806 ; absolute internal ram data
                                    807 ;--------------------------------------------------------
                                    808 	.area IABS    (ABS,DATA)
                                    809 	.area IABS    (ABS,DATA)
                                    810 ;--------------------------------------------------------
                                    811 ; bit data
                                    812 ;--------------------------------------------------------
                                    813 	.area BSEG    (BIT)
      000000                        814 _appMainLoop_sloc0_1_0:
      000000                        815 	.ds 1
                                    816 ;--------------------------------------------------------
                                    817 ; paged external ram data
                                    818 ;--------------------------------------------------------
                                    819 	.area PSEG    (PAG,XDATA)
                                    820 ;--------------------------------------------------------
                                    821 ; external ram data
                                    822 ;--------------------------------------------------------
                                    823 	.area XSEG    (XDATA)
                           00DF02   824 _MDMCTRL0H	=	0xdf02
                           00DF00   825 _SYNC1	=	0xdf00
                           00DF01   826 _SYNC0	=	0xdf01
                           00DF02   827 _PKTLEN	=	0xdf02
                           00DF03   828 _PKTCTRL1	=	0xdf03
                           00DF04   829 _PKTCTRL0	=	0xdf04
                           00DF05   830 _ADDR	=	0xdf05
                           00DF06   831 _CHANNR	=	0xdf06
                           00DF07   832 _FSCTRL1	=	0xdf07
                           00DF08   833 _FSCTRL0	=	0xdf08
                           00DF09   834 _FREQ2	=	0xdf09
                           00DF0A   835 _FREQ1	=	0xdf0a
                           00DF0B   836 _FREQ0	=	0xdf0b
                           00DF0C   837 _MDMCFG4	=	0xdf0c
                           00DF0D   838 _MDMCFG3	=	0xdf0d
                           00DF0E   839 _MDMCFG2	=	0xdf0e
                           00DF0F   840 _MDMCFG1	=	0xdf0f
                           00DF10   841 _MDMCFG0	=	0xdf10
                           00DF11   842 _DEVIATN	=	0xdf11
                           00DF12   843 _MCSM2	=	0xdf12
                           00DF13   844 _MCSM1	=	0xdf13
                           00DF14   845 _MCSM0	=	0xdf14
                           00DF15   846 _FOCCFG	=	0xdf15
                           00DF16   847 _BSCFG	=	0xdf16
                           00DF17   848 _AGCCTRL2	=	0xdf17
                           00DF18   849 _AGCCTRL1	=	0xdf18
                           00DF19   850 _AGCCTRL0	=	0xdf19
                           00DF1A   851 _FREND1	=	0xdf1a
                           00DF1B   852 _FREND0	=	0xdf1b
                           00DF1C   853 _FSCAL3	=	0xdf1c
                           00DF1D   854 _FSCAL2	=	0xdf1d
                           00DF1E   855 _FSCAL1	=	0xdf1e
                           00DF1F   856 _FSCAL0	=	0xdf1f
                           00DF20   857 __XREGDF20	=	0xdf20
                           00DF21   858 __XREGDF21	=	0xdf21
                           00DF22   859 __XREGDF22	=	0xdf22
                           00DF23   860 _TEST2	=	0xdf23
                           00DF24   861 _TEST1	=	0xdf24
                           00DF25   862 _TEST0	=	0xdf25
                           00DF26   863 __XREGDF26	=	0xdf26
                           00DF27   864 _PA_TABLE7	=	0xdf27
                           00DF28   865 _PA_TABLE6	=	0xdf28
                           00DF29   866 _PA_TABLE5	=	0xdf29
                           00DF2A   867 _PA_TABLE4	=	0xdf2a
                           00DF2B   868 _PA_TABLE3	=	0xdf2b
                           00DF2C   869 _PA_TABLE2	=	0xdf2c
                           00DF2D   870 _PA_TABLE1	=	0xdf2d
                           00DF2E   871 _PA_TABLE0	=	0xdf2e
                           00DF2F   872 _IOCFG2	=	0xdf2f
                           00DF30   873 _IOCFG1	=	0xdf30
                           00DF31   874 _IOCFG0	=	0xdf31
                           00DF32   875 __XREGDF32	=	0xdf32
                           00DF33   876 __XREGDF33	=	0xdf33
                           00DF34   877 __XREGDF34	=	0xdf34
                           00DF35   878 __XREGDF35	=	0xdf35
                           00DF36   879 _PARTNUM	=	0xdf36
                           00DF37   880 _VERSION	=	0xdf37
                           00DF38   881 _FREQEST	=	0xdf38
                           00DF39   882 _LQI	=	0xdf39
                           00DF3A   883 _RSSI	=	0xdf3a
                           00DF3B   884 _MARCSTATE	=	0xdf3b
                           00DF3C   885 _PKTSTATUS	=	0xdf3c
                           00DF3D   886 _VCO_VC_DAC	=	0xdf3d
                           00DF40   887 _I2SCFG0	=	0xdf40
                           00DF41   888 _I2SCFG1	=	0xdf41
                           00DF42   889 _I2SDATL	=	0xdf42
                           00DF43   890 _I2SDATH	=	0xdf43
                           00DF44   891 _I2SWCNT	=	0xdf44
                           00DF45   892 _I2SSTAT	=	0xdf45
                           00DF46   893 _I2SCLKF0	=	0xdf46
                           00DF47   894 _I2SCLKF1	=	0xdf47
                           00DF48   895 _I2SCLKF2	=	0xdf48
                           00DF80   896 __NA_P0	=	0xdf80
                           00DF81   897 __NA_SP	=	0xdf81
                           00DF82   898 __NA_DPL0	=	0xdf82
                           00DF83   899 __NA_DPH0	=	0xdf83
                           00DF84   900 __NA_DPL1	=	0xdf84
                           00DF85   901 __NA_DPH1	=	0xdf85
                           00DF86   902 _X_U0CSR	=	0xdf86
                           00DF87   903 __NA_PCON	=	0xdf87
                           00DF88   904 __NA_TCON	=	0xdf88
                           00DF89   905 _X_P0IFG	=	0xdf89
                           00DF8A   906 _X_P1IFG	=	0xdf8a
                           00DF8B   907 _X_P2IFG	=	0xdf8b
                           00DF8C   908 _X_PICTL	=	0xdf8c
                           00DF8D   909 _X_P1IEN	=	0xdf8d
                           00DF8E   910 __X_SFR8E	=	0xdf8e
                           00DF8F   911 _X_P0INP	=	0xdf8f
                           00DF90   912 __NA_P1	=	0xdf90
                           00DF91   913 _X_RFIM	=	0xdf91
                           00DF92   914 __NA_DPS	=	0xdf92
                           00DF93   915 _X_MPAGE	=	0xdf93
                           00DF94   916 __X_SFR94	=	0xdf94
                           00DF95   917 __X_SFR95	=	0xdf95
                           00DF96   918 __X_SFR96	=	0xdf96
                           00DF97   919 __X_SFR97	=	0xdf97
                           00DF98   920 __NA_S0CON	=	0xdf98
                           00DF99   921 __X_SFR99	=	0xdf99
                           00DF9A   922 __NA_IEN2	=	0xdf9a
                           00DF9B   923 __NA_S1CON	=	0xdf9b
                           00DF9C   924 _X_T2CT	=	0xdf9c
                           00DF9D   925 _X_T2PR	=	0xdf9d
                           00DF9E   926 _X_T2CTL	=	0xdf9e
                           00DF9F   927 __X_SFR9F	=	0xdf9f
                           00DFA0   928 __NA_P2	=	0xdfa0
                           00DFA1   929 _X_WORIRQ	=	0xdfa1
                           00DFA2   930 _X_WORCTRL	=	0xdfa2
                           00DFA3   931 _X_WOREVT0	=	0xdfa3
                           00DFA4   932 _X_WOREVT1	=	0xdfa4
                           00DFA5   933 _X_WORTIME0	=	0xdfa5
                           00DFA6   934 _X_WORTIME1	=	0xdfa6
                           00DFA7   935 __X_SFRA7	=	0xdfa7
                           00DFA8   936 __NA_IEN0	=	0xdfa8
                           00DFA9   937 __NA_IP0	=	0xdfa9
                           00DFAA   938 __X_SFRAA	=	0xdfaa
                           00DFAB   939 _X_FWT	=	0xdfab
                           00DFAC   940 _X_FADDRL	=	0xdfac
                           00DFAD   941 _X_FADDRH	=	0xdfad
                           00DFAE   942 _X_FCTL	=	0xdfae
                           00DFAF   943 _X_FWDATA	=	0xdfaf
                           00DFB0   944 __X_SFRB0	=	0xdfb0
                           00DFB1   945 _X_ENCDI	=	0xdfb1
                           00DFB2   946 _X_ENCDO	=	0xdfb2
                           00DFB3   947 _X_ENCCS	=	0xdfb3
                           00DFB4   948 _X_ADCCON1	=	0xdfb4
                           00DFB5   949 _X_ADCCON2	=	0xdfb5
                           00DFB6   950 _X_ADCCON3	=	0xdfb6
                           00DFB7   951 __X_SFRB7	=	0xdfb7
                           00DFB8   952 __NA_IEN1	=	0xdfb8
                           00DFB9   953 __NA_IP1	=	0xdfb9
                           00DFBA   954 _X_ADCL	=	0xdfba
                           00DFBB   955 _X_ADCH	=	0xdfbb
                           00DFBC   956 _X_RNDL	=	0xdfbc
                           00DFBD   957 _X_RNDH	=	0xdfbd
                           00DFBE   958 _X_SLEEP	=	0xdfbe
                           00DFBF   959 __X_SFRBF	=	0xdfbf
                           00DFC0   960 __NA_IRCON	=	0xdfc0
                           00DFC1   961 _X_U0DBUF	=	0xdfc1
                           00DFC2   962 _X_U0BAUD	=	0xdfc2
                           00DFC3   963 __X_SFRC3	=	0xdfc3
                           00DFC4   964 _X_U0UCR	=	0xdfc4
                           00DFC5   965 _X_U0GCR	=	0xdfc5
                           00DFC6   966 _X_CLKCON	=	0xdfc6
                           00DFC7   967 _X_MEMCTR	=	0xdfc7
                           00DFC8   968 __X_SFRC8	=	0xdfc8
                           00DFC9   969 _X_WDCTL	=	0xdfc9
                           00DFCA   970 _X_T3CNT	=	0xdfca
                           00DFCB   971 _X_T3CTL	=	0xdfcb
                           00DFCC   972 _X_T3CCTL0	=	0xdfcc
                           00DFCD   973 _X_T3CC0	=	0xdfcd
                           00DFCE   974 _X_T3CCTL1	=	0xdfce
                           00DFCF   975 _X_T3CC1	=	0xdfcf
                           00DFD0   976 __NA_PSW	=	0xdfd0
                           00DFD1   977 _X_DMAIRQ	=	0xdfd1
                           00DFD2   978 _X_DMA1CFGL	=	0xdfd2
                           00DFD3   979 _X_DMA1CFGH	=	0xdfd3
                           00DFD4   980 _X_DMA0CFGL	=	0xdfd4
                           00DFD5   981 _X_DMA0CFGH	=	0xdfd5
                           00DFD6   982 _X_DMAARM	=	0xdfd6
                           00DFD7   983 _X_DMAREQ	=	0xdfd7
                           00DFD8   984 _X_TIMIF	=	0xdfd8
                           00DFD9   985 _X_RFD	=	0xdfd9
                           00DFDA   986 _X_T1CC0L	=	0xdfda
                           00DFDB   987 _X_T1CC0H	=	0xdfdb
                           00DFDC   988 _X_T1CC1L	=	0xdfdc
                           00DFDD   989 _X_T1CC1H	=	0xdfdd
                           00DFDE   990 _X_T1CC2L	=	0xdfde
                           00DFDF   991 _X_T1CC2H	=	0xdfdf
                           00DFE0   992 __NA_ACC	=	0xdfe0
                           00DFE1   993 _X_RFST	=	0xdfe1
                           00DFE2   994 _X_T1CNTL	=	0xdfe2
                           00DFE3   995 _X_T1CNTH	=	0xdfe3
                           00DFE4   996 _X_T1CTL	=	0xdfe4
                           00DFE5   997 _X_T1CCTL0	=	0xdfe5
                           00DFE6   998 _X_T1CCTL1	=	0xdfe6
                           00DFE7   999 _X_T1CCTL2	=	0xdfe7
                           00DFE8  1000 __NA_IRCON2	=	0xdfe8
                           00DFE9  1001 _X_RFIF	=	0xdfe9
                           00DFEA  1002 _X_T4CNT	=	0xdfea
                           00DFEB  1003 _X_T4CTL	=	0xdfeb
                           00DFEC  1004 _X_T4CCTL0	=	0xdfec
                           00DFED  1005 _X_T4CC0	=	0xdfed
                           00DFEE  1006 _X_T4CCTL1	=	0xdfee
                           00DFEF  1007 _X_T4CC1	=	0xdfef
                           00DFF0  1008 __NA_B	=	0xdff0
                           00DFF1  1009 _X_PERCFG	=	0xdff1
                           00DFF2  1010 _X_ADCCFG	=	0xdff2
                           00DFF3  1011 _X_P0SEL	=	0xdff3
                           00DFF4  1012 _X_P1SEL	=	0xdff4
                           00DFF5  1013 _X_P2SEL	=	0xdff5
                           00DFF6  1014 _X_P1INP	=	0xdff6
                           00DFF7  1015 _X_P2INP	=	0xdff7
                           00DFF8  1016 _X_U1CSR	=	0xdff8
                           00DFF9  1017 _X_U1DBUF	=	0xdff9
                           00DFFA  1018 _X_U1BAUD	=	0xdffa
                           00DFFB  1019 _X_U1UCR	=	0xdffb
                           00DFFC  1020 _X_U1GCR	=	0xdffc
                           00DFFD  1021 _X_P0DIR	=	0xdffd
                           00DFFE  1022 _X_P1DIR	=	0xdffe
                           00DFFF  1023 _X_P2DIR	=	0xdfff
                           00DE00  1024 _USBADDR	=	0xde00
                           00DE01  1025 _USBPOW	=	0xde01
                           00DE02  1026 _USBIIF	=	0xde02
                           00DE04  1027 _USBOIF	=	0xde04
                           00DE06  1028 _USBCIF	=	0xde06
                           00DE07  1029 _USBIIE	=	0xde07
                           00DE09  1030 _USBOIE	=	0xde09
                           00DE0B  1031 _USBCIE	=	0xde0b
                           00DE0C  1032 _USBFRML	=	0xde0c
                           00DE0D  1033 _USBFRMH	=	0xde0d
                           00DE0E  1034 _USBINDEX	=	0xde0e
                           00DE10  1035 _USBMAXI	=	0xde10
                           00DE11  1036 _USBCS0	=	0xde11
                           00DE11  1037 _USBCSIL	=	0xde11
                           00DE12  1038 _USBCSIH	=	0xde12
                           00DE13  1039 _USBMAXO	=	0xde13
                           00DE14  1040 _USBCSOL	=	0xde14
                           00DE15  1041 _USBCSOH	=	0xde15
                           00DE16  1042 _USBCNT0	=	0xde16
                           00DE16  1043 _USBCNTL	=	0xde16
                           00DE17  1044 _USBCNTH	=	0xde17
                           00DE20  1045 _USBF0	=	0xde20
                           00DE22  1046 _USBF1	=	0xde22
                           00DE24  1047 _USBF2	=	0xde24
                           00DE26  1048 _USBF3	=	0xde26
                           00DE28  1049 _USBF4	=	0xde28
                           00DE2A  1050 _USBF5	=	0xde2a
      000000                       1051 _g_Channels::
      000000                       1052 	.ds 880
      000370                       1053 _g_NIC_ID::
      000370                       1054 	.ds 2
      000372                       1055 _g_txMsgQueue::
      000372                       1056 	.ds 482
      000554                       1057 _PHY_set_channel_chan_1_90:
      000554                       1058 	.ds 2
      000556                       1059 _begin_hopping_T2_offset_1_96:
      000556                       1060 	.ds 1
      000557                       1061 _transmit_long_PARM_2:
      000557                       1062 	.ds 2
      000559                       1063 _transmit_long_PARM_3:
      000559                       1064 	.ds 1
      00055A                       1065 _transmit_long_buf_1_100:
      00055A                       1066 	.ds 2
      00055C                       1067 _MAC_tx_PARM_2:
      00055C                       1068 	.ds 1
      00055D                       1069 _MAC_tx_msg_1_111:
      00055D                       1070 	.ds 2
      00055F                       1071 _MAC_sync_CellID_1_121:
      00055F                       1072 	.ds 2
      000561                       1073 _MAC_set_chanidx_chanidx_1_129:
      000561                       1074 	.ds 2
      000563                       1075 _MAC_set_NIC_ID_NIC_ID_1_131:
      000563                       1076 	.ds 2
      000565                       1077 _MAC_rx_handle_PARM_2:
      000565                       1078 	.ds 2
      000567                       1079 _t2IntHandler_packet_1_138:
      000567                       1080 	.ds 28
      000583                       1081 _processbuffer::
      000583                       1082 	.ds 1
      000584                       1083 _chan_table::
      000584                       1084 	.ds 2
      000586                       1085 _appHandleEP5_len_1_178:
      000586                       1086 	.ds 2
                                   1087 ;--------------------------------------------------------
                                   1088 ; absolute external ram data
                                   1089 ;--------------------------------------------------------
                                   1090 	.area XABS    (ABS,XDATA)
                                   1091 ;--------------------------------------------------------
                                   1092 ; external initialized ram data
                                   1093 ;--------------------------------------------------------
                                   1094 	.area XISEG   (XDATA)
                                   1095 	.area HOME    (CODE)
                                   1096 	.area GSINIT0 (CODE)
                                   1097 	.area GSINIT1 (CODE)
                                   1098 	.area GSINIT2 (CODE)
                                   1099 	.area GSINIT3 (CODE)
                                   1100 	.area GSINIT4 (CODE)
                                   1101 	.area GSINIT5 (CODE)
                                   1102 	.area GSINIT  (CODE)
                                   1103 	.area GSFINAL (CODE)
                                   1104 	.area CSEG    (CODE)
                                   1105 ;--------------------------------------------------------
                                   1106 ; interrupt vector 
                                   1107 ;--------------------------------------------------------
                                   1108 	.area HOME    (CODE)
      000000                       1109 __interrupt_vect:
      000000 02r00r00         [24] 1110 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24] 1111 	ljmp	_rfTxRxIntHandler
      000006                       1112 	.ds	5
      00000B 32               [24] 1113 	reti
      00000C                       1114 	.ds	7
      000013 32               [24] 1115 	reti
      000014                       1116 	.ds	7
      00001B 32               [24] 1117 	reti
      00001C                       1118 	.ds	7
      000023 32               [24] 1119 	reti
      000024                       1120 	.ds	7
      00002B 32               [24] 1121 	reti
      00002C                       1122 	.ds	7
      000033 02r00r00         [24] 1123 	ljmp	_usbIntHandler
      000036                       1124 	.ds	5
      00003B 32               [24] 1125 	reti
      00003C                       1126 	.ds	7
      000043 32               [24] 1127 	reti
      000044                       1128 	.ds	7
      00004B 02r00r00         [24] 1129 	ljmp	_t1IntHandler
      00004E                       1130 	.ds	5
      000053 02r05rA9         [24] 1131 	ljmp	_t2IntHandler
      000056                       1132 	.ds	5
      00005B 02r08r83         [24] 1133 	ljmp	_t3IntHandler
      00005E                       1134 	.ds	5
      000063 32               [24] 1135 	reti
      000064                       1136 	.ds	7
      00006B 02r00r00         [24] 1137 	ljmp	_p0IntHandler
      00006E                       1138 	.ds	5
      000073 32               [24] 1139 	reti
      000074                       1140 	.ds	7
      00007B 32               [24] 1141 	reti
      00007C                       1142 	.ds	7
      000083 02r00r00         [24] 1143 	ljmp	_rfIntHandler
                                   1144 ;--------------------------------------------------------
                                   1145 ; global & static initialisations
                                   1146 ;--------------------------------------------------------
                                   1147 	.area HOME    (CODE)
                                   1148 	.area GSINIT  (CODE)
                                   1149 	.area GSFINAL (CODE)
                                   1150 	.area GSINIT  (CODE)
                                   1151 	.globl __sdcc_gsinit_startup
                                   1152 	.globl __sdcc_program_startup
                                   1153 	.globl __start__stack
                                   1154 	.globl __mcs51_genXINIT
                                   1155 	.globl __mcs51_genXRAMCLEAR
                                   1156 	.globl __mcs51_genRAMCLEAR
                                   1157 	.area GSFINAL (CODE)
      000000 02r00r86         [24] 1158 	ljmp	__sdcc_program_startup
                                   1159 ;--------------------------------------------------------
                                   1160 ; Home
                                   1161 ;--------------------------------------------------------
                                   1162 	.area HOME    (CODE)
                                   1163 	.area HOME    (CODE)
      000086                       1164 __sdcc_program_startup:
      000086 02r17rCF         [24] 1165 	ljmp	_main
                                   1166 ;	return from main will return to caller
                                   1167 ;--------------------------------------------------------
                                   1168 ; code
                                   1169 ;--------------------------------------------------------
                                   1170 	.area CSEG    (CODE)
                                   1171 ;------------------------------------------------------------
                                   1172 ;Allocation info for local variables in function 'PHY_set_channel'
                                   1173 ;------------------------------------------------------------
                                   1174 ;chan                      Allocated with name '_PHY_set_channel_chan_1_90'
                                   1175 ;------------------------------------------------------------
                                   1176 ;	appFHSSNIC.c:72: void PHY_set_channel(__xdata u16 chan)
                                   1177 ;	-----------------------------------------
                                   1178 ;	 function PHY_set_channel
                                   1179 ;	-----------------------------------------
      000000                       1180 _PHY_set_channel:
                           000007  1181 	ar7 = 0x07
                           000006  1182 	ar6 = 0x06
                           000005  1183 	ar5 = 0x05
                           000004  1184 	ar4 = 0x04
                           000003  1185 	ar3 = 0x03
                           000002  1186 	ar2 = 0x02
                           000001  1187 	ar1 = 0x01
                           000000  1188 	ar0 = 0x00
      000000 AF 83            [24] 1189 	mov	r7,dph
      000002 E5 82            [12] 1190 	mov	a,dpl
      000004 90r05r54         [24] 1191 	mov	dptr,#_PHY_set_channel_chan_1_90
      000007 F0               [24] 1192 	movx	@dptr,a
      000008 EF               [12] 1193 	mov	a,r7
      000009 A3               [24] 1194 	inc	dptr
      00000A F0               [24] 1195 	movx	@dptr,a
                                   1196 ;	appFHSSNIC.c:75: RFOFF;
      00000B 75 E1 04         [24] 1197 	mov	_RFST,#0x04
      00000E                       1198 00101$:
      00000E 90 DF 3B         [24] 1199 	mov	dptr,#_MARCSTATE
      000011 E0               [24] 1200 	movx	a,@dptr
      000012 FF               [12] 1201 	mov	r7,a
      000013 BF 01 F8         [24] 1202 	cjne	r7,#0x01,00101$
                                   1203 ;	appFHSSNIC.c:77: CHANNR = chan;
      000016 90r05r54         [24] 1204 	mov	dptr,#_PHY_set_channel_chan_1_90
      000019 E0               [24] 1205 	movx	a,@dptr
      00001A FE               [12] 1206 	mov	r6,a
      00001B A3               [24] 1207 	inc	dptr
      00001C E0               [24] 1208 	movx	a,@dptr
      00001D FF               [12] 1209 	mov	r7,a
      00001E 90 DF 06         [24] 1210 	mov	dptr,#_CHANNR
      000021 EE               [12] 1211 	mov	a,r6
      000022 F0               [24] 1212 	movx	@dptr,a
                                   1213 ;	appFHSSNIC.c:79: RFRX;
      000023 75 E1 02         [24] 1214 	mov	_RFST,#0x02
      000026                       1215 00107$:
      000026 90 DF 3B         [24] 1216 	mov	dptr,#_MARCSTATE
      000029 E0               [24] 1217 	movx	a,@dptr
      00002A FF               [12] 1218 	mov	r7,a
      00002B BF 0D F8         [24] 1219 	cjne	r7,#0x0D,00107$
      00002E 22               [24] 1220 	ret
                                   1221 ;------------------------------------------------------------
                                   1222 ;Allocation info for local variables in function 'MAC_initChannels'
                                   1223 ;------------------------------------------------------------
                                   1224 ;loop                      Allocated to registers r6 r7 
                                   1225 ;------------------------------------------------------------
                                   1226 ;	appFHSSNIC.c:86: void MAC_initChannels()
                                   1227 ;	-----------------------------------------
                                   1228 ;	 function MAC_initChannels
                                   1229 ;	-----------------------------------------
      00002F                       1230 _MAC_initChannels:
                                   1231 ;	appFHSSNIC.c:90: for (loop=0; loop<macdata.NumChannelHops; loop++)
      00002F 7E 00            [12] 1232 	mov	r6,#0x00
      000031 7F 00            [12] 1233 	mov	r7,#0x00
      000033                       1234 00103$:
      000033 90r00r07         [24] 1235 	mov	dptr,#(_macdata + 0x0007)
      000036 E0               [24] 1236 	movx	a,@dptr
      000037 FC               [12] 1237 	mov	r4,a
      000038 A3               [24] 1238 	inc	dptr
      000039 E0               [24] 1239 	movx	a,@dptr
      00003A FD               [12] 1240 	mov	r5,a
      00003B 8E 02            [24] 1241 	mov	ar2,r6
      00003D 8F 03            [24] 1242 	mov	ar3,r7
      00003F C3               [12] 1243 	clr	c
      000040 EA               [12] 1244 	mov	a,r2
      000041 9C               [12] 1245 	subb	a,r4
      000042 EB               [12] 1246 	mov	a,r3
      000043 9D               [12] 1247 	subb	a,r5
      000044 50 3A            [24] 1248 	jnc	00105$
                                   1249 ;	appFHSSNIC.c:92: g_Channels[loop] = loop % macdata.NumChannels;
      000046 EE               [12] 1250 	mov	a,r6
      000047 24r00            [12] 1251 	add	a,#_g_Channels
      000049 FC               [12] 1252 	mov	r4,a
      00004A EF               [12] 1253 	mov	a,r7
      00004B 34s00            [12] 1254 	addc	a,#(_g_Channels >> 8)
      00004D FD               [12] 1255 	mov	r5,a
      00004E 90r00r05         [24] 1256 	mov	dptr,#(_macdata + 0x0005)
      000051 E0               [24] 1257 	movx	a,@dptr
      000052 F5*00            [12] 1258 	mov	__moduint_PARM_2,a
      000054 A3               [24] 1259 	inc	dptr
      000055 E0               [24] 1260 	movx	a,@dptr
      000056 F5*01            [12] 1261 	mov	(__moduint_PARM_2 + 1),a
      000058 8A 82            [24] 1262 	mov	dpl,r2
      00005A 8B 83            [24] 1263 	mov	dph,r3
      00005C C0 07            [24] 1264 	push	ar7
      00005E C0 06            [24] 1265 	push	ar6
      000060 C0 05            [24] 1266 	push	ar5
      000062 C0 04            [24] 1267 	push	ar4
      000064 12r00r00         [24] 1268 	lcall	__moduint
      000067 AA 82            [24] 1269 	mov	r2,dpl
      000069 AB 83            [24] 1270 	mov	r3,dph
      00006B D0 04            [24] 1271 	pop	ar4
      00006D D0 05            [24] 1272 	pop	ar5
      00006F D0 06            [24] 1273 	pop	ar6
      000071 D0 07            [24] 1274 	pop	ar7
      000073 8C 82            [24] 1275 	mov	dpl,r4
      000075 8D 83            [24] 1276 	mov	dph,r5
      000077 EA               [12] 1277 	mov	a,r2
      000078 F0               [24] 1278 	movx	@dptr,a
                                   1279 ;	appFHSSNIC.c:90: for (loop=0; loop<macdata.NumChannelHops; loop++)
      000079 0E               [12] 1280 	inc	r6
      00007A BE 00 B6         [24] 1281 	cjne	r6,#0x00,00103$
      00007D 0F               [12] 1282 	inc	r7
      00007E 80 B3            [24] 1283 	sjmp	00103$
      000080                       1284 00105$:
      000080 22               [24] 1285 	ret
                                   1286 ;------------------------------------------------------------
                                   1287 ;Allocation info for local variables in function 'begin_hopping'
                                   1288 ;------------------------------------------------------------
                                   1289 ;T2_offset                 Allocated with name '_begin_hopping_T2_offset_1_96'
                                   1290 ;------------------------------------------------------------
                                   1291 ;	appFHSSNIC.c:97: void begin_hopping(__xdata u8 T2_offset)
                                   1292 ;	-----------------------------------------
                                   1293 ;	 function begin_hopping
                                   1294 ;	-----------------------------------------
      000081                       1295 _begin_hopping:
      000081 E5 82            [12] 1296 	mov	a,dpl
      000083 90r05r56         [24] 1297 	mov	dptr,#_begin_hopping_T2_offset_1_96
      000086 F0               [24] 1298 	movx	@dptr,a
                                   1299 ;	appFHSSNIC.c:100: T2CT -= T2_offset;
      000087 E0               [24] 1300 	movx	a,@dptr
      000088 FF               [12] 1301 	mov	r7,a
      000089 E5 9C            [12] 1302 	mov	a,_T2CT
      00008B C3               [12] 1303 	clr	c
      00008C 9F               [12] 1304 	subb	a,r7
      00008D F5 9C            [12] 1305 	mov	_T2CT,a
                                   1306 ;	appFHSSNIC.c:101: T2CT -= MAC_TIMER_STATIC_DIFF;
      00008F E5 9C            [12] 1307 	mov	a,_T2CT
      000091 24 FA            [12] 1308 	add	a,#0xFA
      000093 F5 9C            [12] 1309 	mov	_T2CT,a
                                   1310 ;	appFHSSNIC.c:103: T2CTL |= T2CTL_INT;
      000095 43 9E 10         [24] 1311 	orl	_T2CTL,#0x10
                                   1312 ;	appFHSSNIC.c:104: T2IE = 1;
      000098 D2 BA            [12] 1313 	setb	_T2IE
      00009A 22               [24] 1314 	ret
                                   1315 ;------------------------------------------------------------
                                   1316 ;Allocation info for local variables in function 'stop_hopping'
                                   1317 ;------------------------------------------------------------
                                   1318 ;	appFHSSNIC.c:108: void stop_hopping(void)
                                   1319 ;	-----------------------------------------
                                   1320 ;	 function stop_hopping
                                   1321 ;	-----------------------------------------
      00009B                       1322 _stop_hopping:
                                   1323 ;	appFHSSNIC.c:111: T2CTL &= ~T2CTL_INT;
      00009B AF 9E            [24] 1324 	mov	r7,_T2CTL
      00009D 74 EF            [12] 1325 	mov	a,#0xEF
      00009F 5F               [12] 1326 	anl	a,r7
      0000A0 F5 9E            [12] 1327 	mov	_T2CTL,a
      0000A2 22               [24] 1328 	ret
                                   1329 ;------------------------------------------------------------
                                   1330 ;Allocation info for local variables in function 'transmit_long'
                                   1331 ;------------------------------------------------------------
                                   1332 ;len                       Allocated with name '_transmit_long_PARM_2'
                                   1333 ;blocks                    Allocated with name '_transmit_long_PARM_3'
                                   1334 ;buf                       Allocated with name '_transmit_long_buf_1_100'
                                   1335 ;countdown                 Allocated with name '_transmit_long_countdown_1_101'
                                   1336 ;err                       Allocated with name '_transmit_long_err_1_101'
                                   1337 ;------------------------------------------------------------
                                   1338 ;	appFHSSNIC.c:116: __xdata u8 transmit_long(__xdata u8* __xdata buf, __xdata u16 len, __xdata u8 blocks)
                                   1339 ;	-----------------------------------------
                                   1340 ;	 function transmit_long
                                   1341 ;	-----------------------------------------
      0000A3                       1342 _transmit_long:
      0000A3 AF 83            [24] 1343 	mov	r7,dph
      0000A5 E5 82            [12] 1344 	mov	a,dpl
      0000A7 90r05r5A         [24] 1345 	mov	dptr,#_transmit_long_buf_1_100
      0000AA F0               [24] 1346 	movx	@dptr,a
      0000AB EF               [12] 1347 	mov	a,r7
      0000AC A3               [24] 1348 	inc	dptr
      0000AD F0               [24] 1349 	movx	@dptr,a
                                   1350 ;	appFHSSNIC.c:124: if (macdata.mac_state != MAC_STATE_NONHOPPING)
      0000AE 90r00r00         [24] 1351 	mov	dptr,#_macdata
      0000B1 E0               [24] 1352 	movx	a,@dptr
      0000B2 60 13            [24] 1353 	jz	00102$
                                   1354 ;	appFHSSNIC.c:126: debug("Cannot call transmit_long while FHSS Hopping or already processing transmit_long!");
      0000B4 90r00r00         [24] 1355 	mov	dptr,#___str_0
      0000B7 12r00r00         [24] 1356 	lcall	_debug
                                   1357 ;	appFHSSNIC.c:127: debughex(macdata.mac_state);
      0000BA 90r00r00         [24] 1358 	mov	dptr,#_macdata
      0000BD E0               [24] 1359 	movx	a,@dptr
      0000BE F5 82            [12] 1360 	mov	dpl,a
      0000C0 12r00r00         [24] 1361 	lcall	_debughex
                                   1362 ;	appFHSSNIC.c:128: return RC_RF_MODE_INCOMPAT;
      0000C3 75 82 EF         [24] 1363 	mov	dpl,#0xEF
      0000C6 22               [24] 1364 	ret
      0000C7                       1365 00102$:
                                   1366 ;	appFHSSNIC.c:131: macdata.mac_state = MAC_STATE_LONG_XMIT;
      0000C7 90r00r00         [24] 1367 	mov	dptr,#_macdata
      0000CA 74 06            [12] 1368 	mov	a,#0x06
      0000CC F0               [24] 1369 	movx	@dptr,a
                                   1370 ;	appFHSSNIC.c:132: while (MARCSTATE == MARC_STATE_TX)
      0000CD                       1371 00103$:
      0000CD 90 DF 3B         [24] 1372 	mov	dptr,#_MARCSTATE
      0000D0 E0               [24] 1373 	movx	a,@dptr
      0000D1 FF               [12] 1374 	mov	r7,a
      0000D2 BF 13 02         [24] 1375 	cjne	r7,#0x13,00164$
      0000D5 80 F6            [24] 1376 	sjmp	00103$
      0000D7                       1377 00164$:
                                   1378 ;	appFHSSNIC.c:137: LED = 0;
      0000D7 C2 A4            [12] 1379 	clr	_P2_4
                                   1380 ;	appFHSSNIC.c:140: rfTxTotalTXLen = len;
      0000D9 90r05r57         [24] 1381 	mov	dptr,#_transmit_long_PARM_2
      0000DC E0               [24] 1382 	movx	a,@dptr
      0000DD FE               [12] 1383 	mov	r6,a
      0000DE A3               [24] 1384 	inc	dptr
      0000DF E0               [24] 1385 	movx	a,@dptr
      0000E0 FF               [12] 1386 	mov	r7,a
      0000E1 90r00r00         [24] 1387 	mov	dptr,#_rfTxTotalTXLen
      0000E4 EE               [12] 1388 	mov	a,r6
      0000E5 F0               [24] 1389 	movx	@dptr,a
      0000E6 EF               [12] 1390 	mov	a,r7
      0000E7 A3               [24] 1391 	inc	dptr
      0000E8 F0               [24] 1392 	movx	@dptr,a
                                   1393 ;	appFHSSNIC.c:142: rfTxBufferEnd = MAX_TX_MSGLEN + 1; // add 1 for length byte
      0000E9 90r00r00         [24] 1394 	mov	dptr,#_rfTxBufferEnd
      0000EC 74 F1            [12] 1395 	mov	a,#0xF1
      0000EE F0               [24] 1396 	movx	@dptr,a
      0000EF E4               [12] 1397 	clr	a
      0000F0 A3               [24] 1398 	inc	dptr
      0000F1 F0               [24] 1399 	movx	@dptr,a
                                   1400 ;	appFHSSNIC.c:144: rftxbuf = (volatile __xdata u8*)&g_txMsgQueue[0][0];
      0000F2 90r00r00         [24] 1401 	mov	dptr,#_rftxbuf
      0000F5 74r72            [12] 1402 	mov	a,#_g_txMsgQueue
      0000F7 F0               [24] 1403 	movx	@dptr,a
      0000F8 74s03            [12] 1404 	mov	a,#(_g_txMsgQueue >> 8)
      0000FA A3               [24] 1405 	inc	dptr
      0000FB F0               [24] 1406 	movx	@dptr,a
                                   1407 ;	appFHSSNIC.c:145: rfTxRepeatCounter = 0;
      0000FC 90r00r00         [24] 1408 	mov	dptr,#_rfTxRepeatCounter
      0000FF E4               [12] 1409 	clr	a
      000100 F0               [24] 1410 	movx	@dptr,a
      000101 A3               [24] 1411 	inc	dptr
      000102 F0               [24] 1412 	movx	@dptr,a
                                   1413 ;	appFHSSNIC.c:146: rfTxCurBufIdx = macdata.txMsgIdxDone = 0;
      000103 90r00r12         [24] 1414 	mov	dptr,#(_macdata + 0x0012)
      000106 F0               [24] 1415 	movx	@dptr,a
      000107 90r00r00         [24] 1416 	mov	dptr,#_rfTxCurBufIdx
      00010A F0               [24] 1417 	movx	@dptr,a
                                   1418 ;	appFHSSNIC.c:147: macdata.txMsgIdx = 0;
      00010B 90r00r11         [24] 1419 	mov	dptr,#(_macdata + 0x0011)
      00010E F0               [24] 1420 	movx	@dptr,a
                                   1421 ;	appFHSSNIC.c:148: rfTxCounter = 1; // don't transmit length byte
      00010F 90r00r00         [24] 1422 	mov	dptr,#_rfTxCounter
      000112 04               [12] 1423 	inc	a
      000113 F0               [24] 1424 	movx	@dptr,a
      000114 E4               [12] 1425 	clr	a
      000115 A3               [24] 1426 	inc	dptr
      000116 F0               [24] 1427 	movx	@dptr,a
                                   1428 ;	appFHSSNIC.c:149: rfTxBufCount = MAX_TX_MSGS;
      000117 90r00r00         [24] 1429 	mov	dptr,#_rfTxBufCount
      00011A 74 02            [12] 1430 	mov	a,#0x02
      00011C F0               [24] 1431 	movx	@dptr,a
                                   1432 ;	appFHSSNIC.c:152: MAC_tx(NULL, 0);
      00011D 90r05r5C         [24] 1433 	mov	dptr,#_MAC_tx_PARM_2
      000120 E4               [12] 1434 	clr	a
      000121 F0               [24] 1435 	movx	@dptr,a
      000122 90 00 00         [24] 1436 	mov	dptr,#0x0000
      000125 12r02r48         [24] 1437 	lcall	_MAC_tx
                                   1438 ;	appFHSSNIC.c:155: for(countdown = 0 ; countdown < blocks ; ++countdown)
      000128 90r05r5A         [24] 1439 	mov	dptr,#_transmit_long_buf_1_100
      00012B E0               [24] 1440 	movx	a,@dptr
      00012C FE               [12] 1441 	mov	r6,a
      00012D A3               [24] 1442 	inc	dptr
      00012E E0               [24] 1443 	movx	a,@dptr
      00012F FF               [12] 1444 	mov	r7,a
      000130 90r05r59         [24] 1445 	mov	dptr,#_transmit_long_PARM_3
      000133 E0               [24] 1446 	movx	a,@dptr
      000134 FD               [12] 1447 	mov	r5,a
      000135 7B 00            [12] 1448 	mov	r3,#0x00
      000137 7C 00            [12] 1449 	mov	r4,#0x00
      000139                       1450 00122$:
      000139 8D 01            [24] 1451 	mov	ar1,r5
      00013B 7A 00            [12] 1452 	mov	r2,#0x00
      00013D C3               [12] 1453 	clr	c
      00013E EB               [12] 1454 	mov	a,r3
      00013F 99               [12] 1455 	subb	a,r1
      000140 EC               [12] 1456 	mov	a,r4
      000141 9A               [12] 1457 	subb	a,r2
      000142 50 54            [24] 1458 	jnc	00108$
                                   1459 ;	appFHSSNIC.c:157: err = MAC_tx(buf + (u8) (countdown * MAX_TX_MSGLEN), (u8) MAX_TX_MSGLEN);
      000144 8B 02            [24] 1460 	mov	ar2,r3
      000146 EA               [12] 1461 	mov	a,r2
      000147 75 F0 F0         [24] 1462 	mov	b,#0xF0
      00014A A4               [48] 1463 	mul	ab
      00014B 2E               [12] 1464 	add	a,r6
      00014C F9               [12] 1465 	mov	r1,a
      00014D E4               [12] 1466 	clr	a
      00014E 3F               [12] 1467 	addc	a,r7
      00014F FA               [12] 1468 	mov	r2,a
      000150 90r05r5C         [24] 1469 	mov	dptr,#_MAC_tx_PARM_2
      000153 74 F0            [12] 1470 	mov	a,#0xF0
      000155 F0               [24] 1471 	movx	@dptr,a
      000156 89 82            [24] 1472 	mov	dpl,r1
      000158 8A 83            [24] 1473 	mov	dph,r2
      00015A C0 07            [24] 1474 	push	ar7
      00015C C0 06            [24] 1475 	push	ar6
      00015E C0 05            [24] 1476 	push	ar5
      000160 C0 04            [24] 1477 	push	ar4
      000162 C0 03            [24] 1478 	push	ar3
      000164 12r02r48         [24] 1479 	lcall	_MAC_tx
      000167 AA 82            [24] 1480 	mov	r2,dpl
      000169 D0 03            [24] 1481 	pop	ar3
      00016B D0 04            [24] 1482 	pop	ar4
      00016D D0 05            [24] 1483 	pop	ar5
      00016F D0 06            [24] 1484 	pop	ar6
      000171 D0 07            [24] 1485 	pop	ar7
                                   1486 ;	appFHSSNIC.c:158: if(err)
      000173 EA               [12] 1487 	mov	a,r2
      000174 60 1B            [24] 1488 	jz	00123$
                                   1489 ;	appFHSSNIC.c:160: debug("MAC_tx() returned error");
      000176 90r00r52         [24] 1490 	mov	dptr,#___str_1
      000179 C0 02            [24] 1491 	push	ar2
      00017B 12r00r00         [24] 1492 	lcall	_debug
      00017E D0 02            [24] 1493 	pop	ar2
                                   1494 ;	appFHSSNIC.c:161: macdata.mac_state = MAC_STATE_NONHOPPING;
      000180 90r00r00         [24] 1495 	mov	dptr,#_macdata
      000183 E4               [12] 1496 	clr	a
      000184 F0               [24] 1497 	movx	@dptr,a
                                   1498 ;	appFHSSNIC.c:162: debughex(err);
      000185 8A 82            [24] 1499 	mov	dpl,r2
      000187 C0 02            [24] 1500 	push	ar2
      000189 12r00r00         [24] 1501 	lcall	_debughex
      00018C D0 02            [24] 1502 	pop	ar2
                                   1503 ;	appFHSSNIC.c:163: return err;
      00018E 8A 82            [24] 1504 	mov	dpl,r2
      000190 22               [24] 1505 	ret
      000191                       1506 00123$:
                                   1507 ;	appFHSSNIC.c:155: for(countdown = 0 ; countdown < blocks ; ++countdown)
      000191 0B               [12] 1508 	inc	r3
      000192 BB 00 A4         [24] 1509 	cjne	r3,#0x00,00122$
      000195 0C               [12] 1510 	inc	r4
      000196 80 A1            [24] 1511 	sjmp	00122$
      000198                       1512 00108$:
                                   1513 ;	appFHSSNIC.c:168: if(rfAESMode & AES_CRYPTO_OUT_ENABLE && rfTxTotalTXLen % 16)
      000198 90r00r00         [24] 1514 	mov	dptr,#_rfAESMode
      00019B E0               [24] 1515 	movx	a,@dptr
      00019C FF               [12] 1516 	mov	r7,a
      00019D 30 E3 33         [24] 1517 	jnb	acc.3,00110$
      0001A0 90r00r00         [24] 1518 	mov	dptr,#_rfTxTotalTXLen
      0001A3 E0               [24] 1519 	movx	a,@dptr
      0001A4 FE               [12] 1520 	mov	r6,a
      0001A5 A3               [24] 1521 	inc	dptr
      0001A6 E0               [24] 1522 	movx	a,@dptr
      0001A7 FF               [12] 1523 	mov	r7,a
      0001A8 EE               [12] 1524 	mov	a,r6
      0001A9 54 0F            [12] 1525 	anl	a,#0x0F
      0001AB 60 26            [24] 1526 	jz	00110$
                                   1527 ;	appFHSSNIC.c:171: rfTxTotalTXLen += 16 - (rfTxTotalTXLen % 16);
      0001AD 90r00r00         [24] 1528 	mov	dptr,#_rfTxTotalTXLen
      0001B0 E0               [24] 1529 	movx	a,@dptr
      0001B1 FE               [12] 1530 	mov	r6,a
      0001B2 A3               [24] 1531 	inc	dptr
      0001B3 E0               [24] 1532 	movx	a,@dptr
      0001B4 53 06 0F         [24] 1533 	anl	ar6,#0x0F
      0001B7 7F 00            [12] 1534 	mov	r7,#0x00
      0001B9 74 10            [12] 1535 	mov	a,#0x10
      0001BB C3               [12] 1536 	clr	c
      0001BC 9E               [12] 1537 	subb	a,r6
      0001BD FE               [12] 1538 	mov	r6,a
      0001BE E4               [12] 1539 	clr	a
      0001BF 9F               [12] 1540 	subb	a,r7
      0001C0 FF               [12] 1541 	mov	r7,a
      0001C1 90r00r00         [24] 1542 	mov	dptr,#_rfTxTotalTXLen
      0001C4 E0               [24] 1543 	movx	a,@dptr
      0001C5 FC               [12] 1544 	mov	r4,a
      0001C6 A3               [24] 1545 	inc	dptr
      0001C7 E0               [24] 1546 	movx	a,@dptr
      0001C8 FD               [12] 1547 	mov	r5,a
      0001C9 90r00r00         [24] 1548 	mov	dptr,#_rfTxTotalTXLen
      0001CC EE               [12] 1549 	mov	a,r6
      0001CD 2C               [12] 1550 	add	a,r4
      0001CE F0               [24] 1551 	movx	@dptr,a
      0001CF EF               [12] 1552 	mov	a,r7
      0001D0 3D               [12] 1553 	addc	a,r5
      0001D1 A3               [24] 1554 	inc	dptr
      0001D2 F0               [24] 1555 	movx	@dptr,a
      0001D3                       1556 00110$:
                                   1557 ;	appFHSSNIC.c:175: if(rfTxTotalTXLen > RF_MAX_TX_BLOCK)
      0001D3 90r00r00         [24] 1558 	mov	dptr,#_rfTxTotalTXLen
      0001D6 E0               [24] 1559 	movx	a,@dptr
      0001D7 FE               [12] 1560 	mov	r6,a
      0001D8 A3               [24] 1561 	inc	dptr
      0001D9 E0               [24] 1562 	movx	a,@dptr
      0001DA FF               [12] 1563 	mov	r7,a
      0001DB C3               [12] 1564 	clr	c
      0001DC 74 FF            [12] 1565 	mov	a,#0xFF
      0001DE 9E               [12] 1566 	subb	a,r6
      0001DF E4               [12] 1567 	clr	a
      0001E0 9F               [12] 1568 	subb	a,r7
      0001E1 50 23            [24] 1569 	jnc	00113$
                                   1570 ;	appFHSSNIC.c:177: PKTLEN = (u8) (rfTxTotalTXLen % 256);
      0001E3 90r00r00         [24] 1571 	mov	dptr,#_rfTxTotalTXLen
      0001E6 E0               [24] 1572 	movx	a,@dptr
      0001E7 FE               [12] 1573 	mov	r6,a
      0001E8 A3               [24] 1574 	inc	dptr
      0001E9 E0               [24] 1575 	movx	a,@dptr
      0001EA 90 DF 02         [24] 1576 	mov	dptr,#_PKTLEN
      0001ED EE               [12] 1577 	mov	a,r6
      0001EE F0               [24] 1578 	movx	@dptr,a
                                   1579 ;	appFHSSNIC.c:178: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
      0001EF 90 DF 04         [24] 1580 	mov	dptr,#_PKTCTRL0
      0001F2 E0               [24] 1581 	movx	a,@dptr
      0001F3 FF               [12] 1582 	mov	r7,a
      0001F4 74 FC            [12] 1583 	mov	a,#0xFC
      0001F6 5F               [12] 1584 	anl	a,r7
      0001F7 F0               [24] 1585 	movx	@dptr,a
                                   1586 ;	appFHSSNIC.c:179: PKTCTRL0 |= PKTCTRL0_LENGTH_CONFIG_INF;
      0001F8 E0               [24] 1587 	movx	a,@dptr
      0001F9 FF               [12] 1588 	mov	r7,a
      0001FA 74 02            [12] 1589 	mov	a,#0x02
      0001FC 4F               [12] 1590 	orl	a,r7
      0001FD F0               [24] 1591 	movx	@dptr,a
                                   1592 ;	appFHSSNIC.c:180: rfTxInfMode = 1;
      0001FE 90r00r00         [24] 1593 	mov	dptr,#_rfTxInfMode
      000201 74 01            [12] 1594 	mov	a,#0x01
      000203 F0               [24] 1595 	movx	@dptr,a
      000204 80 12            [24] 1596 	sjmp	00114$
      000206                       1597 00113$:
                                   1598 ;	appFHSSNIC.c:184: PKTLEN = (u8) rfTxTotalTXLen;
      000206 90r00r00         [24] 1599 	mov	dptr,#_rfTxTotalTXLen
      000209 E0               [24] 1600 	movx	a,@dptr
      00020A FE               [12] 1601 	mov	r6,a
      00020B A3               [24] 1602 	inc	dptr
      00020C E0               [24] 1603 	movx	a,@dptr
      00020D FF               [12] 1604 	mov	r7,a
      00020E 90 DF 02         [24] 1605 	mov	dptr,#_PKTLEN
      000211 EE               [12] 1606 	mov	a,r6
      000212 F0               [24] 1607 	movx	@dptr,a
                                   1608 ;	appFHSSNIC.c:185: rfTxInfMode = 0;
      000213 90r00r00         [24] 1609 	mov	dptr,#_rfTxInfMode
      000216 E4               [12] 1610 	clr	a
      000217 F0               [24] 1611 	movx	@dptr,a
      000218                       1612 00114$:
                                   1613 ;	appFHSSNIC.c:192: RFST = RFST_STX;
      000218 75 E1 03         [24] 1614 	mov	_RFST,#0x03
                                   1615 ;	appFHSSNIC.c:196: while (MARCSTATE != MARC_STATE_TX && --countdown)
      00021B 7E 60            [12] 1616 	mov	r6,#0x60
      00021D 7F EA            [12] 1617 	mov	r7,#0xEA
      00021F                       1618 00116$:
      00021F 90 DF 3B         [24] 1619 	mov	dptr,#_MARCSTATE
      000222 E0               [24] 1620 	movx	a,@dptr
      000223 FD               [12] 1621 	mov	r5,a
      000224 BD 13 02         [24] 1622 	cjne	r5,#0x13,00171$
      000227 80 09            [24] 1623 	sjmp	00118$
      000229                       1624 00171$:
      000229 1E               [12] 1625 	dec	r6
      00022A BE FF 01         [24] 1626 	cjne	r6,#0xFF,00172$
      00022D 1F               [12] 1627 	dec	r7
      00022E                       1628 00172$:
      00022E EE               [12] 1629 	mov	a,r6
      00022F 4F               [12] 1630 	orl	a,r7
      000230 70 ED            [24] 1631 	jnz	00116$
      000232                       1632 00118$:
                                   1633 ;	appFHSSNIC.c:201: LED = 1;
      000232 D2 A4            [12] 1634 	setb	_P2_4
                                   1635 ;	appFHSSNIC.c:202: if (!countdown)
      000234 EE               [12] 1636 	mov	a,r6
      000235 4F               [12] 1637 	orl	a,r7
      000236 70 0C            [24] 1638 	jnz	00120$
                                   1639 ;	appFHSSNIC.c:204: lastCode[1] = LCE_RFTX_NEVER_TX;
      000238 90r00r01         [24] 1640 	mov	dptr,#(_lastCode + 0x0001)
      00023B 74 13            [12] 1641 	mov	a,#0x13
      00023D F0               [24] 1642 	movx	@dptr,a
                                   1643 ;	appFHSSNIC.c:205: debug("never entered TX");
      00023E 90r00r6A         [24] 1644 	mov	dptr,#___str_2
      000241 12r00r00         [24] 1645 	lcall	_debug
      000244                       1646 00120$:
                                   1647 ;	appFHSSNIC.c:208: return RC_NO_ERROR;
      000244 75 82 00         [24] 1648 	mov	dpl,#0x00
      000247 22               [24] 1649 	ret
                                   1650 ;------------------------------------------------------------
                                   1651 ;Allocation info for local variables in function 'MAC_tx'
                                   1652 ;------------------------------------------------------------
                                   1653 ;len                       Allocated with name '_MAC_tx_PARM_2'
                                   1654 ;msg                       Allocated with name '_MAC_tx_msg_1_111'
                                   1655 ;------------------------------------------------------------
                                   1656 ;	appFHSSNIC.c:211: __xdata u8 MAC_tx(__xdata u8* __xdata msg, __xdata u8 len)
                                   1657 ;	-----------------------------------------
                                   1658 ;	 function MAC_tx
                                   1659 ;	-----------------------------------------
      000248                       1660 _MAC_tx:
      000248 AF 83            [24] 1661 	mov	r7,dph
      00024A E5 82            [12] 1662 	mov	a,dpl
      00024C 90r05r5D         [24] 1663 	mov	dptr,#_MAC_tx_msg_1_111
      00024F F0               [24] 1664 	movx	@dptr,a
      000250 EF               [12] 1665 	mov	a,r7
      000251 A3               [24] 1666 	inc	dptr
      000252 F0               [24] 1667 	movx	@dptr,a
                                   1668 ;	appFHSSNIC.c:221: if (len > MAX_TX_MSGLEN)
      000253 90r05r5C         [24] 1669 	mov	dptr,#_MAC_tx_PARM_2
      000256 E0               [24] 1670 	movx	a,@dptr
      000257 FF               [12] 1671 	mov  r7,a
      000258 24 0F            [12] 1672 	add	a,#0xff - 0xF0
      00025A 50 0A            [24] 1673 	jnc	00102$
                                   1674 ;	appFHSSNIC.c:223: debug("FHSSxmit message too long");
      00025C 90r00r7B         [24] 1675 	mov	dptr,#___str_3
      00025F 12r00r00         [24] 1676 	lcall	_debug
                                   1677 ;	appFHSSNIC.c:224: return RC_ERR_BUFFER_SIZE_EXCEEDED;
      000262 75 82 FF         [24] 1678 	mov	dpl,#0xFF
      000265 22               [24] 1679 	ret
      000266                       1680 00102$:
                                   1681 ;	appFHSSNIC.c:228: if(len == 0)
      000266 EF               [12] 1682 	mov	a,r7
      000267 70 3E            [24] 1683 	jnz	00105$
                                   1684 ;	appFHSSNIC.c:231: for(macdata.txMsgIdx = 0 ; macdata.txMsgIdx < rfTxBufCount ; ++macdata.txMsgIdx)
      000269 90r00r11         [24] 1685 	mov	dptr,#(_macdata + 0x0011)
      00026C E4               [12] 1686 	clr	a
      00026D F0               [24] 1687 	movx	@dptr,a
      00026E                       1688 00122$:
      00026E 90r00r11         [24] 1689 	mov	dptr,#(_macdata + 0x0011)
      000271 E0               [24] 1690 	movx	a,@dptr
      000272 FE               [12] 1691 	mov	r6,a
      000273 90r00r00         [24] 1692 	mov	dptr,#_rfTxBufCount
      000276 E0               [24] 1693 	movx	a,@dptr
      000277 FD               [12] 1694 	mov	r5,a
      000278 C3               [12] 1695 	clr	c
      000279 EE               [12] 1696 	mov	a,r6
      00027A 9D               [12] 1697 	subb	a,r5
      00027B 50 21            [24] 1698 	jnc	00103$
                                   1699 ;	appFHSSNIC.c:233: g_txMsgQueue[macdata.txMsgIdx][0] = BUFFER_AVAILABLE;
      00027D 90r00r11         [24] 1700 	mov	dptr,#(_macdata + 0x0011)
      000280 E0               [24] 1701 	movx	a,@dptr
      000281 75 F0 F1         [24] 1702 	mov	b,#0xF1
      000284 A4               [48] 1703 	mul	ab
      000285 24r72            [12] 1704 	add	a,#_g_txMsgQueue
      000287 F5 82            [12] 1705 	mov	dpl,a
      000289 74s03            [12] 1706 	mov	a,#(_g_txMsgQueue >> 8)
      00028B 35 F0            [12] 1707 	addc	a,b
      00028D F5 83            [12] 1708 	mov	dph,a
      00028F E4               [12] 1709 	clr	a
      000290 F0               [24] 1710 	movx	@dptr,a
                                   1711 ;	appFHSSNIC.c:231: for(macdata.txMsgIdx = 0 ; macdata.txMsgIdx < rfTxBufCount ; ++macdata.txMsgIdx)
      000291 90r00r11         [24] 1712 	mov	dptr,#(_macdata + 0x0011)
      000294 E0               [24] 1713 	movx	a,@dptr
      000295 FE               [12] 1714 	mov	r6,a
      000296 0E               [12] 1715 	inc	r6
      000297 90r00r11         [24] 1716 	mov	dptr,#(_macdata + 0x0011)
      00029A EE               [12] 1717 	mov	a,r6
      00029B F0               [24] 1718 	movx	@dptr,a
      00029C 80 D0            [24] 1719 	sjmp	00122$
      00029E                       1720 00103$:
                                   1721 ;	appFHSSNIC.c:235: macdata.txMsgIdx = 0;
      00029E 90r00r11         [24] 1722 	mov	dptr,#(_macdata + 0x0011)
      0002A1 E4               [12] 1723 	clr	a
      0002A2 F0               [24] 1724 	movx	@dptr,a
                                   1725 ;	appFHSSNIC.c:236: return RC_NO_ERROR;
      0002A3 75 82 00         [24] 1726 	mov	dpl,#0x00
      0002A6 22               [24] 1727 	ret
      0002A7                       1728 00105$:
                                   1729 ;	appFHSSNIC.c:239: switch (macdata.mac_state)
      0002A7 90r00r00         [24] 1730 	mov	dptr,#_macdata
      0002AA E0               [24] 1731 	movx	a,@dptr
      0002AB FE               [12] 1732 	mov	r6,a
      0002AC 60 1D            [24] 1733 	jz	00110$
      0002AE BE 06 1E         [24] 1734 	cjne	r6,#0x06,00111$
                                   1735 ;	appFHSSNIC.c:242: if (macdata.txMsgIdx && MARCSTATE != MARC_STATE_TX)
      0002B1 90r00r11         [24] 1736 	mov	dptr,#(_macdata + 0x0011)
      0002B4 E0               [24] 1737 	movx	a,@dptr
      0002B5 60 18            [24] 1738 	jz	00111$
      0002B7 90 DF 3B         [24] 1739 	mov	dptr,#_MARCSTATE
      0002BA E0               [24] 1740 	movx	a,@dptr
      0002BB FE               [12] 1741 	mov	r6,a
      0002BC BE 13 02         [24] 1742 	cjne	r6,#0x13,00169$
      0002BF 80 0E            [24] 1743 	sjmp	00111$
      0002C1                       1744 00169$:
                                   1745 ;	appFHSSNIC.c:244: macdata.mac_state = MAC_STATE_LONG_XMIT_FAIL;
      0002C1 90r00r00         [24] 1746 	mov	dptr,#_macdata
      0002C4 74 07            [12] 1747 	mov	a,#0x07
      0002C6 F0               [24] 1748 	movx	@dptr,a
                                   1749 ;	appFHSSNIC.c:245: return RC_TX_ERROR;
      0002C7 75 82 ED         [24] 1750 	mov	dpl,#0xED
      0002CA 22               [24] 1751 	ret
                                   1752 ;	appFHSSNIC.c:248: case MAC_STATE_NONHOPPING:
      0002CB                       1753 00110$:
                                   1754 ;	appFHSSNIC.c:249: return RC_TX_ERROR;
      0002CB 75 82 ED         [24] 1755 	mov	dpl,#0xED
      0002CE 22               [24] 1756 	ret
                                   1757 ;	appFHSSNIC.c:250: }
      0002CF                       1758 00111$:
                                   1759 ;	appFHSSNIC.c:251: if (g_txMsgQueue[macdata.txMsgIdx][0] != BUFFER_AVAILABLE)
      0002CF 90r00r11         [24] 1760 	mov	dptr,#(_macdata + 0x0011)
      0002D2 E0               [24] 1761 	movx	a,@dptr
      0002D3 75 F0 F1         [24] 1762 	mov	b,#0xF1
      0002D6 A4               [48] 1763 	mul	ab
      0002D7 24r72            [12] 1764 	add	a,#_g_txMsgQueue
      0002D9 FD               [12] 1765 	mov	r5,a
      0002DA 74s03            [12] 1766 	mov	a,#(_g_txMsgQueue >> 8)
      0002DC 35 F0            [12] 1767 	addc	a,b
      0002DE FE               [12] 1768 	mov	r6,a
      0002DF 8D 82            [24] 1769 	mov	dpl,r5
      0002E1 8E 83            [24] 1770 	mov	dph,r6
      0002E3 E0               [24] 1771 	movx	a,@dptr
      0002E4 60 0A            [24] 1772 	jz	00113$
                                   1773 ;	appFHSSNIC.c:254: lastCode[1] = LCE_RF_MULTI_BUFFER_NOT_FREE;
      0002E6 90r00r01         [24] 1774 	mov	dptr,#(_lastCode + 0x0001)
      0002E9 74 18            [12] 1775 	mov	a,#0x18
      0002EB F0               [24] 1776 	movx	@dptr,a
                                   1777 ;	appFHSSNIC.c:255: return RC_ERR_BUFFER_NOT_AVAILABLE;
      0002EC 75 82 FE         [24] 1778 	mov	dpl,#0xFE
      0002EF 22               [24] 1779 	ret
      0002F0                       1780 00113$:
                                   1781 ;	appFHSSNIC.c:259: g_txMsgQueue[macdata.txMsgIdx][0] = BUFFER_FILLING;
      0002F0 8D 82            [24] 1782 	mov	dpl,r5
      0002F2 8E 83            [24] 1783 	mov	dph,r6
      0002F4 74 FF            [12] 1784 	mov	a,#0xFF
      0002F6 F0               [24] 1785 	movx	@dptr,a
                                   1786 ;	appFHSSNIC.c:261: memcpy(&g_txMsgQueue[macdata.txMsgIdx][1], msg, len);
      0002F7 90r00r11         [24] 1787 	mov	dptr,#(_macdata + 0x0011)
      0002FA E0               [24] 1788 	movx	a,@dptr
      0002FB 75 F0 F1         [24] 1789 	mov	b,#0xF1
      0002FE A4               [48] 1790 	mul	ab
      0002FF 24r72            [12] 1791 	add	a,#_g_txMsgQueue
      000301 FD               [12] 1792 	mov	r5,a
      000302 74s03            [12] 1793 	mov	a,#(_g_txMsgQueue >> 8)
      000304 35 F0            [12] 1794 	addc	a,b
      000306 FE               [12] 1795 	mov	r6,a
      000307 0D               [12] 1796 	inc	r5
      000308 BD 00 01         [24] 1797 	cjne	r5,#0x00,00171$
      00030B 0E               [12] 1798 	inc	r6
      00030C                       1799 00171$:
      00030C 7C 00            [12] 1800 	mov	r4,#0x00
      00030E 90r05r5D         [24] 1801 	mov	dptr,#_MAC_tx_msg_1_111
      000311 E0               [24] 1802 	movx	a,@dptr
      000312 FA               [12] 1803 	mov	r2,a
      000313 A3               [24] 1804 	inc	dptr
      000314 E0               [24] 1805 	movx	a,@dptr
      000315 FB               [12] 1806 	mov	r3,a
      000316 8A*00            [24] 1807 	mov	_memcpy_PARM_2,r2
      000318 8B*01            [24] 1808 	mov	(_memcpy_PARM_2 + 1),r3
                                   1809 ;	1-genFromRTrack replaced	mov	(_memcpy_PARM_2 + 2),#0x00
      00031A 8C*02            [24] 1810 	mov	(_memcpy_PARM_2 + 2),r4
      00031C 8F 03            [24] 1811 	mov	ar3,r7
      00031E 7F 00            [12] 1812 	mov	r7,#0x00
      000320 8B*00            [24] 1813 	mov	_memcpy_PARM_3,r3
      000322 8F*01            [24] 1814 	mov	(_memcpy_PARM_3 + 1),r7
      000324 8D 82            [24] 1815 	mov	dpl,r5
      000326 8E 83            [24] 1816 	mov	dph,r6
      000328 8C F0            [24] 1817 	mov	b,r4
      00032A C0 07            [24] 1818 	push	ar7
      00032C C0 03            [24] 1819 	push	ar3
      00032E 12r00r00         [24] 1820 	lcall	_memcpy
      000331 D0 03            [24] 1821 	pop	ar3
      000333 D0 07            [24] 1822 	pop	ar7
                                   1823 ;	appFHSSNIC.c:266: if(rfAESMode & AES_CRYPTO_OUT_ENABLE)
      000335 90r00r00         [24] 1824 	mov	dptr,#_rfAESMode
      000338 E0               [24] 1825 	movx	a,@dptr
      000339 FE               [12] 1826 	mov	r6,a
      00033A 20 E3 03         [24] 1827 	jb	acc.3,00172$
      00033D 02r03rF0         [24] 1828 	ljmp	00118$
      000340                       1829 00172$:
                                   1830 ;	appFHSSNIC.c:268: len = padAES(&g_txMsgQueue[macdata.txMsgIdx][1], len);
      000340 90r00r11         [24] 1831 	mov	dptr,#(_macdata + 0x0011)
      000343 E0               [24] 1832 	movx	a,@dptr
      000344 75 F0 F1         [24] 1833 	mov	b,#0xF1
      000347 A4               [48] 1834 	mul	ab
      000348 24r72            [12] 1835 	add	a,#_g_txMsgQueue
      00034A FD               [12] 1836 	mov	r5,a
      00034B 74s03            [12] 1837 	mov	a,#(_g_txMsgQueue >> 8)
      00034D 35 F0            [12] 1838 	addc	a,b
      00034F FE               [12] 1839 	mov	r6,a
      000350 0D               [12] 1840 	inc	r5
      000351 BD 00 01         [24] 1841 	cjne	r5,#0x00,00173$
      000354 0E               [12] 1842 	inc	r6
      000355                       1843 00173$:
      000355 90r00r00         [24] 1844 	mov	dptr,#_padAES_PARM_2
      000358 EB               [12] 1845 	mov	a,r3
      000359 F0               [24] 1846 	movx	@dptr,a
      00035A EF               [12] 1847 	mov	a,r7
      00035B A3               [24] 1848 	inc	dptr
      00035C F0               [24] 1849 	movx	@dptr,a
      00035D 8D 82            [24] 1850 	mov	dpl,r5
      00035F 8E 83            [24] 1851 	mov	dph,r6
      000361 12r00r00         [24] 1852 	lcall	_padAES
      000364 AE 82            [24] 1853 	mov	r6,dpl
      000366 90r05r5C         [24] 1854 	mov	dptr,#_MAC_tx_PARM_2
      000369 EE               [12] 1855 	mov	a,r6
      00036A F0               [24] 1856 	movx	@dptr,a
                                   1857 ;	appFHSSNIC.c:269: if((rfAESMode & AES_CRYPTO_OUT_TYPE) == AES_CRYPTO_OUT_ENCRYPT)
      00036B 90r00r00         [24] 1858 	mov	dptr,#_rfAESMode
      00036E E0               [24] 1859 	movx	a,@dptr
      00036F FF               [12] 1860 	mov	r7,a
      000370 53 07 04         [24] 1861 	anl	ar7,#0x04
      000373 BF 04 3F         [24] 1862 	cjne	r7,#0x04,00115$
                                   1863 ;	appFHSSNIC.c:270: encAES(&g_txMsgQueue[macdata.txMsgIdx][1], &g_txMsgQueue[macdata.txMsgIdx][1], len, (rfAESMode & AES_CRYPTO_MODE));
      000376 90r00r11         [24] 1864 	mov	dptr,#(_macdata + 0x0011)
      000379 E0               [24] 1865 	movx	a,@dptr
      00037A 75 F0 F1         [24] 1866 	mov	b,#0xF1
      00037D A4               [48] 1867 	mul	ab
      00037E 24r72            [12] 1868 	add	a,#_g_txMsgQueue
      000380 FD               [12] 1869 	mov	r5,a
      000381 74s03            [12] 1870 	mov	a,#(_g_txMsgQueue >> 8)
      000383 35 F0            [12] 1871 	addc	a,b
      000385 FF               [12] 1872 	mov	r7,a
      000386 0D               [12] 1873 	inc	r5
      000387 BD 00 01         [24] 1874 	cjne	r5,#0x00,00176$
      00038A 0F               [12] 1875 	inc	r7
      00038B                       1876 00176$:
      00038B 8E 03            [24] 1877 	mov	ar3,r6
      00038D 7C 00            [12] 1878 	mov	r4,#0x00
      00038F 90r00r00         [24] 1879 	mov	dptr,#_rfAESMode
      000392 E0               [24] 1880 	movx	a,@dptr
      000393 FA               [12] 1881 	mov	r2,a
      000394 53 02 F0         [24] 1882 	anl	ar2,#0xF0
      000397 90r00r00         [24] 1883 	mov	dptr,#_encAES_PARM_2
      00039A ED               [12] 1884 	mov	a,r5
      00039B F0               [24] 1885 	movx	@dptr,a
      00039C EF               [12] 1886 	mov	a,r7
      00039D A3               [24] 1887 	inc	dptr
      00039E F0               [24] 1888 	movx	@dptr,a
      00039F 90r00r00         [24] 1889 	mov	dptr,#_encAES_PARM_3
      0003A2 EB               [12] 1890 	mov	a,r3
      0003A3 F0               [24] 1891 	movx	@dptr,a
      0003A4 EC               [12] 1892 	mov	a,r4
      0003A5 A3               [24] 1893 	inc	dptr
      0003A6 F0               [24] 1894 	movx	@dptr,a
      0003A7 90r00r00         [24] 1895 	mov	dptr,#_encAES_PARM_4
      0003AA EA               [12] 1896 	mov	a,r2
      0003AB F0               [24] 1897 	movx	@dptr,a
      0003AC 8D 82            [24] 1898 	mov	dpl,r5
      0003AE 8F 83            [24] 1899 	mov	dph,r7
      0003B0 12r00r00         [24] 1900 	lcall	_encAES
      0003B3 80 3B            [24] 1901 	sjmp	00118$
      0003B5                       1902 00115$:
                                   1903 ;	appFHSSNIC.c:272: decAES(&g_txMsgQueue[macdata.txMsgIdx][1], &g_txMsgQueue[macdata.txMsgIdx][1], len, (rfAESMode & AES_CRYPTO_MODE));
      0003B5 90r00r11         [24] 1904 	mov	dptr,#(_macdata + 0x0011)
      0003B8 E0               [24] 1905 	movx	a,@dptr
      0003B9 75 F0 F1         [24] 1906 	mov	b,#0xF1
      0003BC A4               [48] 1907 	mul	ab
      0003BD 24r72            [12] 1908 	add	a,#_g_txMsgQueue
      0003BF FD               [12] 1909 	mov	r5,a
      0003C0 74s03            [12] 1910 	mov	a,#(_g_txMsgQueue >> 8)
      0003C2 35 F0            [12] 1911 	addc	a,b
      0003C4 FF               [12] 1912 	mov	r7,a
      0003C5 0D               [12] 1913 	inc	r5
      0003C6 BD 00 01         [24] 1914 	cjne	r5,#0x00,00177$
      0003C9 0F               [12] 1915 	inc	r7
      0003CA                       1916 00177$:
      0003CA 7C 00            [12] 1917 	mov	r4,#0x00
      0003CC 90r00r00         [24] 1918 	mov	dptr,#_rfAESMode
      0003CF E0               [24] 1919 	movx	a,@dptr
      0003D0 FB               [12] 1920 	mov	r3,a
      0003D1 53 03 F0         [24] 1921 	anl	ar3,#0xF0
      0003D4 90r00r00         [24] 1922 	mov	dptr,#_decAES_PARM_2
      0003D7 ED               [12] 1923 	mov	a,r5
      0003D8 F0               [24] 1924 	movx	@dptr,a
      0003D9 EF               [12] 1925 	mov	a,r7
      0003DA A3               [24] 1926 	inc	dptr
      0003DB F0               [24] 1927 	movx	@dptr,a
      0003DC 90r00r00         [24] 1928 	mov	dptr,#_decAES_PARM_3
      0003DF EE               [12] 1929 	mov	a,r6
      0003E0 F0               [24] 1930 	movx	@dptr,a
      0003E1 EC               [12] 1931 	mov	a,r4
      0003E2 A3               [24] 1932 	inc	dptr
      0003E3 F0               [24] 1933 	movx	@dptr,a
      0003E4 90r00r00         [24] 1934 	mov	dptr,#_decAES_PARM_4
      0003E7 EB               [12] 1935 	mov	a,r3
      0003E8 F0               [24] 1936 	movx	@dptr,a
      0003E9 8D 82            [24] 1937 	mov	dpl,r5
      0003EB 8F 83            [24] 1938 	mov	dph,r7
      0003ED 12r00r00         [24] 1939 	lcall	_decAES
      0003F0                       1940 00118$:
                                   1941 ;	appFHSSNIC.c:275: g_txMsgQueue[macdata.txMsgIdx][0] = len;
      0003F0 90r00r11         [24] 1942 	mov	dptr,#(_macdata + 0x0011)
      0003F3 E0               [24] 1943 	movx	a,@dptr
      0003F4 75 F0 F1         [24] 1944 	mov	b,#0xF1
      0003F7 A4               [48] 1945 	mul	ab
      0003F8 24r72            [12] 1946 	add	a,#_g_txMsgQueue
      0003FA FE               [12] 1947 	mov	r6,a
      0003FB 74s03            [12] 1948 	mov	a,#(_g_txMsgQueue >> 8)
      0003FD 35 F0            [12] 1949 	addc	a,b
      0003FF FF               [12] 1950 	mov	r7,a
      000400 90r05r5C         [24] 1951 	mov	dptr,#_MAC_tx_PARM_2
      000403 E0               [24] 1952 	movx	a,@dptr
      000404 FD               [12] 1953 	mov	r5,a
      000405 8E 82            [24] 1954 	mov	dpl,r6
      000407 8F 83            [24] 1955 	mov	dph,r7
      000409 F0               [24] 1956 	movx	@dptr,a
                                   1957 ;	appFHSSNIC.c:282: if (++macdata.txMsgIdx == rfTxBufCount)
      00040A 90r00r11         [24] 1958 	mov	dptr,#(_macdata + 0x0011)
      00040D E0               [24] 1959 	movx	a,@dptr
      00040E FF               [12] 1960 	mov	r7,a
      00040F 0F               [12] 1961 	inc	r7
      000410 90r00r11         [24] 1962 	mov	dptr,#(_macdata + 0x0011)
      000413 EF               [12] 1963 	mov	a,r7
      000414 F0               [24] 1964 	movx	@dptr,a
      000415 90r00r00         [24] 1965 	mov	dptr,#_rfTxBufCount
      000418 E0               [24] 1966 	movx	a,@dptr
      000419 FE               [12] 1967 	mov	r6,a
      00041A EF               [12] 1968 	mov	a,r7
      00041B B5 06 05         [24] 1969 	cjne	a,ar6,00120$
                                   1970 ;	appFHSSNIC.c:284: macdata.txMsgIdx = 0;
      00041E 90r00r11         [24] 1971 	mov	dptr,#(_macdata + 0x0011)
      000421 E4               [12] 1972 	clr	a
      000422 F0               [24] 1973 	movx	@dptr,a
      000423                       1974 00120$:
                                   1975 ;	appFHSSNIC.c:287: return RC_NO_ERROR;
      000423 75 82 00         [24] 1976 	mov	dpl,#0x00
      000426 22               [24] 1977 	ret
                                   1978 ;------------------------------------------------------------
                                   1979 ;Allocation info for local variables in function 'MAC_sync'
                                   1980 ;------------------------------------------------------------
                                   1981 ;CellID                    Allocated with name '_MAC_sync_CellID_1_121'
                                   1982 ;------------------------------------------------------------
                                   1983 ;	appFHSSNIC.c:290: void MAC_sync(__xdata u16 CellID)
                                   1984 ;	-----------------------------------------
                                   1985 ;	 function MAC_sync
                                   1986 ;	-----------------------------------------
      000427                       1987 _MAC_sync:
      000427 AF 83            [24] 1988 	mov	r7,dph
      000429 E5 82            [12] 1989 	mov	a,dpl
      00042B 90r05r5F         [24] 1990 	mov	dptr,#_MAC_sync_CellID_1_121
      00042E F0               [24] 1991 	movx	@dptr,a
      00042F EF               [12] 1992 	mov	a,r7
      000430 A3               [24] 1993 	inc	dptr
      000431 F0               [24] 1994 	movx	@dptr,a
                                   1995 ;	appFHSSNIC.c:298: if (macdata.mac_state != MAC_STATE_NONHOPPING && macdata.mac_state != MAC_STATE_DISCOVERY)
      000432 90r00r00         [24] 1996 	mov	dptr,#_macdata
      000435 E0               [24] 1997 	movx	a,@dptr
      000436 FF               [12] 1998 	mov	r7,a
      000437 60 14            [24] 1999 	jz	00102$
      000439 BF 01 02         [24] 2000 	cjne	r7,#0x01,00133$
      00043C 80 0F            [24] 2001 	sjmp	00102$
      00043E                       2002 00133$:
                                   2003 ;	appFHSSNIC.c:300: debug("FHSS state entering SYNCHING from wrong state");
      00043E 90r00r95         [24] 2004 	mov	dptr,#___str_4
      000441 12r00r00         [24] 2005 	lcall	_debug
                                   2006 ;	appFHSSNIC.c:301: debughex(macdata.mac_state);
      000444 90r00r00         [24] 2007 	mov	dptr,#_macdata
      000447 E0               [24] 2008 	movx	a,@dptr
      000448 F5 82            [12] 2009 	mov	dpl,a
      00044A 12r00r00         [24] 2010 	lcall	_debughex
      00044D                       2011 00102$:
                                   2012 ;	appFHSSNIC.c:305: stop_hopping();
      00044D 12r00r9B         [24] 2013 	lcall	_stop_hopping
                                   2014 ;	appFHSSNIC.c:308: macdata.curChanIdx = 0;
      000450 90r00r09         [24] 2015 	mov	dptr,#(_macdata + 0x0009)
      000453 E4               [12] 2016 	clr	a
      000454 F0               [24] 2017 	movx	@dptr,a
      000455 A3               [24] 2018 	inc	dptr
      000456 F0               [24] 2019 	movx	@dptr,a
                                   2020 ;	appFHSSNIC.c:309: while (1)
      000457                       2021 00110$:
                                   2022 ;	appFHSSNIC.c:311: MAC_set_chanidx(macdata.curChanIdx);
      000457 90r00r09         [24] 2023 	mov	dptr,#(_macdata + 0x0009)
      00045A E0               [24] 2024 	movx	a,@dptr
      00045B FE               [12] 2025 	mov	r6,a
      00045C A3               [24] 2026 	inc	dptr
      00045D E0               [24] 2027 	movx	a,@dptr
      00045E FF               [12] 2028 	mov	r7,a
      00045F 8E 82            [24] 2029 	mov	dpl,r6
      000461 8F 83            [24] 2030 	mov	dph,r7
      000463 12r05r29         [24] 2031 	lcall	_MAC_set_chanidx
                                   2032 ;	appFHSSNIC.c:312: while (MARCSTATE != MARC_STATE_RX)
      000466                       2033 00104$:
      000466 90 DF 3B         [24] 2034 	mov	dptr,#_MARCSTATE
      000469 E0               [24] 2035 	movx	a,@dptr
      00046A FF               [12] 2036 	mov	r7,a
      00046B BF 0D F8         [24] 2037 	cjne	r7,#0x0D,00104$
                                   2038 ;	appFHSSNIC.c:314: if ((RSSI&0x7f) < 0x60)
      00046E 90 DF 3A         [24] 2039 	mov	dptr,#_RSSI
      000471 E0               [24] 2040 	movx	a,@dptr
      000472 FF               [12] 2041 	mov	r7,a
      000473 53 07 7F         [24] 2042 	anl	ar7,#0x7F
      000476 BF 60 00         [24] 2043 	cjne	r7,#0x60,00136$
      000479                       2044 00136$:
      000479 40 27            [24] 2045 	jc	00111$
                                   2046 ;	appFHSSNIC.c:317: macdata.curChanIdx++;
      00047B 90r00r09         [24] 2047 	mov	dptr,#(_macdata + 0x0009)
      00047E E0               [24] 2048 	movx	a,@dptr
      00047F FE               [12] 2049 	mov	r6,a
      000480 A3               [24] 2050 	inc	dptr
      000481 E0               [24] 2051 	movx	a,@dptr
      000482 FF               [12] 2052 	mov	r7,a
      000483 0E               [12] 2053 	inc	r6
      000484 BE 00 01         [24] 2054 	cjne	r6,#0x00,00138$
      000487 0F               [12] 2055 	inc	r7
      000488                       2056 00138$:
      000488 90r00r09         [24] 2057 	mov	dptr,#(_macdata + 0x0009)
      00048B EE               [12] 2058 	mov	a,r6
      00048C F0               [24] 2059 	movx	@dptr,a
      00048D EF               [12] 2060 	mov	a,r7
      00048E A3               [24] 2061 	inc	dptr
      00048F F0               [24] 2062 	movx	@dptr,a
                                   2063 ;	appFHSSNIC.c:318: blink(10,10);
      000490 D2 A4            [12] 2064 	setb	_P2_4
      000492 90 00 0A         [24] 2065 	mov	dptr,#0x000A
      000495 12r00r00         [24] 2066 	lcall	_sleepMillis
      000498 C2 A4            [12] 2067 	clr	_P2_4
      00049A 90 00 0A         [24] 2068 	mov	dptr,#0x000A
      00049D 12r00r00         [24] 2069 	lcall	_sleepMillis
      0004A0 80 B5            [24] 2070 	sjmp	00110$
      0004A2                       2071 00111$:
                                   2072 ;	appFHSSNIC.c:322: macdata.mac_state = MAC_STATE_SYNCHING;
      0004A2 90r00r00         [24] 2073 	mov	dptr,#_macdata
      0004A5 74 02            [12] 2074 	mov	a,#0x02
      0004A7 F0               [24] 2075 	movx	@dptr,a
                                   2076 ;	appFHSSNIC.c:325: macdata.tLastStateChange = clock;
      0004A8 90r00r00         [24] 2077 	mov	dptr,#_clock
      0004AB E0               [24] 2078 	movx	a,@dptr
      0004AC FC               [12] 2079 	mov	r4,a
      0004AD A3               [24] 2080 	inc	dptr
      0004AE E0               [24] 2081 	movx	a,@dptr
      0004AF FD               [12] 2082 	mov	r5,a
      0004B0 A3               [24] 2083 	inc	dptr
      0004B1 E0               [24] 2084 	movx	a,@dptr
      0004B2 A3               [24] 2085 	inc	dptr
      0004B3 E0               [24] 2086 	movx	a,@dptr
      0004B4 90r00r0B         [24] 2087 	mov	dptr,#(_macdata + 0x000b)
      0004B7 EC               [12] 2088 	mov	a,r4
      0004B8 F0               [24] 2089 	movx	@dptr,a
      0004B9 ED               [12] 2090 	mov	a,r5
      0004BA A3               [24] 2091 	inc	dptr
      0004BB F0               [24] 2092 	movx	@dptr,a
                                   2093 ;	appFHSSNIC.c:328: macdata.desperatelySeeking = CellID;
      0004BC 90r05r5F         [24] 2094 	mov	dptr,#_MAC_sync_CellID_1_121
      0004BF E0               [24] 2095 	movx	a,@dptr
      0004C0 FE               [12] 2096 	mov	r6,a
      0004C1 A3               [24] 2097 	inc	dptr
      0004C2 E0               [24] 2098 	movx	a,@dptr
      0004C3 FF               [12] 2099 	mov	r7,a
      0004C4 90r00r0F         [24] 2100 	mov	dptr,#(_macdata + 0x000f)
      0004C7 EE               [12] 2101 	mov	a,r6
      0004C8 F0               [24] 2102 	movx	@dptr,a
      0004C9 EF               [12] 2103 	mov	a,r7
      0004CA A3               [24] 2104 	inc	dptr
      0004CB F0               [24] 2105 	movx	@dptr,a
      0004CC 22               [24] 2106 	ret
                                   2107 ;------------------------------------------------------------
                                   2108 ;Allocation info for local variables in function 'MAC_stop_sync'
                                   2109 ;------------------------------------------------------------
                                   2110 ;	appFHSSNIC.c:333: void MAC_stop_sync()
                                   2111 ;	-----------------------------------------
                                   2112 ;	 function MAC_stop_sync
                                   2113 ;	-----------------------------------------
      0004CD                       2114 _MAC_stop_sync:
                                   2115 ;	appFHSSNIC.c:336: macdata.mac_state = MAC_STATE_NONHOPPING;
      0004CD 90r00r00         [24] 2116 	mov	dptr,#_macdata
      0004D0 E4               [12] 2117 	clr	a
      0004D1 F0               [24] 2118 	movx	@dptr,a
                                   2119 ;	appFHSSNIC.c:337: macdata.tLastStateChange = clock;
      0004D2 90r00r00         [24] 2120 	mov	dptr,#_clock
      0004D5 E0               [24] 2121 	movx	a,@dptr
      0004D6 FC               [12] 2122 	mov	r4,a
      0004D7 A3               [24] 2123 	inc	dptr
      0004D8 E0               [24] 2124 	movx	a,@dptr
      0004D9 FD               [12] 2125 	mov	r5,a
      0004DA A3               [24] 2126 	inc	dptr
      0004DB E0               [24] 2127 	movx	a,@dptr
      0004DC A3               [24] 2128 	inc	dptr
      0004DD E0               [24] 2129 	movx	a,@dptr
      0004DE 90r00r0B         [24] 2130 	mov	dptr,#(_macdata + 0x000b)
      0004E1 EC               [12] 2131 	mov	a,r4
      0004E2 F0               [24] 2132 	movx	@dptr,a
      0004E3 ED               [12] 2133 	mov	a,r5
      0004E4 A3               [24] 2134 	inc	dptr
      0004E5 F0               [24] 2135 	movx	@dptr,a
      0004E6 22               [24] 2136 	ret
                                   2137 ;------------------------------------------------------------
                                   2138 ;Allocation info for local variables in function 'MAC_become_master'
                                   2139 ;------------------------------------------------------------
                                   2140 ;	appFHSSNIC.c:341: void MAC_become_master()
                                   2141 ;	-----------------------------------------
                                   2142 ;	 function MAC_become_master
                                   2143 ;	-----------------------------------------
      0004E7                       2144 _MAC_become_master:
                                   2145 ;	appFHSSNIC.c:344: macdata.mac_state = MAC_STATE_SYNC_MASTER;
      0004E7 90r00r00         [24] 2146 	mov	dptr,#_macdata
      0004EA 74 04            [12] 2147 	mov	a,#0x04
      0004EC F0               [24] 2148 	movx	@dptr,a
                                   2149 ;	appFHSSNIC.c:345: macdata.tLastStateChange = clock;
      0004ED 90r00r00         [24] 2150 	mov	dptr,#_clock
      0004F0 E0               [24] 2151 	movx	a,@dptr
      0004F1 FC               [12] 2152 	mov	r4,a
      0004F2 A3               [24] 2153 	inc	dptr
      0004F3 E0               [24] 2154 	movx	a,@dptr
      0004F4 FD               [12] 2155 	mov	r5,a
      0004F5 A3               [24] 2156 	inc	dptr
      0004F6 E0               [24] 2157 	movx	a,@dptr
      0004F7 A3               [24] 2158 	inc	dptr
      0004F8 E0               [24] 2159 	movx	a,@dptr
      0004F9 90r00r0B         [24] 2160 	mov	dptr,#(_macdata + 0x000b)
      0004FC EC               [12] 2161 	mov	a,r4
      0004FD F0               [24] 2162 	movx	@dptr,a
      0004FE ED               [12] 2163 	mov	a,r5
      0004FF A3               [24] 2164 	inc	dptr
      000500 F0               [24] 2165 	movx	@dptr,a
      000501 22               [24] 2166 	ret
                                   2167 ;------------------------------------------------------------
                                   2168 ;Allocation info for local variables in function 'MAC_do_Master_scanny_thingy'
                                   2169 ;------------------------------------------------------------
                                   2170 ;	appFHSSNIC.c:349: void MAC_do_Master_scanny_thingy()
                                   2171 ;	-----------------------------------------
                                   2172 ;	 function MAC_do_Master_scanny_thingy
                                   2173 ;	-----------------------------------------
      000502                       2174 _MAC_do_Master_scanny_thingy:
                                   2175 ;	appFHSSNIC.c:351: macdata.mac_state = MAC_STATE_SYNCINGMASTER;
      000502 90r00r00         [24] 2176 	mov	dptr,#_macdata
      000505 74 05            [12] 2177 	mov	a,#0x05
      000507 F0               [24] 2178 	movx	@dptr,a
                                   2179 ;	appFHSSNIC.c:352: macdata.synched_chans = 0;
      000508 90r00r13         [24] 2180 	mov	dptr,#(_macdata + 0x0013)
      00050B E4               [12] 2181 	clr	a
      00050C F0               [24] 2182 	movx	@dptr,a
      00050D A3               [24] 2183 	inc	dptr
      00050E F0               [24] 2184 	movx	@dptr,a
                                   2185 ;	appFHSSNIC.c:353: macdata.tLastStateChange = clock;
      00050F 90r00r00         [24] 2186 	mov	dptr,#_clock
      000512 E0               [24] 2187 	movx	a,@dptr
      000513 FC               [12] 2188 	mov	r4,a
      000514 A3               [24] 2189 	inc	dptr
      000515 E0               [24] 2190 	movx	a,@dptr
      000516 FD               [12] 2191 	mov	r5,a
      000517 A3               [24] 2192 	inc	dptr
      000518 E0               [24] 2193 	movx	a,@dptr
      000519 A3               [24] 2194 	inc	dptr
      00051A E0               [24] 2195 	movx	a,@dptr
      00051B 90r00r0B         [24] 2196 	mov	dptr,#(_macdata + 0x000b)
      00051E EC               [12] 2197 	mov	a,r4
      00051F F0               [24] 2198 	movx	@dptr,a
      000520 ED               [12] 2199 	mov	a,r5
      000521 A3               [24] 2200 	inc	dptr
      000522 F0               [24] 2201 	movx	@dptr,a
                                   2202 ;	appFHSSNIC.c:354: begin_hopping(0);
      000523 75 82 00         [24] 2203 	mov	dpl,#0x00
      000526 02r00r81         [24] 2204 	ljmp	_begin_hopping
                                   2205 ;------------------------------------------------------------
                                   2206 ;Allocation info for local variables in function 'MAC_set_chanidx'
                                   2207 ;------------------------------------------------------------
                                   2208 ;chanidx                   Allocated with name '_MAC_set_chanidx_chanidx_1_129'
                                   2209 ;------------------------------------------------------------
                                   2210 ;	appFHSSNIC.c:358: void MAC_set_chanidx(__xdata u16 chanidx)
                                   2211 ;	-----------------------------------------
                                   2212 ;	 function MAC_set_chanidx
                                   2213 ;	-----------------------------------------
      000529                       2214 _MAC_set_chanidx:
      000529 AF 83            [24] 2215 	mov	r7,dph
      00052B E5 82            [12] 2216 	mov	a,dpl
      00052D 90r05r61         [24] 2217 	mov	dptr,#_MAC_set_chanidx_chanidx_1_129
      000530 F0               [24] 2218 	movx	@dptr,a
      000531 EF               [12] 2219 	mov	a,r7
      000532 A3               [24] 2220 	inc	dptr
      000533 F0               [24] 2221 	movx	@dptr,a
                                   2222 ;	appFHSSNIC.c:360: PHY_set_channel( g_Channels[ chanidx ] );
      000534 90r05r61         [24] 2223 	mov	dptr,#_MAC_set_chanidx_chanidx_1_129
      000537 E0               [24] 2224 	movx	a,@dptr
      000538 FE               [12] 2225 	mov	r6,a
      000539 A3               [24] 2226 	inc	dptr
      00053A E0               [24] 2227 	movx	a,@dptr
      00053B FF               [12] 2228 	mov	r7,a
      00053C EE               [12] 2229 	mov	a,r6
      00053D 24r00            [12] 2230 	add	a,#_g_Channels
      00053F F5 82            [12] 2231 	mov	dpl,a
      000541 EF               [12] 2232 	mov	a,r7
      000542 34s00            [12] 2233 	addc	a,#(_g_Channels >> 8)
      000544 F5 83            [12] 2234 	mov	dph,a
      000546 E0               [24] 2235 	movx	a,@dptr
      000547 FF               [12] 2236 	mov	r7,a
      000548 7E 00            [12] 2237 	mov	r6,#0x00
      00054A 8F 82            [24] 2238 	mov	dpl,r7
      00054C 8E 83            [24] 2239 	mov	dph,r6
      00054E 02r00r00         [24] 2240 	ljmp	_PHY_set_channel
                                   2241 ;------------------------------------------------------------
                                   2242 ;Allocation info for local variables in function 'MAC_set_NIC_ID'
                                   2243 ;------------------------------------------------------------
                                   2244 ;NIC_ID                    Allocated with name '_MAC_set_NIC_ID_NIC_ID_1_131'
                                   2245 ;------------------------------------------------------------
                                   2246 ;	appFHSSNIC.c:364: void MAC_set_NIC_ID(__xdata u16 NIC_ID)
                                   2247 ;	-----------------------------------------
                                   2248 ;	 function MAC_set_NIC_ID
                                   2249 ;	-----------------------------------------
      000551                       2250 _MAC_set_NIC_ID:
      000551 AF 83            [24] 2251 	mov	r7,dph
      000553 E5 82            [12] 2252 	mov	a,dpl
      000555 90r05r63         [24] 2253 	mov	dptr,#_MAC_set_NIC_ID_NIC_ID_1_131
      000558 F0               [24] 2254 	movx	@dptr,a
      000559 EF               [12] 2255 	mov	a,r7
      00055A A3               [24] 2256 	inc	dptr
      00055B F0               [24] 2257 	movx	@dptr,a
                                   2258 ;	appFHSSNIC.c:367: g_NIC_ID = NIC_ID;
      00055C 90r05r63         [24] 2259 	mov	dptr,#_MAC_set_NIC_ID_NIC_ID_1_131
      00055F E0               [24] 2260 	movx	a,@dptr
      000560 FE               [12] 2261 	mov	r6,a
      000561 A3               [24] 2262 	inc	dptr
      000562 E0               [24] 2263 	movx	a,@dptr
      000563 FF               [12] 2264 	mov	r7,a
      000564 90r03r70         [24] 2265 	mov	dptr,#_g_NIC_ID
      000567 EE               [12] 2266 	mov	a,r6
      000568 F0               [24] 2267 	movx	@dptr,a
      000569 EF               [12] 2268 	mov	a,r7
      00056A A3               [24] 2269 	inc	dptr
      00056B F0               [24] 2270 	movx	@dptr,a
      00056C 22               [24] 2271 	ret
                                   2272 ;------------------------------------------------------------
                                   2273 ;Allocation info for local variables in function 'MAC_rx_handle'
                                   2274 ;------------------------------------------------------------
                                   2275 ;message                   Allocated with name '_MAC_rx_handle_PARM_2'
                                   2276 ;len                       Allocated with name '_MAC_rx_handle_len_1_133'
                                   2277 ;------------------------------------------------------------
                                   2278 ;	appFHSSNIC.c:370: void MAC_rx_handle(__xdata u8 len, __xdata u8* __xdata message)
                                   2279 ;	-----------------------------------------
                                   2280 ;	 function MAC_rx_handle
                                   2281 ;	-----------------------------------------
      00056D                       2282 _MAC_rx_handle:
                                   2283 ;	appFHSSNIC.c:373: message;
      00056D 22               [24] 2284 	ret
                                   2285 ;------------------------------------------------------------
                                   2286 ;Allocation info for local variables in function 'MAC_getNextChannel'
                                   2287 ;------------------------------------------------------------
                                   2288 ;	appFHSSNIC.c:379: __xdata u8 MAC_getNextChannel()
                                   2289 ;	-----------------------------------------
                                   2290 ;	 function MAC_getNextChannel
                                   2291 ;	-----------------------------------------
      00056E                       2292 _MAC_getNextChannel:
                                   2293 ;	appFHSSNIC.c:381: macdata.curChanIdx++;
      00056E 90r00r09         [24] 2294 	mov	dptr,#(_macdata + 0x0009)
      000571 E0               [24] 2295 	movx	a,@dptr
      000572 FE               [12] 2296 	mov	r6,a
      000573 A3               [24] 2297 	inc	dptr
      000574 E0               [24] 2298 	movx	a,@dptr
      000575 FF               [12] 2299 	mov	r7,a
      000576 0E               [12] 2300 	inc	r6
      000577 BE 00 01         [24] 2301 	cjne	r6,#0x00,00108$
      00057A 0F               [12] 2302 	inc	r7
      00057B                       2303 00108$:
      00057B 90r00r09         [24] 2304 	mov	dptr,#(_macdata + 0x0009)
      00057E EE               [12] 2305 	mov	a,r6
      00057F F0               [24] 2306 	movx	@dptr,a
      000580 EF               [12] 2307 	mov	a,r7
      000581 A3               [24] 2308 	inc	dptr
      000582 F0               [24] 2309 	movx	@dptr,a
                                   2310 ;	appFHSSNIC.c:382: if (macdata.curChanIdx >= MAX_CHANNELS)
      000583 C3               [12] 2311 	clr	c
      000584 EE               [12] 2312 	mov	a,r6
      000585 94 70            [12] 2313 	subb	a,#0x70
      000587 EF               [12] 2314 	mov	a,r7
      000588 94 03            [12] 2315 	subb	a,#0x03
      00058A 40 07            [24] 2316 	jc	00102$
                                   2317 ;	appFHSSNIC.c:384: macdata.curChanIdx = 0;
      00058C 90r00r09         [24] 2318 	mov	dptr,#(_macdata + 0x0009)
      00058F E4               [12] 2319 	clr	a
      000590 F0               [24] 2320 	movx	@dptr,a
      000591 A3               [24] 2321 	inc	dptr
      000592 F0               [24] 2322 	movx	@dptr,a
      000593                       2323 00102$:
                                   2324 ;	appFHSSNIC.c:386: return g_Channels[macdata.curChanIdx];
      000593 90r00r09         [24] 2325 	mov	dptr,#(_macdata + 0x0009)
      000596 E0               [24] 2326 	movx	a,@dptr
      000597 FE               [12] 2327 	mov	r6,a
      000598 A3               [24] 2328 	inc	dptr
      000599 E0               [24] 2329 	movx	a,@dptr
      00059A FF               [12] 2330 	mov	r7,a
      00059B EE               [12] 2331 	mov	a,r6
      00059C 24r00            [12] 2332 	add	a,#_g_Channels
      00059E F5 82            [12] 2333 	mov	dpl,a
      0005A0 EF               [12] 2334 	mov	a,r7
      0005A1 34s00            [12] 2335 	addc	a,#(_g_Channels >> 8)
      0005A3 F5 83            [12] 2336 	mov	dph,a
      0005A5 E0               [24] 2337 	movx	a,@dptr
      0005A6 F5 82            [12] 2338 	mov	dpl,a
      0005A8 22               [24] 2339 	ret
                                   2340 ;------------------------------------------------------------
                                   2341 ;Allocation info for local variables in function 't2IntHandler'
                                   2342 ;------------------------------------------------------------
                                   2343 ;packet                    Allocated with name '_t2IntHandler_packet_1_138'
                                   2344 ;------------------------------------------------------------
                                   2345 ;	appFHSSNIC.c:393: void t2IntHandler(void) __interrupt T2_VECTOR  // interrupt handler should trigger on T2 overflow
                                   2346 ;	-----------------------------------------
                                   2347 ;	 function t2IntHandler
                                   2348 ;	-----------------------------------------
      0005A9                       2349 _t2IntHandler:
      0005A9 C0*00            [24] 2350 	push	bits
      0005AB C0 E0            [24] 2351 	push	acc
      0005AD C0 F0            [24] 2352 	push	b
      0005AF C0 82            [24] 2353 	push	dpl
      0005B1 C0 83            [24] 2354 	push	dph
      0005B3 C0 07            [24] 2355 	push	(0+7)
      0005B5 C0 06            [24] 2356 	push	(0+6)
      0005B7 C0 05            [24] 2357 	push	(0+5)
      0005B9 C0 04            [24] 2358 	push	(0+4)
      0005BB C0 03            [24] 2359 	push	(0+3)
      0005BD C0 02            [24] 2360 	push	(0+2)
      0005BF C0 01            [24] 2361 	push	(0+1)
      0005C1 C0 00            [24] 2362 	push	(0+0)
      0005C3 C0 D0            [24] 2363 	push	psw
      0005C5 75 D0 00         [24] 2364 	mov	psw,#0x00
                                   2365 ;	appFHSSNIC.c:402: if (++rf_MAC_timer == macdata.MAC_threshold)
      0005C8 90r00r00         [24] 2366 	mov	dptr,#_rf_MAC_timer
      0005CB E0               [24] 2367 	movx	a,@dptr
      0005CC 24 01            [12] 2368 	add	a,#0x01
      0005CE F0               [24] 2369 	movx	@dptr,a
      0005CF A3               [24] 2370 	inc	dptr
      0005D0 E0               [24] 2371 	movx	a,@dptr
      0005D1 34 00            [12] 2372 	addc	a,#0x00
      0005D3 F0               [24] 2373 	movx	@dptr,a
      0005D4 90r00r01         [24] 2374 	mov	dptr,#(_macdata + 0x0001)
      0005D7 E0               [24] 2375 	movx	a,@dptr
      0005D8 FE               [12] 2376 	mov	r6,a
      0005D9 A3               [24] 2377 	inc	dptr
      0005DA E0               [24] 2378 	movx	a,@dptr
      0005DB FF               [12] 2379 	mov	r7,a
      0005DC 90r00r00         [24] 2380 	mov	dptr,#_rf_MAC_timer
      0005DF E0               [24] 2381 	movx	a,@dptr
      0005E0 FC               [12] 2382 	mov	r4,a
      0005E1 A3               [24] 2383 	inc	dptr
      0005E2 E0               [24] 2384 	movx	a,@dptr
      0005E3 FD               [12] 2385 	mov	r5,a
      0005E4 EC               [12] 2386 	mov	a,r4
      0005E5 B5 06 0B         [24] 2387 	cjne	a,ar6,00102$
      0005E8 ED               [12] 2388 	mov	a,r5
      0005E9 B5 07 07         [24] 2389 	cjne	a,ar7,00102$
                                   2390 ;	appFHSSNIC.c:403: rf_MAC_timer = 0;   // since we're 0-based, MAC_threshold is actually past the end of our state machine, which makes it 0 *right now*
      0005EC 90r00r00         [24] 2391 	mov	dptr,#_rf_MAC_timer
      0005EF E4               [12] 2392 	clr	a
      0005F0 F0               [24] 2393 	movx	@dptr,a
      0005F1 A3               [24] 2394 	inc	dptr
      0005F2 F0               [24] 2395 	movx	@dptr,a
      0005F3                       2396 00102$:
                                   2397 ;	appFHSSNIC.c:405: switch (rf_MAC_timer)
      0005F3 90r00r00         [24] 2398 	mov	dptr,#_rf_MAC_timer
      0005F6 E0               [24] 2399 	movx	a,@dptr
      0005F7 FE               [12] 2400 	mov	r6,a
      0005F8 A3               [24] 2401 	inc	dptr
      0005F9 E0               [24] 2402 	movx	a,@dptr
      0005FA FF               [12] 2403 	mov	r7,a
      0005FB BE 00 05         [24] 2404 	cjne	r6,#0x00,00160$
      0005FE BF 00 02         [24] 2405 	cjne	r7,#0x00,00160$
      000601 80 0B            [24] 2406 	sjmp	00103$
      000603                       2407 00160$:
      000603 BE 01 05         [24] 2408 	cjne	r6,#0x01,00161$
      000606 BF 00 02         [24] 2409 	cjne	r7,#0x00,00161$
      000609 80 68            [24] 2410 	sjmp	00108$
      00060B                       2411 00161$:
      00060B 02r07r6B         [24] 2412 	ljmp	00111$
                                   2413 ;	appFHSSNIC.c:407: case 0:     // change channels
      00060E                       2414 00103$:
                                   2415 ;	appFHSSNIC.c:409: macdata.tLastHop = T2CT | (rf_MAC_timer<<8);        // should this be based on clock and T1?
      00060E 90r00r00         [24] 2416 	mov	dptr,#_rf_MAC_timer
      000611 E0               [24] 2417 	movx	a,@dptr
      000612 FE               [12] 2418 	mov	r6,a
      000613 A3               [24] 2419 	inc	dptr
      000614 E0               [24] 2420 	movx	a,@dptr
      000615 8E 07            [24] 2421 	mov	ar7,r6
      000617 7E 00            [12] 2422 	mov	r6,#0x00
      000619 AC 9C            [24] 2423 	mov	r4,_T2CT
      00061B 7D 00            [12] 2424 	mov	r5,#0x00
      00061D EC               [12] 2425 	mov	a,r4
      00061E 42 06            [12] 2426 	orl	ar6,a
      000620 ED               [12] 2427 	mov	a,r5
      000621 42 07            [12] 2428 	orl	ar7,a
      000623 90r00r0D         [24] 2429 	mov	dptr,#(_macdata + 0x000d)
      000626 EE               [12] 2430 	mov	a,r6
      000627 F0               [24] 2431 	movx	@dptr,a
      000628 EF               [12] 2432 	mov	a,r7
      000629 A3               [24] 2433 	inc	dptr
      00062A F0               [24] 2434 	movx	@dptr,a
                                   2435 ;	appFHSSNIC.c:412: if (++macdata.curChanIdx >= macdata.NumChannelHops)
      00062B 90r00r09         [24] 2436 	mov	dptr,#(_macdata + 0x0009)
      00062E E0               [24] 2437 	movx	a,@dptr
      00062F FE               [12] 2438 	mov	r6,a
      000630 A3               [24] 2439 	inc	dptr
      000631 E0               [24] 2440 	movx	a,@dptr
      000632 FF               [12] 2441 	mov	r7,a
      000633 0E               [12] 2442 	inc	r6
      000634 BE 00 01         [24] 2443 	cjne	r6,#0x00,00162$
      000637 0F               [12] 2444 	inc	r7
      000638                       2445 00162$:
      000638 90r00r09         [24] 2446 	mov	dptr,#(_macdata + 0x0009)
      00063B EE               [12] 2447 	mov	a,r6
      00063C F0               [24] 2448 	movx	@dptr,a
      00063D EF               [12] 2449 	mov	a,r7
      00063E A3               [24] 2450 	inc	dptr
      00063F F0               [24] 2451 	movx	@dptr,a
      000640 90r00r07         [24] 2452 	mov	dptr,#(_macdata + 0x0007)
      000643 E0               [24] 2453 	movx	a,@dptr
      000644 FC               [12] 2454 	mov	r4,a
      000645 A3               [24] 2455 	inc	dptr
      000646 E0               [24] 2456 	movx	a,@dptr
      000647 FD               [12] 2457 	mov	r5,a
      000648 C3               [12] 2458 	clr	c
      000649 EE               [12] 2459 	mov	a,r6
      00064A 9C               [12] 2460 	subb	a,r4
      00064B EF               [12] 2461 	mov	a,r7
      00064C 9D               [12] 2462 	subb	a,r5
      00064D 40 07            [24] 2463 	jc	00105$
                                   2464 ;	appFHSSNIC.c:414: macdata.curChanIdx = 0;
      00064F 90r00r09         [24] 2465 	mov	dptr,#(_macdata + 0x0009)
      000652 E4               [12] 2466 	clr	a
      000653 F0               [24] 2467 	movx	@dptr,a
      000654 A3               [24] 2468 	inc	dptr
      000655 F0               [24] 2469 	movx	@dptr,a
      000656                       2470 00105$:
                                   2471 ;	appFHSSNIC.c:419: if (MARCSTATE == MARC_STATE_TX)
      000656 90 DF 3B         [24] 2472 	mov	dptr,#_MARCSTATE
      000659 E0               [24] 2473 	movx	a,@dptr
      00065A FF               [12] 2474 	mov	r7,a
      00065B BF 13 03         [24] 2475 	cjne	r7,#0x13,00107$
                                   2476 ;	appFHSSNIC.c:420: return;
      00065E 02r08r66         [24] 2477 	ljmp	00123$
      000661                       2478 00107$:
                                   2479 ;	appFHSSNIC.c:424: MAC_set_chanidx(macdata.curChanIdx);
      000661 90r00r09         [24] 2480 	mov	dptr,#(_macdata + 0x0009)
      000664 E0               [24] 2481 	movx	a,@dptr
      000665 FE               [12] 2482 	mov	r6,a
      000666 A3               [24] 2483 	inc	dptr
      000667 E0               [24] 2484 	movx	a,@dptr
      000668 FF               [12] 2485 	mov	r7,a
      000669 8E 82            [24] 2486 	mov	dpl,r6
      00066B 8F 83            [24] 2487 	mov	dph,r7
      00066D 12r05r29         [24] 2488 	lcall	_MAC_set_chanidx
                                   2489 ;	appFHSSNIC.c:435: break;
      000670 02r08r66         [24] 2490 	ljmp	00123$
                                   2491 ;	appFHSSNIC.c:437: case 1:
      000673                       2492 00108$:
                                   2493 ;	appFHSSNIC.c:439: if (macdata.mac_state == MAC_STATE_SYNCINGMASTER)
      000673 90r00r00         [24] 2494 	mov	dptr,#_macdata
      000676 E0               [24] 2495 	movx	a,@dptr
      000677 FF               [12] 2496 	mov	r7,a
      000678 BF 05 02         [24] 2497 	cjne	r7,#0x05,00166$
      00067B 80 03            [24] 2498 	sjmp	00167$
      00067D                       2499 00166$:
      00067D 02r08r66         [24] 2500 	ljmp	00123$
      000680                       2501 00167$:
                                   2502 ;	appFHSSNIC.c:441: sleepMillis(FHSS_TX_SLEEP_DELAY);
      000680 90 00 19         [24] 2503 	mov	dptr,#0x0019
      000683 12r00r00         [24] 2504 	lcall	_sleepMillis
                                   2505 ;	appFHSSNIC.c:442: packet[0] = 28;
      000686 90r05r67         [24] 2506 	mov	dptr,#_t2IntHandler_packet_1_138
      000689 74 1C            [12] 2507 	mov	a,#0x1C
      00068B F0               [24] 2508 	movx	@dptr,a
                                   2509 ;	appFHSSNIC.c:443: packet[1] = macdata.curChanIdx & 0xff;
      00068C 90r00r09         [24] 2510 	mov	dptr,#(_macdata + 0x0009)
      00068F E0               [24] 2511 	movx	a,@dptr
      000690 FE               [12] 2512 	mov	r6,a
      000691 A3               [24] 2513 	inc	dptr
      000692 E0               [24] 2514 	movx	a,@dptr
      000693 90r05r68         [24] 2515 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0001)
      000696 EE               [12] 2516 	mov	a,r6
      000697 F0               [24] 2517 	movx	@dptr,a
                                   2518 ;	appFHSSNIC.c:444: packet[2] = macdata.curChanIdx >> 8;
      000698 90r00r09         [24] 2519 	mov	dptr,#(_macdata + 0x0009)
      00069B E0               [24] 2520 	movx	a,@dptr
      00069C A3               [24] 2521 	inc	dptr
      00069D E0               [24] 2522 	movx	a,@dptr
      00069E 90r05r69         [24] 2523 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0002)
      0006A1 F0               [24] 2524 	movx	@dptr,a
                                   2525 ;	appFHSSNIC.c:445: packet[3] =  'B';
      0006A2 90r05r6A         [24] 2526 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0003)
      0006A5 74 42            [12] 2527 	mov	a,#0x42
      0006A7 F0               [24] 2528 	movx	@dptr,a
                                   2529 ;	appFHSSNIC.c:446: packet[4] =  'L';
      0006A8 90r05r6B         [24] 2530 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0004)
      0006AB 74 4C            [12] 2531 	mov	a,#0x4C
      0006AD F0               [24] 2532 	movx	@dptr,a
                                   2533 ;	appFHSSNIC.c:447: packet[5] =  'A';
      0006AE 90r05r6C         [24] 2534 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0005)
      0006B1 74 41            [12] 2535 	mov	a,#0x41
      0006B3 F0               [24] 2536 	movx	@dptr,a
                                   2537 ;	appFHSSNIC.c:448: packet[6] =  'H';
      0006B4 90r05r6D         [24] 2538 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0006)
      0006B7 74 48            [12] 2539 	mov	a,#0x48
      0006B9 F0               [24] 2540 	movx	@dptr,a
                                   2541 ;	appFHSSNIC.c:449: packet[7] =  'B';
      0006BA 90r05r6E         [24] 2542 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0007)
      0006BD 74 42            [12] 2543 	mov	a,#0x42
      0006BF F0               [24] 2544 	movx	@dptr,a
                                   2545 ;	appFHSSNIC.c:450: packet[8] =  'L';
      0006C0 90r05r6F         [24] 2546 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0008)
      0006C3 74 4C            [12] 2547 	mov	a,#0x4C
      0006C5 F0               [24] 2548 	movx	@dptr,a
                                   2549 ;	appFHSSNIC.c:451: packet[9] =  'A';
      0006C6 90r05r70         [24] 2550 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0009)
      0006C9 74 41            [12] 2551 	mov	a,#0x41
      0006CB F0               [24] 2552 	movx	@dptr,a
                                   2553 ;	appFHSSNIC.c:452: packet[10] = 'H';
      0006CC 90r05r71         [24] 2554 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x000a)
      0006CF 74 48            [12] 2555 	mov	a,#0x48
      0006D1 F0               [24] 2556 	movx	@dptr,a
                                   2557 ;	appFHSSNIC.c:453: packet[11] = 'B';
      0006D2 90r05r72         [24] 2558 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x000b)
      0006D5 74 42            [12] 2559 	mov	a,#0x42
      0006D7 F0               [24] 2560 	movx	@dptr,a
                                   2561 ;	appFHSSNIC.c:454: packet[12] = 'L';
      0006D8 90r05r73         [24] 2562 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x000c)
      0006DB 74 4C            [12] 2563 	mov	a,#0x4C
      0006DD F0               [24] 2564 	movx	@dptr,a
                                   2565 ;	appFHSSNIC.c:455: packet[13] = 'A';
      0006DE 90r05r74         [24] 2566 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x000d)
      0006E1 74 41            [12] 2567 	mov	a,#0x41
      0006E3 F0               [24] 2568 	movx	@dptr,a
                                   2569 ;	appFHSSNIC.c:456: packet[14] = 'H';
      0006E4 90r05r75         [24] 2570 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x000e)
      0006E7 74 48            [12] 2571 	mov	a,#0x48
      0006E9 F0               [24] 2572 	movx	@dptr,a
                                   2573 ;	appFHSSNIC.c:457: packet[15] = 'B';
      0006EA 90r05r76         [24] 2574 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x000f)
      0006ED 74 42            [12] 2575 	mov	a,#0x42
      0006EF F0               [24] 2576 	movx	@dptr,a
                                   2577 ;	appFHSSNIC.c:458: packet[16] = 'L';
      0006F0 90r05r77         [24] 2578 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0010)
      0006F3 74 4C            [12] 2579 	mov	a,#0x4C
      0006F5 F0               [24] 2580 	movx	@dptr,a
                                   2581 ;	appFHSSNIC.c:459: packet[17] = 'A';
      0006F6 90r05r78         [24] 2582 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0011)
      0006F9 74 41            [12] 2583 	mov	a,#0x41
      0006FB F0               [24] 2584 	movx	@dptr,a
                                   2585 ;	appFHSSNIC.c:460: packet[18] = 'H';
      0006FC 90r05r79         [24] 2586 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0012)
      0006FF 74 48            [12] 2587 	mov	a,#0x48
      000701 F0               [24] 2588 	movx	@dptr,a
                                   2589 ;	appFHSSNIC.c:461: packet[19] = 'B';
      000702 90r05r7A         [24] 2590 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0013)
      000705 74 42            [12] 2591 	mov	a,#0x42
      000707 F0               [24] 2592 	movx	@dptr,a
                                   2593 ;	appFHSSNIC.c:462: packet[20] = 'L';
      000708 90r05r7B         [24] 2594 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0014)
      00070B 74 4C            [12] 2595 	mov	a,#0x4C
      00070D F0               [24] 2596 	movx	@dptr,a
                                   2597 ;	appFHSSNIC.c:463: packet[21] = 'A';
      00070E 90r05r7C         [24] 2598 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0015)
      000711 74 41            [12] 2599 	mov	a,#0x41
      000713 F0               [24] 2600 	movx	@dptr,a
                                   2601 ;	appFHSSNIC.c:464: packet[22] = 'H';
      000714 90r05r7D         [24] 2602 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0016)
      000717 74 48            [12] 2603 	mov	a,#0x48
      000719 F0               [24] 2604 	movx	@dptr,a
                                   2605 ;	appFHSSNIC.c:465: packet[23] = 'B';
      00071A 90r05r7E         [24] 2606 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0017)
      00071D 74 42            [12] 2607 	mov	a,#0x42
      00071F F0               [24] 2608 	movx	@dptr,a
                                   2609 ;	appFHSSNIC.c:466: packet[24] = 'L';
      000720 90r05r7F         [24] 2610 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0018)
      000723 74 4C            [12] 2611 	mov	a,#0x4C
      000725 F0               [24] 2612 	movx	@dptr,a
                                   2613 ;	appFHSSNIC.c:467: packet[25] = 'A';
      000726 90r05r80         [24] 2614 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0019)
      000729 74 41            [12] 2615 	mov	a,#0x41
      00072B F0               [24] 2616 	movx	@dptr,a
                                   2617 ;	appFHSSNIC.c:468: packet[26] = 'H';
      00072C 90r05r81         [24] 2618 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x001a)
      00072F 74 48            [12] 2619 	mov	a,#0x48
      000731 F0               [24] 2620 	movx	@dptr,a
                                   2621 ;	appFHSSNIC.c:469: packet[27] = ' ';
      000732 90r05r82         [24] 2622 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x001b)
      000735 74 20            [12] 2623 	mov	a,#0x20
      000737 F0               [24] 2624 	movx	@dptr,a
                                   2625 ;	appFHSSNIC.c:471: transmit((__xdata u8*)&packet[1], 28, 0, 0);
      000738 90r00r00         [24] 2626 	mov	dptr,#_transmit_PARM_2
      00073B 74 1C            [12] 2627 	mov	a,#0x1C
      00073D F0               [24] 2628 	movx	@dptr,a
      00073E E4               [12] 2629 	clr	a
      00073F A3               [24] 2630 	inc	dptr
      000740 F0               [24] 2631 	movx	@dptr,a
      000741 90r00r00         [24] 2632 	mov	dptr,#_transmit_PARM_3
      000744 F0               [24] 2633 	movx	@dptr,a
      000745 A3               [24] 2634 	inc	dptr
      000746 F0               [24] 2635 	movx	@dptr,a
      000747 90r00r00         [24] 2636 	mov	dptr,#_transmit_PARM_4
      00074A F0               [24] 2637 	movx	@dptr,a
      00074B A3               [24] 2638 	inc	dptr
      00074C F0               [24] 2639 	movx	@dptr,a
      00074D 90r05r68         [24] 2640 	mov	dptr,#(_t2IntHandler_packet_1_138 + 0x0001)
      000750 12r00r00         [24] 2641 	lcall	_transmit
                                   2642 ;	appFHSSNIC.c:472: macdata.synched_chans++;
      000753 90r00r13         [24] 2643 	mov	dptr,#(_macdata + 0x0013)
      000756 E0               [24] 2644 	movx	a,@dptr
      000757 FE               [12] 2645 	mov	r6,a
      000758 A3               [24] 2646 	inc	dptr
      000759 E0               [24] 2647 	movx	a,@dptr
      00075A FF               [12] 2648 	mov	r7,a
      00075B 0E               [12] 2649 	inc	r6
      00075C BE 00 01         [24] 2650 	cjne	r6,#0x00,00168$
      00075F 0F               [12] 2651 	inc	r7
      000760                       2652 00168$:
      000760 90r00r13         [24] 2653 	mov	dptr,#(_macdata + 0x0013)
      000763 EE               [12] 2654 	mov	a,r6
      000764 F0               [24] 2655 	movx	@dptr,a
      000765 EF               [12] 2656 	mov	a,r7
      000766 A3               [24] 2657 	inc	dptr
      000767 F0               [24] 2658 	movx	@dptr,a
                                   2659 ;	appFHSSNIC.c:473: break;      // don't want to do anything else if we're in this state.
      000768 02r08r66         [24] 2660 	ljmp	00123$
                                   2661 ;	appFHSSNIC.c:477: default:    // all other ticks we can transmit
      00076B                       2662 00111$:
                                   2663 ;	appFHSSNIC.c:480: switch (macdata.mac_state)
      00076B 90r00r00         [24] 2664 	mov	dptr,#_macdata
      00076E E0               [24] 2665 	movx	a,@dptr
      00076F FF               [12] 2666 	mov	r7,a
      000770 BF 03 02         [24] 2667 	cjne	r7,#0x03,00169$
      000773 80 65            [24] 2668 	sjmp	00116$
      000775                       2669 00169$:
      000775 BF 04 02         [24] 2670 	cjne	r7,#0x04,00170$
      000778 80 08            [24] 2671 	sjmp	00113$
      00077A                       2672 00170$:
      00077A BF 05 02         [24] 2673 	cjne	r7,#0x05,00171$
      00077D 80 03            [24] 2674 	sjmp	00172$
      00077F                       2675 00171$:
      00077F 02r08r66         [24] 2676 	ljmp	00123$
      000782                       2677 00172$:
                                   2678 ;	appFHSSNIC.c:483: case MAC_STATE_SYNC_MASTER:
      000782                       2679 00113$:
                                   2680 ;	appFHSSNIC.c:484: if (100 < (clock - macdata.tLastStateChange))   // periodically shift back to beaconing
      000782 90r00r0B         [24] 2681 	mov	dptr,#(_macdata + 0x000b)
      000785 E0               [24] 2682 	movx	a,@dptr
      000786 FE               [12] 2683 	mov	r6,a
      000787 A3               [24] 2684 	inc	dptr
      000788 E0               [24] 2685 	movx	a,@dptr
      000789 FF               [12] 2686 	mov	r7,a
      00078A 90r00r00         [24] 2687 	mov	dptr,#_clock
      00078D E0               [24] 2688 	movx	a,@dptr
      00078E FA               [12] 2689 	mov	r2,a
      00078F A3               [24] 2690 	inc	dptr
      000790 E0               [24] 2691 	movx	a,@dptr
      000791 FB               [12] 2692 	mov	r3,a
      000792 A3               [24] 2693 	inc	dptr
      000793 E0               [24] 2694 	movx	a,@dptr
      000794 FC               [12] 2695 	mov	r4,a
      000795 A3               [24] 2696 	inc	dptr
      000796 E0               [24] 2697 	movx	a,@dptr
      000797 FD               [12] 2698 	mov	r5,a
      000798 8E 00            [24] 2699 	mov	ar0,r6
      00079A 8F 01            [24] 2700 	mov	ar1,r7
      00079C E4               [12] 2701 	clr	a
      00079D FE               [12] 2702 	mov	r6,a
      00079E FF               [12] 2703 	mov	r7,a
      00079F EA               [12] 2704 	mov	a,r2
      0007A0 C3               [12] 2705 	clr	c
      0007A1 98               [12] 2706 	subb	a,r0
      0007A2 FA               [12] 2707 	mov	r2,a
      0007A3 EB               [12] 2708 	mov	a,r3
      0007A4 99               [12] 2709 	subb	a,r1
      0007A5 FB               [12] 2710 	mov	r3,a
      0007A6 EC               [12] 2711 	mov	a,r4
      0007A7 9E               [12] 2712 	subb	a,r6
      0007A8 FC               [12] 2713 	mov	r4,a
      0007A9 ED               [12] 2714 	mov	a,r5
      0007AA 9F               [12] 2715 	subb	a,r7
      0007AB FD               [12] 2716 	mov	r5,a
      0007AC C3               [12] 2717 	clr	c
      0007AD 74 64            [12] 2718 	mov	a,#0x64
      0007AF 9A               [12] 2719 	subb	a,r2
      0007B0 E4               [12] 2720 	clr	a
      0007B1 9B               [12] 2721 	subb	a,r3
      0007B2 E4               [12] 2722 	clr	a
      0007B3 9C               [12] 2723 	subb	a,r4
      0007B4 E4               [12] 2724 	clr	a
      0007B5 9D               [12] 2725 	subb	a,r5
      0007B6 50 22            [24] 2726 	jnc	00116$
                                   2727 ;	appFHSSNIC.c:486: debug("SYNCH_MASTER -> SYNCINGMASTER");
      0007B8 90r00rC3         [24] 2728 	mov	dptr,#___str_5
      0007BB 12r00r00         [24] 2729 	lcall	_debug
                                   2730 ;	appFHSSNIC.c:487: macdata.mac_state = MAC_STATE_SYNCINGMASTER;
      0007BE 90r00r00         [24] 2731 	mov	dptr,#_macdata
      0007C1 74 05            [12] 2732 	mov	a,#0x05
      0007C3 F0               [24] 2733 	movx	@dptr,a
                                   2734 ;	appFHSSNIC.c:488: macdata.tLastStateChange = clock;
      0007C4 90r00r00         [24] 2735 	mov	dptr,#_clock
      0007C7 E0               [24] 2736 	movx	a,@dptr
      0007C8 FC               [12] 2737 	mov	r4,a
      0007C9 A3               [24] 2738 	inc	dptr
      0007CA E0               [24] 2739 	movx	a,@dptr
      0007CB FD               [12] 2740 	mov	r5,a
      0007CC A3               [24] 2741 	inc	dptr
      0007CD E0               [24] 2742 	movx	a,@dptr
      0007CE FE               [12] 2743 	mov	r6,a
      0007CF A3               [24] 2744 	inc	dptr
      0007D0 E0               [24] 2745 	movx	a,@dptr
      0007D1 FF               [12] 2746 	mov	r7,a
      0007D2 90r00r0B         [24] 2747 	mov	dptr,#(_macdata + 0x000b)
      0007D5 EC               [12] 2748 	mov	a,r4
      0007D6 F0               [24] 2749 	movx	@dptr,a
      0007D7 ED               [12] 2750 	mov	a,r5
      0007D8 A3               [24] 2751 	inc	dptr
      0007D9 F0               [24] 2752 	movx	@dptr,a
                                   2753 ;	appFHSSNIC.c:491: case MAC_STATE_SYNCHED:
      0007DA                       2754 00116$:
                                   2755 ;	appFHSSNIC.c:501: if ( g_txMsgQueue[macdata.txMsgIdxDone][0])      // if length byte >0
      0007DA 90r00r12         [24] 2756 	mov	dptr,#(_macdata + 0x0012)
      0007DD E0               [24] 2757 	movx	a,@dptr
      0007DE 75 F0 F1         [24] 2758 	mov	b,#0xF1
      0007E1 A4               [48] 2759 	mul	ab
      0007E2 24r72            [12] 2760 	add	a,#_g_txMsgQueue
      0007E4 FE               [12] 2761 	mov	r6,a
      0007E5 74s03            [12] 2762 	mov	a,#(_g_txMsgQueue >> 8)
      0007E7 35 F0            [12] 2763 	addc	a,b
      0007E9 FF               [12] 2764 	mov	r7,a
      0007EA 8E 82            [24] 2765 	mov	dpl,r6
      0007EC 8F 83            [24] 2766 	mov	dph,r7
      0007EE E0               [24] 2767 	movx	a,@dptr
      0007EF 60 75            [24] 2768 	jz	00123$
                                   2769 ;	appFHSSNIC.c:504: sleepMillis(FHSS_TX_SLEEP_DELAY);
      0007F1 90 00 19         [24] 2770 	mov	dptr,#0x0019
      0007F4 12r00r00         [24] 2771 	lcall	_sleepMillis
                                   2772 ;	appFHSSNIC.c:505: transmit(&g_txMsgQueue[macdata.txMsgIdxDone][!(PKTCTRL0&1)], g_txMsgQueue[macdata.txMsgIdxDone][0], 0, 0);
      0007F7 90r00r12         [24] 2773 	mov	dptr,#(_macdata + 0x0012)
      0007FA E0               [24] 2774 	movx	a,@dptr
      0007FB 75 F0 F1         [24] 2775 	mov	b,#0xF1
      0007FE A4               [48] 2776 	mul	ab
      0007FF 24r72            [12] 2777 	add	a,#_g_txMsgQueue
      000801 FE               [12] 2778 	mov	r6,a
      000802 74s03            [12] 2779 	mov	a,#(_g_txMsgQueue >> 8)
      000804 35 F0            [12] 2780 	addc	a,b
      000806 FF               [12] 2781 	mov	r7,a
      000807 90 DF 04         [24] 2782 	mov	dptr,#_PKTCTRL0
      00080A E0               [24] 2783 	movx	a,@dptr
      00080B 54 01            [12] 2784 	anl	a,#0x01
      00080D FD               [12] 2785 	mov	r5,a
      00080E B4 01 00         [24] 2786 	cjne	a,#0x01,00175$
      000811                       2787 00175$:
      000811 E4               [12] 2788 	clr	a
      000812 33               [12] 2789 	rlc	a
      000813 2E               [12] 2790 	add	a,r6
      000814 FD               [12] 2791 	mov	r5,a
      000815 E4               [12] 2792 	clr	a
      000816 3F               [12] 2793 	addc	a,r7
      000817 FC               [12] 2794 	mov	r4,a
      000818 8E 82            [24] 2795 	mov	dpl,r6
      00081A 8F 83            [24] 2796 	mov	dph,r7
      00081C E0               [24] 2797 	movx	a,@dptr
      00081D 90r00r00         [24] 2798 	mov	dptr,#_transmit_PARM_2
      000820 F0               [24] 2799 	movx	@dptr,a
      000821 E4               [12] 2800 	clr	a
      000822 A3               [24] 2801 	inc	dptr
      000823 F0               [24] 2802 	movx	@dptr,a
      000824 90r00r00         [24] 2803 	mov	dptr,#_transmit_PARM_3
      000827 F0               [24] 2804 	movx	@dptr,a
      000828 A3               [24] 2805 	inc	dptr
      000829 F0               [24] 2806 	movx	@dptr,a
      00082A 90r00r00         [24] 2807 	mov	dptr,#_transmit_PARM_4
      00082D F0               [24] 2808 	movx	@dptr,a
      00082E A3               [24] 2809 	inc	dptr
      00082F F0               [24] 2810 	movx	@dptr,a
      000830 8D 82            [24] 2811 	mov	dpl,r5
      000832 8C 83            [24] 2812 	mov	dph,r4
      000834 12r00r00         [24] 2813 	lcall	_transmit
                                   2814 ;	appFHSSNIC.c:507: g_txMsgQueue[macdata.txMsgIdxDone][0] = 0;
      000837 90r00r12         [24] 2815 	mov	dptr,#(_macdata + 0x0012)
      00083A E0               [24] 2816 	movx	a,@dptr
      00083B 75 F0 F1         [24] 2817 	mov	b,#0xF1
      00083E A4               [48] 2818 	mul	ab
      00083F 24r72            [12] 2819 	add	a,#_g_txMsgQueue
      000841 F5 82            [12] 2820 	mov	dpl,a
      000843 74s03            [12] 2821 	mov	a,#(_g_txMsgQueue >> 8)
      000845 35 F0            [12] 2822 	addc	a,b
      000847 F5 83            [12] 2823 	mov	dph,a
      000849 E4               [12] 2824 	clr	a
      00084A F0               [24] 2825 	movx	@dptr,a
                                   2826 ;	appFHSSNIC.c:509: if (++macdata.txMsgIdxDone >= MAX_TX_MSGS)
      00084B 90r00r12         [24] 2827 	mov	dptr,#(_macdata + 0x0012)
      00084E E0               [24] 2828 	movx	a,@dptr
      00084F FF               [12] 2829 	mov	r7,a
      000850 0F               [12] 2830 	inc	r7
      000851 90r00r12         [24] 2831 	mov	dptr,#(_macdata + 0x0012)
      000854 EF               [12] 2832 	mov	a,r7
      000855 F0               [24] 2833 	movx	@dptr,a
      000856 BF 02 00         [24] 2834 	cjne	r7,#0x02,00176$
      000859                       2835 00176$:
      000859 40 05            [24] 2836 	jc	00118$
                                   2837 ;	appFHSSNIC.c:511: macdata.txMsgIdxDone = 0;
      00085B 90r00r12         [24] 2838 	mov	dptr,#(_macdata + 0x0012)
      00085E E4               [12] 2839 	clr	a
      00085F F0               [24] 2840 	movx	@dptr,a
      000860                       2841 00118$:
                                   2842 ;	appFHSSNIC.c:513: debug("FHSSxmit done");
      000860 90r00rE1         [24] 2843 	mov	dptr,#___str_6
      000863 12r00r00         [24] 2844 	lcall	_debug
                                   2845 ;	appFHSSNIC.c:516: }
      000866                       2846 00123$:
      000866 D0 D0            [24] 2847 	pop	psw
      000868 D0 00            [24] 2848 	pop	(0+0)
      00086A D0 01            [24] 2849 	pop	(0+1)
      00086C D0 02            [24] 2850 	pop	(0+2)
      00086E D0 03            [24] 2851 	pop	(0+3)
      000870 D0 04            [24] 2852 	pop	(0+4)
      000872 D0 05            [24] 2853 	pop	(0+5)
      000874 D0 06            [24] 2854 	pop	(0+6)
      000876 D0 07            [24] 2855 	pop	(0+7)
      000878 D0 83            [24] 2856 	pop	dph
      00087A D0 82            [24] 2857 	pop	dpl
      00087C D0 F0            [24] 2858 	pop	b
      00087E D0 E0            [24] 2859 	pop	acc
      000880 D0*00            [24] 2860 	pop	bits
      000882 32               [24] 2861 	reti
                                   2862 ;------------------------------------------------------------
                                   2863 ;Allocation info for local variables in function 't3IntHandler'
                                   2864 ;------------------------------------------------------------
                                   2865 ;	appFHSSNIC.c:519: void t3IntHandler(void) __interrupt T3_VECTOR
                                   2866 ;	-----------------------------------------
                                   2867 ;	 function t3IntHandler
                                   2868 ;	-----------------------------------------
      000883                       2869 _t3IntHandler:
                                   2870 ;	appFHSSNIC.c:523: }
      000883 32               [24] 2871 	reti
                                   2872 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2873 ;	eliminated unneeded push/pop psw
                                   2874 ;	eliminated unneeded push/pop dpl
                                   2875 ;	eliminated unneeded push/pop dph
                                   2876 ;	eliminated unneeded push/pop b
                                   2877 ;	eliminated unneeded push/pop acc
                                   2878 ;------------------------------------------------------------
                                   2879 ;Allocation info for local variables in function 'init_FHSS'
                                   2880 ;------------------------------------------------------------
                                   2881 ;	appFHSSNIC.c:525: void init_FHSS(void)
                                   2882 ;	-----------------------------------------
                                   2883 ;	 function init_FHSS
                                   2884 ;	-----------------------------------------
      000884                       2885 _init_FHSS:
                                   2886 ;	appFHSSNIC.c:527: macdata.mac_state = 0;
      000884 90r00r00         [24] 2887 	mov	dptr,#_macdata
      000887 E4               [12] 2888 	clr	a
      000888 F0               [24] 2889 	movx	@dptr,a
                                   2890 ;	appFHSSNIC.c:528: macdata.txMsgIdx = 0;
      000889 90r00r11         [24] 2891 	mov	dptr,#(_macdata + 0x0011)
      00088C F0               [24] 2892 	movx	@dptr,a
                                   2893 ;	appFHSSNIC.c:529: macdata.txMsgIdxDone = 0;
      00088D 90r00r12         [24] 2894 	mov	dptr,#(_macdata + 0x0012)
      000890 F0               [24] 2895 	movx	@dptr,a
                                   2896 ;	appFHSSNIC.c:530: macdata.curChanIdx = 0;
      000891 90r00r09         [24] 2897 	mov	dptr,#(_macdata + 0x0009)
      000894 F0               [24] 2898 	movx	@dptr,a
      000895 A3               [24] 2899 	inc	dptr
      000896 F0               [24] 2900 	movx	@dptr,a
                                   2901 ;	appFHSSNIC.c:531: macdata.NumChannels = DEFAULT_NUM_CHANS;
      000897 90r00r05         [24] 2902 	mov	dptr,#(_macdata + 0x0005)
      00089A 74 53            [12] 2903 	mov	a,#0x53
      00089C F0               [24] 2904 	movx	@dptr,a
      00089D E4               [12] 2905 	clr	a
      00089E A3               [24] 2906 	inc	dptr
      00089F F0               [24] 2907 	movx	@dptr,a
                                   2908 ;	appFHSSNIC.c:532: macdata.NumChannelHops = DEFAULT_NUM_CHANHOPS;
      0008A0 90r00r07         [24] 2909 	mov	dptr,#(_macdata + 0x0007)
      0008A3 74 53            [12] 2910 	mov	a,#0x53
      0008A5 F0               [24] 2911 	movx	@dptr,a
      0008A6 E4               [12] 2912 	clr	a
      0008A7 A3               [24] 2913 	inc	dptr
      0008A8 F0               [24] 2914 	movx	@dptr,a
                                   2915 ;	appFHSSNIC.c:533: macdata.tLastHop = 0;
      0008A9 90r00r0D         [24] 2916 	mov	dptr,#(_macdata + 0x000d)
      0008AC F0               [24] 2917 	movx	@dptr,a
      0008AD A3               [24] 2918 	inc	dptr
      0008AE F0               [24] 2919 	movx	@dptr,a
                                   2920 ;	appFHSSNIC.c:534: macdata.tLastStateChange = 0;
      0008AF 90r00r0B         [24] 2921 	mov	dptr,#(_macdata + 0x000b)
      0008B2 F0               [24] 2922 	movx	@dptr,a
      0008B3 A3               [24] 2923 	inc	dptr
      0008B4 F0               [24] 2924 	movx	@dptr,a
                                   2925 ;	appFHSSNIC.c:535: macdata.MAC_threshold = 6;
      0008B5 90r00r01         [24] 2926 	mov	dptr,#(_macdata + 0x0001)
      0008B8 74 06            [12] 2927 	mov	a,#0x06
      0008BA F0               [24] 2928 	movx	@dptr,a
      0008BB E4               [12] 2929 	clr	a
      0008BC A3               [24] 2930 	inc	dptr
      0008BD F0               [24] 2931 	movx	@dptr,a
                                   2932 ;	appFHSSNIC.c:536: macdata.MAC_timer = 0;
      0008BE 90r00r03         [24] 2933 	mov	dptr,#(_macdata + 0x0003)
      0008C1 F0               [24] 2934 	movx	@dptr,a
      0008C2 A3               [24] 2935 	inc	dptr
      0008C3 F0               [24] 2936 	movx	@dptr,a
                                   2937 ;	appFHSSNIC.c:537: macdata.desperatelySeeking = 0;
      0008C4 90r00r0F         [24] 2938 	mov	dptr,#(_macdata + 0x000f)
      0008C7 F0               [24] 2939 	movx	@dptr,a
      0008C8 A3               [24] 2940 	inc	dptr
      0008C9 F0               [24] 2941 	movx	@dptr,a
                                   2942 ;	appFHSSNIC.c:538: macdata.synched_chans = 0;
      0008CA 90r00r13         [24] 2943 	mov	dptr,#(_macdata + 0x0013)
      0008CD F0               [24] 2944 	movx	@dptr,a
      0008CE A3               [24] 2945 	inc	dptr
      0008CF F0               [24] 2946 	movx	@dptr,a
                                   2947 ;	appFHSSNIC.c:540: MAC_initChannels();
      0008D0 12r00r2F         [24] 2948 	lcall	_MAC_initChannels
                                   2949 ;	appFHSSNIC.c:542: macdata.mac_state = MAC_STATE_NONHOPPING;   // this is basic NIC functionality
      0008D3 90r00r00         [24] 2950 	mov	dptr,#_macdata
      0008D6 E4               [12] 2951 	clr	a
      0008D7 F0               [24] 2952 	movx	@dptr,a
                                   2953 ;	appFHSSNIC.c:552: T2PR = 0xdc;        
      0008D8 75 9D DC         [24] 2954 	mov	_T2PR,#0xDC
                                   2955 ;	appFHSSNIC.c:553: T2CTL |= T2CTL_TIP_64;  // 64, 128, 256, 1024
      0008DB 85 9E 9E         [24] 2956 	mov	_T2CTL,_T2CTL
                                   2957 ;	appFHSSNIC.c:587: T2CTL |= T2CTL_TIG;
      0008DE 43 9E 04         [24] 2958 	orl	_T2CTL,#0x04
                                   2959 ;	appFHSSNIC.c:593: T3CTL |= T3CTL_START;
      0008E1 43 CB 10         [24] 2960 	orl	_T3CTL,#0x10
      0008E4 22               [24] 2961 	ret
                                   2962 ;------------------------------------------------------------
                                   2963 ;Allocation info for local variables in function 'init_MAC'
                                   2964 ;------------------------------------------------------------
                                   2965 ;	appFHSSNIC.c:597: void init_MAC(void)
                                   2966 ;	-----------------------------------------
                                   2967 ;	 function init_MAC
                                   2968 ;	-----------------------------------------
      0008E5                       2969 _init_MAC:
                                   2970 ;	appFHSSNIC.c:599: init_FHSS();
      0008E5 02r08r84         [24] 2971 	ljmp	_init_FHSS
                                   2972 ;------------------------------------------------------------
                                   2973 ;Allocation info for local variables in function 'appMainInit'
                                   2974 ;------------------------------------------------------------
                                   2975 ;	appFHSSNIC.c:610: void appMainInit(void)
                                   2976 ;	-----------------------------------------
                                   2977 ;	 function appMainInit
                                   2978 ;	-----------------------------------------
      0008E8                       2979 _appMainInit:
                                   2980 ;	appFHSSNIC.c:613: registerCb_ep5( appHandleEP5 );
      0008E8 90r0Dr0C         [24] 2981 	mov	dptr,#_appHandleEP5
      0008EB 12r00r00         [24] 2982 	lcall	_registerCb_ep5
                                   2983 ;	appFHSSNIC.c:615: clock = 0;
      0008EE 90r00r00         [24] 2984 	mov	dptr,#_clock
      0008F1 E4               [12] 2985 	clr	a
      0008F2 F0               [24] 2986 	movx	@dptr,a
      0008F3 A3               [24] 2987 	inc	dptr
      0008F4 F0               [24] 2988 	movx	@dptr,a
      0008F5 A3               [24] 2989 	inc	dptr
      0008F6 F0               [24] 2990 	movx	@dptr,a
      0008F7 A3               [24] 2991 	inc	dptr
      0008F8 F0               [24] 2992 	movx	@dptr,a
                                   2993 ;	appFHSSNIC.c:617: init_MAC();
      0008F9 12r08rE5         [24] 2994 	lcall	_init_MAC
                                   2995 ;	appFHSSNIC.c:619: processbuffer = 0;
      0008FC 90r05r83         [24] 2996 	mov	dptr,#_processbuffer
      0008FF E4               [12] 2997 	clr	a
      000900 F0               [24] 2998 	movx	@dptr,a
                                   2999 ;	appFHSSNIC.c:620: chan_table = rfrxbuf[0];
      000901 90r05r84         [24] 3000 	mov	dptr,#_chan_table
      000904 74r00            [12] 3001 	mov	a,#_rfrxbuf
      000906 F0               [24] 3002 	movx	@dptr,a
      000907 74s00            [12] 3003 	mov	a,#(_rfrxbuf >> 8)
      000909 A3               [24] 3004 	inc	dptr
      00090A F0               [24] 3005 	movx	@dptr,a
      00090B 22               [24] 3006 	ret
                                   3007 ;------------------------------------------------------------
                                   3008 ;Allocation info for local variables in function 'appMainLoop'
                                   3009 ;------------------------------------------------------------
                                   3010 ;	appFHSSNIC.c:626: void appMainLoop(void)
                                   3011 ;	-----------------------------------------
                                   3012 ;	 function appMainLoop
                                   3013 ;	-----------------------------------------
      00090C                       3014 _appMainLoop:
                                   3015 ;	appFHSSNIC.c:629: switch  (macdata.mac_state)
      00090C 90r00r00         [24] 3016 	mov	dptr,#_macdata
      00090F E0               [24] 3017 	movx	a,@dptr
      000910 FF               [12] 3018 	mov	r7,a
      000911 BF 00 03         [24] 3019 	cjne	r7,#0x00,00271$
      000914 02r0Cr41         [24] 3020 	ljmp	00154$
      000917                       3021 00271$:
      000917 BF 01 03         [24] 3022 	cjne	r7,#0x01,00272$
      00091A 02r0Br12         [24] 3023 	ljmp	00139$
      00091D                       3024 00272$:
      00091D BF 02 03         [24] 3025 	cjne	r7,#0x02,00273$
      000920 02r0Ar10         [24] 3026 	ljmp	00129$
      000923                       3027 00273$:
      000923 BF 03 03         [24] 3028 	cjne	r7,#0x03,00274$
      000926 02r0Cr41         [24] 3029 	ljmp	00154$
      000929                       3030 00274$:
      000929 BF 04 03         [24] 3031 	cjne	r7,#0x04,00275$
      00092C 02r0Cr41         [24] 3032 	ljmp	00154$
      00092F                       3033 00275$:
      00092F BF 05 03         [24] 3034 	cjne	r7,#0x05,00276$
      000932 02r0Cr22         [24] 3035 	ljmp	00149$
      000935                       3036 00276$:
      000935 BF 06 01         [24] 3037 	cjne	r7,#0x06,00277$
      000938 22               [24] 3038 	ret
      000939                       3039 00277$:
      000939 BF 40 02         [24] 3040 	cjne	r7,#0x40,00278$
      00093C 80 06            [24] 3041 	sjmp	00106$
      00093E                       3042 00278$:
      00093E BF 41 02         [24] 3043 	cjne	r7,#0x41,00279$
      000941 80 42            [24] 3044 	sjmp	00109$
      000943                       3045 00279$:
      000943 22               [24] 3046 	ret
                                   3047 ;	appFHSSNIC.c:636: RFOFF;
      000944                       3048 00106$:
      000944 75 E1 04         [24] 3049 	mov	_RFST,#0x04
      000947                       3050 00103$:
      000947 90 DF 3B         [24] 3051 	mov	dptr,#_MARCSTATE
      00094A E0               [24] 3052 	movx	a,@dptr
      00094B FF               [12] 3053 	mov	r7,a
      00094C BF 01 F8         [24] 3054 	cjne	r7,#0x01,00103$
                                   3055 ;	appFHSSNIC.c:637: PKTCTRL1 =  0xE5;       // highest PQT, address check, append_status
      00094F 90 DF 03         [24] 3056 	mov	dptr,#_PKTCTRL1
      000952 74 E5            [12] 3057 	mov	a,#0xE5
      000954 F0               [24] 3058 	movx	@dptr,a
                                   3059 ;	appFHSSNIC.c:638: PKTCTRL0 =  0x04;       // crc enabled      ( we really don't want any packets coming our way :)
      000955 90 DF 04         [24] 3060 	mov	dptr,#_PKTCTRL0
      000958 74 04            [12] 3061 	mov	a,#0x04
      00095A F0               [24] 3062 	movx	@dptr,a
                                   3063 ;	appFHSSNIC.c:639: FSCTRL1 =   0x12;       // freq if
      00095B 90 DF 07         [24] 3064 	mov	dptr,#_FSCTRL1
      00095E 74 12            [12] 3065 	mov	a,#0x12
      000960 F0               [24] 3066 	movx	@dptr,a
                                   3067 ;	appFHSSNIC.c:640: FSCTRL0 =   0x00;
      000961 90 DF 08         [24] 3068 	mov	dptr,#_FSCTRL0
      000964 E4               [12] 3069 	clr	a
      000965 F0               [24] 3070 	movx	@dptr,a
                                   3071 ;	appFHSSNIC.c:641: MCSM0 =     0x10;       // autocal/no auto-cal....  hmmm...
      000966 90 DF 14         [24] 3072 	mov	dptr,#_MCSM0
      000969 74 10            [12] 3073 	mov	a,#0x10
      00096B F0               [24] 3074 	movx	@dptr,a
                                   3075 ;	appFHSSNIC.c:642: AGCCTRL2 |= AGCCTRL2_MAX_DVGA_GAIN;     // disable 3 highest gain settings
      00096C 90 DF 17         [24] 3076 	mov	dptr,#_AGCCTRL2
      00096F E0               [24] 3077 	movx	a,@dptr
      000970 FF               [12] 3078 	mov	r7,a
      000971 74 C0            [12] 3079 	mov	a,#0xC0
      000973 4F               [12] 3080 	orl	a,r7
      000974 F0               [24] 3081 	movx	@dptr,a
                                   3082 ;	appFHSSNIC.c:643: macdata.mac_state = MAC_STATE_SPECAN;
      000975 90r00r00         [24] 3083 	mov	dptr,#_macdata
      000978 74 41            [12] 3084 	mov	a,#0x41
      00097A F0               [24] 3085 	movx	@dptr,a
                                   3086 ;	appFHSSNIC.c:645: chan_table = rfrxbuf[0];
      00097B 90r05r84         [24] 3087 	mov	dptr,#_chan_table
      00097E 74r00            [12] 3088 	mov	a,#_rfrxbuf
      000980 F0               [24] 3089 	movx	@dptr,a
      000981 74s00            [12] 3090 	mov	a,#(_rfrxbuf >> 8)
      000983 A3               [24] 3091 	inc	dptr
      000984 F0               [24] 3092 	movx	@dptr,a
                                   3093 ;	appFHSSNIC.c:647: case MAC_STATE_SPECAN:
      000985                       3094 00109$:
                                   3095 ;	appFHSSNIC.c:648: for (processbuffer = 0; processbuffer < macdata.synched_chans; processbuffer++)
      000985 90r05r83         [24] 3096 	mov	dptr,#_processbuffer
      000988 E4               [12] 3097 	clr	a
      000989 F0               [24] 3098 	movx	@dptr,a
      00098A                       3099 00166$:
      00098A 90r00r13         [24] 3100 	mov	dptr,#(_macdata + 0x0013)
      00098D E0               [24] 3101 	movx	a,@dptr
      00098E FE               [12] 3102 	mov	r6,a
      00098F A3               [24] 3103 	inc	dptr
      000990 E0               [24] 3104 	movx	a,@dptr
      000991 FF               [12] 3105 	mov	r7,a
      000992 90r05r83         [24] 3106 	mov	dptr,#_processbuffer
      000995 E0               [24] 3107 	movx	a,@dptr
      000996 FD               [12] 3108 	mov	r5,a
      000997 FB               [12] 3109 	mov	r3,a
      000998 7C 00            [12] 3110 	mov	r4,#0x00
      00099A C3               [12] 3111 	clr	c
      00099B EB               [12] 3112 	mov	a,r3
      00099C 9E               [12] 3113 	subb	a,r6
      00099D EC               [12] 3114 	mov	a,r4
      00099E 9F               [12] 3115 	subb	a,r7
      00099F 50 45            [24] 3116 	jnc	00126$
                                   3117 ;	appFHSSNIC.c:651: CHANNR = processbuffer;        // may not be the fastest, but otherwise we have to store FSCAL data for each channel
      0009A1 90 DF 06         [24] 3118 	mov	dptr,#_CHANNR
      0009A4 ED               [12] 3119 	mov	a,r5
      0009A5 F0               [24] 3120 	movx	@dptr,a
                                   3121 ;	appFHSSNIC.c:652: RFOFF;
      0009A6 75 E1 04         [24] 3122 	mov	_RFST,#0x04
      0009A9                       3123 00110$:
      0009A9 90 DF 3B         [24] 3124 	mov	dptr,#_MARCSTATE
      0009AC E0               [24] 3125 	movx	a,@dptr
      0009AD FF               [12] 3126 	mov	r7,a
      0009AE BF 01 F8         [24] 3127 	cjne	r7,#0x01,00110$
                                   3128 ;	appFHSSNIC.c:653: RFRX;
      0009B1 75 E1 02         [24] 3129 	mov	_RFST,#0x02
      0009B4                       3130 00116$:
      0009B4 90 DF 3B         [24] 3131 	mov	dptr,#_MARCSTATE
      0009B7 E0               [24] 3132 	movx	a,@dptr
      0009B8 FF               [12] 3133 	mov	r7,a
      0009B9 BF 0D F8         [24] 3134 	cjne	r7,#0x0D,00116$
                                   3135 ;	appFHSSNIC.c:654: sleepMillis(2);
      0009BC 90 00 02         [24] 3136 	mov	dptr,#0x0002
      0009BF 12r00r00         [24] 3137 	lcall	_sleepMillis
                                   3138 ;	appFHSSNIC.c:657: chan_table[processbuffer] = (RSSI);
      0009C2 90r05r84         [24] 3139 	mov	dptr,#_chan_table
      0009C5 E0               [24] 3140 	movx	a,@dptr
      0009C6 FE               [12] 3141 	mov	r6,a
      0009C7 A3               [24] 3142 	inc	dptr
      0009C8 E0               [24] 3143 	movx	a,@dptr
      0009C9 FF               [12] 3144 	mov	r7,a
      0009CA 90r05r83         [24] 3145 	mov	dptr,#_processbuffer
      0009CD E0               [24] 3146 	movx	a,@dptr
      0009CE 2E               [12] 3147 	add	a,r6
      0009CF FE               [12] 3148 	mov	r6,a
      0009D0 E4               [12] 3149 	clr	a
      0009D1 3F               [12] 3150 	addc	a,r7
      0009D2 FF               [12] 3151 	mov	r7,a
      0009D3 90 DF 3A         [24] 3152 	mov	dptr,#_RSSI
      0009D6 E0               [24] 3153 	movx	a,@dptr
      0009D7 FD               [12] 3154 	mov	r5,a
      0009D8 8E 82            [24] 3155 	mov	dpl,r6
      0009DA 8F 83            [24] 3156 	mov	dph,r7
      0009DC F0               [24] 3157 	movx	@dptr,a
                                   3158 ;	appFHSSNIC.c:648: for (processbuffer = 0; processbuffer < macdata.synched_chans; processbuffer++)
      0009DD 90r05r83         [24] 3159 	mov	dptr,#_processbuffer
      0009E0 E0               [24] 3160 	movx	a,@dptr
      0009E1 24 01            [12] 3161 	add	a,#0x01
      0009E3 F0               [24] 3162 	movx	@dptr,a
                                   3163 ;	appFHSSNIC.c:661: RFOFF;
      0009E4 80 A4            [24] 3164 	sjmp	00166$
      0009E6                       3165 00126$:
      0009E6 75 E1 04         [24] 3166 	mov	_RFST,#0x04
      0009E9                       3167 00123$:
      0009E9 90 DF 3B         [24] 3168 	mov	dptr,#_MARCSTATE
      0009EC E0               [24] 3169 	movx	a,@dptr
      0009ED FF               [12] 3170 	mov	r7,a
      0009EE BF 01 F8         [24] 3171 	cjne	r7,#0x01,00123$
                                   3172 ;	appFHSSNIC.c:662: txdata( APP_SPECAN, SPECAN_QUEUE, (u8)macdata.synched_chans, (__xdata u8*)&chan_table[0] );
      0009F1 90r00r13         [24] 3173 	mov	dptr,#(_macdata + 0x0013)
      0009F4 E0               [24] 3174 	movx	a,@dptr
      0009F5 FE               [12] 3175 	mov	r6,a
      0009F6 A3               [24] 3176 	inc	dptr
      0009F7 E0               [24] 3177 	movx	a,@dptr
      0009F8 8E*00            [24] 3178 	mov	_txdata_PARM_3,r6
      0009FA 75*01 00         [24] 3179 	mov	(_txdata_PARM_3 + 1),#0x00
      0009FD 90r05r84         [24] 3180 	mov	dptr,#_chan_table
      000A00 E0               [24] 3181 	movx	a,@dptr
      000A01 F5*00            [12] 3182 	mov	_txdata_PARM_4,a
      000A03 A3               [24] 3183 	inc	dptr
      000A04 E0               [24] 3184 	movx	a,@dptr
      000A05 F5*01            [12] 3185 	mov	(_txdata_PARM_4 + 1),a
      000A07 75*00 01         [24] 3186 	mov	_txdata_PARM_2,#0x01
      000A0A 75 82 43         [24] 3187 	mov	dpl,#0x43
                                   3188 ;	appFHSSNIC.c:663: break;
      000A0D 02r00r00         [24] 3189 	ljmp	_txdata
                                   3190 ;	appFHSSNIC.c:665: case MAC_STATE_SYNCHING:
      000A10                       3191 00129$:
                                   3192 ;	appFHSSNIC.c:668: if (rfif)
      000A10 E5*00            [12] 3193 	mov	a,_rfif
      000A12 70 03            [24] 3194 	jnz	00289$
      000A14 02r0Br00         [24] 3195 	ljmp	00138$
      000A17                       3196 00289$:
                                   3197 ;	appFHSSNIC.c:670: lastCode[0] = 0xd;
      000A17 90r00r00         [24] 3198 	mov	dptr,#_lastCode
      000A1A 74 0D            [12] 3199 	mov	a,#0x0D
      000A1C F0               [24] 3200 	movx	@dptr,a
                                   3201 ;	appFHSSNIC.c:671: IEN2 &= ~IEN2_RFIE;   // FIXME: is this ok?
      000A1D AF 9A            [24] 3202 	mov	r7,_IEN2
      000A1F 74 FE            [12] 3203 	mov	a,#0xFE
      000A21 5F               [12] 3204 	anl	a,r7
      000A22 F5 9A            [12] 3205 	mov	_IEN2,a
                                   3206 ;	appFHSSNIC.c:673: if(rfif & RFIF_IRQ_DONE)
      000A24 E5*00            [12] 3207 	mov	a,_rfif
      000A26 20 E4 03         [24] 3208 	jb	acc.4,00290$
      000A29 02r0Br00         [24] 3209 	ljmp	00138$
      000A2C                       3210 00290$:
                                   3211 ;	appFHSSNIC.c:677: macdata.mac_state = MAC_STATE_SYNCHED;
      000A2C 90r00r00         [24] 3212 	mov	dptr,#_macdata
      000A2F 74 03            [12] 3213 	mov	a,#0x03
      000A31 F0               [24] 3214 	movx	@dptr,a
                                   3215 ;	appFHSSNIC.c:678: begin_hopping((u8)(rf_tLastRecv & 0xff));       // synching happens within
      000A32 90r00r00         [24] 3216 	mov	dptr,#_rf_tLastRecv
      000A35 E0               [24] 3217 	movx	a,@dptr
      000A36 FE               [12] 3218 	mov	r6,a
      000A37 A3               [24] 3219 	inc	dptr
      000A38 E0               [24] 3220 	movx	a,@dptr
      000A39 8E 82            [24] 3221 	mov	dpl,r6
      000A3B 12r00r81         [24] 3222 	lcall	_begin_hopping
                                   3223 ;	appFHSSNIC.c:680: debug("network packet(sync)");
      000A3E 90r00rEF         [24] 3224 	mov	dptr,#___str_7
      000A41 12r00r00         [24] 3225 	lcall	_debug
                                   3226 ;	appFHSSNIC.c:681: debughex16((u16)rf_tLastRecv);
      000A44 90r00r00         [24] 3227 	mov	dptr,#_rf_tLastRecv
      000A47 E0               [24] 3228 	movx	a,@dptr
      000A48 FE               [12] 3229 	mov	r6,a
      000A49 A3               [24] 3230 	inc	dptr
      000A4A E0               [24] 3231 	movx	a,@dptr
      000A4B FF               [12] 3232 	mov	r7,a
      000A4C 8E 82            [24] 3233 	mov	dpl,r6
      000A4E 8F 83            [24] 3234 	mov	dph,r7
      000A50 12r00r00         [24] 3235 	lcall	_debughex16
                                   3236 ;	appFHSSNIC.c:682: debug((__code u8*)&rfrxbuf[rfRxCurrentBuffer][0]);
      000A53 90r00r00         [24] 3237 	mov	dptr,#_rfRxCurrentBuffer
      000A56 E0               [24] 3238 	movx	a,@dptr
      000A57 25 E0            [12] 3239 	add	a,acc
      000A59 FE               [12] 3240 	mov	r6,a
      000A5A E4               [12] 3241 	clr	a
      000A5B 24r00            [12] 3242 	add	a,#_rfrxbuf
      000A5D FF               [12] 3243 	mov	r7,a
      000A5E EE               [12] 3244 	mov	a,r6
      000A5F 34s00            [12] 3245 	addc	a,#(_rfrxbuf >> 8)
      000A61 FE               [12] 3246 	mov	r6,a
      000A62 8F 82            [24] 3247 	mov	dpl,r7
      000A64 8E 83            [24] 3248 	mov	dph,r6
      000A66 12r00r00         [24] 3249 	lcall	_debug
                                   3250 ;	appFHSSNIC.c:685: processbuffer = !rfRxCurrentBuffer;
      000A69 90r00r00         [24] 3251 	mov	dptr,#_rfRxCurrentBuffer
      000A6C E0               [24] 3252 	movx	a,@dptr
      000A6D FF               [12] 3253 	mov	r7,a
      000A6E B4 01 00         [24] 3254 	cjne	a,#0x01,00291$
      000A71                       3255 00291$:
      000A71 E4               [12] 3256 	clr	a
      000A72 33               [12] 3257 	rlc	a
      000A73 FF               [12] 3258 	mov	r7,a
      000A74 90r05r83         [24] 3259 	mov	dptr,#_processbuffer
      000A77 F0               [24] 3260 	movx	@dptr,a
                                   3261 ;	appFHSSNIC.c:686: if(rfRxProcessed[processbuffer] == RX_UNPROCESSED)
      000A78 EF               [12] 3262 	mov	a,r7
      000A79 24r00            [12] 3263 	add	a,#_rfRxProcessed
      000A7B FD               [12] 3264 	mov	r5,a
      000A7C E4               [12] 3265 	clr	a
      000A7D 34s00            [12] 3266 	addc	a,#(_rfRxProcessed >> 8)
      000A7F FE               [12] 3267 	mov	r6,a
      000A80 8D 82            [24] 3268 	mov	dpl,r5
      000A82 8E 83            [24] 3269 	mov	dph,r6
      000A84 E0               [24] 3270 	movx	a,@dptr
      000A85 70 72            [24] 3271 	jnz	00134$
                                   3272 ;	appFHSSNIC.c:689: if (PKTCTRL0&1)     // variable length packets have a leading "length" byte, let's skip it
      000A87 90 DF 04         [24] 3273 	mov	dptr,#_PKTCTRL0
      000A8A E0               [24] 3274 	movx	a,@dptr
      000A8B FE               [12] 3275 	mov	r6,a
      000A8C 30 E0 37         [24] 3276 	jnb	acc.0,00131$
                                   3277 ;	appFHSSNIC.c:690: txdata(APP_NIC, NIC_RECV, (u8)rfrxbuf[processbuffer][0], (u8*)&rfrxbuf[processbuffer][1]);
      000A8F 8F 06            [24] 3278 	mov	ar6,r7
      000A91 EE               [12] 3279 	mov	a,r6
      000A92 2E               [12] 3280 	add	a,r6
      000A93 FD               [12] 3281 	mov	r5,a
      000A94 E4               [12] 3282 	clr	a
      000A95 24r00            [12] 3283 	add	a,#_rfrxbuf
      000A97 F5 82            [12] 3284 	mov	dpl,a
      000A99 ED               [12] 3285 	mov	a,r5
      000A9A 34s00            [12] 3286 	addc	a,#(_rfrxbuf >> 8)
      000A9C F5 83            [12] 3287 	mov	dph,a
      000A9E E0               [24] 3288 	movx	a,@dptr
      000A9F FE               [12] 3289 	mov	r6,a
      000AA0 8E*00            [24] 3290 	mov	_txdata_PARM_3,r6
      000AA2 75*01 00         [24] 3291 	mov	(_txdata_PARM_3 + 1),#0x00
      000AA5 8F 06            [24] 3292 	mov	ar6,r7
      000AA7 EE               [12] 3293 	mov	a,r6
      000AA8 2E               [12] 3294 	add	a,r6
      000AA9 FD               [12] 3295 	mov	r5,a
      000AAA E4               [12] 3296 	clr	a
      000AAB 24r00            [12] 3297 	add	a,#_rfrxbuf
      000AAD FE               [12] 3298 	mov	r6,a
      000AAE ED               [12] 3299 	mov	a,r5
      000AAF 34s00            [12] 3300 	addc	a,#(_rfrxbuf >> 8)
      000AB1 FD               [12] 3301 	mov	r5,a
      000AB2 74 01            [12] 3302 	mov	a,#0x01
      000AB4 2E               [12] 3303 	add	a,r6
      000AB5 F5*00            [12] 3304 	mov	_txdata_PARM_4,a
      000AB7 E4               [12] 3305 	clr	a
      000AB8 3D               [12] 3306 	addc	a,r5
      000AB9 F5*01            [12] 3307 	mov	(_txdata_PARM_4 + 1),a
      000ABB 75*00 01         [24] 3308 	mov	_txdata_PARM_2,#0x01
      000ABE 75 82 42         [24] 3309 	mov	dpl,#0x42
      000AC1 12r00r00         [24] 3310 	lcall	_txdata
      000AC4 80 22            [24] 3311 	sjmp	00132$
      000AC6                       3312 00131$:
                                   3313 ;	appFHSSNIC.c:692: txdata(APP_NIC, NIC_RECV, PKTLEN, (u8*)&rfrxbuf[processbuffer]);
      000AC6 90 DF 02         [24] 3314 	mov	dptr,#_PKTLEN
      000AC9 E0               [24] 3315 	movx	a,@dptr
      000ACA FE               [12] 3316 	mov	r6,a
      000ACB 8E*00            [24] 3317 	mov	_txdata_PARM_3,r6
      000ACD E4               [12] 3318 	clr	a
      000ACE F5*01            [12] 3319 	mov	(_txdata_PARM_3 + 1),a
      000AD0 EF               [12] 3320 	mov	a,r7
      000AD1 2F               [12] 3321 	add	a,r7
      000AD2 FE               [12] 3322 	mov	r6,a
      000AD3 E4               [12] 3323 	clr	a
      000AD4 24r00            [12] 3324 	add	a,#_rfrxbuf
      000AD6 FF               [12] 3325 	mov	r7,a
      000AD7 EE               [12] 3326 	mov	a,r6
      000AD8 34s00            [12] 3327 	addc	a,#(_rfrxbuf >> 8)
      000ADA FE               [12] 3328 	mov	r6,a
      000ADB 8F*00            [24] 3329 	mov	_txdata_PARM_4,r7
      000ADD 8E*01            [24] 3330 	mov	(_txdata_PARM_4 + 1),r6
      000ADF 75*00 01         [24] 3331 	mov	_txdata_PARM_2,#0x01
      000AE2 75 82 42         [24] 3332 	mov	dpl,#0x42
      000AE5 12r00r00         [24] 3333 	lcall	_txdata
      000AE8                       3334 00132$:
                                   3335 ;	appFHSSNIC.c:695: rfRxProcessed[processbuffer] = RX_PROCESSED;
      000AE8 90r05r83         [24] 3336 	mov	dptr,#_processbuffer
      000AEB E0               [24] 3337 	movx	a,@dptr
      000AEC FF               [12] 3338 	mov	r7,a
      000AED 24r00            [12] 3339 	add	a,#_rfRxProcessed
      000AEF F5 82            [12] 3340 	mov	dpl,a
      000AF1 E4               [12] 3341 	clr	a
      000AF2 34s00            [12] 3342 	addc	a,#(_rfRxProcessed >> 8)
      000AF4 F5 83            [12] 3343 	mov	dph,a
      000AF6 74 01            [12] 3344 	mov	a,#0x01
      000AF8 F0               [24] 3345 	movx	@dptr,a
      000AF9                       3346 00134$:
                                   3347 ;	appFHSSNIC.c:697: rfif &= ~RFIF_IRQ_DONE;
      000AF9 AF*00            [24] 3348 	mov	r7,_rfif
      000AFB 74 EF            [12] 3349 	mov	a,#0xEF
      000AFD 5F               [12] 3350 	anl	a,r7
      000AFE F5*00            [12] 3351 	mov	_rfif,a
      000B00                       3352 00138$:
                                   3353 ;	appFHSSNIC.c:701: __critical { rfif = 0; }
      000B00 D2*00            [12] 3354 	setb	_appMainLoop_sloc0_1_0
      000B02 10 AF 02         [24] 3355 	jbc	ea,00294$
      000B05 C2*00            [12] 3356 	clr	_appMainLoop_sloc0_1_0
      000B07                       3357 00294$:
      000B07 75*00 00         [24] 3358 	mov	_rfif,#0x00
      000B0A A2*00            [12] 3359 	mov	c,_appMainLoop_sloc0_1_0
      000B0C 92 AF            [24] 3360 	mov	ea,c
                                   3361 ;	appFHSSNIC.c:702: IEN2 |= IEN2_RFIE;
      000B0E 43 9A 01         [24] 3362 	orl	_IEN2,#0x01
                                   3363 ;	appFHSSNIC.c:703: break;
      000B11 22               [24] 3364 	ret
                                   3365 ;	appFHSSNIC.c:705: case MAC_STATE_DISCOVERY:
      000B12                       3366 00139$:
                                   3367 ;	appFHSSNIC.c:708: if (rfif)
      000B12 E5*00            [12] 3368 	mov	a,_rfif
      000B14 70 03            [24] 3369 	jnz	00295$
      000B16 02r0Cr10         [24] 3370 	ljmp	00148$
      000B19                       3371 00295$:
                                   3372 ;	appFHSSNIC.c:710: lastCode[0] = 0xd;
      000B19 90r00r00         [24] 3373 	mov	dptr,#_lastCode
      000B1C 74 0D            [12] 3374 	mov	a,#0x0D
      000B1E F0               [24] 3375 	movx	@dptr,a
                                   3376 ;	appFHSSNIC.c:711: IEN2 &= ~IEN2_RFIE;
      000B1F AF 9A            [24] 3377 	mov	r7,_IEN2
      000B21 74 FE            [12] 3378 	mov	a,#0xFE
      000B23 5F               [12] 3379 	anl	a,r7
      000B24 F5 9A            [12] 3380 	mov	_IEN2,a
                                   3381 ;	appFHSSNIC.c:713: if(rfif & RFIF_IRQ_DONE)
      000B26 E5*00            [12] 3382 	mov	a,_rfif
      000B28 20 E4 03         [24] 3383 	jb	acc.4,00296$
      000B2B 02r0Cr10         [24] 3384 	ljmp	00148$
      000B2E                       3385 00296$:
                                   3386 ;	appFHSSNIC.c:716: processbuffer = !rfRxCurrentBuffer;
      000B2E 90r00r00         [24] 3387 	mov	dptr,#_rfRxCurrentBuffer
      000B31 E0               [24] 3388 	movx	a,@dptr
      000B32 FF               [12] 3389 	mov	r7,a
      000B33 90r05r83         [24] 3390 	mov	dptr,#_processbuffer
      000B36 B4 01 00         [24] 3391 	cjne	a,#0x01,00297$
      000B39                       3392 00297$:
      000B39 E4               [12] 3393 	clr	a
      000B3A 33               [12] 3394 	rlc	a
      000B3B F0               [24] 3395 	movx	@dptr,a
                                   3396 ;	appFHSSNIC.c:717: debug("network packet(discovery)");
      000B3C 90r01r04         [24] 3397 	mov	dptr,#___str_8
      000B3F 12r00r00         [24] 3398 	lcall	_debug
                                   3399 ;	appFHSSNIC.c:718: debughex16((u16)rfrxbuf[processbuffer]);
      000B42 90r05r83         [24] 3400 	mov	dptr,#_processbuffer
      000B45 E0               [24] 3401 	movx	a,@dptr
      000B46 25 E0            [12] 3402 	add	a,acc
      000B48 FE               [12] 3403 	mov	r6,a
      000B49 E4               [12] 3404 	clr	a
      000B4A 24r00            [12] 3405 	add	a,#_rfrxbuf
      000B4C FF               [12] 3406 	mov	r7,a
      000B4D EE               [12] 3407 	mov	a,r6
      000B4E 34s00            [12] 3408 	addc	a,#(_rfrxbuf >> 8)
      000B50 FE               [12] 3409 	mov	r6,a
      000B51 8F 82            [24] 3410 	mov	dpl,r7
      000B53 8E 83            [24] 3411 	mov	dph,r6
      000B55 12r00r00         [24] 3412 	lcall	_debughex16
                                   3413 ;	appFHSSNIC.c:719: debug((__code u8*)&rfrxbuf[processbuffer][0]);
      000B58 90r05r83         [24] 3414 	mov	dptr,#_processbuffer
      000B5B E0               [24] 3415 	movx	a,@dptr
      000B5C 25 E0            [12] 3416 	add	a,acc
      000B5E FE               [12] 3417 	mov	r6,a
      000B5F E4               [12] 3418 	clr	a
      000B60 24r00            [12] 3419 	add	a,#_rfrxbuf
      000B62 FF               [12] 3420 	mov	r7,a
      000B63 EE               [12] 3421 	mov	a,r6
      000B64 34s00            [12] 3422 	addc	a,#(_rfrxbuf >> 8)
      000B66 FE               [12] 3423 	mov	r6,a
      000B67 8F 82            [24] 3424 	mov	dpl,r7
      000B69 8E 83            [24] 3425 	mov	dph,r6
      000B6B 12r00r00         [24] 3426 	lcall	_debug
                                   3427 ;	appFHSSNIC.c:722: processbuffer = !rfRxCurrentBuffer;
      000B6E 90r00r00         [24] 3428 	mov	dptr,#_rfRxCurrentBuffer
      000B71 E0               [24] 3429 	movx	a,@dptr
      000B72 FF               [12] 3430 	mov	r7,a
      000B73 B4 01 00         [24] 3431 	cjne	a,#0x01,00298$
      000B76                       3432 00298$:
      000B76 E4               [12] 3433 	clr	a
      000B77 33               [12] 3434 	rlc	a
      000B78 FF               [12] 3435 	mov	r7,a
      000B79 90r05r83         [24] 3436 	mov	dptr,#_processbuffer
      000B7C F0               [24] 3437 	movx	@dptr,a
                                   3438 ;	appFHSSNIC.c:723: if(rfRxProcessed[processbuffer] == RX_UNPROCESSED)
      000B7D EF               [12] 3439 	mov	a,r7
      000B7E 24r00            [12] 3440 	add	a,#_rfRxProcessed
      000B80 FD               [12] 3441 	mov	r5,a
      000B81 E4               [12] 3442 	clr	a
      000B82 34s00            [12] 3443 	addc	a,#(_rfRxProcessed >> 8)
      000B84 FE               [12] 3444 	mov	r6,a
      000B85 8D 82            [24] 3445 	mov	dpl,r5
      000B87 8E 83            [24] 3446 	mov	dph,r6
      000B89 E0               [24] 3447 	movx	a,@dptr
      000B8A 70 72            [24] 3448 	jnz	00144$
                                   3449 ;	appFHSSNIC.c:726: if (PKTCTRL0&1)     // variable length packets have a leading "length" byte, let's skip it
      000B8C 90 DF 04         [24] 3450 	mov	dptr,#_PKTCTRL0
      000B8F E0               [24] 3451 	movx	a,@dptr
      000B90 FE               [12] 3452 	mov	r6,a
      000B91 30 E0 37         [24] 3453 	jnb	acc.0,00141$
                                   3454 ;	appFHSSNIC.c:727: txdata(APP_NIC, NIC_RECV, (u8)rfrxbuf[processbuffer][0], (u8*)&rfrxbuf[processbuffer][1]);
      000B94 8F 06            [24] 3455 	mov	ar6,r7
      000B96 EE               [12] 3456 	mov	a,r6
      000B97 2E               [12] 3457 	add	a,r6
      000B98 FD               [12] 3458 	mov	r5,a
      000B99 E4               [12] 3459 	clr	a
      000B9A 24r00            [12] 3460 	add	a,#_rfrxbuf
      000B9C F5 82            [12] 3461 	mov	dpl,a
      000B9E ED               [12] 3462 	mov	a,r5
      000B9F 34s00            [12] 3463 	addc	a,#(_rfrxbuf >> 8)
      000BA1 F5 83            [12] 3464 	mov	dph,a
      000BA3 E0               [24] 3465 	movx	a,@dptr
      000BA4 FE               [12] 3466 	mov	r6,a
      000BA5 8E*00            [24] 3467 	mov	_txdata_PARM_3,r6
      000BA7 75*01 00         [24] 3468 	mov	(_txdata_PARM_3 + 1),#0x00
      000BAA 8F 06            [24] 3469 	mov	ar6,r7
      000BAC EE               [12] 3470 	mov	a,r6
      000BAD 2E               [12] 3471 	add	a,r6
      000BAE FD               [12] 3472 	mov	r5,a
      000BAF E4               [12] 3473 	clr	a
      000BB0 24r00            [12] 3474 	add	a,#_rfrxbuf
      000BB2 FE               [12] 3475 	mov	r6,a
      000BB3 ED               [12] 3476 	mov	a,r5
      000BB4 34s00            [12] 3477 	addc	a,#(_rfrxbuf >> 8)
      000BB6 FD               [12] 3478 	mov	r5,a
      000BB7 74 01            [12] 3479 	mov	a,#0x01
      000BB9 2E               [12] 3480 	add	a,r6
      000BBA F5*00            [12] 3481 	mov	_txdata_PARM_4,a
      000BBC E4               [12] 3482 	clr	a
      000BBD 3D               [12] 3483 	addc	a,r5
      000BBE F5*01            [12] 3484 	mov	(_txdata_PARM_4 + 1),a
      000BC0 75*00 01         [24] 3485 	mov	_txdata_PARM_2,#0x01
      000BC3 75 82 42         [24] 3486 	mov	dpl,#0x42
      000BC6 12r00r00         [24] 3487 	lcall	_txdata
      000BC9 80 22            [24] 3488 	sjmp	00142$
      000BCB                       3489 00141$:
                                   3490 ;	appFHSSNIC.c:729: txdata(APP_NIC, NIC_RECV, PKTLEN, (u8*)&rfrxbuf[processbuffer]);
      000BCB 90 DF 02         [24] 3491 	mov	dptr,#_PKTLEN
      000BCE E0               [24] 3492 	movx	a,@dptr
      000BCF FE               [12] 3493 	mov	r6,a
      000BD0 8E*00            [24] 3494 	mov	_txdata_PARM_3,r6
      000BD2 E4               [12] 3495 	clr	a
      000BD3 F5*01            [12] 3496 	mov	(_txdata_PARM_3 + 1),a
      000BD5 EF               [12] 3497 	mov	a,r7
      000BD6 2F               [12] 3498 	add	a,r7
      000BD7 FE               [12] 3499 	mov	r6,a
      000BD8 E4               [12] 3500 	clr	a
      000BD9 24r00            [12] 3501 	add	a,#_rfrxbuf
      000BDB FF               [12] 3502 	mov	r7,a
      000BDC EE               [12] 3503 	mov	a,r6
      000BDD 34s00            [12] 3504 	addc	a,#(_rfrxbuf >> 8)
      000BDF FE               [12] 3505 	mov	r6,a
      000BE0 8F*00            [24] 3506 	mov	_txdata_PARM_4,r7
      000BE2 8E*01            [24] 3507 	mov	(_txdata_PARM_4 + 1),r6
      000BE4 75*00 01         [24] 3508 	mov	_txdata_PARM_2,#0x01
      000BE7 75 82 42         [24] 3509 	mov	dpl,#0x42
      000BEA 12r00r00         [24] 3510 	lcall	_txdata
      000BED                       3511 00142$:
                                   3512 ;	appFHSSNIC.c:732: rfRxProcessed[processbuffer] = RX_PROCESSED;
      000BED 90r05r83         [24] 3513 	mov	dptr,#_processbuffer
      000BF0 E0               [24] 3514 	movx	a,@dptr
      000BF1 FF               [12] 3515 	mov	r7,a
      000BF2 24r00            [12] 3516 	add	a,#_rfRxProcessed
      000BF4 F5 82            [12] 3517 	mov	dpl,a
      000BF6 E4               [12] 3518 	clr	a
      000BF7 34s00            [12] 3519 	addc	a,#(_rfRxProcessed >> 8)
      000BF9 F5 83            [12] 3520 	mov	dph,a
      000BFB 74 01            [12] 3521 	mov	a,#0x01
      000BFD F0               [24] 3522 	movx	@dptr,a
      000BFE                       3523 00144$:
                                   3524 ;	appFHSSNIC.c:734: __critical { rfif &= ~RFIF_IRQ_DONE; }
      000BFE D2*00            [12] 3525 	setb	_appMainLoop_sloc0_1_0
      000C00 10 AF 02         [24] 3526 	jbc	ea,00301$
      000C03 C2*00            [12] 3527 	clr	_appMainLoop_sloc0_1_0
      000C05                       3528 00301$:
      000C05 AF*00            [24] 3529 	mov	r7,_rfif
      000C07 74 EF            [12] 3530 	mov	a,#0xEF
      000C09 5F               [12] 3531 	anl	a,r7
      000C0A F5*00            [12] 3532 	mov	_rfif,a
      000C0C A2*00            [12] 3533 	mov	c,_appMainLoop_sloc0_1_0
      000C0E 92 AF            [24] 3534 	mov	ea,c
      000C10                       3535 00148$:
                                   3536 ;	appFHSSNIC.c:738: __critical{ rfif = 0; }
      000C10 D2*00            [12] 3537 	setb	_appMainLoop_sloc0_1_0
      000C12 10 AF 02         [24] 3538 	jbc	ea,00302$
      000C15 C2*00            [12] 3539 	clr	_appMainLoop_sloc0_1_0
      000C17                       3540 00302$:
      000C17 75*00 00         [24] 3541 	mov	_rfif,#0x00
      000C1A A2*00            [12] 3542 	mov	c,_appMainLoop_sloc0_1_0
      000C1C 92 AF            [24] 3543 	mov	ea,c
                                   3544 ;	appFHSSNIC.c:739: IEN2 |= IEN2_RFIE;
      000C1E 43 9A 01         [24] 3545 	orl	_IEN2,#0x01
                                   3546 ;	appFHSSNIC.c:740: break;
      000C21 22               [24] 3547 	ret
                                   3548 ;	appFHSSNIC.c:742: case MAC_STATE_SYNCINGMASTER:
      000C22                       3549 00149$:
                                   3550 ;	appFHSSNIC.c:744: if (macdata.synched_chans >= macdata.NumChannelHops)
      000C22 90r00r13         [24] 3551 	mov	dptr,#(_macdata + 0x0013)
      000C25 E0               [24] 3552 	movx	a,@dptr
      000C26 FE               [12] 3553 	mov	r6,a
      000C27 A3               [24] 3554 	inc	dptr
      000C28 E0               [24] 3555 	movx	a,@dptr
      000C29 FF               [12] 3556 	mov	r7,a
      000C2A 90r00r07         [24] 3557 	mov	dptr,#(_macdata + 0x0007)
      000C2D E0               [24] 3558 	movx	a,@dptr
      000C2E FC               [12] 3559 	mov	r4,a
      000C2F A3               [24] 3560 	inc	dptr
      000C30 E0               [24] 3561 	movx	a,@dptr
      000C31 FD               [12] 3562 	mov	r5,a
      000C32 C3               [12] 3563 	clr	c
      000C33 EE               [12] 3564 	mov	a,r6
      000C34 9C               [12] 3565 	subb	a,r4
      000C35 EF               [12] 3566 	mov	a,r7
      000C36 9D               [12] 3567 	subb	a,r5
      000C37 50 01            [24] 3568 	jnc	00303$
      000C39 22               [24] 3569 	ret
      000C3A                       3570 00303$:
                                   3571 ;	appFHSSNIC.c:746: macdata.mac_state = MAC_STATE_SYNC_MASTER;
      000C3A 90r00r00         [24] 3572 	mov	dptr,#_macdata
      000C3D 74 04            [12] 3573 	mov	a,#0x04
      000C3F F0               [24] 3574 	movx	@dptr,a
                                   3575 ;	appFHSSNIC.c:748: break;
      000C40 22               [24] 3576 	ret
                                   3577 ;	appFHSSNIC.c:752: case MAC_STATE_NONHOPPING:
      000C41                       3578 00154$:
                                   3579 ;	appFHSSNIC.c:754: if (rfif)
      000C41 E5*00            [12] 3580 	mov	a,_rfif
      000C43 70 01            [24] 3581 	jnz	00304$
      000C45 22               [24] 3582 	ret
      000C46                       3583 00304$:
                                   3584 ;	appFHSSNIC.c:757: lastCode[0] = 0xd;
      000C46 90r00r00         [24] 3585 	mov	dptr,#_lastCode
      000C49 74 0D            [12] 3586 	mov	a,#0x0D
      000C4B F0               [24] 3587 	movx	@dptr,a
                                   3588 ;	appFHSSNIC.c:759: if(rfif & (RFIF_IRQ_DONE | RFIF_IRQ_TIMEOUT) )
      000C4C E5*00            [12] 3589 	mov	a,_rfif
      000C4E 54 30            [12] 3590 	anl	a,#0x30
      000C50 70 01            [24] 3591 	jnz	00305$
      000C52 22               [24] 3592 	ret
      000C53                       3593 00305$:
                                   3594 ;	appFHSSNIC.c:761: processbuffer = !rfRxCurrentBuffer;
      000C53 90r00r00         [24] 3595 	mov	dptr,#_rfRxCurrentBuffer
      000C56 E0               [24] 3596 	movx	a,@dptr
      000C57 FF               [12] 3597 	mov	r7,a
      000C58 B4 01 00         [24] 3598 	cjne	a,#0x01,00306$
      000C5B                       3599 00306$:
      000C5B E4               [12] 3600 	clr	a
      000C5C 33               [12] 3601 	rlc	a
      000C5D FF               [12] 3602 	mov	r7,a
      000C5E 90r05r83         [24] 3603 	mov	dptr,#_processbuffer
      000C61 F0               [24] 3604 	movx	@dptr,a
                                   3605 ;	appFHSSNIC.c:762: if(rfRxProcessed[processbuffer] == RX_UNPROCESSED)
      000C62 EF               [12] 3606 	mov	a,r7
      000C63 24r00            [12] 3607 	add	a,#_rfRxProcessed
      000C65 FD               [12] 3608 	mov	r5,a
      000C66 E4               [12] 3609 	clr	a
      000C67 34s00            [12] 3610 	addc	a,#(_rfRxProcessed >> 8)
      000C69 FE               [12] 3611 	mov	r6,a
      000C6A 8D 82            [24] 3612 	mov	dpl,r5
      000C6C 8E 83            [24] 3613 	mov	dph,r6
      000C6E E0               [24] 3614 	movx	a,@dptr
      000C6F 60 03            [24] 3615 	jz	00307$
      000C71 02r0CrF9         [24] 3616 	ljmp	00159$
      000C74                       3617 00307$:
                                   3618 ;	appFHSSNIC.c:765: if (PKTCTRL0&1)     // variable length packets have a leading "length" byte, let's skip it
      000C74 90 DF 04         [24] 3619 	mov	dptr,#_PKTCTRL0
      000C77 E0               [24] 3620 	movx	a,@dptr
      000C78 FE               [12] 3621 	mov	r6,a
      000C79 30 E0 37         [24] 3622 	jnb	acc.0,00156$
                                   3623 ;	appFHSSNIC.c:767: txdata(APP_NIC, NIC_RECV, (u8)rfrxbuf[processbuffer][0], (u8*)&rfrxbuf[processbuffer][1]);
      000C7C 8F 06            [24] 3624 	mov	ar6,r7
      000C7E EE               [12] 3625 	mov	a,r6
      000C7F 2E               [12] 3626 	add	a,r6
      000C80 FD               [12] 3627 	mov	r5,a
      000C81 E4               [12] 3628 	clr	a
      000C82 24r00            [12] 3629 	add	a,#_rfrxbuf
      000C84 F5 82            [12] 3630 	mov	dpl,a
      000C86 ED               [12] 3631 	mov	a,r5
      000C87 34s00            [12] 3632 	addc	a,#(_rfrxbuf >> 8)
      000C89 F5 83            [12] 3633 	mov	dph,a
      000C8B E0               [24] 3634 	movx	a,@dptr
      000C8C FE               [12] 3635 	mov	r6,a
      000C8D 8E*00            [24] 3636 	mov	_txdata_PARM_3,r6
      000C8F 75*01 00         [24] 3637 	mov	(_txdata_PARM_3 + 1),#0x00
      000C92 8F 06            [24] 3638 	mov	ar6,r7
      000C94 EE               [12] 3639 	mov	a,r6
      000C95 2E               [12] 3640 	add	a,r6
      000C96 FD               [12] 3641 	mov	r5,a
      000C97 E4               [12] 3642 	clr	a
      000C98 24r00            [12] 3643 	add	a,#_rfrxbuf
      000C9A FE               [12] 3644 	mov	r6,a
      000C9B ED               [12] 3645 	mov	a,r5
      000C9C 34s00            [12] 3646 	addc	a,#(_rfrxbuf >> 8)
      000C9E FD               [12] 3647 	mov	r5,a
      000C9F 74 01            [12] 3648 	mov	a,#0x01
      000CA1 2E               [12] 3649 	add	a,r6
      000CA2 F5*00            [12] 3650 	mov	_txdata_PARM_4,a
      000CA4 E4               [12] 3651 	clr	a
      000CA5 3D               [12] 3652 	addc	a,r5
      000CA6 F5*01            [12] 3653 	mov	(_txdata_PARM_4 + 1),a
      000CA8 75*00 01         [24] 3654 	mov	_txdata_PARM_2,#0x01
      000CAB 75 82 42         [24] 3655 	mov	dpl,#0x42
      000CAE 12r00r00         [24] 3656 	lcall	_txdata
      000CB1 80 35            [24] 3657 	sjmp	00157$
      000CB3                       3658 00156$:
                                   3659 ;	appFHSSNIC.c:769: txdata(APP_NIC, NIC_RECV, rfRxInfMode ? rfRxLargeLen : PKTLEN, (u8*)&rfrxbuf[processbuffer]);
      000CB3 90r00r00         [24] 3660 	mov	dptr,#_rfRxInfMode
      000CB6 E0               [24] 3661 	movx	a,@dptr
      000CB7 E0               [24] 3662 	movx	a,@dptr
      000CB8 60 0A            [24] 3663 	jz	00170$
      000CBA 90r00r00         [24] 3664 	mov	dptr,#_rfRxLargeLen
      000CBD E0               [24] 3665 	movx	a,@dptr
      000CBE FD               [12] 3666 	mov	r5,a
      000CBF A3               [24] 3667 	inc	dptr
      000CC0 E0               [24] 3668 	movx	a,@dptr
      000CC1 FE               [12] 3669 	mov	r6,a
      000CC2 80 08            [24] 3670 	sjmp	00171$
      000CC4                       3671 00170$:
      000CC4 90 DF 02         [24] 3672 	mov	dptr,#_PKTLEN
      000CC7 E0               [24] 3673 	movx	a,@dptr
      000CC8 FC               [12] 3674 	mov	r4,a
      000CC9 FD               [12] 3675 	mov	r5,a
      000CCA 7E 00            [12] 3676 	mov	r6,#0x00
      000CCC                       3677 00171$:
      000CCC EF               [12] 3678 	mov	a,r7
      000CCD 2F               [12] 3679 	add	a,r7
      000CCE FC               [12] 3680 	mov	r4,a
      000CCF E4               [12] 3681 	clr	a
      000CD0 24r00            [12] 3682 	add	a,#_rfrxbuf
      000CD2 FF               [12] 3683 	mov	r7,a
      000CD3 EC               [12] 3684 	mov	a,r4
      000CD4 34s00            [12] 3685 	addc	a,#(_rfrxbuf >> 8)
      000CD6 FC               [12] 3686 	mov	r4,a
      000CD7 8F*00            [24] 3687 	mov	_txdata_PARM_4,r7
      000CD9 8C*01            [24] 3688 	mov	(_txdata_PARM_4 + 1),r4
      000CDB 75*00 01         [24] 3689 	mov	_txdata_PARM_2,#0x01
      000CDE 8D*00            [24] 3690 	mov	_txdata_PARM_3,r5
      000CE0 8E*01            [24] 3691 	mov	(_txdata_PARM_3 + 1),r6
      000CE2 75 82 42         [24] 3692 	mov	dpl,#0x42
      000CE5 12r00r00         [24] 3693 	lcall	_txdata
      000CE8                       3694 00157$:
                                   3695 ;	appFHSSNIC.c:773: rfRxProcessed[processbuffer] = RX_PROCESSED;
      000CE8 90r05r83         [24] 3696 	mov	dptr,#_processbuffer
      000CEB E0               [24] 3697 	movx	a,@dptr
      000CEC FF               [12] 3698 	mov	r7,a
      000CED 24r00            [12] 3699 	add	a,#_rfRxProcessed
      000CEF F5 82            [12] 3700 	mov	dpl,a
      000CF1 E4               [12] 3701 	clr	a
      000CF2 34s00            [12] 3702 	addc	a,#(_rfRxProcessed >> 8)
      000CF4 F5 83            [12] 3703 	mov	dph,a
      000CF6 74 01            [12] 3704 	mov	a,#0x01
      000CF8 F0               [24] 3705 	movx	@dptr,a
      000CF9                       3706 00159$:
                                   3707 ;	appFHSSNIC.c:775: __critical { rfif &= ~( RFIF_IRQ_DONE | RFIF_IRQ_TIMEOUT );  }          // FIXME: rfif is way too easily tossed aside here...
      000CF9 D2*00            [12] 3708 	setb	_appMainLoop_sloc0_1_0
      000CFB 10 AF 02         [24] 3709 	jbc	ea,00310$
      000CFE C2*00            [12] 3710 	clr	_appMainLoop_sloc0_1_0
      000D00                       3711 00310$:
      000D00 AF*00            [24] 3712 	mov	r7,_rfif
      000D02 74 CF            [12] 3713 	mov	a,#0xCF
      000D04 5F               [12] 3714 	anl	a,r7
      000D05 F5*00            [12] 3715 	mov	_rfif,a
      000D07 A2*00            [12] 3716 	mov	c,_appMainLoop_sloc0_1_0
      000D09 92 AF            [24] 3717 	mov	ea,c
                                   3718 ;	appFHSSNIC.c:781: }
      000D0B 22               [24] 3719 	ret
                                   3720 ;------------------------------------------------------------
                                   3721 ;Allocation info for local variables in function 'appHandleEP5'
                                   3722 ;------------------------------------------------------------
                                   3723 ;sloc0                     Allocated with name '_appHandleEP5_sloc0_1_0'
                                   3724 ;sloc1                     Allocated with name '_appHandleEP5_sloc1_1_0'
                                   3725 ;len                       Allocated with name '_appHandleEP5_len_1_178'
                                   3726 ;repeat                    Allocated with name '_appHandleEP5_repeat_1_178'
                                   3727 ;offset                    Allocated with name '_appHandleEP5_offset_1_178'
                                   3728 ;buf                       Allocated with name '_appHandleEP5_buf_1_178'
                                   3729 ;blocks                    Allocated with name '_appHandleEP5_blocks_1_178'
                                   3730 ;------------------------------------------------------------
                                   3731 ;	appFHSSNIC.c:797: int appHandleEP5()
                                   3732 ;	-----------------------------------------
                                   3733 ;	 function appHandleEP5
                                   3734 ;	-----------------------------------------
      000D0C                       3735 _appHandleEP5:
                                   3736 ;	appFHSSNIC.c:801: __xdata u8 * __xdata buf = &ep5.OUTbuf[0];
      000D0C 90r00r05         [24] 3737 	mov	dptr,#(_ep5 + 0x0005)
      000D0F E0               [24] 3738 	movx	a,@dptr
      000D10 FD               [12] 3739 	mov	r5,a
      000D11 A3               [24] 3740 	inc	dptr
      000D12 E0               [24] 3741 	movx	a,@dptr
      000D13 FE               [12] 3742 	mov	r6,a
      000D14 A3               [24] 3743 	inc	dptr
      000D15 E0               [24] 3744 	movx	a,@dptr
      000D16 FF               [12] 3745 	mov	r7,a
                                   3746 ;	appFHSSNIC.c:804: switch (ep5.OUTapp)
      000D17 90r00r0A         [24] 3747 	mov	dptr,#(_ep5 + 0x000a)
      000D1A E0               [24] 3748 	movx	a,@dptr
      000D1B FC               [12] 3749 	mov	r4,a
      000D1C BC 42 02         [24] 3750 	cjne	r4,#0x42,00232$
      000D1F 80 03            [24] 3751 	sjmp	00233$
      000D21                       3752 00232$:
      000D21 02r16rA7         [24] 3753 	ljmp	00172$
      000D24                       3754 00233$:
                                   3755 ;	appFHSSNIC.c:808: switch (ep5.OUTcmd)
      000D24 90r00r0B         [24] 3756 	mov	dptr,#(_ep5 + 0x000b)
      000D27 E0               [24] 3757 	movx	a,@dptr
      000D28 FC               [12] 3758 	mov  r4,a
      000D29 24 BE            [12] 3759 	add	a,#0xff - 0x41
      000D2B 50 03            [24] 3760 	jnc	00234$
      000D2D 02r16r99         [24] 3761 	ljmp	00170$
      000D30                       3762 00234$:
      000D30 EC               [12] 3763 	mov	a,r4
      000D31 24 0A            [12] 3764 	add	a,#(00235$-3-.)
      000D33 83               [24] 3765 	movc	a,@a+pc
      000D34 F5 82            [12] 3766 	mov	dpl,a
      000D36 EC               [12] 3767 	mov	a,r4
      000D37 24 46            [12] 3768 	add	a,#(00236$-3-.)
      000D39 83               [24] 3769 	movc	a,@a+pc
      000D3A F5 83            [12] 3770 	mov	dph,a
      000D3C E4               [12] 3771 	clr	a
      000D3D 73               [24] 3772 	jmp	@a+dptr
      000D3E                       3773 00235$:
      000D3Er99                    3774 	.db	00170$
      000D3Fr99                    3775 	.db	00170$
      000D40r12                    3776 	.db	00104$
      000D41r5A                    3777 	.db	00119$
      000D42r99                    3778 	.db	00170$
      000D43rC5                    3779 	.db	00107$
      000D44r80                    3780 	.db	00113$
      000D45r9E                    3781 	.db	00114$
      000D46rB1                    3782 	.db	00115$
      000D47rEA                    3783 	.db	00116$
      000D48r23                    3784 	.db	00117$
      000D49r47                    3785 	.db	00118$
      000D4Ar8A                    3786 	.db	00120$
      000D4Br28                    3787 	.db	00123$
      000D4Cr99                    3788 	.db	00170$
      000D4Dr99                    3789 	.db	00170$
      000D4ErEE                    3790 	.db	00147$
      000D4Fr6D                    3791 	.db	00152$
      000D50r94                    3792 	.db	00153$
      000D51r07                    3793 	.db	00156$
      000D52r2C                    3794 	.db	00157$
      000D53r3F                    3795 	.db	00158$
      000D54rAB                    3796 	.db	00159$
      000D55r1F                    3797 	.db	00140$
      000D56r54                    3798 	.db	00151$
      000D57r99                    3799 	.db	00170$
      000D58r99                    3800 	.db	00170$
      000D59r99                    3801 	.db	00170$
      000D5Ar99                    3802 	.db	00170$
      000D5Br99                    3803 	.db	00170$
      000D5Cr99                    3804 	.db	00170$
      000D5Dr99                    3805 	.db	00170$
      000D5ErFE                    3806 	.db	00161$
      000D5Fr87                    3807 	.db	00169$
      000D60rCE                    3808 	.db	00160$
      000D61rC4                    3809 	.db	00154$
      000D62rE7                    3810 	.db	00155$
      000D63r99                    3811 	.db	00170$
      000D64r99                    3812 	.db	00170$
      000D65r99                    3813 	.db	00170$
      000D66r99                    3814 	.db	00170$
      000D67r99                    3815 	.db	00170$
      000D68r99                    3816 	.db	00170$
      000D69r99                    3817 	.db	00170$
      000D6Ar99                    3818 	.db	00170$
      000D6Br99                    3819 	.db	00170$
      000D6Cr99                    3820 	.db	00170$
      000D6Dr99                    3821 	.db	00170$
      000D6Er99                    3822 	.db	00170$
      000D6Fr99                    3823 	.db	00170$
      000D70r99                    3824 	.db	00170$
      000D71r99                    3825 	.db	00170$
      000D72r99                    3826 	.db	00170$
      000D73r99                    3827 	.db	00170$
      000D74r99                    3828 	.db	00170$
      000D75r99                    3829 	.db	00170$
      000D76r99                    3830 	.db	00170$
      000D77r99                    3831 	.db	00170$
      000D78r99                    3832 	.db	00170$
      000D79r99                    3833 	.db	00170$
      000D7Ar99                    3834 	.db	00170$
      000D7Br99                    3835 	.db	00170$
      000D7Cr99                    3836 	.db	00170$
      000D7Dr99                    3837 	.db	00170$
      000D7ErC2                    3838 	.db	00102$
      000D7FrFC                    3839 	.db	00103$
      000D80                       3840 00236$:
      000D80s16                    3841 	.db	00170$>>8
      000D81s16                    3842 	.db	00170$>>8
      000D82s0E                    3843 	.db	00104$>>8
      000D83s10                    3844 	.db	00119$>>8
      000D84s16                    3845 	.db	00170$>>8
      000D85s0E                    3846 	.db	00107$>>8
      000D86s0F                    3847 	.db	00113$>>8
      000D87s0F                    3848 	.db	00114$>>8
      000D88s0F                    3849 	.db	00115$>>8
      000D89s0F                    3850 	.db	00116$>>8
      000D8As10                    3851 	.db	00117$>>8
      000D8Bs10                    3852 	.db	00118$>>8
      000D8Cs10                    3853 	.db	00120$>>8
      000D8Ds11                    3854 	.db	00123$>>8
      000D8Es16                    3855 	.db	00170$>>8
      000D8Fs16                    3856 	.db	00170$>>8
      000D90s13                    3857 	.db	00147$>>8
      000D91s14                    3858 	.db	00152$>>8
      000D92s14                    3859 	.db	00153$>>8
      000D93s15                    3860 	.db	00156$>>8
      000D94s15                    3861 	.db	00157$>>8
      000D95s15                    3862 	.db	00158$>>8
      000D96s15                    3863 	.db	00159$>>8
      000D97s13                    3864 	.db	00140$>>8
      000D98s14                    3865 	.db	00151$>>8
      000D99s16                    3866 	.db	00170$>>8
      000D9As16                    3867 	.db	00170$>>8
      000D9Bs16                    3868 	.db	00170$>>8
      000D9Cs16                    3869 	.db	00170$>>8
      000D9Ds16                    3870 	.db	00170$>>8
      000D9Es16                    3871 	.db	00170$>>8
      000D9Fs16                    3872 	.db	00170$>>8
      000DA0s15                    3873 	.db	00161$>>8
      000DA1s16                    3874 	.db	00169$>>8
      000DA2s15                    3875 	.db	00160$>>8
      000DA3s14                    3876 	.db	00154$>>8
      000DA4s14                    3877 	.db	00155$>>8
      000DA5s16                    3878 	.db	00170$>>8
      000DA6s16                    3879 	.db	00170$>>8
      000DA7s16                    3880 	.db	00170$>>8
      000DA8s16                    3881 	.db	00170$>>8
      000DA9s16                    3882 	.db	00170$>>8
      000DAAs16                    3883 	.db	00170$>>8
      000DABs16                    3884 	.db	00170$>>8
      000DACs16                    3885 	.db	00170$>>8
      000DADs16                    3886 	.db	00170$>>8
      000DAEs16                    3887 	.db	00170$>>8
      000DAFs16                    3888 	.db	00170$>>8
      000DB0s16                    3889 	.db	00170$>>8
      000DB1s16                    3890 	.db	00170$>>8
      000DB2s16                    3891 	.db	00170$>>8
      000DB3s16                    3892 	.db	00170$>>8
      000DB4s16                    3893 	.db	00170$>>8
      000DB5s16                    3894 	.db	00170$>>8
      000DB6s16                    3895 	.db	00170$>>8
      000DB7s16                    3896 	.db	00170$>>8
      000DB8s16                    3897 	.db	00170$>>8
      000DB9s16                    3898 	.db	00170$>>8
      000DBAs16                    3899 	.db	00170$>>8
      000DBBs16                    3900 	.db	00170$>>8
      000DBCs16                    3901 	.db	00170$>>8
      000DBDs16                    3902 	.db	00170$>>8
      000DBEs16                    3903 	.db	00170$>>8
      000DBFs16                    3904 	.db	00170$>>8
      000DC0s0D                    3905 	.db	00102$>>8
      000DC1s0D                    3906 	.db	00103$>>8
                                   3907 ;	appFHSSNIC.c:810: case RFCAT_START_SPECAN:
      000DC2                       3908 00102$:
                                   3909 ;	appFHSSNIC.c:813: stop_hopping();
      000DC2 C0 07            [24] 3910 	push	ar7
      000DC4 C0 06            [24] 3911 	push	ar6
      000DC6 C0 05            [24] 3912 	push	ar5
      000DC8 12r00r9B         [24] 3913 	lcall	_stop_hopping
      000DCB D0 05            [24] 3914 	pop	ar5
      000DCD D0 06            [24] 3915 	pop	ar6
      000DCF D0 07            [24] 3916 	pop	ar7
                                   3917 ;	appFHSSNIC.c:814: macdata.mac_state = MAC_STATE_PREP_SPECAN;
      000DD1 90r00r00         [24] 3918 	mov	dptr,#_macdata
      000DD4 74 40            [12] 3919 	mov	a,#0x40
      000DD6 F0               [24] 3920 	movx	@dptr,a
                                   3921 ;	appFHSSNIC.c:815: macdata.synched_chans = buf[0];
      000DD7 8D 82            [24] 3922 	mov	dpl,r5
      000DD9 8E 83            [24] 3923 	mov	dph,r6
      000DDB 8F F0            [24] 3924 	mov	b,r7
      000DDD 12r00r00         [24] 3925 	lcall	__gptrget
      000DE0 FC               [12] 3926 	mov	r4,a
      000DE1 7B 00            [12] 3927 	mov	r3,#0x00
      000DE3 90r00r13         [24] 3928 	mov	dptr,#(_macdata + 0x0013)
      000DE6 EC               [12] 3929 	mov	a,r4
      000DE7 F0               [24] 3930 	movx	@dptr,a
      000DE8 EB               [12] 3931 	mov	a,r3
      000DE9 A3               [24] 3932 	inc	dptr
      000DEA F0               [24] 3933 	movx	@dptr,a
                                   3934 ;	appFHSSNIC.c:816: appReturn( 1, buf);
      000DEB 90r00r00         [24] 3935 	mov	dptr,#_appReturn_PARM_2
      000DEE ED               [12] 3936 	mov	a,r5
      000DEF F0               [24] 3937 	movx	@dptr,a
      000DF0 EE               [12] 3938 	mov	a,r6
      000DF1 A3               [24] 3939 	inc	dptr
      000DF2 F0               [24] 3940 	movx	@dptr,a
      000DF3 75 82 01         [24] 3941 	mov	dpl,#0x01
      000DF6 12r00r00         [24] 3942 	lcall	_appReturn
                                   3943 ;	appFHSSNIC.c:817: break;
      000DF9 02r16rA7         [24] 3944 	ljmp	00172$
                                   3945 ;	appFHSSNIC.c:819: case RFCAT_STOP_SPECAN:
      000DFC                       3946 00103$:
                                   3947 ;	appFHSSNIC.c:820: macdata.mac_state = MAC_STATE_NONHOPPING;
      000DFC 90r00r00         [24] 3948 	mov	dptr,#_macdata
      000DFF E4               [12] 3949 	clr	a
      000E00 F0               [24] 3950 	movx	@dptr,a
                                   3951 ;	appFHSSNIC.c:821: appReturn( 1, buf);
      000E01 90r00r00         [24] 3952 	mov	dptr,#_appReturn_PARM_2
      000E04 ED               [12] 3953 	mov	a,r5
      000E05 F0               [24] 3954 	movx	@dptr,a
      000E06 EE               [12] 3955 	mov	a,r6
      000E07 A3               [24] 3956 	inc	dptr
      000E08 F0               [24] 3957 	movx	@dptr,a
      000E09 75 82 01         [24] 3958 	mov	dpl,#0x01
      000E0C 12r00r00         [24] 3959 	lcall	_appReturn
                                   3960 ;	appFHSSNIC.c:822: break;
      000E0F 02r16rA7         [24] 3961 	ljmp	00172$
                                   3962 ;	appFHSSNIC.c:824: case NIC_XMIT:
      000E12                       3963 00104$:
                                   3964 ;	appFHSSNIC.c:827: if (macdata.mac_state != MAC_STATE_NONHOPPING)
      000E12 90r00r00         [24] 3965 	mov	dptr,#_macdata
      000E15 E0               [24] 3966 	movx	a,@dptr
      000E16 60 09            [24] 3967 	jz	00106$
                                   3968 ;	appFHSSNIC.c:829: debug("crap, please use FHSSxmit() instead!");
      000E18 90r01r1E         [24] 3969 	mov	dptr,#___str_9
      000E1B 12r00r00         [24] 3970 	lcall	_debug
                                   3971 ;	appFHSSNIC.c:830: break;
      000E1E 02r16rA7         [24] 3972 	ljmp	00172$
      000E21                       3973 00106$:
                                   3974 ;	appFHSSNIC.c:832: len = buf[0];
      000E21 8D 82            [24] 3975 	mov	dpl,r5
      000E23 8E 83            [24] 3976 	mov	dph,r6
      000E25 8F F0            [24] 3977 	mov	b,r7
      000E27 12r00r00         [24] 3978 	lcall	__gptrget
      000E2A FC               [12] 3979 	mov	r4,a
      000E2B 7B 00            [12] 3980 	mov	r3,#0x00
      000E2D 90r05r86         [24] 3981 	mov	dptr,#_appHandleEP5_len_1_178
      000E30 EC               [12] 3982 	mov	a,r4
      000E31 F0               [24] 3983 	movx	@dptr,a
      000E32 EB               [12] 3984 	mov	a,r3
      000E33 A3               [24] 3985 	inc	dptr
      000E34 F0               [24] 3986 	movx	@dptr,a
                                   3987 ;	appFHSSNIC.c:833: len += buf[1] << 8;
      000E35 8D 82            [24] 3988 	mov	dpl,r5
      000E37 8E 83            [24] 3989 	mov	dph,r6
      000E39 A3               [24] 3990 	inc	dptr
      000E3A E0               [24] 3991 	movx	a,@dptr
      000E3B FA               [12] 3992 	mov	r2,a
      000E3C E4               [12] 3993 	clr	a
      000E3D F9               [12] 3994 	mov	r1,a
      000E3E 2C               [12] 3995 	add	a,r4
      000E3F FC               [12] 3996 	mov	r4,a
      000E40 EA               [12] 3997 	mov	a,r2
      000E41 3B               [12] 3998 	addc	a,r3
      000E42 FB               [12] 3999 	mov	r3,a
      000E43 90r05r86         [24] 4000 	mov	dptr,#_appHandleEP5_len_1_178
      000E46 EC               [12] 4001 	mov	a,r4
      000E47 F0               [24] 4002 	movx	@dptr,a
      000E48 EB               [12] 4003 	mov	a,r3
      000E49 A3               [24] 4004 	inc	dptr
      000E4A F0               [24] 4005 	movx	@dptr,a
                                   4006 ;	appFHSSNIC.c:836: offset = buf[4];
      000E4B 8D 82            [24] 4007 	mov	dpl,r5
      000E4D 8E 83            [24] 4008 	mov	dph,r6
      000E4F A3               [24] 4009 	inc	dptr
      000E50 A3               [24] 4010 	inc	dptr
      000E51 A3               [24] 4011 	inc	dptr
      000E52 A3               [24] 4012 	inc	dptr
      000E53 E0               [24] 4013 	movx	a,@dptr
      000E54 FA               [12] 4014 	mov	r2,a
      000E55 8A*00            [24] 4015 	mov	_appHandleEP5_sloc0_1_0,r2
                                   4016 ;	1-genFromRTrack replaced	mov	(_appHandleEP5_sloc0_1_0 + 1),#0x00
      000E57 89*01            [24] 4017 	mov	(_appHandleEP5_sloc0_1_0 + 1),r1
                                   4018 ;	appFHSSNIC.c:837: offset += buf[5] << 8;
      000E59 8D 82            [24] 4019 	mov	dpl,r5
      000E5B 8E 83            [24] 4020 	mov	dph,r6
      000E5D A3               [24] 4021 	inc	dptr
      000E5E A3               [24] 4022 	inc	dptr
      000E5F A3               [24] 4023 	inc	dptr
      000E60 A3               [24] 4024 	inc	dptr
      000E61 A3               [24] 4025 	inc	dptr
      000E62 E0               [24] 4026 	movx	a,@dptr
      000E63 FA               [12] 4027 	mov	r2,a
      000E64 E4               [12] 4028 	clr	a
      000E65 25*00            [12] 4029 	add	a,_appHandleEP5_sloc0_1_0
      000E67 F5*00            [12] 4030 	mov	_appHandleEP5_sloc0_1_0,a
      000E69 EA               [12] 4031 	mov	a,r2
      000E6A 35*01            [12] 4032 	addc	a,(_appHandleEP5_sloc0_1_0 + 1)
      000E6C F5*01            [12] 4033 	mov	(_appHandleEP5_sloc0_1_0 + 1),a
                                   4034 ;	appFHSSNIC.c:838: txTotal= 0;
      000E6E 90r00r00         [24] 4035 	mov	dptr,#_txTotal
      000E71 E4               [12] 4036 	clr	a
      000E72 F0               [24] 4037 	movx	@dptr,a
      000E73 A3               [24] 4038 	inc	dptr
      000E74 F0               [24] 4039 	movx	@dptr,a
                                   4040 ;	appFHSSNIC.c:839: buf[0] = transmit(&buf[6], len, 0, offset);
      000E75 74 06            [12] 4041 	mov	a,#0x06
      000E77 2D               [12] 4042 	add	a,r5
      000E78 F9               [12] 4043 	mov	r1,a
      000E79 E4               [12] 4044 	clr	a
      000E7A 3E               [12] 4045 	addc	a,r6
      000E7B FA               [12] 4046 	mov	r2,a
      000E7C 90r00r00         [24] 4047 	mov	dptr,#_transmit_PARM_2
      000E7F EC               [12] 4048 	mov	a,r4
      000E80 F0               [24] 4049 	movx	@dptr,a
      000E81 EB               [12] 4050 	mov	a,r3
      000E82 A3               [24] 4051 	inc	dptr
      000E83 F0               [24] 4052 	movx	@dptr,a
      000E84 90r00r00         [24] 4053 	mov	dptr,#_transmit_PARM_3
      000E87 E4               [12] 4054 	clr	a
      000E88 F0               [24] 4055 	movx	@dptr,a
      000E89 A3               [24] 4056 	inc	dptr
      000E8A F0               [24] 4057 	movx	@dptr,a
      000E8B 90r00r00         [24] 4058 	mov	dptr,#_transmit_PARM_4
      000E8E E5*00            [12] 4059 	mov	a,_appHandleEP5_sloc0_1_0
      000E90 F0               [24] 4060 	movx	@dptr,a
      000E91 E5*01            [12] 4061 	mov	a,(_appHandleEP5_sloc0_1_0 + 1)
      000E93 A3               [24] 4062 	inc	dptr
      000E94 F0               [24] 4063 	movx	@dptr,a
      000E95 89 82            [24] 4064 	mov	dpl,r1
      000E97 8A 83            [24] 4065 	mov	dph,r2
      000E99 C0 07            [24] 4066 	push	ar7
      000E9B C0 06            [24] 4067 	push	ar6
      000E9D C0 05            [24] 4068 	push	ar5
      000E9F 12r00r00         [24] 4069 	lcall	_transmit
      000EA2 AC 82            [24] 4070 	mov	r4,dpl
      000EA4 D0 05            [24] 4071 	pop	ar5
      000EA6 D0 06            [24] 4072 	pop	ar6
      000EA8 D0 07            [24] 4073 	pop	ar7
      000EAA 8D 82            [24] 4074 	mov	dpl,r5
      000EAC 8E 83            [24] 4075 	mov	dph,r6
      000EAE 8F F0            [24] 4076 	mov	b,r7
      000EB0 EC               [12] 4077 	mov	a,r4
      000EB1 12r00r00         [24] 4078 	lcall	__gptrput
                                   4079 ;	appFHSSNIC.c:840: appReturn( 1, buf);
      000EB4 90r00r00         [24] 4080 	mov	dptr,#_appReturn_PARM_2
      000EB7 ED               [12] 4081 	mov	a,r5
      000EB8 F0               [24] 4082 	movx	@dptr,a
      000EB9 EE               [12] 4083 	mov	a,r6
      000EBA A3               [24] 4084 	inc	dptr
      000EBB F0               [24] 4085 	movx	@dptr,a
      000EBC 75 82 01         [24] 4086 	mov	dpl,#0x01
      000EBF 12r00r00         [24] 4087 	lcall	_appReturn
                                   4088 ;	appFHSSNIC.c:841: break;
      000EC2 02r16rA7         [24] 4089 	ljmp	00172$
                                   4090 ;	appFHSSNIC.c:843: case NIC_SET_RECV_LARGE:
      000EC5                       4091 00107$:
                                   4092 ;	appFHSSNIC.c:848: rfRxLargeLen = buf[0];
      000EC5 8D 82            [24] 4093 	mov	dpl,r5
      000EC7 8E 83            [24] 4094 	mov	dph,r6
      000EC9 8F F0            [24] 4095 	mov	b,r7
      000ECB 12r00r00         [24] 4096 	lcall	__gptrget
      000ECE 90r00r00         [24] 4097 	mov	dptr,#_rfRxLargeLen
      000ED1 F0               [24] 4098 	movx	@dptr,a
      000ED2 E4               [12] 4099 	clr	a
      000ED3 A3               [24] 4100 	inc	dptr
      000ED4 F0               [24] 4101 	movx	@dptr,a
                                   4102 ;	appFHSSNIC.c:849: rfRxLargeLen += buf[1] << 8;
      000ED5 8D 82            [24] 4103 	mov	dpl,r5
      000ED7 8E 83            [24] 4104 	mov	dph,r6
      000ED9 A3               [24] 4105 	inc	dptr
      000EDA E0               [24] 4106 	movx	a,@dptr
      000EDB FB               [12] 4107 	mov	r3,a
      000EDC 7C 00            [12] 4108 	mov	r4,#0x00
      000EDE 90r00r00         [24] 4109 	mov	dptr,#_rfRxLargeLen
      000EE1 E0               [24] 4110 	movx	a,@dptr
      000EE2 F9               [12] 4111 	mov	r1,a
      000EE3 A3               [24] 4112 	inc	dptr
      000EE4 E0               [24] 4113 	movx	a,@dptr
      000EE5 FA               [12] 4114 	mov	r2,a
      000EE6 90r00r00         [24] 4115 	mov	dptr,#_rfRxLargeLen
      000EE9 EC               [12] 4116 	mov	a,r4
      000EEA 29               [12] 4117 	add	a,r1
      000EEB F0               [24] 4118 	movx	@dptr,a
      000EEC EB               [12] 4119 	mov	a,r3
      000EED 3A               [12] 4120 	addc	a,r2
      000EEE A3               [24] 4121 	inc	dptr
      000EEF F0               [24] 4122 	movx	@dptr,a
                                   4123 ;	appFHSSNIC.c:850: if(rfRxLargeLen)
      000EF0 90r00r00         [24] 4124 	mov	dptr,#_rfRxLargeLen
      000EF3 E0               [24] 4125 	movx	a,@dptr
      000EF4 A3               [24] 4126 	inc	dptr
      000EF5 E0               [24] 4127 	movx	a,@dptr
      000EF6 90r00r00         [24] 4128 	mov	dptr,#_rfRxLargeLen
      000EF9 E0               [24] 4129 	movx	a,@dptr
      000EFA F5 F0            [12] 4130 	mov	b,a
      000EFC A3               [24] 4131 	inc	dptr
      000EFD E0               [24] 4132 	movx	a,@dptr
      000EFE 45 F0            [12] 4133 	orl	a,b
      000F00 60 4B            [24] 4134 	jz	00111$
                                   4135 ;	appFHSSNIC.c:852: rfRxInfMode = 1;
      000F02 90r00r00         [24] 4136 	mov	dptr,#_rfRxInfMode
      000F05 74 01            [12] 4137 	mov	a,#0x01
      000F07 F0               [24] 4138 	movx	@dptr,a
                                   4139 ;	appFHSSNIC.c:854: if(!rfRxTotalRXLen)
      000F08 90r00r00         [24] 4140 	mov	dptr,#_rfRxTotalRXLen
      000F0B E0               [24] 4141 	movx	a,@dptr
      000F0C A3               [24] 4142 	inc	dptr
      000F0D E0               [24] 4143 	movx	a,@dptr
      000F0E 90r00r00         [24] 4144 	mov	dptr,#_rfRxTotalRXLen
      000F11 E0               [24] 4145 	movx	a,@dptr
      000F12 F5 F0            [12] 4146 	mov	b,a
      000F14 A3               [24] 4147 	inc	dptr
      000F15 E0               [24] 4148 	movx	a,@dptr
      000F16 45 F0            [12] 4149 	orl	a,b
      000F18 70 47            [24] 4150 	jnz	00112$
                                   4151 ;	appFHSSNIC.c:856: IdleMode();
      000F1A 12r00r00         [24] 4152 	lcall	_IdleMode
                                   4153 ;	appFHSSNIC.c:857: rfRxTotalRXLen = rfRxLargeLen;
      000F1D 90r00r00         [24] 4154 	mov	dptr,#_rfRxLargeLen
      000F20 E0               [24] 4155 	movx	a,@dptr
      000F21 FB               [12] 4156 	mov	r3,a
      000F22 A3               [24] 4157 	inc	dptr
      000F23 E0               [24] 4158 	movx	a,@dptr
      000F24 FC               [12] 4159 	mov	r4,a
      000F25 90r00r00         [24] 4160 	mov	dptr,#_rfRxTotalRXLen
      000F28 EB               [12] 4161 	mov	a,r3
      000F29 F0               [24] 4162 	movx	@dptr,a
      000F2A EC               [12] 4163 	mov	a,r4
      000F2B A3               [24] 4164 	inc	dptr
      000F2C F0               [24] 4165 	movx	@dptr,a
                                   4166 ;	appFHSSNIC.c:858: PKTLEN = (u8) (rfRxTotalRXLen % 256);
      000F2D 90r00r00         [24] 4167 	mov	dptr,#_rfRxTotalRXLen
      000F30 E0               [24] 4168 	movx	a,@dptr
      000F31 FB               [12] 4169 	mov	r3,a
      000F32 A3               [24] 4170 	inc	dptr
      000F33 E0               [24] 4171 	movx	a,@dptr
      000F34 90 DF 02         [24] 4172 	mov	dptr,#_PKTLEN
      000F37 EB               [12] 4173 	mov	a,r3
      000F38 F0               [24] 4174 	movx	@dptr,a
                                   4175 ;	appFHSSNIC.c:859: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
      000F39 90 DF 04         [24] 4176 	mov	dptr,#_PKTCTRL0
      000F3C E0               [24] 4177 	movx	a,@dptr
      000F3D FC               [12] 4178 	mov	r4,a
      000F3E 74 FC            [12] 4179 	mov	a,#0xFC
      000F40 5C               [12] 4180 	anl	a,r4
      000F41 F0               [24] 4181 	movx	@dptr,a
                                   4182 ;	appFHSSNIC.c:860: PKTCTRL0 |= PKTCTRL0_LENGTH_CONFIG_INF;
      000F42 E0               [24] 4183 	movx	a,@dptr
      000F43 FC               [12] 4184 	mov	r4,a
      000F44 74 02            [12] 4185 	mov	a,#0x02
      000F46 4C               [12] 4186 	orl	a,r4
      000F47 F0               [24] 4187 	movx	@dptr,a
                                   4188 ;	appFHSSNIC.c:861: RxMode();
      000F48 12r00r00         [24] 4189 	lcall	_RxMode
      000F4B 80 14            [24] 4190 	sjmp	00112$
      000F4D                       4191 00111$:
                                   4192 ;	appFHSSNIC.c:866: rfRxInfMode = 0;
      000F4D 90r00r00         [24] 4193 	mov	dptr,#_rfRxInfMode
      000F50 E4               [12] 4194 	clr	a
      000F51 F0               [24] 4195 	movx	@dptr,a
                                   4196 ;	appFHSSNIC.c:867: rfRxTotalRXLen = 0;
      000F52 90r00r00         [24] 4197 	mov	dptr,#_rfRxTotalRXLen
      000F55 F0               [24] 4198 	movx	@dptr,a
      000F56 A3               [24] 4199 	inc	dptr
      000F57 F0               [24] 4200 	movx	@dptr,a
                                   4201 ;	appFHSSNIC.c:868: rfRxLargeLen = 0;
      000F58 90r00r00         [24] 4202 	mov	dptr,#_rfRxLargeLen
      000F5B F0               [24] 4203 	movx	@dptr,a
      000F5C A3               [24] 4204 	inc	dptr
      000F5D F0               [24] 4205 	movx	@dptr,a
                                   4206 ;	appFHSSNIC.c:869: IdleMode();
      000F5E 12r00r00         [24] 4207 	lcall	_IdleMode
      000F61                       4208 00112$:
                                   4209 ;	appFHSSNIC.c:871: txdata(ep5.OUTapp, ep5.OUTcmd, 1, (__xdata u8*)&rfRxLargeLen);
      000F61 90r00r0A         [24] 4210 	mov	dptr,#(_ep5 + 0x000a)
      000F64 E0               [24] 4211 	movx	a,@dptr
      000F65 FC               [12] 4212 	mov	r4,a
      000F66 90r00r0B         [24] 4213 	mov	dptr,#(_ep5 + 0x000b)
      000F69 E0               [24] 4214 	movx	a,@dptr
      000F6A F5*00            [12] 4215 	mov	_txdata_PARM_2,a
      000F6C 75*00r00         [24] 4216 	mov	_txdata_PARM_4,#_rfRxLargeLen
      000F6F 75*01s00         [24] 4217 	mov	(_txdata_PARM_4 + 1),#(_rfRxLargeLen >> 8)
      000F72 75*00 01         [24] 4218 	mov	_txdata_PARM_3,#0x01
      000F75 75*01 00         [24] 4219 	mov	(_txdata_PARM_3 + 1),#0x00
      000F78 8C 82            [24] 4220 	mov	dpl,r4
      000F7A 12r00r00         [24] 4221 	lcall	_txdata
                                   4222 ;	appFHSSNIC.c:872: break;
      000F7D 02r16rA7         [24] 4223 	ljmp	00172$
                                   4224 ;	appFHSSNIC.c:874: case NIC_SET_AES_MODE:
      000F80                       4225 00113$:
                                   4226 ;	appFHSSNIC.c:875: rfAESMode= buf[0];
      000F80 8D 82            [24] 4227 	mov	dpl,r5
      000F82 8E 83            [24] 4228 	mov	dph,r6
      000F84 8F F0            [24] 4229 	mov	b,r7
      000F86 12r00r00         [24] 4230 	lcall	__gptrget
      000F89 90r00r00         [24] 4231 	mov	dptr,#_rfAESMode
      000F8C F0               [24] 4232 	movx	@dptr,a
                                   4233 ;	appFHSSNIC.c:876: appReturn( 1, buf);
      000F8D 90r00r00         [24] 4234 	mov	dptr,#_appReturn_PARM_2
      000F90 ED               [12] 4235 	mov	a,r5
      000F91 F0               [24] 4236 	movx	@dptr,a
      000F92 EE               [12] 4237 	mov	a,r6
      000F93 A3               [24] 4238 	inc	dptr
      000F94 F0               [24] 4239 	movx	@dptr,a
      000F95 75 82 01         [24] 4240 	mov	dpl,#0x01
      000F98 12r00r00         [24] 4241 	lcall	_appReturn
                                   4242 ;	appFHSSNIC.c:877: break;
      000F9B 02r16rA7         [24] 4243 	ljmp	00172$
                                   4244 ;	appFHSSNIC.c:879: case NIC_GET_AES_MODE:
      000F9E                       4245 00114$:
                                   4246 ;	appFHSSNIC.c:880: appReturn( 1, (__xdata u8*) &rfAESMode);
      000F9E 90r00r00         [24] 4247 	mov	dptr,#_appReturn_PARM_2
      000FA1 74r00            [12] 4248 	mov	a,#_rfAESMode
      000FA3 F0               [24] 4249 	movx	@dptr,a
      000FA4 74s00            [12] 4250 	mov	a,#(_rfAESMode >> 8)
      000FA6 A3               [24] 4251 	inc	dptr
      000FA7 F0               [24] 4252 	movx	@dptr,a
      000FA8 75 82 01         [24] 4253 	mov	dpl,#0x01
      000FAB 12r00r00         [24] 4254 	lcall	_appReturn
                                   4255 ;	appFHSSNIC.c:881: break;
      000FAE 02r16rA7         [24] 4256 	ljmp	00172$
                                   4257 ;	appFHSSNIC.c:883: case NIC_SET_AES_IV:
      000FB1                       4258 00115$:
                                   4259 ;	appFHSSNIC.c:884: setAES(buf, ENCCS_CMD_LDIV, (rfAESMode & AES_CRYPTO_MODE));
      000FB1 90r00r00         [24] 4260 	mov	dptr,#_rfAESMode
      000FB4 E0               [24] 4261 	movx	a,@dptr
      000FB5 FC               [12] 4262 	mov	r4,a
      000FB6 53 04 F0         [24] 4263 	anl	ar4,#0xF0
      000FB9 90r00r00         [24] 4264 	mov	dptr,#_setAES_PARM_2
      000FBC 74 06            [12] 4265 	mov	a,#0x06
      000FBE F0               [24] 4266 	movx	@dptr,a
      000FBF 90r00r00         [24] 4267 	mov	dptr,#_setAES_PARM_3
      000FC2 EC               [12] 4268 	mov	a,r4
      000FC3 F0               [24] 4269 	movx	@dptr,a
      000FC4 8D 82            [24] 4270 	mov	dpl,r5
      000FC6 8E 83            [24] 4271 	mov	dph,r6
      000FC8 8F F0            [24] 4272 	mov	b,r7
      000FCA C0 07            [24] 4273 	push	ar7
      000FCC C0 06            [24] 4274 	push	ar6
      000FCE C0 05            [24] 4275 	push	ar5
      000FD0 12r00r00         [24] 4276 	lcall	_setAES
      000FD3 D0 05            [24] 4277 	pop	ar5
      000FD5 D0 06            [24] 4278 	pop	ar6
      000FD7 D0 07            [24] 4279 	pop	ar7
                                   4280 ;	appFHSSNIC.c:885: appReturn( 16, buf);
      000FD9 90r00r00         [24] 4281 	mov	dptr,#_appReturn_PARM_2
      000FDC ED               [12] 4282 	mov	a,r5
      000FDD F0               [24] 4283 	movx	@dptr,a
      000FDE EE               [12] 4284 	mov	a,r6
      000FDF A3               [24] 4285 	inc	dptr
      000FE0 F0               [24] 4286 	movx	@dptr,a
      000FE1 75 82 10         [24] 4287 	mov	dpl,#0x10
      000FE4 12r00r00         [24] 4288 	lcall	_appReturn
                                   4289 ;	appFHSSNIC.c:886: break;
      000FE7 02r16rA7         [24] 4290 	ljmp	00172$
                                   4291 ;	appFHSSNIC.c:888: case NIC_SET_AES_KEY:
      000FEA                       4292 00116$:
                                   4293 ;	appFHSSNIC.c:889: setAES(buf, ENCCS_CMD_LDKEY, (rfAESMode & AES_CRYPTO_MODE));
      000FEA 90r00r00         [24] 4294 	mov	dptr,#_rfAESMode
      000FED E0               [24] 4295 	movx	a,@dptr
      000FEE FC               [12] 4296 	mov	r4,a
      000FEF 53 04 F0         [24] 4297 	anl	ar4,#0xF0
      000FF2 90r00r00         [24] 4298 	mov	dptr,#_setAES_PARM_2
      000FF5 74 04            [12] 4299 	mov	a,#0x04
      000FF7 F0               [24] 4300 	movx	@dptr,a
      000FF8 90r00r00         [24] 4301 	mov	dptr,#_setAES_PARM_3
      000FFB EC               [12] 4302 	mov	a,r4
      000FFC F0               [24] 4303 	movx	@dptr,a
      000FFD 8D 82            [24] 4304 	mov	dpl,r5
      000FFF 8E 83            [24] 4305 	mov	dph,r6
      001001 8F F0            [24] 4306 	mov	b,r7
      001003 C0 07            [24] 4307 	push	ar7
      001005 C0 06            [24] 4308 	push	ar6
      001007 C0 05            [24] 4309 	push	ar5
      001009 12r00r00         [24] 4310 	lcall	_setAES
      00100C D0 05            [24] 4311 	pop	ar5
      00100E D0 06            [24] 4312 	pop	ar6
      001010 D0 07            [24] 4313 	pop	ar7
                                   4314 ;	appFHSSNIC.c:890: appReturn( 16, buf);
      001012 90r00r00         [24] 4315 	mov	dptr,#_appReturn_PARM_2
      001015 ED               [12] 4316 	mov	a,r5
      001016 F0               [24] 4317 	movx	@dptr,a
      001017 EE               [12] 4318 	mov	a,r6
      001018 A3               [24] 4319 	inc	dptr
      001019 F0               [24] 4320 	movx	@dptr,a
      00101A 75 82 10         [24] 4321 	mov	dpl,#0x10
      00101D 12r00r00         [24] 4322 	lcall	_appReturn
                                   4323 ;	appFHSSNIC.c:891: break;
      001020 02r16rA7         [24] 4324 	ljmp	00172$
                                   4325 ;	appFHSSNIC.c:893: case NIC_SET_AMP_MODE:
      001023                       4326 00117$:
                                   4327 ;	appFHSSNIC.c:894: rfAmpMode= *buf;
      001023 8D 82            [24] 4328 	mov	dpl,r5
      001025 8E 83            [24] 4329 	mov	dph,r6
      001027 8F F0            [24] 4330 	mov	b,r7
      001029 12r00r00         [24] 4331 	lcall	__gptrget
      00102C 90r00r00         [24] 4332 	mov	dptr,#_rfAmpMode
      00102F F0               [24] 4333 	movx	@dptr,a
                                   4334 ;	appFHSSNIC.c:895: rfAmpMode &= 1;
      001030 E0               [24] 4335 	movx	a,@dptr
      001031 FC               [12] 4336 	mov	r4,a
      001032 74 01            [12] 4337 	mov	a,#0x01
      001034 5C               [12] 4338 	anl	a,r4
      001035 F0               [24] 4339 	movx	@dptr,a
                                   4340 ;	appFHSSNIC.c:896: appReturn( 1, buf);
      001036 90r00r00         [24] 4341 	mov	dptr,#_appReturn_PARM_2
      001039 ED               [12] 4342 	mov	a,r5
      00103A F0               [24] 4343 	movx	@dptr,a
      00103B EE               [12] 4344 	mov	a,r6
      00103C A3               [24] 4345 	inc	dptr
      00103D F0               [24] 4346 	movx	@dptr,a
      00103E 75 82 01         [24] 4347 	mov	dpl,#0x01
      001041 12r00r00         [24] 4348 	lcall	_appReturn
                                   4349 ;	appFHSSNIC.c:897: break;
      001044 02r16rA7         [24] 4350 	ljmp	00172$
                                   4351 ;	appFHSSNIC.c:899: case NIC_GET_AMP_MODE:
      001047                       4352 00118$:
                                   4353 ;	appFHSSNIC.c:900: appReturn( 1, (__xdata u8*) &rfAmpMode);
      001047 90r00r00         [24] 4354 	mov	dptr,#_appReturn_PARM_2
      00104A 74r00            [12] 4355 	mov	a,#_rfAmpMode
      00104C F0               [24] 4356 	movx	@dptr,a
      00104D 74s00            [12] 4357 	mov	a,#(_rfAmpMode >> 8)
      00104F A3               [24] 4358 	inc	dptr
      001050 F0               [24] 4359 	movx	@dptr,a
      001051 75 82 01         [24] 4360 	mov	dpl,#0x01
      001054 12r00r00         [24] 4361 	lcall	_appReturn
                                   4362 ;	appFHSSNIC.c:901: break;
      001057 02r16rA7         [24] 4363 	ljmp	00172$
                                   4364 ;	appFHSSNIC.c:903: case NIC_SET_ID:
      00105A                       4365 00119$:
                                   4366 ;	appFHSSNIC.c:905: MAC_set_NIC_ID(buf[0]);
      00105A 8D 82            [24] 4367 	mov	dpl,r5
      00105C 8E 83            [24] 4368 	mov	dph,r6
      00105E 8F F0            [24] 4369 	mov	b,r7
      001060 12r00r00         [24] 4370 	lcall	__gptrget
      001063 FC               [12] 4371 	mov	r4,a
      001064 7B 00            [12] 4372 	mov	r3,#0x00
      001066 8C 82            [24] 4373 	mov	dpl,r4
      001068 8B 83            [24] 4374 	mov	dph,r3
      00106A C0 07            [24] 4375 	push	ar7
      00106C C0 06            [24] 4376 	push	ar6
      00106E C0 05            [24] 4377 	push	ar5
      001070 12r05r51         [24] 4378 	lcall	_MAC_set_NIC_ID
      001073 D0 05            [24] 4379 	pop	ar5
      001075 D0 06            [24] 4380 	pop	ar6
      001077 D0 07            [24] 4381 	pop	ar7
                                   4382 ;	appFHSSNIC.c:906: appReturn( 1, buf);
      001079 90r00r00         [24] 4383 	mov	dptr,#_appReturn_PARM_2
      00107C ED               [12] 4384 	mov	a,r5
      00107D F0               [24] 4385 	movx	@dptr,a
      00107E EE               [12] 4386 	mov	a,r6
      00107F A3               [24] 4387 	inc	dptr
      001080 F0               [24] 4388 	movx	@dptr,a
      001081 75 82 01         [24] 4389 	mov	dpl,#0x01
      001084 12r00r00         [24] 4390 	lcall	_appReturn
                                   4391 ;	appFHSSNIC.c:907: break;
      001087 02r16rA7         [24] 4392 	ljmp	00172$
                                   4393 ;	appFHSSNIC.c:909: case NIC_LONG_XMIT:
      00108A                       4394 00120$:
                                   4395 ;	appFHSSNIC.c:914: if (macdata.mac_state != MAC_STATE_NONHOPPING)
      00108A 90r00r00         [24] 4396 	mov	dptr,#_macdata
      00108D E0               [24] 4397 	movx	a,@dptr
      00108E 60 1C            [24] 4398 	jz	00122$
                                   4399 ;	appFHSSNIC.c:916: buf[0] = RC_RF_MODE_INCOMPAT;
      001090 8D 82            [24] 4400 	mov	dpl,r5
      001092 8E 83            [24] 4401 	mov	dph,r6
      001094 8F F0            [24] 4402 	mov	b,r7
      001096 74 EF            [12] 4403 	mov	a,#0xEF
      001098 12r00r00         [24] 4404 	lcall	__gptrput
                                   4405 ;	appFHSSNIC.c:917: appReturn( 1, buf);
      00109B 90r00r00         [24] 4406 	mov	dptr,#_appReturn_PARM_2
      00109E ED               [12] 4407 	mov	a,r5
      00109F F0               [24] 4408 	movx	@dptr,a
      0010A0 EE               [12] 4409 	mov	a,r6
      0010A1 A3               [24] 4410 	inc	dptr
      0010A2 F0               [24] 4411 	movx	@dptr,a
      0010A3 75 82 01         [24] 4412 	mov	dpl,#0x01
      0010A6 12r00r00         [24] 4413 	lcall	_appReturn
                                   4414 ;	appFHSSNIC.c:918: break;
      0010A9 02r16rA7         [24] 4415 	ljmp	00172$
      0010AC                       4416 00122$:
                                   4417 ;	appFHSSNIC.c:920: len = buf[0];
      0010AC 8D 82            [24] 4418 	mov	dpl,r5
      0010AE 8E 83            [24] 4419 	mov	dph,r6
      0010B0 8F F0            [24] 4420 	mov	b,r7
      0010B2 12r00r00         [24] 4421 	lcall	__gptrget
      0010B5 FC               [12] 4422 	mov	r4,a
      0010B6 7B 00            [12] 4423 	mov	r3,#0x00
      0010B8 90r05r86         [24] 4424 	mov	dptr,#_appHandleEP5_len_1_178
      0010BB EC               [12] 4425 	mov	a,r4
      0010BC F0               [24] 4426 	movx	@dptr,a
      0010BD EB               [12] 4427 	mov	a,r3
      0010BE A3               [24] 4428 	inc	dptr
      0010BF F0               [24] 4429 	movx	@dptr,a
                                   4430 ;	appFHSSNIC.c:921: len += buf[1] << 8;
      0010C0 8D 82            [24] 4431 	mov	dpl,r5
      0010C2 8E 83            [24] 4432 	mov	dph,r6
      0010C4 A3               [24] 4433 	inc	dptr
      0010C5 E0               [24] 4434 	movx	a,@dptr
      0010C6 FA               [12] 4435 	mov	r2,a
      0010C7 E4               [12] 4436 	clr	a
      0010C8 2C               [12] 4437 	add	a,r4
      0010C9 FC               [12] 4438 	mov	r4,a
      0010CA EA               [12] 4439 	mov	a,r2
      0010CB 3B               [12] 4440 	addc	a,r3
      0010CC FB               [12] 4441 	mov	r3,a
      0010CD 90r05r86         [24] 4442 	mov	dptr,#_appHandleEP5_len_1_178
      0010D0 EC               [12] 4443 	mov	a,r4
      0010D1 F0               [24] 4444 	movx	@dptr,a
      0010D2 EB               [12] 4445 	mov	a,r3
      0010D3 A3               [24] 4446 	inc	dptr
      0010D4 F0               [24] 4447 	movx	@dptr,a
                                   4448 ;	appFHSSNIC.c:922: blocks = buf[2];
      0010D5 8D 82            [24] 4449 	mov	dpl,r5
      0010D7 8E 83            [24] 4450 	mov	dph,r6
      0010D9 A3               [24] 4451 	inc	dptr
      0010DA A3               [24] 4452 	inc	dptr
      0010DB E0               [24] 4453 	movx	a,@dptr
      0010DC FA               [12] 4454 	mov	r2,a
                                   4455 ;	appFHSSNIC.c:923: txTotal= 0;
      0010DD 90r00r00         [24] 4456 	mov	dptr,#_txTotal
      0010E0 E4               [12] 4457 	clr	a
      0010E1 F0               [24] 4458 	movx	@dptr,a
      0010E2 A3               [24] 4459 	inc	dptr
      0010E3 F0               [24] 4460 	movx	@dptr,a
                                   4461 ;	appFHSSNIC.c:924: buf[0] = transmit_long(&buf[3], len, blocks);
      0010E4 74 03            [12] 4462 	mov	a,#0x03
      0010E6 2D               [12] 4463 	add	a,r5
      0010E7 F8               [12] 4464 	mov	r0,a
      0010E8 E4               [12] 4465 	clr	a
      0010E9 3E               [12] 4466 	addc	a,r6
      0010EA F9               [12] 4467 	mov	r1,a
      0010EB 90r05r57         [24] 4468 	mov	dptr,#_transmit_long_PARM_2
      0010EE EC               [12] 4469 	mov	a,r4
      0010EF F0               [24] 4470 	movx	@dptr,a
      0010F0 EB               [12] 4471 	mov	a,r3
      0010F1 A3               [24] 4472 	inc	dptr
      0010F2 F0               [24] 4473 	movx	@dptr,a
      0010F3 90r05r59         [24] 4474 	mov	dptr,#_transmit_long_PARM_3
      0010F6 EA               [12] 4475 	mov	a,r2
      0010F7 F0               [24] 4476 	movx	@dptr,a
      0010F8 88 82            [24] 4477 	mov	dpl,r0
      0010FA 89 83            [24] 4478 	mov	dph,r1
      0010FC C0 07            [24] 4479 	push	ar7
      0010FE C0 06            [24] 4480 	push	ar6
      001100 C0 05            [24] 4481 	push	ar5
      001102 12r00rA3         [24] 4482 	lcall	_transmit_long
      001105 AC 82            [24] 4483 	mov	r4,dpl
      001107 D0 05            [24] 4484 	pop	ar5
      001109 D0 06            [24] 4485 	pop	ar6
      00110B D0 07            [24] 4486 	pop	ar7
      00110D 8D 82            [24] 4487 	mov	dpl,r5
      00110F 8E 83            [24] 4488 	mov	dph,r6
      001111 8F F0            [24] 4489 	mov	b,r7
      001113 EC               [12] 4490 	mov	a,r4
      001114 12r00r00         [24] 4491 	lcall	__gptrput
                                   4492 ;	appFHSSNIC.c:925: appReturn( 1, buf);
      001117 90r00r00         [24] 4493 	mov	dptr,#_appReturn_PARM_2
      00111A ED               [12] 4494 	mov	a,r5
      00111B F0               [24] 4495 	movx	@dptr,a
      00111C EE               [12] 4496 	mov	a,r6
      00111D A3               [24] 4497 	inc	dptr
      00111E F0               [24] 4498 	movx	@dptr,a
      00111F 75 82 01         [24] 4499 	mov	dpl,#0x01
      001122 12r00r00         [24] 4500 	lcall	_appReturn
                                   4501 ;	appFHSSNIC.c:926: break;
      001125 02r16rA7         [24] 4502 	ljmp	00172$
                                   4503 ;	appFHSSNIC.c:928: case NIC_LONG_XMIT_MORE:
      001128                       4504 00123$:
                                   4505 ;	appFHSSNIC.c:929: len = buf[0];
      001128 8D 82            [24] 4506 	mov	dpl,r5
      00112A 8E 83            [24] 4507 	mov	dph,r6
      00112C 8F F0            [24] 4508 	mov	b,r7
      00112E 12r00r00         [24] 4509 	lcall	__gptrget
      001131 FB               [12] 4510 	mov	r3,a
      001132 7C 00            [12] 4511 	mov	r4,#0x00
      001134 90r05r86         [24] 4512 	mov	dptr,#_appHandleEP5_len_1_178
      001137 EB               [12] 4513 	mov	a,r3
      001138 F0               [24] 4514 	movx	@dptr,a
      001139 EC               [12] 4515 	mov	a,r4
      00113A A3               [24] 4516 	inc	dptr
      00113B F0               [24] 4517 	movx	@dptr,a
                                   4518 ;	appFHSSNIC.c:930: if (len == 0)
      00113C EB               [12] 4519 	mov	a,r3
      00113D 4C               [12] 4520 	orl	a,r4
      00113E 60 03            [24] 4521 	jz	00241$
      001140 02r12r30         [24] 4522 	ljmp	00131$
      001143                       4523 00241$:
                                   4524 ;	appFHSSNIC.c:933: while (rfTxTotalTXLen && MARCSTATE == MARC_STATE_TX) 
      001143                       4525 00125$:
      001143 90r00r00         [24] 4526 	mov	dptr,#_rfTxTotalTXLen
      001146 E0               [24] 4527 	movx	a,@dptr
      001147 A3               [24] 4528 	inc	dptr
      001148 E0               [24] 4529 	movx	a,@dptr
      001149 90r00r00         [24] 4530 	mov	dptr,#_rfTxTotalTXLen
      00114C E0               [24] 4531 	movx	a,@dptr
      00114D F5 F0            [12] 4532 	mov	b,a
      00114F A3               [24] 4533 	inc	dptr
      001150 E0               [24] 4534 	movx	a,@dptr
      001151 45 F0            [12] 4535 	orl	a,b
      001153 60 1C            [24] 4536 	jz	00127$
      001155 90 DF 3B         [24] 4537 	mov	dptr,#_MARCSTATE
      001158 E0               [24] 4538 	movx	a,@dptr
      001159 FA               [12] 4539 	mov	r2,a
      00115A BA 13 14         [24] 4540 	cjne	r2,#0x13,00127$
                                   4541 ;	appFHSSNIC.c:935: sleepMillis(40); // delay to avoid race condition that will cause mis-read of rfTxTotalTXLen == 0
      00115D 90 00 28         [24] 4542 	mov	dptr,#0x0028
      001160 C0 07            [24] 4543 	push	ar7
      001162 C0 06            [24] 4544 	push	ar6
      001164 C0 05            [24] 4545 	push	ar5
      001166 12r00r00         [24] 4546 	lcall	_sleepMillis
      001169 D0 05            [24] 4547 	pop	ar5
      00116B D0 06            [24] 4548 	pop	ar6
      00116D D0 07            [24] 4549 	pop	ar7
      00116F 80 D2            [24] 4550 	sjmp	00125$
      001171                       4551 00127$:
                                   4552 ;	appFHSSNIC.c:937: if(rfTxTotalTXLen)
      001171 90r00r00         [24] 4553 	mov	dptr,#_rfTxTotalTXLen
      001174 E0               [24] 4554 	movx	a,@dptr
      001175 A3               [24] 4555 	inc	dptr
      001176 E0               [24] 4556 	movx	a,@dptr
      001177 90r00r00         [24] 4557 	mov	dptr,#_rfTxTotalTXLen
      00117A E0               [24] 4558 	movx	a,@dptr
      00117B F5 F0            [12] 4559 	mov	b,a
      00117D A3               [24] 4560 	inc	dptr
      00117E E0               [24] 4561 	movx	a,@dptr
      00117F 45 F0            [12] 4562 	orl	a,b
      001181 60 6B            [24] 4563 	jz	00129$
                                   4564 ;	appFHSSNIC.c:939: debug("dropout final wait!");
      001183 90r01r43         [24] 4565 	mov	dptr,#___str_10
      001186 C0 07            [24] 4566 	push	ar7
      001188 C0 06            [24] 4567 	push	ar6
      00118A C0 05            [24] 4568 	push	ar5
      00118C 12r00r00         [24] 4569 	lcall	_debug
                                   4570 ;	appFHSSNIC.c:940: debughex16(rfTxTotalTXLen);
      00118F 90r00r00         [24] 4571 	mov	dptr,#_rfTxTotalTXLen
      001192 E0               [24] 4572 	movx	a,@dptr
      001193 F9               [12] 4573 	mov	r1,a
      001194 A3               [24] 4574 	inc	dptr
      001195 E0               [24] 4575 	movx	a,@dptr
      001196 FA               [12] 4576 	mov	r2,a
      001197 89 82            [24] 4577 	mov	dpl,r1
      001199 8A 83            [24] 4578 	mov	dph,r2
      00119B 12r00r00         [24] 4579 	lcall	_debughex16
                                   4580 ;	appFHSSNIC.c:941: debughex(g_txMsgQueue[0][0]);
      00119E 90r03r72         [24] 4581 	mov	dptr,#_g_txMsgQueue
      0011A1 E0               [24] 4582 	movx	a,@dptr
      0011A2 F5 82            [12] 4583 	mov	dpl,a
      0011A4 12r00r00         [24] 4584 	lcall	_debughex
                                   4585 ;	appFHSSNIC.c:942: debughex(g_txMsgQueue[1][0]);
      0011A7 90r04r63         [24] 4586 	mov	dptr,#(_g_txMsgQueue + 0x00f1)
      0011AA E0               [24] 4587 	movx	a,@dptr
      0011AB F5 82            [12] 4588 	mov	dpl,a
      0011AD 12r00r00         [24] 4589 	lcall	_debughex
      0011B0 D0 05            [24] 4590 	pop	ar5
      0011B2 D0 06            [24] 4591 	pop	ar6
      0011B4 D0 07            [24] 4592 	pop	ar7
                                   4593 ;	appFHSSNIC.c:943: lastCode[1] = LCE_DROPPED_PACKET;
      0011B6 90r00r01         [24] 4594 	mov	dptr,#(_lastCode + 0x0001)
      0011B9 74 12            [12] 4595 	mov	a,#0x12
      0011BB F0               [24] 4596 	movx	@dptr,a
                                   4597 ;	appFHSSNIC.c:944: buf[0] = RC_TX_DROPPED_PACKET;
      0011BC 8D 82            [24] 4598 	mov	dpl,r5
      0011BE 8E 83            [24] 4599 	mov	dph,r6
      0011C0 8F F0            [24] 4600 	mov	b,r7
      0011C2 74 EC            [12] 4601 	mov	a,#0xEC
      0011C4 12r00r00         [24] 4602 	lcall	__gptrput
                                   4603 ;	appFHSSNIC.c:945: LED = 0;
      0011C7 C2 A4            [12] 4604 	clr	_P2_4
                                   4605 ;	appFHSSNIC.c:946: resetRFSTATE();
      0011C9 C0 07            [24] 4606 	push	ar7
      0011CB C0 06            [24] 4607 	push	ar6
      0011CD C0 05            [24] 4608 	push	ar5
      0011CF 12r00r00         [24] 4609 	lcall	_resetRFSTATE
      0011D2 D0 05            [24] 4610 	pop	ar5
      0011D4 D0 06            [24] 4611 	pop	ar6
      0011D6 D0 07            [24] 4612 	pop	ar7
                                   4613 ;	appFHSSNIC.c:947: macdata.mac_state = MAC_STATE_NONHOPPING;
      0011D8 90r00r00         [24] 4614 	mov	dptr,#_macdata
      0011DB E4               [12] 4615 	clr	a
      0011DC F0               [24] 4616 	movx	@dptr,a
                                   4617 ;	appFHSSNIC.c:948: appReturn( 1, buf);
      0011DD 90r00r00         [24] 4618 	mov	dptr,#_appReturn_PARM_2
      0011E0 ED               [12] 4619 	mov	a,r5
      0011E1 F0               [24] 4620 	movx	@dptr,a
      0011E2 EE               [12] 4621 	mov	a,r6
      0011E3 A3               [24] 4622 	inc	dptr
      0011E4 F0               [24] 4623 	movx	@dptr,a
      0011E5 75 82 01         [24] 4624 	mov	dpl,#0x01
      0011E8 12r00r00         [24] 4625 	lcall	_appReturn
                                   4626 ;	appFHSSNIC.c:949: break;
      0011EB 02r16rA7         [24] 4627 	ljmp	00172$
      0011EE                       4628 00129$:
                                   4629 ;	appFHSSNIC.c:951: LED = 0;
      0011EE C2 A4            [12] 4630 	clr	_P2_4
                                   4631 ;	appFHSSNIC.c:952: macdata.mac_state = MAC_STATE_NONHOPPING;
      0011F0 90r00r00         [24] 4632 	mov	dptr,#_macdata
      0011F3 E4               [12] 4633 	clr	a
      0011F4 F0               [24] 4634 	movx	@dptr,a
                                   4635 ;	appFHSSNIC.c:953: buf[0] = LCE_NO_ERROR;
      0011F5 8D 82            [24] 4636 	mov	dpl,r5
      0011F7 8E 83            [24] 4637 	mov	dph,r6
      0011F9 8F F0            [24] 4638 	mov	b,r7
      0011FB 12r00r00         [24] 4639 	lcall	__gptrput
                                   4640 ;	appFHSSNIC.c:954: debug("total bytes tx:");
      0011FE 90r01r57         [24] 4641 	mov	dptr,#___str_11
      001201 C0 07            [24] 4642 	push	ar7
      001203 C0 06            [24] 4643 	push	ar6
      001205 C0 05            [24] 4644 	push	ar5
      001207 12r00r00         [24] 4645 	lcall	_debug
                                   4646 ;	appFHSSNIC.c:955: debughex16(txTotal);
      00120A 90r00r00         [24] 4647 	mov	dptr,#_txTotal
      00120D E0               [24] 4648 	movx	a,@dptr
      00120E F9               [12] 4649 	mov	r1,a
      00120F A3               [24] 4650 	inc	dptr
      001210 E0               [24] 4651 	movx	a,@dptr
      001211 FA               [12] 4652 	mov	r2,a
      001212 89 82            [24] 4653 	mov	dpl,r1
      001214 8A 83            [24] 4654 	mov	dph,r2
      001216 12r00r00         [24] 4655 	lcall	_debughex16
      001219 D0 05            [24] 4656 	pop	ar5
      00121B D0 06            [24] 4657 	pop	ar6
      00121D D0 07            [24] 4658 	pop	ar7
                                   4659 ;	appFHSSNIC.c:956: appReturn( 1, buf);
      00121F 90r00r00         [24] 4660 	mov	dptr,#_appReturn_PARM_2
      001222 ED               [12] 4661 	mov	a,r5
      001223 F0               [24] 4662 	movx	@dptr,a
      001224 EE               [12] 4663 	mov	a,r6
      001225 A3               [24] 4664 	inc	dptr
      001226 F0               [24] 4665 	movx	@dptr,a
      001227 75 82 01         [24] 4666 	mov	dpl,#0x01
      00122A 12r00r00         [24] 4667 	lcall	_appReturn
                                   4668 ;	appFHSSNIC.c:957: break;
      00122D 02r16rA7         [24] 4669 	ljmp	00172$
      001230                       4670 00131$:
                                   4671 ;	appFHSSNIC.c:960: if (macdata.mac_state != MAC_STATE_LONG_XMIT)
      001230 90r00r00         [24] 4672 	mov	dptr,#_macdata
      001233 E0               [24] 4673 	movx	a,@dptr
      001234 FA               [12] 4674 	mov	r2,a
      001235 BA 06 02         [24] 4675 	cjne	r2,#0x06,00246$
      001238 80 61            [24] 4676 	sjmp	00136$
      00123A                       4677 00246$:
                                   4678 ;	appFHSSNIC.c:962: debug("underrun");
      00123A 90r01r67         [24] 4679 	mov	dptr,#___str_12
      00123D C0 07            [24] 4680 	push	ar7
      00123F C0 06            [24] 4681 	push	ar6
      001241 C0 05            [24] 4682 	push	ar5
      001243 12r00r00         [24] 4683 	lcall	_debug
      001246 D0 05            [24] 4684 	pop	ar5
      001248 D0 06            [24] 4685 	pop	ar6
      00124A D0 07            [24] 4686 	pop	ar7
                                   4687 ;	appFHSSNIC.c:964: if(lastCode[1] == LCE_DROPPED_PACKET)
      00124C 90r00r01         [24] 4688 	mov	dptr,#(_lastCode + 0x0001)
      00124F E0               [24] 4689 	movx	a,@dptr
      001250 FA               [12] 4690 	mov	r2,a
      001251 BA 12 1B         [24] 4691 	cjne	r2,#0x12,00133$
                                   4692 ;	appFHSSNIC.c:966: buf[0] = RC_TX_DROPPED_PACKET;
      001254 8D 82            [24] 4693 	mov	dpl,r5
      001256 8E 83            [24] 4694 	mov	dph,r6
      001258 8F F0            [24] 4695 	mov	b,r7
      00125A 74 EC            [12] 4696 	mov	a,#0xEC
      00125C 12r00r00         [24] 4697 	lcall	__gptrput
                                   4698 ;	appFHSSNIC.c:967: appReturn( 1, buf);
      00125F 90r00r00         [24] 4699 	mov	dptr,#_appReturn_PARM_2
      001262 ED               [12] 4700 	mov	a,r5
      001263 F0               [24] 4701 	movx	@dptr,a
      001264 EE               [12] 4702 	mov	a,r6
      001265 A3               [24] 4703 	inc	dptr
      001266 F0               [24] 4704 	movx	@dptr,a
      001267 75 82 01         [24] 4705 	mov	dpl,#0x01
      00126A 12r00r00         [24] 4706 	lcall	_appReturn
      00126D 80 1F            [24] 4707 	sjmp	00134$
      00126F                       4708 00133$:
                                   4709 ;	appFHSSNIC.c:971: lastCode[1] = LCE_RF_MULTI_BUFFER_NOT_INIT;
      00126F 90r00r01         [24] 4710 	mov	dptr,#(_lastCode + 0x0001)
      001272 74 17            [12] 4711 	mov	a,#0x17
      001274 F0               [24] 4712 	movx	@dptr,a
                                   4713 ;	appFHSSNIC.c:972: buf[0] = RC_RF_MODE_INCOMPAT;
      001275 8D 82            [24] 4714 	mov	dpl,r5
      001277 8E 83            [24] 4715 	mov	dph,r6
      001279 8F F0            [24] 4716 	mov	b,r7
      00127B 74 EF            [12] 4717 	mov	a,#0xEF
      00127D 12r00r00         [24] 4718 	lcall	__gptrput
                                   4719 ;	appFHSSNIC.c:973: appReturn( 1, buf);
      001280 90r00r00         [24] 4720 	mov	dptr,#_appReturn_PARM_2
      001283 ED               [12] 4721 	mov	a,r5
      001284 F0               [24] 4722 	movx	@dptr,a
      001285 EE               [12] 4723 	mov	a,r6
      001286 A3               [24] 4724 	inc	dptr
      001287 F0               [24] 4725 	movx	@dptr,a
      001288 75 82 01         [24] 4726 	mov	dpl,#0x01
      00128B 12r00r00         [24] 4727 	lcall	_appReturn
      00128E                       4728 00134$:
                                   4729 ;	appFHSSNIC.c:975: LED = 0;
      00128E C2 A4            [12] 4730 	clr	_P2_4
                                   4731 ;	appFHSSNIC.c:976: resetRFSTATE();
      001290 12r00r00         [24] 4732 	lcall	_resetRFSTATE
                                   4733 ;	appFHSSNIC.c:977: macdata.mac_state = MAC_STATE_NONHOPPING;
      001293 90r00r00         [24] 4734 	mov	dptr,#_macdata
      001296 E4               [12] 4735 	clr	a
      001297 F0               [24] 4736 	movx	@dptr,a
                                   4737 ;	appFHSSNIC.c:978: break;
      001298 02r16rA7         [24] 4738 	ljmp	00172$
      00129B                       4739 00136$:
                                   4740 ;	appFHSSNIC.c:981: buf[0] = MAC_tx(&buf[1], (__xdata u8) len);
      00129B 74 01            [12] 4741 	mov	a,#0x01
      00129D 2D               [12] 4742 	add	a,r5
      00129E F9               [12] 4743 	mov	r1,a
      00129F E4               [12] 4744 	clr	a
      0012A0 3E               [12] 4745 	addc	a,r6
      0012A1 FA               [12] 4746 	mov	r2,a
      0012A2 90r05r5C         [24] 4747 	mov	dptr,#_MAC_tx_PARM_2
      0012A5 EB               [12] 4748 	mov	a,r3
      0012A6 F0               [24] 4749 	movx	@dptr,a
      0012A7 89 82            [24] 4750 	mov	dpl,r1
      0012A9 8A 83            [24] 4751 	mov	dph,r2
      0012AB C0 07            [24] 4752 	push	ar7
      0012AD C0 06            [24] 4753 	push	ar6
      0012AF C0 05            [24] 4754 	push	ar5
      0012B1 12r02r48         [24] 4755 	lcall	_MAC_tx
      0012B4 AC 82            [24] 4756 	mov	r4,dpl
      0012B6 D0 05            [24] 4757 	pop	ar5
      0012B8 D0 06            [24] 4758 	pop	ar6
      0012BA D0 07            [24] 4759 	pop	ar7
      0012BC 8D 82            [24] 4760 	mov	dpl,r5
      0012BE 8E 83            [24] 4761 	mov	dph,r6
      0012C0 8F F0            [24] 4762 	mov	b,r7
      0012C2 EC               [12] 4763 	mov	a,r4
      0012C3 12r00r00         [24] 4764 	lcall	__gptrput
                                   4765 ;	appFHSSNIC.c:983: if(buf[0] && buf[0] != RC_ERR_BUFFER_NOT_AVAILABLE)
      0012C6 8D 82            [24] 4766 	mov	dpl,r5
      0012C8 8E 83            [24] 4767 	mov	dph,r6
      0012CA 8F F0            [24] 4768 	mov	b,r7
      0012CC 12r00r00         [24] 4769 	lcall	__gptrget
      0012CF FB               [12] 4770 	mov	r3,a
      0012D0 EC               [12] 4771 	mov	a,r4
      0012D1 60 3B            [24] 4772 	jz	00138$
      0012D3 BB FE 02         [24] 4773 	cjne	r3,#0xFE,00250$
      0012D6 80 36            [24] 4774 	sjmp	00138$
      0012D8                       4775 00250$:
                                   4776 ;	appFHSSNIC.c:985: debug("buffer error");
      0012D8 90r01r70         [24] 4777 	mov	dptr,#___str_13
      0012DB C0 07            [24] 4778 	push	ar7
      0012DD C0 06            [24] 4779 	push	ar6
      0012DF C0 05            [24] 4780 	push	ar5
      0012E1 12r00r00         [24] 4781 	lcall	_debug
      0012E4 D0 05            [24] 4782 	pop	ar5
      0012E6 D0 06            [24] 4783 	pop	ar6
      0012E8 D0 07            [24] 4784 	pop	ar7
                                   4785 ;	appFHSSNIC.c:986: debughex(buf[0]);
      0012EA 8D 82            [24] 4786 	mov	dpl,r5
      0012EC 8E 83            [24] 4787 	mov	dph,r6
      0012EE 8F F0            [24] 4788 	mov	b,r7
      0012F0 12r00r00         [24] 4789 	lcall	__gptrget
      0012F3 F5 82            [12] 4790 	mov	dpl,a
      0012F5 C0 07            [24] 4791 	push	ar7
      0012F7 C0 06            [24] 4792 	push	ar6
      0012F9 C0 05            [24] 4793 	push	ar5
      0012FB 12r00r00         [24] 4794 	lcall	_debughex
                                   4795 ;	appFHSSNIC.c:987: LED = 0;
      0012FE C2 A4            [12] 4796 	clr	_P2_4
                                   4797 ;	appFHSSNIC.c:988: resetRFSTATE();
      001300 12r00r00         [24] 4798 	lcall	_resetRFSTATE
      001303 D0 05            [24] 4799 	pop	ar5
      001305 D0 06            [24] 4800 	pop	ar6
      001307 D0 07            [24] 4801 	pop	ar7
                                   4802 ;	appFHSSNIC.c:989: macdata.mac_state = MAC_STATE_NONHOPPING;
      001309 90r00r00         [24] 4803 	mov	dptr,#_macdata
      00130C E4               [12] 4804 	clr	a
      00130D F0               [24] 4805 	movx	@dptr,a
      00130E                       4806 00138$:
                                   4807 ;	appFHSSNIC.c:991: appReturn( 1, buf);
      00130E 90r00r00         [24] 4808 	mov	dptr,#_appReturn_PARM_2
      001311 ED               [12] 4809 	mov	a,r5
      001312 F0               [24] 4810 	movx	@dptr,a
      001313 EE               [12] 4811 	mov	a,r6
      001314 A3               [24] 4812 	inc	dptr
      001315 F0               [24] 4813 	movx	@dptr,a
      001316 75 82 01         [24] 4814 	mov	dpl,#0x01
      001319 12r00r00         [24] 4815 	lcall	_appReturn
                                   4816 ;	appFHSSNIC.c:992: break;
      00131C 02r16rA7         [24] 4817 	ljmp	00172$
                                   4818 ;	appFHSSNIC.c:994: case FHSS_XMIT:
      00131F                       4819 00140$:
                                   4820 ;	appFHSSNIC.c:995: len = buf[0];
      00131F 8D 82            [24] 4821 	mov	dpl,r5
      001321 8E 83            [24] 4822 	mov	dph,r6
      001323 8F F0            [24] 4823 	mov	b,r7
      001325 12r00r00         [24] 4824 	lcall	__gptrget
      001328 FB               [12] 4825 	mov	r3,a
      001329 7C 00            [12] 4826 	mov	r4,#0x00
      00132B 90r05r86         [24] 4827 	mov	dptr,#_appHandleEP5_len_1_178
      00132E EB               [12] 4828 	mov	a,r3
      00132F F0               [24] 4829 	movx	@dptr,a
      001330 EC               [12] 4830 	mov	a,r4
      001331 A3               [24] 4831 	inc	dptr
      001332 F0               [24] 4832 	movx	@dptr,a
                                   4833 ;	appFHSSNIC.c:1004: if (len > MAX_TX_MSGLEN)
      001333 C3               [12] 4834 	clr	c
      001334 74 F0            [12] 4835 	mov	a,#0xF0
      001336 9B               [12] 4836 	subb	a,r3
      001337 E4               [12] 4837 	clr	a
      001338 9C               [12] 4838 	subb	a,r4
      001339 50 19            [24] 4839 	jnc	00142$
                                   4840 ;	appFHSSNIC.c:1006: debug("FHSSxmit message too long");
      00133B 90r00r7B         [24] 4841 	mov	dptr,#___str_3
      00133E 12r00r00         [24] 4842 	lcall	_debug
                                   4843 ;	appFHSSNIC.c:1007: appReturn( 1, (__xdata u8*)&len);
      001341 90r00r00         [24] 4844 	mov	dptr,#_appReturn_PARM_2
      001344 74r86            [12] 4845 	mov	a,#_appHandleEP5_len_1_178
      001346 F0               [24] 4846 	movx	@dptr,a
      001347 74s05            [12] 4847 	mov	a,#(_appHandleEP5_len_1_178 >> 8)
      001349 A3               [24] 4848 	inc	dptr
      00134A F0               [24] 4849 	movx	@dptr,a
      00134B 75 82 01         [24] 4850 	mov	dpl,#0x01
      00134E 12r00r00         [24] 4851 	lcall	_appReturn
                                   4852 ;	appFHSSNIC.c:1008: break;
      001351 02r16rA7         [24] 4853 	ljmp	00172$
      001354                       4854 00142$:
                                   4855 ;	appFHSSNIC.c:1011: if (g_txMsgQueue[macdata.txMsgIdx][0] != 0)
      001354 90r00r11         [24] 4856 	mov	dptr,#(_macdata + 0x0011)
      001357 E0               [24] 4857 	movx	a,@dptr
      001358 75 F0 F1         [24] 4858 	mov	b,#0xF1
      00135B A4               [48] 4859 	mul	ab
      00135C 24r72            [12] 4860 	add	a,#_g_txMsgQueue
      00135E F9               [12] 4861 	mov	r1,a
      00135F 74s03            [12] 4862 	mov	a,#(_g_txMsgQueue >> 8)
      001361 35 F0            [12] 4863 	addc	a,b
      001363 FA               [12] 4864 	mov	r2,a
      001364 89 82            [24] 4865 	mov	dpl,r1
      001366 8A 83            [24] 4866 	mov	dph,r2
      001368 E0               [24] 4867 	movx	a,@dptr
      001369 60 19            [24] 4868 	jz	00144$
                                   4869 ;	appFHSSNIC.c:1013: debug("still waiting on the last packet");
      00136B 90r01r7D         [24] 4870 	mov	dptr,#___str_14
      00136E 12r00r00         [24] 4871 	lcall	_debug
                                   4872 ;	appFHSSNIC.c:1014: appReturn( 1, (__xdata u8*)&len);
      001371 90r00r00         [24] 4873 	mov	dptr,#_appReturn_PARM_2
      001374 74r86            [12] 4874 	mov	a,#_appHandleEP5_len_1_178
      001376 F0               [24] 4875 	movx	@dptr,a
      001377 74s05            [12] 4876 	mov	a,#(_appHandleEP5_len_1_178 >> 8)
      001379 A3               [24] 4877 	inc	dptr
      00137A F0               [24] 4878 	movx	@dptr,a
      00137B 75 82 01         [24] 4879 	mov	dpl,#0x01
      00137E 12r00r00         [24] 4880 	lcall	_appReturn
                                   4881 ;	appFHSSNIC.c:1015: break;
      001381 02r16rA7         [24] 4882 	ljmp	00172$
      001384                       4883 00144$:
                                   4884 ;	appFHSSNIC.c:1018: g_txMsgQueue[macdata.txMsgIdx][0] = len;
      001384 8B 00            [24] 4885 	mov	ar0,r3
      001386 89 82            [24] 4886 	mov	dpl,r1
      001388 8A 83            [24] 4887 	mov	dph,r2
      00138A E8               [12] 4888 	mov	a,r0
      00138B F0               [24] 4889 	movx	@dptr,a
                                   4890 ;	appFHSSNIC.c:1019: memcpy(&g_txMsgQueue[macdata.txMsgIdx][1], &buf[1], len);
      00138C 90r00r11         [24] 4891 	mov	dptr,#(_macdata + 0x0011)
      00138F E0               [24] 4892 	movx	a,@dptr
      001390 75 F0 F1         [24] 4893 	mov	b,#0xF1
      001393 A4               [48] 4894 	mul	ab
      001394 24r72            [12] 4895 	add	a,#_g_txMsgQueue
      001396 F9               [12] 4896 	mov	r1,a
      001397 74s03            [12] 4897 	mov	a,#(_g_txMsgQueue >> 8)
      001399 35 F0            [12] 4898 	addc	a,b
      00139B FA               [12] 4899 	mov	r2,a
      00139C 09               [12] 4900 	inc	r1
      00139D B9 00 01         [24] 4901 	cjne	r1,#0x00,00253$
      0013A0 0A               [12] 4902 	inc	r2
      0013A1                       4903 00253$:
      0013A1 89*02            [24] 4904 	mov	_appHandleEP5_sloc1_1_0,r1
      0013A3 8A*03            [24] 4905 	mov	(_appHandleEP5_sloc1_1_0 + 1),r2
      0013A5 75*04 00         [24] 4906 	mov	(_appHandleEP5_sloc1_1_0 + 2),#0x00
      0013A8 74 01            [12] 4907 	mov	a,#0x01
      0013AA 2D               [12] 4908 	add	a,r5
      0013AB F9               [12] 4909 	mov	r1,a
      0013AC E4               [12] 4910 	clr	a
      0013AD 3E               [12] 4911 	addc	a,r6
      0013AE FA               [12] 4912 	mov	r2,a
      0013AF 89*00            [24] 4913 	mov	_memcpy_PARM_2,r1
      0013B1 8A*01            [24] 4914 	mov	(_memcpy_PARM_2 + 1),r2
      0013B3 75*02 00         [24] 4915 	mov	(_memcpy_PARM_2 + 2),#0x00
      0013B6 8B*00            [24] 4916 	mov	_memcpy_PARM_3,r3
      0013B8 8C*01            [24] 4917 	mov	(_memcpy_PARM_3 + 1),r4
      0013BA 85*02 82         [24] 4918 	mov	dpl,_appHandleEP5_sloc1_1_0
      0013BD 85*03 83         [24] 4919 	mov	dph,(_appHandleEP5_sloc1_1_0 + 1)
      0013C0 85*04 F0         [24] 4920 	mov	b,(_appHandleEP5_sloc1_1_0 + 2)
      0013C3 12r00r00         [24] 4921 	lcall	_memcpy
                                   4922 ;	appFHSSNIC.c:1021: if (++macdata.txMsgIdx >= MAX_TX_MSGS)
      0013C6 90r00r11         [24] 4923 	mov	dptr,#(_macdata + 0x0011)
      0013C9 E0               [24] 4924 	movx	a,@dptr
      0013CA FC               [12] 4925 	mov	r4,a
      0013CB 0C               [12] 4926 	inc	r4
      0013CC 90r00r11         [24] 4927 	mov	dptr,#(_macdata + 0x0011)
      0013CF EC               [12] 4928 	mov	a,r4
      0013D0 F0               [24] 4929 	movx	@dptr,a
      0013D1 BC 02 00         [24] 4930 	cjne	r4,#0x02,00254$
      0013D4                       4931 00254$:
      0013D4 40 05            [24] 4932 	jc	00146$
                                   4933 ;	appFHSSNIC.c:1023: macdata.txMsgIdx = 0;
      0013D6 90r00r11         [24] 4934 	mov	dptr,#(_macdata + 0x0011)
      0013D9 E4               [12] 4935 	clr	a
      0013DA F0               [24] 4936 	movx	@dptr,a
      0013DB                       4937 00146$:
                                   4938 ;	appFHSSNIC.c:1026: appReturn( 1, (__xdata u8*)&len);
      0013DB 90r00r00         [24] 4939 	mov	dptr,#_appReturn_PARM_2
      0013DE 74r86            [12] 4940 	mov	a,#_appHandleEP5_len_1_178
      0013E0 F0               [24] 4941 	movx	@dptr,a
      0013E1 74s05            [12] 4942 	mov	a,#(_appHandleEP5_len_1_178 >> 8)
      0013E3 A3               [24] 4943 	inc	dptr
      0013E4 F0               [24] 4944 	movx	@dptr,a
      0013E5 75 82 01         [24] 4945 	mov	dpl,#0x01
      0013E8 12r00r00         [24] 4946 	lcall	_appReturn
                                   4947 ;	appFHSSNIC.c:1027: break;
      0013EB 02r16rA7         [24] 4948 	ljmp	00172$
                                   4949 ;	appFHSSNIC.c:1029: case FHSS_SET_CHANNELS:
      0013EE                       4950 00147$:
                                   4951 ;	appFHSSNIC.c:1030: macdata.NumChannels = (__xdata u16)buf[0];
      0013EE 8D 82            [24] 4952 	mov	dpl,r5
      0013F0 8E 83            [24] 4953 	mov	dph,r6
      0013F2 8F F0            [24] 4954 	mov	b,r7
      0013F4 12r00r00         [24] 4955 	lcall	__gptrget
      0013F7 FC               [12] 4956 	mov	r4,a
      0013F8 7B 00            [12] 4957 	mov	r3,#0x00
      0013FA 90r00r05         [24] 4958 	mov	dptr,#(_macdata + 0x0005)
      0013FD EC               [12] 4959 	mov	a,r4
      0013FE F0               [24] 4960 	movx	@dptr,a
      0013FF EB               [12] 4961 	mov	a,r3
      001400 A3               [24] 4962 	inc	dptr
      001401 F0               [24] 4963 	movx	@dptr,a
                                   4964 ;	appFHSSNIC.c:1031: if (macdata.NumChannels <= MAX_CHANNELS)
      001402 90r00r05         [24] 4965 	mov	dptr,#(_macdata + 0x0005)
      001405 E0               [24] 4966 	movx	a,@dptr
      001406 F9               [12] 4967 	mov	r1,a
      001407 A3               [24] 4968 	inc	dptr
      001408 E0               [24] 4969 	movx	a,@dptr
      001409 FA               [12] 4970 	mov	r2,a
      00140A C3               [12] 4971 	clr	c
      00140B 74 70            [12] 4972 	mov	a,#0x70
      00140D 9C               [12] 4973 	subb	a,r4
      00140E 74 03            [12] 4974 	mov	a,#0x03
      001410 9B               [12] 4975 	subb	a,r3
      001411 40 2E            [24] 4976 	jc	00149$
                                   4977 ;	appFHSSNIC.c:1034: memcpy(&g_Channels[0], &buf[2], macdata.NumChannels);
      001413 74 02            [12] 4978 	mov	a,#0x02
      001415 2D               [12] 4979 	add	a,r5
      001416 FB               [12] 4980 	mov	r3,a
      001417 E4               [12] 4981 	clr	a
      001418 3E               [12] 4982 	addc	a,r6
      001419 FC               [12] 4983 	mov	r4,a
      00141A 8B*00            [24] 4984 	mov	_memcpy_PARM_2,r3
      00141C 8C*01            [24] 4985 	mov	(_memcpy_PARM_2 + 1),r4
      00141E 75*02 00         [24] 4986 	mov	(_memcpy_PARM_2 + 2),#0x00
      001421 89*00            [24] 4987 	mov	_memcpy_PARM_3,r1
      001423 8A*01            [24] 4988 	mov	(_memcpy_PARM_3 + 1),r2
      001425 90r00r00         [24] 4989 	mov	dptr,#_g_Channels
      001428 75 F0 00         [24] 4990 	mov	b,#0x00
      00142B 12r00r00         [24] 4991 	lcall	_memcpy
                                   4992 ;	appFHSSNIC.c:1035: appReturn( 2, (u8*)&macdata.NumChannels);
      00142E 90r00r00         [24] 4993 	mov	dptr,#_appReturn_PARM_2
      001431 74r05            [12] 4994 	mov	a,#(_macdata + 0x0005)
      001433 F0               [24] 4995 	movx	@dptr,a
      001434 74s00            [12] 4996 	mov	a,#((_macdata + 0x0005) >> 8)
      001436 A3               [24] 4997 	inc	dptr
      001437 F0               [24] 4998 	movx	@dptr,a
      001438 75 82 02         [24] 4999 	mov	dpl,#0x02
      00143B 12r00r00         [24] 5000 	lcall	_appReturn
      00143E 02r16rA7         [24] 5001 	ljmp	00172$
      001441                       5002 00149$:
                                   5003 ;	appFHSSNIC.c:1037: appReturn( 8, (__xdata u8*)"NO DEAL");
      001441 90r00r00         [24] 5004 	mov	dptr,#_appReturn_PARM_2
      001444 74r9E            [12] 5005 	mov	a,#___str_15
      001446 F0               [24] 5006 	movx	@dptr,a
      001447 74s01            [12] 5007 	mov	a,#(___str_15 >> 8)
      001449 A3               [24] 5008 	inc	dptr
      00144A F0               [24] 5009 	movx	@dptr,a
      00144B 75 82 08         [24] 5010 	mov	dpl,#0x08
      00144E 12r00r00         [24] 5011 	lcall	_appReturn
                                   5012 ;	appFHSSNIC.c:1039: break;
      001451 02r16rA7         [24] 5013 	ljmp	00172$
                                   5014 ;	appFHSSNIC.c:1041: case FHSS_GET_CHANNELS:
      001454                       5015 00151$:
                                   5016 ;	appFHSSNIC.c:1042: appReturn( macdata.NumChannels, &g_Channels[0]);
      001454 90r00r05         [24] 5017 	mov	dptr,#(_macdata + 0x0005)
      001457 E0               [24] 5018 	movx	a,@dptr
      001458 FB               [12] 5019 	mov	r3,a
      001459 A3               [24] 5020 	inc	dptr
      00145A E0               [24] 5021 	movx	a,@dptr
      00145B 90r00r00         [24] 5022 	mov	dptr,#_appReturn_PARM_2
      00145E 74r00            [12] 5023 	mov	a,#_g_Channels
      001460 F0               [24] 5024 	movx	@dptr,a
      001461 74s00            [12] 5025 	mov	a,#(_g_Channels >> 8)
      001463 A3               [24] 5026 	inc	dptr
      001464 F0               [24] 5027 	movx	@dptr,a
      001465 8B 82            [24] 5028 	mov	dpl,r3
      001467 12r00r00         [24] 5029 	lcall	_appReturn
                                   5030 ;	appFHSSNIC.c:1043: break;
      00146A 02r16rA7         [24] 5031 	ljmp	00172$
                                   5032 ;	appFHSSNIC.c:1045: case FHSS_NEXT_CHANNEL:
      00146D                       5033 00152$:
                                   5034 ;	appFHSSNIC.c:1046: MAC_set_chanidx(MAC_getNextChannel());
      00146D 12r05r6E         [24] 5035 	lcall	_MAC_getNextChannel
      001470 7B 00            [12] 5036 	mov	r3,#0x00
      001472 8B 83            [24] 5037 	mov	dph,r3
      001474 12r05r29         [24] 5038 	lcall	_MAC_set_chanidx
                                   5039 ;	appFHSSNIC.c:1047: appReturn( 1, &g_Channels[macdata.curChanIdx]);
      001477 90r00r09         [24] 5040 	mov	dptr,#(_macdata + 0x0009)
      00147A E0               [24] 5041 	movx	a,@dptr
      00147B FB               [12] 5042 	mov	r3,a
      00147C A3               [24] 5043 	inc	dptr
      00147D E0               [24] 5044 	movx	a,@dptr
      00147E FC               [12] 5045 	mov	r4,a
      00147F 90r00r00         [24] 5046 	mov	dptr,#_appReturn_PARM_2
      001482 EB               [12] 5047 	mov	a,r3
      001483 24r00            [12] 5048 	add	a,#_g_Channels
      001485 F0               [24] 5049 	movx	@dptr,a
      001486 EC               [12] 5050 	mov	a,r4
      001487 34s00            [12] 5051 	addc	a,#(_g_Channels >> 8)
      001489 A3               [24] 5052 	inc	dptr
      00148A F0               [24] 5053 	movx	@dptr,a
      00148B 75 82 01         [24] 5054 	mov	dpl,#0x01
      00148E 12r00r00         [24] 5055 	lcall	_appReturn
                                   5056 ;	appFHSSNIC.c:1048: break;
      001491 02r16rA7         [24] 5057 	ljmp	00172$
                                   5058 ;	appFHSSNIC.c:1050: case FHSS_CHANGE_CHANNEL:
      001494                       5059 00153$:
                                   5060 ;	appFHSSNIC.c:1051: PHY_set_channel(buf[0]);
      001494 8D 82            [24] 5061 	mov	dpl,r5
      001496 8E 83            [24] 5062 	mov	dph,r6
      001498 8F F0            [24] 5063 	mov	b,r7
      00149A 12r00r00         [24] 5064 	lcall	__gptrget
      00149D FC               [12] 5065 	mov	r4,a
      00149E 7B 00            [12] 5066 	mov	r3,#0x00
      0014A0 8C 82            [24] 5067 	mov	dpl,r4
      0014A2 8B 83            [24] 5068 	mov	dph,r3
      0014A4 C0 07            [24] 5069 	push	ar7
      0014A6 C0 06            [24] 5070 	push	ar6
      0014A8 C0 05            [24] 5071 	push	ar5
      0014AA 12r00r00         [24] 5072 	lcall	_PHY_set_channel
      0014AD D0 05            [24] 5073 	pop	ar5
      0014AF D0 06            [24] 5074 	pop	ar6
      0014B1 D0 07            [24] 5075 	pop	ar7
                                   5076 ;	appFHSSNIC.c:1052: appReturn( 1, buf);
      0014B3 90r00r00         [24] 5077 	mov	dptr,#_appReturn_PARM_2
      0014B6 ED               [12] 5078 	mov	a,r5
      0014B7 F0               [24] 5079 	movx	@dptr,a
      0014B8 EE               [12] 5080 	mov	a,r6
      0014B9 A3               [24] 5081 	inc	dptr
      0014BA F0               [24] 5082 	movx	@dptr,a
      0014BB 75 82 01         [24] 5083 	mov	dpl,#0x01
      0014BE 12r00r00         [24] 5084 	lcall	_appReturn
                                   5085 ;	appFHSSNIC.c:1053: break;
      0014C1 02r16rA7         [24] 5086 	ljmp	00172$
                                   5087 ;	appFHSSNIC.c:1055: case FHSS_START_HOPPING:
      0014C4                       5088 00154$:
                                   5089 ;	appFHSSNIC.c:1056: begin_hopping(0);
      0014C4 75 82 00         [24] 5090 	mov	dpl,#0x00
      0014C7 C0 07            [24] 5091 	push	ar7
      0014C9 C0 06            [24] 5092 	push	ar6
      0014CB C0 05            [24] 5093 	push	ar5
      0014CD 12r00r81         [24] 5094 	lcall	_begin_hopping
      0014D0 D0 05            [24] 5095 	pop	ar5
      0014D2 D0 06            [24] 5096 	pop	ar6
      0014D4 D0 07            [24] 5097 	pop	ar7
                                   5098 ;	appFHSSNIC.c:1057: appReturn( 1, buf);
      0014D6 90r00r00         [24] 5099 	mov	dptr,#_appReturn_PARM_2
      0014D9 ED               [12] 5100 	mov	a,r5
      0014DA F0               [24] 5101 	movx	@dptr,a
      0014DB EE               [12] 5102 	mov	a,r6
      0014DC A3               [24] 5103 	inc	dptr
      0014DD F0               [24] 5104 	movx	@dptr,a
      0014DE 75 82 01         [24] 5105 	mov	dpl,#0x01
      0014E1 12r00r00         [24] 5106 	lcall	_appReturn
                                   5107 ;	appFHSSNIC.c:1058: break;
      0014E4 02r16rA7         [24] 5108 	ljmp	00172$
                                   5109 ;	appFHSSNIC.c:1060: case FHSS_STOP_HOPPING:
      0014E7                       5110 00155$:
                                   5111 ;	appFHSSNIC.c:1061: stop_hopping();
      0014E7 C0 07            [24] 5112 	push	ar7
      0014E9 C0 06            [24] 5113 	push	ar6
      0014EB C0 05            [24] 5114 	push	ar5
      0014ED 12r00r9B         [24] 5115 	lcall	_stop_hopping
      0014F0 D0 05            [24] 5116 	pop	ar5
      0014F2 D0 06            [24] 5117 	pop	ar6
      0014F4 D0 07            [24] 5118 	pop	ar7
                                   5119 ;	appFHSSNIC.c:1062: appReturn( 1, buf);
      0014F6 90r00r00         [24] 5120 	mov	dptr,#_appReturn_PARM_2
      0014F9 ED               [12] 5121 	mov	a,r5
      0014FA F0               [24] 5122 	movx	@dptr,a
      0014FB EE               [12] 5123 	mov	a,r6
      0014FC A3               [24] 5124 	inc	dptr
      0014FD F0               [24] 5125 	movx	@dptr,a
      0014FE 75 82 01         [24] 5126 	mov	dpl,#0x01
      001501 12r00r00         [24] 5127 	lcall	_appReturn
                                   5128 ;	appFHSSNIC.c:1063: break;
      001504 02r16rA7         [24] 5129 	ljmp	00172$
                                   5130 ;	appFHSSNIC.c:1066: case FHSS_SET_MAC_THRESHOLD:
      001507                       5131 00156$:
                                   5132 ;	appFHSSNIC.c:1067: macdata.MAC_threshold = buf[0];
      001507 8D 82            [24] 5133 	mov	dpl,r5
      001509 8E 83            [24] 5134 	mov	dph,r6
      00150B 8F F0            [24] 5135 	mov	b,r7
      00150D 12r00r00         [24] 5136 	lcall	__gptrget
      001510 FC               [12] 5137 	mov	r4,a
      001511 7B 00            [12] 5138 	mov	r3,#0x00
      001513 90r00r01         [24] 5139 	mov	dptr,#(_macdata + 0x0001)
      001516 EC               [12] 5140 	mov	a,r4
      001517 F0               [24] 5141 	movx	@dptr,a
      001518 EB               [12] 5142 	mov	a,r3
      001519 A3               [24] 5143 	inc	dptr
      00151A F0               [24] 5144 	movx	@dptr,a
                                   5145 ;	appFHSSNIC.c:1068: appReturn( 1, buf);
      00151B 90r00r00         [24] 5146 	mov	dptr,#_appReturn_PARM_2
      00151E ED               [12] 5147 	mov	a,r5
      00151F F0               [24] 5148 	movx	@dptr,a
      001520 EE               [12] 5149 	mov	a,r6
      001521 A3               [24] 5150 	inc	dptr
      001522 F0               [24] 5151 	movx	@dptr,a
      001523 75 82 01         [24] 5152 	mov	dpl,#0x01
      001526 12r00r00         [24] 5153 	lcall	_appReturn
                                   5154 ;	appFHSSNIC.c:1069: break;
      001529 02r16rA7         [24] 5155 	ljmp	00172$
                                   5156 ;	appFHSSNIC.c:1071: case FHSS_GET_MAC_THRESHOLD:
      00152C                       5157 00157$:
                                   5158 ;	appFHSSNIC.c:1072: appReturn( 4, (__xdata u8*)&macdata.MAC_threshold);
      00152C 90r00r00         [24] 5159 	mov	dptr,#_appReturn_PARM_2
      00152F 74r01            [12] 5160 	mov	a,#(_macdata + 0x0001)
      001531 F0               [24] 5161 	movx	@dptr,a
      001532 74s00            [12] 5162 	mov	a,#((_macdata + 0x0001) >> 8)
      001534 A3               [24] 5163 	inc	dptr
      001535 F0               [24] 5164 	movx	@dptr,a
      001536 75 82 04         [24] 5165 	mov	dpl,#0x04
      001539 12r00r00         [24] 5166 	lcall	_appReturn
                                   5167 ;	appFHSSNIC.c:1073: break;
      00153C 02r16rA7         [24] 5168 	ljmp	00172$
                                   5169 ;	appFHSSNIC.c:1075: case FHSS_SET_MAC_DATA:
      00153F                       5170 00158$:
                                   5171 ;	appFHSSNIC.c:1076: debugx(buf);
      00153F 8D 82            [24] 5172 	mov	dpl,r5
      001541 8E 83            [24] 5173 	mov	dph,r6
      001543 8F F0            [24] 5174 	mov	b,r7
      001545 C0 07            [24] 5175 	push	ar7
      001547 C0 06            [24] 5176 	push	ar6
      001549 C0 05            [24] 5177 	push	ar5
      00154B 12r00r00         [24] 5178 	lcall	_debugx
      00154E D0 05            [24] 5179 	pop	ar5
      001550 D0 06            [24] 5180 	pop	ar6
      001552 D0 07            [24] 5181 	pop	ar7
                                   5182 ;	appFHSSNIC.c:1077: debughex(buf[0]);
      001554 8D 82            [24] 5183 	mov	dpl,r5
      001556 8E 83            [24] 5184 	mov	dph,r6
      001558 8F F0            [24] 5185 	mov	b,r7
      00155A 12r00r00         [24] 5186 	lcall	__gptrget
      00155D F5 82            [12] 5187 	mov	dpl,a
      00155F C0 07            [24] 5188 	push	ar7
      001561 C0 06            [24] 5189 	push	ar6
      001563 C0 05            [24] 5190 	push	ar5
      001565 12r00r00         [24] 5191 	lcall	_debughex
      001568 D0 05            [24] 5192 	pop	ar5
      00156A D0 06            [24] 5193 	pop	ar6
      00156C D0 07            [24] 5194 	pop	ar7
                                   5195 ;	appFHSSNIC.c:1078: memcpy((__xdata u8*)&macdata, (__xdata u8*)*buf, sizeof(macdata));
      00156E 8D 82            [24] 5196 	mov	dpl,r5
      001570 8E 83            [24] 5197 	mov	dph,r6
      001572 8F F0            [24] 5198 	mov	b,r7
      001574 12r00r00         [24] 5199 	lcall	__gptrget
      001577 FC               [12] 5200 	mov	r4,a
      001578 7B 00            [12] 5201 	mov	r3,#0x00
      00157A 8C*00            [24] 5202 	mov	_memcpy_PARM_2,r4
      00157C 8B*01            [24] 5203 	mov	(_memcpy_PARM_2 + 1),r3
                                   5204 ;	1-genFromRTrack replaced	mov	(_memcpy_PARM_2 + 2),#0x00
      00157E 8B*02            [24] 5205 	mov	(_memcpy_PARM_2 + 2),r3
      001580 75*00 15         [24] 5206 	mov	_memcpy_PARM_3,#0x15
                                   5207 ;	1-genFromRTrack replaced	mov	(_memcpy_PARM_3 + 1),#0x00
      001583 8B*01            [24] 5208 	mov	(_memcpy_PARM_3 + 1),r3
      001585 90r00r00         [24] 5209 	mov	dptr,#_macdata
      001588 75 F0 00         [24] 5210 	mov	b,#0x00
      00158B C0 07            [24] 5211 	push	ar7
      00158D C0 06            [24] 5212 	push	ar6
      00158F C0 05            [24] 5213 	push	ar5
      001591 12r00r00         [24] 5214 	lcall	_memcpy
      001594 D0 05            [24] 5215 	pop	ar5
      001596 D0 06            [24] 5216 	pop	ar6
      001598 D0 07            [24] 5217 	pop	ar7
                                   5218 ;	appFHSSNIC.c:1079: appReturn( sizeof(macdata), buf);
      00159A 90r00r00         [24] 5219 	mov	dptr,#_appReturn_PARM_2
      00159D ED               [12] 5220 	mov	a,r5
      00159E F0               [24] 5221 	movx	@dptr,a
      00159F EE               [12] 5222 	mov	a,r6
      0015A0 A3               [24] 5223 	inc	dptr
      0015A1 F0               [24] 5224 	movx	@dptr,a
      0015A2 75 82 15         [24] 5225 	mov	dpl,#0x15
      0015A5 12r00r00         [24] 5226 	lcall	_appReturn
                                   5227 ;	appFHSSNIC.c:1080: break;
      0015A8 02r16rA7         [24] 5228 	ljmp	00172$
                                   5229 ;	appFHSSNIC.c:1082: case FHSS_GET_MAC_DATA:
      0015AB                       5230 00159$:
                                   5231 ;	appFHSSNIC.c:1083: macdata.MAC_timer = rf_MAC_timer;
      0015AB 90r00r00         [24] 5232 	mov	dptr,#_rf_MAC_timer
      0015AE E0               [24] 5233 	movx	a,@dptr
      0015AF FB               [12] 5234 	mov	r3,a
      0015B0 A3               [24] 5235 	inc	dptr
      0015B1 E0               [24] 5236 	movx	a,@dptr
      0015B2 FC               [12] 5237 	mov	r4,a
      0015B3 90r00r03         [24] 5238 	mov	dptr,#(_macdata + 0x0003)
      0015B6 EB               [12] 5239 	mov	a,r3
      0015B7 F0               [24] 5240 	movx	@dptr,a
      0015B8 EC               [12] 5241 	mov	a,r4
      0015B9 A3               [24] 5242 	inc	dptr
      0015BA F0               [24] 5243 	movx	@dptr,a
                                   5244 ;	appFHSSNIC.c:1084: appReturn( sizeof(macdata), (__xdata u8*)&macdata);
      0015BB 90r00r00         [24] 5245 	mov	dptr,#_appReturn_PARM_2
      0015BE 74r00            [12] 5246 	mov	a,#_macdata
      0015C0 F0               [24] 5247 	movx	@dptr,a
      0015C1 74s00            [12] 5248 	mov	a,#(_macdata >> 8)
      0015C3 A3               [24] 5249 	inc	dptr
      0015C4 F0               [24] 5250 	movx	@dptr,a
      0015C5 75 82 15         [24] 5251 	mov	dpl,#0x15
      0015C8 12r00r00         [24] 5252 	lcall	_appReturn
                                   5253 ;	appFHSSNIC.c:1085: break;
      0015CB 02r16rA7         [24] 5254 	ljmp	00172$
                                   5255 ;	appFHSSNIC.c:1087: case FHSS_START_SYNC:
      0015CE                       5256 00160$:
                                   5257 ;	appFHSSNIC.c:1088: MAC_sync(buf[0]);
      0015CE 8D 82            [24] 5258 	mov	dpl,r5
      0015D0 8E 83            [24] 5259 	mov	dph,r6
      0015D2 8F F0            [24] 5260 	mov	b,r7
      0015D4 12r00r00         [24] 5261 	lcall	__gptrget
      0015D7 FC               [12] 5262 	mov	r4,a
      0015D8 7B 00            [12] 5263 	mov	r3,#0x00
      0015DA 8C 82            [24] 5264 	mov	dpl,r4
      0015DC 8B 83            [24] 5265 	mov	dph,r3
      0015DE C0 07            [24] 5266 	push	ar7
      0015E0 C0 06            [24] 5267 	push	ar6
      0015E2 C0 05            [24] 5268 	push	ar5
      0015E4 12r04r27         [24] 5269 	lcall	_MAC_sync
      0015E7 D0 05            [24] 5270 	pop	ar5
      0015E9 D0 06            [24] 5271 	pop	ar6
      0015EB D0 07            [24] 5272 	pop	ar7
                                   5273 ;	appFHSSNIC.c:1089: appReturn( 1, buf);
      0015ED 90r00r00         [24] 5274 	mov	dptr,#_appReturn_PARM_2
      0015F0 ED               [12] 5275 	mov	a,r5
      0015F1 F0               [24] 5276 	movx	@dptr,a
      0015F2 EE               [12] 5277 	mov	a,r6
      0015F3 A3               [24] 5278 	inc	dptr
      0015F4 F0               [24] 5279 	movx	@dptr,a
      0015F5 75 82 01         [24] 5280 	mov	dpl,#0x01
      0015F8 12r00r00         [24] 5281 	lcall	_appReturn
                                   5282 ;	appFHSSNIC.c:1090: break;
      0015FB 02r16rA7         [24] 5283 	ljmp	00172$
                                   5284 ;	appFHSSNIC.c:1092: case FHSS_SET_STATE:
      0015FE                       5285 00161$:
                                   5286 ;	appFHSSNIC.c:1094: macdata.tLastStateChange = clock;
      0015FE 90r00r00         [24] 5287 	mov	dptr,#_clock
      001601 E0               [24] 5288 	movx	a,@dptr
      001602 F9               [12] 5289 	mov	r1,a
      001603 A3               [24] 5290 	inc	dptr
      001604 E0               [24] 5291 	movx	a,@dptr
      001605 FA               [12] 5292 	mov	r2,a
      001606 A3               [24] 5293 	inc	dptr
      001607 E0               [24] 5294 	movx	a,@dptr
      001608 A3               [24] 5295 	inc	dptr
      001609 E0               [24] 5296 	movx	a,@dptr
      00160A 90r00r0B         [24] 5297 	mov	dptr,#(_macdata + 0x000b)
      00160D E9               [12] 5298 	mov	a,r1
      00160E F0               [24] 5299 	movx	@dptr,a
      00160F EA               [12] 5300 	mov	a,r2
      001610 A3               [24] 5301 	inc	dptr
      001611 F0               [24] 5302 	movx	@dptr,a
                                   5303 ;	appFHSSNIC.c:1095: macdata.mac_state = (u8)buf[0];
      001612 8D 82            [24] 5304 	mov	dpl,r5
      001614 8E 83            [24] 5305 	mov	dph,r6
      001616 8F F0            [24] 5306 	mov	b,r7
      001618 12r00r00         [24] 5307 	lcall	__gptrget
      00161B FC               [12] 5308 	mov	r4,a
      00161C 90r00r00         [24] 5309 	mov	dptr,#_macdata
      00161F F0               [24] 5310 	movx	@dptr,a
                                   5311 ;	appFHSSNIC.c:1099: switch (macdata.mac_state)
      001620 90r00r00         [24] 5312 	mov	dptr,#_macdata
      001623 E0               [24] 5313 	movx	a,@dptr
      001624 FB               [12] 5314 	mov	r3,a
      001625 EC               [12] 5315 	mov	a,r4
      001626 24 FA            [12] 5316 	add	a,#0xff - 0x05
      001628 40 4D            [24] 5317 	jc	00168$
      00162A EB               [12] 5318 	mov	a,r3
      00162B 2B               [12] 5319 	add	a,r3
      00162C 2B               [12] 5320 	add	a,r3
      00162D 90r16r31         [24] 5321 	mov	dptr,#00258$
      001630 73               [24] 5322 	jmp	@a+dptr
      001631                       5323 00258$:
      001631 02r16r43         [24] 5324 	ljmp	00162$
      001634 02r16r43         [24] 5325 	ljmp	00163$
      001637 02r16r43         [24] 5326 	ljmp	00164$
      00163A 02r16r65         [24] 5327 	ljmp	00166$
      00163D 02r16r65         [24] 5328 	ljmp	00167$
      001640 02r16r54         [24] 5329 	ljmp	00165$
                                   5330 ;	appFHSSNIC.c:1101: case MAC_STATE_NONHOPPING:
      001643                       5331 00162$:
                                   5332 ;	appFHSSNIC.c:1102: case MAC_STATE_DISCOVERY:
      001643                       5333 00163$:
                                   5334 ;	appFHSSNIC.c:1103: case MAC_STATE_SYNCHING:
      001643                       5335 00164$:
                                   5336 ;	appFHSSNIC.c:1105: stop_hopping();
      001643 C0 07            [24] 5337 	push	ar7
      001645 C0 06            [24] 5338 	push	ar6
      001647 C0 05            [24] 5339 	push	ar5
      001649 12r00r9B         [24] 5340 	lcall	_stop_hopping
      00164C D0 05            [24] 5341 	pop	ar5
      00164E D0 06            [24] 5342 	pop	ar6
      001650 D0 07            [24] 5343 	pop	ar7
                                   5344 ;	appFHSSNIC.c:1106: break;
                                   5345 ;	appFHSSNIC.c:1108: case MAC_STATE_SYNCINGMASTER:
      001652 80 23            [24] 5346 	sjmp	00168$
      001654                       5347 00165$:
                                   5348 ;	appFHSSNIC.c:1109: MAC_do_Master_scanny_thingy();
      001654 C0 07            [24] 5349 	push	ar7
      001656 C0 06            [24] 5350 	push	ar6
      001658 C0 05            [24] 5351 	push	ar5
      00165A 12r05r02         [24] 5352 	lcall	_MAC_do_Master_scanny_thingy
      00165D D0 05            [24] 5353 	pop	ar5
      00165F D0 06            [24] 5354 	pop	ar6
      001661 D0 07            [24] 5355 	pop	ar7
                                   5356 ;	appFHSSNIC.c:1110: break;
                                   5357 ;	appFHSSNIC.c:1112: case MAC_STATE_SYNCHED:
      001663 80 12            [24] 5358 	sjmp	00168$
      001665                       5359 00166$:
                                   5360 ;	appFHSSNIC.c:1113: case MAC_STATE_SYNC_MASTER:
      001665                       5361 00167$:
                                   5362 ;	appFHSSNIC.c:1114: begin_hopping(0);
      001665 75 82 00         [24] 5363 	mov	dpl,#0x00
      001668 C0 07            [24] 5364 	push	ar7
      00166A C0 06            [24] 5365 	push	ar6
      00166C C0 05            [24] 5366 	push	ar5
      00166E 12r00r81         [24] 5367 	lcall	_begin_hopping
      001671 D0 05            [24] 5368 	pop	ar5
      001673 D0 06            [24] 5369 	pop	ar6
      001675 D0 07            [24] 5370 	pop	ar7
                                   5371 ;	appFHSSNIC.c:1116: }
      001677                       5372 00168$:
                                   5373 ;	appFHSSNIC.c:1118: appReturn( 1, buf);
      001677 90r00r00         [24] 5374 	mov	dptr,#_appReturn_PARM_2
      00167A ED               [12] 5375 	mov	a,r5
      00167B F0               [24] 5376 	movx	@dptr,a
      00167C EE               [12] 5377 	mov	a,r6
      00167D A3               [24] 5378 	inc	dptr
      00167E F0               [24] 5379 	movx	@dptr,a
      00167F 75 82 01         [24] 5380 	mov	dpl,#0x01
      001682 12r00r00         [24] 5381 	lcall	_appReturn
                                   5382 ;	appFHSSNIC.c:1119: break;
                                   5383 ;	appFHSSNIC.c:1121: case FHSS_GET_STATE:
      001685 80 20            [24] 5384 	sjmp	00172$
      001687                       5385 00169$:
                                   5386 ;	appFHSSNIC.c:1122: appReturn( 1, (__xdata u8*)&macdata.mac_state);
      001687 90r00r00         [24] 5387 	mov	dptr,#_appReturn_PARM_2
      00168A 74r00            [12] 5388 	mov	a,#_macdata
      00168C F0               [24] 5389 	movx	@dptr,a
      00168D 74s00            [12] 5390 	mov	a,#(_macdata >> 8)
      00168F A3               [24] 5391 	inc	dptr
      001690 F0               [24] 5392 	movx	@dptr,a
      001691 75 82 01         [24] 5393 	mov	dpl,#0x01
      001694 12r00r00         [24] 5394 	lcall	_appReturn
                                   5395 ;	appFHSSNIC.c:1123: break;
                                   5396 ;	appFHSSNIC.c:1125: default:
      001697 80 0E            [24] 5397 	sjmp	00172$
      001699                       5398 00170$:
                                   5399 ;	appFHSSNIC.c:1126: appReturn( 1, buf);
      001699 90r00r00         [24] 5400 	mov	dptr,#_appReturn_PARM_2
      00169C ED               [12] 5401 	mov	a,r5
      00169D F0               [24] 5402 	movx	@dptr,a
      00169E EE               [12] 5403 	mov	a,r6
      00169F A3               [24] 5404 	inc	dptr
      0016A0 F0               [24] 5405 	movx	@dptr,a
      0016A1 75 82 01         [24] 5406 	mov	dpl,#0x01
      0016A4 12r00r00         [24] 5407 	lcall	_appReturn
                                   5408 ;	appFHSSNIC.c:1130: }
      0016A7                       5409 00172$:
                                   5410 ;	appFHSSNIC.c:1133: return 0;
      0016A7 90 00 00         [24] 5411 	mov	dptr,#0x0000
      0016AA 22               [24] 5412 	ret
                                   5413 ;------------------------------------------------------------
                                   5414 ;Allocation info for local variables in function 'appHandleEP0OUTdone'
                                   5415 ;------------------------------------------------------------
                                   5416 ;	appFHSSNIC.c:1137: void appHandleEP0OUTdone(void)
                                   5417 ;	-----------------------------------------
                                   5418 ;	 function appHandleEP0OUTdone
                                   5419 ;	-----------------------------------------
      0016AB                       5420 _appHandleEP0OUTdone:
                                   5421 ;	appFHSSNIC.c:1139: }
      0016AB 22               [24] 5422 	ret
                                   5423 ;------------------------------------------------------------
                                   5424 ;Allocation info for local variables in function 'appHandleEP0OUT'
                                   5425 ;------------------------------------------------------------
                                   5426 ;	appFHSSNIC.c:1142: void appHandleEP0OUT(void)
                                   5427 ;	-----------------------------------------
                                   5428 ;	 function appHandleEP0OUT
                                   5429 ;	-----------------------------------------
      0016AC                       5430 _appHandleEP0OUT:
                                   5431 ;	appFHSSNIC.c:1172: }
      0016AC 22               [24] 5432 	ret
                                   5433 ;------------------------------------------------------------
                                   5434 ;Allocation info for local variables in function 'appHandleEP0'
                                   5435 ;------------------------------------------------------------
                                   5436 ;pReq                      Allocated to registers 
                                   5437 ;------------------------------------------------------------
                                   5438 ;	appFHSSNIC.c:1179: int appHandleEP0(__xdata USB_Setup_Header* pReq)
                                   5439 ;	-----------------------------------------
                                   5440 ;	 function appHandleEP0
                                   5441 ;	-----------------------------------------
      0016AD                       5442 _appHandleEP0:
                                   5443 ;	appFHSSNIC.c:1215: return 0;
      0016AD 90 00 00         [24] 5444 	mov	dptr,#0x0000
      0016B0 22               [24] 5445 	ret
                                   5446 ;------------------------------------------------------------
                                   5447 ;Allocation info for local variables in function 'appInitRf'
                                   5448 ;------------------------------------------------------------
                                   5449 ;	appFHSSNIC.c:1225: void appInitRf(void)
                                   5450 ;	-----------------------------------------
                                   5451 ;	 function appInitRf
                                   5452 ;	-----------------------------------------
      0016B1                       5453 _appInitRf:
                                   5454 ;	appFHSSNIC.c:1231: IOCFG2      = 0x00;
      0016B1 90 DF 2F         [24] 5455 	mov	dptr,#_IOCFG2
      0016B4 E4               [12] 5456 	clr	a
      0016B5 F0               [24] 5457 	movx	@dptr,a
                                   5458 ;	appFHSSNIC.c:1232: IOCFG1      = 0x00;
      0016B6 90 DF 30         [24] 5459 	mov	dptr,#_IOCFG1
      0016B9 F0               [24] 5460 	movx	@dptr,a
                                   5461 ;	appFHSSNIC.c:1233: IOCFG0      = 0x00;
      0016BA 90 DF 31         [24] 5462 	mov	dptr,#_IOCFG0
      0016BD F0               [24] 5463 	movx	@dptr,a
                                   5464 ;	appFHSSNIC.c:1234: SYNC1       = 0x0c;
      0016BE 90 DF 00         [24] 5465 	mov	dptr,#_SYNC1
      0016C1 74 0C            [12] 5466 	mov	a,#0x0C
      0016C3 F0               [24] 5467 	movx	@dptr,a
                                   5468 ;	appFHSSNIC.c:1235: SYNC0       = 0x4e;
      0016C4 90 DF 01         [24] 5469 	mov	dptr,#_SYNC0
      0016C7 74 4E            [12] 5470 	mov	a,#0x4E
      0016C9 F0               [24] 5471 	movx	@dptr,a
                                   5472 ;	appFHSSNIC.c:1236: PKTLEN      = 0xff;
      0016CA 90 DF 02         [24] 5473 	mov	dptr,#_PKTLEN
      0016CD 74 FF            [12] 5474 	mov	a,#0xFF
      0016CF F0               [24] 5475 	movx	@dptr,a
                                   5476 ;	appFHSSNIC.c:1237: PKTCTRL1    = 0x40; // PQT threshold  - was 0x00
      0016D0 90 DF 03         [24] 5477 	mov	dptr,#_PKTCTRL1
      0016D3 74 40            [12] 5478 	mov	a,#0x40
      0016D5 F0               [24] 5479 	movx	@dptr,a
                                   5480 ;	appFHSSNIC.c:1238: PKTCTRL0    = 0x00; // FLEN.  for VLEN use |1 (ie.  FLEN=00, VLEN=01)
      0016D6 90 DF 04         [24] 5481 	mov	dptr,#_PKTCTRL0
      0016D9 E4               [12] 5482 	clr	a
      0016DA F0               [24] 5483 	movx	@dptr,a
                                   5484 ;	appFHSSNIC.c:1239: ADDR        = 0x00;
      0016DB 90 DF 05         [24] 5485 	mov	dptr,#_ADDR
      0016DE F0               [24] 5486 	movx	@dptr,a
                                   5487 ;	appFHSSNIC.c:1240: CHANNR      = 0x00;
      0016DF 90 DF 06         [24] 5488 	mov	dptr,#_CHANNR
      0016E2 F0               [24] 5489 	movx	@dptr,a
                                   5490 ;	appFHSSNIC.c:1241: FSCTRL1     = 0x06;
      0016E3 90 DF 07         [24] 5491 	mov	dptr,#_FSCTRL1
      0016E6 74 06            [12] 5492 	mov	a,#0x06
      0016E8 F0               [24] 5493 	movx	@dptr,a
                                   5494 ;	appFHSSNIC.c:1242: FSCTRL0     = 0x00;
      0016E9 90 DF 08         [24] 5495 	mov	dptr,#_FSCTRL0
      0016EC E4               [12] 5496 	clr	a
      0016ED F0               [24] 5497 	movx	@dptr,a
                                   5498 ;	appFHSSNIC.c:1243: FREQ2       = 0x24;
      0016EE 90 DF 09         [24] 5499 	mov	dptr,#_FREQ2
      0016F1 74 24            [12] 5500 	mov	a,#0x24
      0016F3 F0               [24] 5501 	movx	@dptr,a
                                   5502 ;	appFHSSNIC.c:1244: FREQ1       = 0x3a;
      0016F4 90 DF 0A         [24] 5503 	mov	dptr,#_FREQ1
      0016F7 74 3A            [12] 5504 	mov	a,#0x3A
      0016F9 F0               [24] 5505 	movx	@dptr,a
                                   5506 ;	appFHSSNIC.c:1245: FREQ0       = 0xf1;
      0016FA 90 DF 0B         [24] 5507 	mov	dptr,#_FREQ0
      0016FD 74 F1            [12] 5508 	mov	a,#0xF1
      0016FF F0               [24] 5509 	movx	@dptr,a
                                   5510 ;	appFHSSNIC.c:1246: MDMCFG4     = 0xca;
      001700 90 DF 0C         [24] 5511 	mov	dptr,#_MDMCFG4
      001703 74 CA            [12] 5512 	mov	a,#0xCA
      001705 F0               [24] 5513 	movx	@dptr,a
                                   5514 ;	appFHSSNIC.c:1247: MDMCFG3     = 0xa3;
      001706 90 DF 0D         [24] 5515 	mov	dptr,#_MDMCFG3
      001709 74 A3            [12] 5516 	mov	a,#0xA3
      00170B F0               [24] 5517 	movx	@dptr,a
                                   5518 ;	appFHSSNIC.c:1248: MDMCFG2     = 0x01;
      00170C 90 DF 0E         [24] 5519 	mov	dptr,#_MDMCFG2
      00170F 74 01            [12] 5520 	mov	a,#0x01
      001711 F0               [24] 5521 	movx	@dptr,a
                                   5522 ;	appFHSSNIC.c:1249: MDMCFG1     = 0x23;
      001712 90 DF 0F         [24] 5523 	mov	dptr,#_MDMCFG1
      001715 74 23            [12] 5524 	mov	a,#0x23
      001717 F0               [24] 5525 	movx	@dptr,a
                                   5526 ;	appFHSSNIC.c:1250: MDMCFG0     = 0x11;
      001718 90 DF 10         [24] 5527 	mov	dptr,#_MDMCFG0
      00171B 74 11            [12] 5528 	mov	a,#0x11
      00171D F0               [24] 5529 	movx	@dptr,a
                                   5530 ;	appFHSSNIC.c:1251: DEVIATN     = 0x36;
      00171E 90 DF 11         [24] 5531 	mov	dptr,#_DEVIATN
      001721 74 36            [12] 5532 	mov	a,#0x36
      001723 F0               [24] 5533 	movx	@dptr,a
                                   5534 ;	appFHSSNIC.c:1252: MCSM2       = 0x07;             // RX_TIMEOUT
      001724 90 DF 12         [24] 5535 	mov	dptr,#_MCSM2
      001727 74 07            [12] 5536 	mov	a,#0x07
      001729 F0               [24] 5537 	movx	@dptr,a
                                   5538 ;	appFHSSNIC.c:1253: MCSM1       = 0x0f;             // was 'CCA_MODE RSSI below threshold unless currently recvg pkt'-3, now 'Always'-0 - always end up in RX mode
      00172A 90 DF 13         [24] 5539 	mov	dptr,#_MCSM1
      00172D 74 0F            [12] 5540 	mov	a,#0x0F
      00172F F0               [24] 5541 	movx	@dptr,a
                                   5542 ;	appFHSSNIC.c:1254: MCSM0       = 0x18;             // fsautosync when going from idle to rx/tx/fstxon
      001730 90 DF 14         [24] 5543 	mov	dptr,#_MCSM0
      001733 74 18            [12] 5544 	mov	a,#0x18
      001735 F0               [24] 5545 	movx	@dptr,a
                                   5546 ;	appFHSSNIC.c:1255: FOCCFG      = 0x17;
      001736 90 DF 15         [24] 5547 	mov	dptr,#_FOCCFG
      001739 14               [12] 5548 	dec	a
      00173A F0               [24] 5549 	movx	@dptr,a
                                   5550 ;	appFHSSNIC.c:1256: BSCFG       = 0x6c;
      00173B 90 DF 16         [24] 5551 	mov	dptr,#_BSCFG
      00173E 74 6C            [12] 5552 	mov	a,#0x6C
      001740 F0               [24] 5553 	movx	@dptr,a
                                   5554 ;	appFHSSNIC.c:1257: AGCCTRL2    = 0x03;
      001741 90 DF 17         [24] 5555 	mov	dptr,#_AGCCTRL2
      001744 74 03            [12] 5556 	mov	a,#0x03
      001746 F0               [24] 5557 	movx	@dptr,a
                                   5558 ;	appFHSSNIC.c:1258: AGCCTRL1    = 0x40;
      001747 90 DF 18         [24] 5559 	mov	dptr,#_AGCCTRL1
      00174A 74 40            [12] 5560 	mov	a,#0x40
      00174C F0               [24] 5561 	movx	@dptr,a
                                   5562 ;	appFHSSNIC.c:1259: AGCCTRL0    = 0x91;
      00174D 90 DF 19         [24] 5563 	mov	dptr,#_AGCCTRL0
      001750 74 91            [12] 5564 	mov	a,#0x91
      001752 F0               [24] 5565 	movx	@dptr,a
                                   5566 ;	appFHSSNIC.c:1260: FREND1      = 0x56;
      001753 90 DF 1A         [24] 5567 	mov	dptr,#_FREND1
      001756 74 56            [12] 5568 	mov	a,#0x56
      001758 F0               [24] 5569 	movx	@dptr,a
                                   5570 ;	appFHSSNIC.c:1261: FREND0      = 0x10;
      001759 90 DF 1B         [24] 5571 	mov	dptr,#_FREND0
      00175C 74 10            [12] 5572 	mov	a,#0x10
      00175E F0               [24] 5573 	movx	@dptr,a
                                   5574 ;	appFHSSNIC.c:1262: FSCAL3      = 0xe9;
      00175F 90 DF 1C         [24] 5575 	mov	dptr,#_FSCAL3
      001762 74 E9            [12] 5576 	mov	a,#0xE9
      001764 F0               [24] 5577 	movx	@dptr,a
                                   5578 ;	appFHSSNIC.c:1263: FSCAL2      = 0x2a;
      001765 90 DF 1D         [24] 5579 	mov	dptr,#_FSCAL2
      001768 74 2A            [12] 5580 	mov	a,#0x2A
      00176A F0               [24] 5581 	movx	@dptr,a
                                   5582 ;	appFHSSNIC.c:1264: FSCAL1      = 0x00;
      00176B 90 DF 1E         [24] 5583 	mov	dptr,#_FSCAL1
      00176E E4               [12] 5584 	clr	a
      00176F F0               [24] 5585 	movx	@dptr,a
                                   5586 ;	appFHSSNIC.c:1265: FSCAL0      = 0x1f;
      001770 90 DF 1F         [24] 5587 	mov	dptr,#_FSCAL0
      001773 74 1F            [12] 5588 	mov	a,#0x1F
      001775 F0               [24] 5589 	movx	@dptr,a
                                   5590 ;	appFHSSNIC.c:1266: TEST2       = 0x88; // low data rates, increased sensitivity provided by 0x81- was 0x88
      001776 90 DF 23         [24] 5591 	mov	dptr,#_TEST2
      001779 74 88            [12] 5592 	mov	a,#0x88
      00177B F0               [24] 5593 	movx	@dptr,a
                                   5594 ;	appFHSSNIC.c:1267: TEST1       = 0x31; // always 0x31 in tx-mode, for low data rates 0x35 provides increased sensitivity - was 0x31
      00177C 90 DF 24         [24] 5595 	mov	dptr,#_TEST1
      00177F 74 31            [12] 5596 	mov	a,#0x31
      001781 F0               [24] 5597 	movx	@dptr,a
                                   5598 ;	appFHSSNIC.c:1268: TEST0       = 0x09;
      001782 90 DF 25         [24] 5599 	mov	dptr,#_TEST0
      001785 74 09            [12] 5600 	mov	a,#0x09
      001787 F0               [24] 5601 	movx	@dptr,a
                                   5602 ;	appFHSSNIC.c:1269: PA_TABLE0   = 0xc0;
      001788 90 DF 2E         [24] 5603 	mov	dptr,#_PA_TABLE0
      00178B 74 C0            [12] 5604 	mov	a,#0xC0
      00178D F0               [24] 5605 	movx	@dptr,a
                                   5606 ;	appFHSSNIC.c:1277: FSCTRL1     = 0x0c;             // Intermediate Frequency
      00178E 90 DF 07         [24] 5607 	mov	dptr,#_FSCTRL1
      001791 C4               [12] 5608 	swap	a
      001792 F0               [24] 5609 	movx	@dptr,a
                                   5610 ;	appFHSSNIC.c:1279: FREQ2       = 0x25;
      001793 90 DF 09         [24] 5611 	mov	dptr,#_FREQ2
      001796 74 25            [12] 5612 	mov	a,#0x25
      001798 F0               [24] 5613 	movx	@dptr,a
                                   5614 ;	appFHSSNIC.c:1280: FREQ1       = 0x95;
      001799 90 DF 0A         [24] 5615 	mov	dptr,#_FREQ1
      00179C 74 95            [12] 5616 	mov	a,#0x95
      00179E F0               [24] 5617 	movx	@dptr,a
                                   5618 ;	appFHSSNIC.c:1281: FREQ0       = 0x55;
      00179F 90 DF 0B         [24] 5619 	mov	dptr,#_FREQ0
      0017A2 74 55            [12] 5620 	mov	a,#0x55
      0017A4 F0               [24] 5621 	movx	@dptr,a
                                   5622 ;	appFHSSNIC.c:1293: FREND1      = 0xb6;
      0017A5 90 DF 1A         [24] 5623 	mov	dptr,#_FREND1
      0017A8 74 B6            [12] 5624 	mov	a,#0xB6
      0017AA F0               [24] 5625 	movx	@dptr,a
                                   5626 ;	appFHSSNIC.c:1294: FREND0      = 0x10;
      0017AB 90 DF 1B         [24] 5627 	mov	dptr,#_FREND0
      0017AE 74 10            [12] 5628 	mov	a,#0x10
      0017B0 F0               [24] 5629 	movx	@dptr,a
                                   5630 ;	appFHSSNIC.c:1295: FSCAL3      = 0xea;
      0017B1 90 DF 1C         [24] 5631 	mov	dptr,#_FSCAL3
      0017B4 74 EA            [12] 5632 	mov	a,#0xEA
      0017B6 F0               [24] 5633 	movx	@dptr,a
                                   5634 ;	appFHSSNIC.c:1296: FSCAL2      = 0x2a;
      0017B7 90 DF 1D         [24] 5635 	mov	dptr,#_FSCAL2
      0017BA 74 2A            [12] 5636 	mov	a,#0x2A
      0017BC F0               [24] 5637 	movx	@dptr,a
                                   5638 ;	appFHSSNIC.c:1297: FSCAL1      = 0x00;
      0017BD 90 DF 1E         [24] 5639 	mov	dptr,#_FSCAL1
      0017C0 E4               [12] 5640 	clr	a
      0017C1 F0               [24] 5641 	movx	@dptr,a
                                   5642 ;	appFHSSNIC.c:1298: FSCAL0      = 0x1f;
      0017C2 90 DF 1F         [24] 5643 	mov	dptr,#_FSCAL0
      0017C5 74 1F            [12] 5644 	mov	a,#0x1F
      0017C7 F0               [24] 5645 	movx	@dptr,a
      0017C8 22               [24] 5646 	ret
                                   5647 ;------------------------------------------------------------
                                   5648 ;Allocation info for local variables in function 'initBoard'
                                   5649 ;------------------------------------------------------------
                                   5650 ;	appFHSSNIC.c:1344: void initBoard(void)
                                   5651 ;	-----------------------------------------
                                   5652 ;	 function initBoard
                                   5653 ;	-----------------------------------------
      0017C9                       5654 _initBoard:
                                   5655 ;	appFHSSNIC.c:1347: clock_init();
      0017C9 12r00r00         [24] 5656 	lcall	_clock_init
                                   5657 ;	appFHSSNIC.c:1348: io_init();
      0017CC 02r00r00         [24] 5658 	ljmp	_io_init
                                   5659 ;------------------------------------------------------------
                                   5660 ;Allocation info for local variables in function 'main'
                                   5661 ;------------------------------------------------------------
                                   5662 ;	appFHSSNIC.c:1352: void main (void)
                                   5663 ;	-----------------------------------------
                                   5664 ;	 function main
                                   5665 ;	-----------------------------------------
      0017CF                       5666 _main:
                                   5667 ;	appFHSSNIC.c:1354: initBoard();
      0017CF 12r17rC9         [24] 5668 	lcall	_initBoard
                                   5669 ;	appFHSSNIC.c:1355: initDMA();  // do this early so peripherals that use DMA can allocate channels correctly
      0017D2 12r00r00         [24] 5670 	lcall	_initDMA
                                   5671 ;	appFHSSNIC.c:1356: initAES();
      0017D5 12r00r00         [24] 5672 	lcall	_initAES
                                   5673 ;	appFHSSNIC.c:1357: initUSB();
      0017D8 12r00r00         [24] 5674 	lcall	_initUSB
                                   5675 ;	appFHSSNIC.c:1358: init_RF();
      0017DB 12r00r00         [24] 5676 	lcall	_init_RF
                                   5677 ;	appFHSSNIC.c:1359: appMainInit();
      0017DE 12r08rE8         [24] 5678 	lcall	_appMainInit
                                   5679 ;	appFHSSNIC.c:1361: usb_up();
      0017E1 12r00r00         [24] 5680 	lcall	_usb_up
                                   5681 ;	appFHSSNIC.c:1364: EA = 1;
      0017E4 D2 AF            [12] 5682 	setb	_EA
                                   5683 ;	appFHSSNIC.c:1365: waitForUSBsetup();
      0017E6 12r00r00         [24] 5684 	lcall	_waitForUSBsetup
                                   5685 ;	appFHSSNIC.c:1367: REALLYFASTBLINK();
      0017E9 D2 A4            [12] 5686 	setb	_P2_4
      0017EB 90 00 02         [24] 5687 	mov	dptr,#0x0002
      0017EE 12r00r00         [24] 5688 	lcall	_sleepMillis
      0017F1 C2 A4            [12] 5689 	clr	_P2_4
      0017F3 90 00 0A         [24] 5690 	mov	dptr,#0x000A
      0017F6 12r00r00         [24] 5691 	lcall	_sleepMillis
                                   5692 ;	appFHSSNIC.c:1369: while (1)
      0017F9                       5693 00102$:
                                   5694 ;	appFHSSNIC.c:1371: usbProcessEvents();
      0017F9 12r00r00         [24] 5695 	lcall	_usbProcessEvents
                                   5696 ;	appFHSSNIC.c:1372: appMainLoop();
      0017FC 12r09r0C         [24] 5697 	lcall	_appMainLoop
      0017FF 80 F8            [24] 5698 	sjmp	00102$
                                   5699 	.area CSEG    (CODE)
                                   5700 	.area CONST   (CODE)
      000000                       5701 ___str_0:
      000000 43 61 6E 6E 6F 74 20  5702 	.ascii "Cannot call transmit_long while FHSS Hopping or already proc"
             63 61 6C 6C 20 74 72
             61 6E 73 6D 69 74 5F
             6C 6F 6E 67 20 77 68
             69 6C 65 20 46 48 53
             53 20 48 6F 70 70 69
             6E 67 20 6F 72 20 61
             6C 72 65 61 64 79 20
             70 72 6F 63
      00003C 65 73 73 69 6E 67 20  5703 	.ascii "essing transmit_long!"
             74 72 61 6E 73 6D 69
             74 5F 6C 6F 6E 67 21
      000051 00                    5704 	.db 0x00
      000052                       5705 ___str_1:
      000052 4D 41 43 5F 74 78 28  5706 	.ascii "MAC_tx() returned error"
             29 20 72 65 74 75 72
             6E 65 64 20 65 72 72
             6F 72
      000069 00                    5707 	.db 0x00
      00006A                       5708 ___str_2:
      00006A 6E 65 76 65 72 20 65  5709 	.ascii "never entered TX"
             6E 74 65 72 65 64 20
             54 58
      00007A 00                    5710 	.db 0x00
      00007B                       5711 ___str_3:
      00007B 46 48 53 53 78 6D 69  5712 	.ascii "FHSSxmit message too long"
             74 20 6D 65 73 73 61
             67 65 20 74 6F 6F 20
             6C 6F 6E 67
      000094 00                    5713 	.db 0x00
      000095                       5714 ___str_4:
      000095 46 48 53 53 20 73 74  5715 	.ascii "FHSS state entering SYNCHING from wrong state"
             61 74 65 20 65 6E 74
             65 72 69 6E 67 20 53
             59 4E 43 48 49 4E 47
             20 66 72 6F 6D 20 77
             72 6F 6E 67 20 73 74
             61 74 65
      0000C2 00                    5716 	.db 0x00
      0000C3                       5717 ___str_5:
      0000C3 53 59 4E 43 48 5F 4D  5718 	.ascii "SYNCH_MASTER -> SYNCINGMASTER"
             41 53 54 45 52 20 2D
             3E 20 53 59 4E 43 49
             4E 47 4D 41 53 54 45
             52
      0000E0 00                    5719 	.db 0x00
      0000E1                       5720 ___str_6:
      0000E1 46 48 53 53 78 6D 69  5721 	.ascii "FHSSxmit done"
             74 20 64 6F 6E 65
      0000EE 00                    5722 	.db 0x00
      0000EF                       5723 ___str_7:
      0000EF 6E 65 74 77 6F 72 6B  5724 	.ascii "network packet(sync)"
             20 70 61 63 6B 65 74
             28 73 79 6E 63 29
      000103 00                    5725 	.db 0x00
      000104                       5726 ___str_8:
      000104 6E 65 74 77 6F 72 6B  5727 	.ascii "network packet(discovery)"
             20 70 61 63 6B 65 74
             28 64 69 73 63 6F 76
             65 72 79 29
      00011D 00                    5728 	.db 0x00
      00011E                       5729 ___str_9:
      00011E 63 72 61 70 2C 20 70  5730 	.ascii "crap, please use FHSSxmit() instead!"
             6C 65 61 73 65 20 75
             73 65 20 46 48 53 53
             78 6D 69 74 28 29 20
             69 6E 73 74 65 61 64
             21
      000142 00                    5731 	.db 0x00
      000143                       5732 ___str_10:
      000143 64 72 6F 70 6F 75 74  5733 	.ascii "dropout final wait!"
             20 66 69 6E 61 6C 20
             77 61 69 74 21
      000156 00                    5734 	.db 0x00
      000157                       5735 ___str_11:
      000157 74 6F 74 61 6C 20 62  5736 	.ascii "total bytes tx:"
             79 74 65 73 20 74 78
             3A
      000166 00                    5737 	.db 0x00
      000167                       5738 ___str_12:
      000167 75 6E 64 65 72 72 75  5739 	.ascii "underrun"
             6E
      00016F 00                    5740 	.db 0x00
      000170                       5741 ___str_13:
      000170 62 75 66 66 65 72 20  5742 	.ascii "buffer error"
             65 72 72 6F 72
      00017C 00                    5743 	.db 0x00
      00017D                       5744 ___str_14:
      00017D 73 74 69 6C 6C 20 77  5745 	.ascii "still waiting on the last packet"
             61 69 74 69 6E 67 20
             6F 6E 20 74 68 65 20
             6C 61 73 74 20 70 61
             63 6B 65 74
      00019D 00                    5746 	.db 0x00
      00019E                       5747 ___str_15:
      00019E 4E 4F 20 44 45 41 4C  5748 	.ascii "NO DEAL"
      0001A5 00                    5749 	.db 0x00
                                   5750 	.area XINIT   (CODE)
                                   5751 	.area CABS    (ABS,CODE)

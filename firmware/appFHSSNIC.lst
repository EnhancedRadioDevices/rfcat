                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Jun 20 2015) (MINGW32)
                                      4 ; This file was generated Fri Nov 18 22:31:03 2016
                                      5 ;--------------------------------------------------------
                                      6 	.module appFHSSNIC
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _initBoard
                                     14 	.globl _appHandleEP0
                                     15 	.globl _appHandleEP0OUT
                                     16 	.globl _appHandleEP0OUTdone
                                     17 	.globl _appMainLoop
                                     18 	.globl _appMainInit
                                     19 	.globl _init_MAC
                                     20 	.globl _init_FHSS
                                     21 	.globl _MAC_set_NIC_ID
                                     22 	.globl _MAC_do_Master_scanny_thingy
                                     23 	.globl _MAC_become_master
                                     24 	.globl _MAC_stop_sync
                                     25 	.globl _transmit_long
                                     26 	.globl _usb_up
                                     27 	.globl _usbProcessEvents
                                     28 	.globl _waitForUSBsetup
                                     29 	.globl _initUSB
                                     30 	.globl _memcpy
                                     31 	.globl _decAES
                                     32 	.globl _encAES
                                     33 	.globl _padAES
                                     34 	.globl _initAES
                                     35 	.globl _init_RF
                                     36 	.globl _transmit
                                     37 	.globl _initDMA
                                     38 	.globl _registerCb_ep5
                                     39 	.globl _txdata
                                     40 	.globl _clock_init
                                     41 	.globl _debughex16
                                     42 	.globl _debughex
                                     43 	.globl _debug
                                     44 	.globl _io_init
                                     45 	.globl _sleepMillis
                                     46 	.globl _USBIF
                                     47 	.globl _MODE
                                     48 	.globl _RE
                                     49 	.globl _SLAVE
                                     50 	.globl _FE
                                     51 	.globl _ERR
                                     52 	.globl _RX_BYTE
                                     53 	.globl _TX_BYTE
                                     54 	.globl _ACTIVE
                                     55 	.globl _B_7
                                     56 	.globl _B_6
                                     57 	.globl _B_5
                                     58 	.globl _B_4
                                     59 	.globl _B_3
                                     60 	.globl _B_2
                                     61 	.globl _B_1
                                     62 	.globl _B_0
                                     63 	.globl _WDTIF
                                     64 	.globl _P1IF
                                     65 	.globl _UTX1IF
                                     66 	.globl _UTX0IF
                                     67 	.globl _P2IF
                                     68 	.globl _ACC_7
                                     69 	.globl _ACC_6
                                     70 	.globl _ACC_5
                                     71 	.globl _ACC_4
                                     72 	.globl _ACC_3
                                     73 	.globl _ACC_2
                                     74 	.globl _ACC_1
                                     75 	.globl _ACC_0
                                     76 	.globl _OVFIM
                                     77 	.globl _T4CH1IF
                                     78 	.globl _T4CH0IF
                                     79 	.globl _T4OVFIF
                                     80 	.globl _T3CH1IF
                                     81 	.globl _T3CH0IF
                                     82 	.globl _T3OVFIF
                                     83 	.globl _CY
                                     84 	.globl _AC
                                     85 	.globl _F0
                                     86 	.globl _RS1
                                     87 	.globl _RS0
                                     88 	.globl _OV
                                     89 	.globl _F1
                                     90 	.globl _P
                                     91 	.globl _STIF
                                     92 	.globl _P0IF
                                     93 	.globl _T4IF
                                     94 	.globl _T3IF
                                     95 	.globl _T2IF
                                     96 	.globl _T1IF
                                     97 	.globl _DMAIF
                                     98 	.globl _P0IE
                                     99 	.globl _T4IE
                                    100 	.globl _T3IE
                                    101 	.globl _T2IE
                                    102 	.globl _T1IE
                                    103 	.globl _DMAIE
                                    104 	.globl _EA
                                    105 	.globl _STIE
                                    106 	.globl _ENCIE
                                    107 	.globl _URX1IE
                                    108 	.globl _URX0IE
                                    109 	.globl _ADCIE
                                    110 	.globl _RFTXRXIE
                                    111 	.globl _P2_7
                                    112 	.globl _P2_6
                                    113 	.globl _P2_5
                                    114 	.globl _P2_4
                                    115 	.globl _P2_3
                                    116 	.globl _P2_2
                                    117 	.globl _P2_1
                                    118 	.globl _P2_0
                                    119 	.globl _ENCIF_1
                                    120 	.globl _ENCIF_0
                                    121 	.globl _P1_7
                                    122 	.globl _P1_6
                                    123 	.globl _P1_5
                                    124 	.globl _P1_4
                                    125 	.globl _P1_3
                                    126 	.globl _P1_2
                                    127 	.globl _P1_1
                                    128 	.globl _P1_0
                                    129 	.globl _URX1IF
                                    130 	.globl _ADCIF
                                    131 	.globl _URX0IF
                                    132 	.globl _IT1
                                    133 	.globl _RFTXRXIF
                                    134 	.globl _IT0
                                    135 	.globl _P0_7
                                    136 	.globl _P0_6
                                    137 	.globl _P0_5
                                    138 	.globl _P0_4
                                    139 	.globl _P0_3
                                    140 	.globl _P0_2
                                    141 	.globl _P0_1
                                    142 	.globl _P0_0
                                    143 	.globl _P2DIR
                                    144 	.globl _P1DIR
                                    145 	.globl _P0DIR
                                    146 	.globl _U1GCR
                                    147 	.globl _U1UCR
                                    148 	.globl _U1BAUD
                                    149 	.globl _U1DBUF
                                    150 	.globl _U1CSR
                                    151 	.globl _P2INP
                                    152 	.globl _P1INP
                                    153 	.globl _P2SEL
                                    154 	.globl _P1SEL
                                    155 	.globl _P0SEL
                                    156 	.globl _ADCCFG
                                    157 	.globl _PERCFG
                                    158 	.globl _B
                                    159 	.globl _T4CC1
                                    160 	.globl _T4CCTL1
                                    161 	.globl _T4CC0
                                    162 	.globl _T4CCTL0
                                    163 	.globl _T4CTL
                                    164 	.globl _T4CNT
                                    165 	.globl _RFIF
                                    166 	.globl _IRCON2
                                    167 	.globl _T1CCTL2
                                    168 	.globl _T1CCTL1
                                    169 	.globl _T1CCTL0
                                    170 	.globl _T1CTL
                                    171 	.globl _T1CNTH
                                    172 	.globl _T1CNTL
                                    173 	.globl _RFST
                                    174 	.globl _ACC
                                    175 	.globl _T1CC2H
                                    176 	.globl _T1CC2L
                                    177 	.globl _T1CC1H
                                    178 	.globl _T1CC1L
                                    179 	.globl _T1CC0H
                                    180 	.globl _T1CC0L
                                    181 	.globl _RFD
                                    182 	.globl _TIMIF
                                    183 	.globl _DMAREQ
                                    184 	.globl _DMAARM
                                    185 	.globl _DMA0CFGH
                                    186 	.globl _DMA0CFGL
                                    187 	.globl _DMA1CFGH
                                    188 	.globl _DMA1CFGL
                                    189 	.globl _DMAIRQ
                                    190 	.globl _PSW
                                    191 	.globl _T3CC1
                                    192 	.globl _T3CCTL1
                                    193 	.globl _T3CC0
                                    194 	.globl _T3CCTL0
                                    195 	.globl _T3CTL
                                    196 	.globl _T3CNT
                                    197 	.globl _WDCTL
                                    198 	.globl __SFRC8
                                    199 	.globl _MEMCTR
                                    200 	.globl _CLKCON
                                    201 	.globl _U0GCR
                                    202 	.globl _U0UCR
                                    203 	.globl __SFRC3
                                    204 	.globl _U0BAUD
                                    205 	.globl _U0DBUF
                                    206 	.globl _IRCON
                                    207 	.globl __SFRBF
                                    208 	.globl _SLEEP
                                    209 	.globl _RNDH
                                    210 	.globl _RNDL
                                    211 	.globl _ADCH
                                    212 	.globl _ADCL
                                    213 	.globl _IP1
                                    214 	.globl _IEN1
                                    215 	.globl __SFRB7
                                    216 	.globl _ADCCON3
                                    217 	.globl _ADCCON2
                                    218 	.globl _ADCCON1
                                    219 	.globl _ENCCS
                                    220 	.globl _ENCDO
                                    221 	.globl _ENCDI
                                    222 	.globl __SFRB0
                                    223 	.globl _FWDATA
                                    224 	.globl _FCTL
                                    225 	.globl _FADDRH
                                    226 	.globl _FADDRL
                                    227 	.globl _FWT
                                    228 	.globl __SFRAA
                                    229 	.globl _IP0
                                    230 	.globl _IEN0
                                    231 	.globl __SFRA7
                                    232 	.globl _WORTIME1
                                    233 	.globl _WORTIME0
                                    234 	.globl _WOREVT1
                                    235 	.globl _WOREVT0
                                    236 	.globl _WORCTRL
                                    237 	.globl _WORIRQ
                                    238 	.globl _P2
                                    239 	.globl __SFR9F
                                    240 	.globl _T2CTL
                                    241 	.globl _T2PR
                                    242 	.globl _T2CT
                                    243 	.globl _S1CON
                                    244 	.globl _IEN2
                                    245 	.globl __SFR99
                                    246 	.globl _S0CON
                                    247 	.globl __SFR97
                                    248 	.globl __SFR96
                                    249 	.globl __SFR95
                                    250 	.globl __SFR94
                                    251 	.globl __XPAGE
                                    252 	.globl _MPAGE
                                    253 	.globl _DPS
                                    254 	.globl _RFIM
                                    255 	.globl _P1
                                    256 	.globl _P0INP
                                    257 	.globl __SFR8E
                                    258 	.globl _P1IEN
                                    259 	.globl _PICTL
                                    260 	.globl _P2IFG
                                    261 	.globl _P1IFG
                                    262 	.globl _P0IFG
                                    263 	.globl _TCON
                                    264 	.globl _PCON
                                    265 	.globl _U0CSR
                                    266 	.globl _DPH1
                                    267 	.globl _DPL1
                                    268 	.globl _DPH0
                                    269 	.globl _DPL0
                                    270 	.globl _SP
                                    271 	.globl _P0
                                    272 	.globl _chan_table
                                    273 	.globl _processbuffer
                                    274 	.globl _MAC_rx_handle_PARM_2
                                    275 	.globl _MAC_tx_PARM_2
                                    276 	.globl _transmit_long_PARM_3
                                    277 	.globl _transmit_long_PARM_2
                                    278 	.globl _g_txMsgQueue
                                    279 	.globl _g_NIC_ID
                                    280 	.globl _g_Channels
                                    281 	.globl _USBF5
                                    282 	.globl _USBF4
                                    283 	.globl _USBF3
                                    284 	.globl _USBF2
                                    285 	.globl _USBF1
                                    286 	.globl _USBF0
                                    287 	.globl _USBCNTH
                                    288 	.globl _USBCNTL
                                    289 	.globl _USBCNT0
                                    290 	.globl _USBCSOH
                                    291 	.globl _USBCSOL
                                    292 	.globl _USBMAXO
                                    293 	.globl _USBCSIH
                                    294 	.globl _USBCSIL
                                    295 	.globl _USBCS0
                                    296 	.globl _USBMAXI
                                    297 	.globl _USBINDEX
                                    298 	.globl _USBFRMH
                                    299 	.globl _USBFRML
                                    300 	.globl _USBCIE
                                    301 	.globl _USBOIE
                                    302 	.globl _USBIIE
                                    303 	.globl _USBCIF
                                    304 	.globl _USBOIF
                                    305 	.globl _USBIIF
                                    306 	.globl _USBPOW
                                    307 	.globl _USBADDR
                                    308 	.globl _X_P2DIR
                                    309 	.globl _X_P1DIR
                                    310 	.globl _X_P0DIR
                                    311 	.globl _X_U1GCR
                                    312 	.globl _X_U1UCR
                                    313 	.globl _X_U1BAUD
                                    314 	.globl _X_U1DBUF
                                    315 	.globl _X_U1CSR
                                    316 	.globl _X_P2INP
                                    317 	.globl _X_P1INP
                                    318 	.globl _X_P2SEL
                                    319 	.globl _X_P1SEL
                                    320 	.globl _X_P0SEL
                                    321 	.globl _X_ADCCFG
                                    322 	.globl _X_PERCFG
                                    323 	.globl __NA_B
                                    324 	.globl _X_T4CC1
                                    325 	.globl _X_T4CCTL1
                                    326 	.globl _X_T4CC0
                                    327 	.globl _X_T4CCTL0
                                    328 	.globl _X_T4CTL
                                    329 	.globl _X_T4CNT
                                    330 	.globl _X_RFIF
                                    331 	.globl __NA_IRCON2
                                    332 	.globl _X_T1CCTL2
                                    333 	.globl _X_T1CCTL1
                                    334 	.globl _X_T1CCTL0
                                    335 	.globl _X_T1CTL
                                    336 	.globl _X_T1CNTH
                                    337 	.globl _X_T1CNTL
                                    338 	.globl _X_RFST
                                    339 	.globl __NA_ACC
                                    340 	.globl _X_T1CC2H
                                    341 	.globl _X_T1CC2L
                                    342 	.globl _X_T1CC1H
                                    343 	.globl _X_T1CC1L
                                    344 	.globl _X_T1CC0H
                                    345 	.globl _X_T1CC0L
                                    346 	.globl _X_RFD
                                    347 	.globl _X_TIMIF
                                    348 	.globl _X_DMAREQ
                                    349 	.globl _X_DMAARM
                                    350 	.globl _X_DMA0CFGH
                                    351 	.globl _X_DMA0CFGL
                                    352 	.globl _X_DMA1CFGH
                                    353 	.globl _X_DMA1CFGL
                                    354 	.globl _X_DMAIRQ
                                    355 	.globl __NA_PSW
                                    356 	.globl _X_T3CC1
                                    357 	.globl _X_T3CCTL1
                                    358 	.globl _X_T3CC0
                                    359 	.globl _X_T3CCTL0
                                    360 	.globl _X_T3CTL
                                    361 	.globl _X_T3CNT
                                    362 	.globl _X_WDCTL
                                    363 	.globl __X_SFRC8
                                    364 	.globl _X_MEMCTR
                                    365 	.globl _X_CLKCON
                                    366 	.globl _X_U0GCR
                                    367 	.globl _X_U0UCR
                                    368 	.globl __X_SFRC3
                                    369 	.globl _X_U0BAUD
                                    370 	.globl _X_U0DBUF
                                    371 	.globl __NA_IRCON
                                    372 	.globl __X_SFRBF
                                    373 	.globl _X_SLEEP
                                    374 	.globl _X_RNDH
                                    375 	.globl _X_RNDL
                                    376 	.globl _X_ADCH
                                    377 	.globl _X_ADCL
                                    378 	.globl __NA_IP1
                                    379 	.globl __NA_IEN1
                                    380 	.globl __X_SFRB7
                                    381 	.globl _X_ADCCON3
                                    382 	.globl _X_ADCCON2
                                    383 	.globl _X_ADCCON1
                                    384 	.globl _X_ENCCS
                                    385 	.globl _X_ENCDO
                                    386 	.globl _X_ENCDI
                                    387 	.globl __X_SFRB0
                                    388 	.globl _X_FWDATA
                                    389 	.globl _X_FCTL
                                    390 	.globl _X_FADDRH
                                    391 	.globl _X_FADDRL
                                    392 	.globl _X_FWT
                                    393 	.globl __X_SFRAA
                                    394 	.globl __NA_IP0
                                    395 	.globl __NA_IEN0
                                    396 	.globl __X_SFRA7
                                    397 	.globl _X_WORTIME1
                                    398 	.globl _X_WORTIME0
                                    399 	.globl _X_WOREVT1
                                    400 	.globl _X_WOREVT0
                                    401 	.globl _X_WORCTRL
                                    402 	.globl _X_WORIRQ
                                    403 	.globl __NA_P2
                                    404 	.globl __X_SFR9F
                                    405 	.globl _X_T2CTL
                                    406 	.globl _X_T2PR
                                    407 	.globl _X_T2CT
                                    408 	.globl __NA_S1CON
                                    409 	.globl __NA_IEN2
                                    410 	.globl __X_SFR99
                                    411 	.globl __NA_S0CON
                                    412 	.globl __X_SFR97
                                    413 	.globl __X_SFR96
                                    414 	.globl __X_SFR95
                                    415 	.globl __X_SFR94
                                    416 	.globl _X_MPAGE
                                    417 	.globl __NA_DPS
                                    418 	.globl _X_RFIM
                                    419 	.globl __NA_P1
                                    420 	.globl _X_P0INP
                                    421 	.globl __X_SFR8E
                                    422 	.globl _X_P1IEN
                                    423 	.globl _X_PICTL
                                    424 	.globl _X_P2IFG
                                    425 	.globl _X_P1IFG
                                    426 	.globl _X_P0IFG
                                    427 	.globl __NA_TCON
                                    428 	.globl __NA_PCON
                                    429 	.globl _X_U0CSR
                                    430 	.globl __NA_DPH1
                                    431 	.globl __NA_DPL1
                                    432 	.globl __NA_DPH0
                                    433 	.globl __NA_DPL0
                                    434 	.globl __NA_SP
                                    435 	.globl __NA_P0
                                    436 	.globl _I2SCLKF2
                                    437 	.globl _I2SCLKF1
                                    438 	.globl _I2SCLKF0
                                    439 	.globl _I2SSTAT
                                    440 	.globl _I2SWCNT
                                    441 	.globl _I2SDATH
                                    442 	.globl _I2SDATL
                                    443 	.globl _I2SCFG1
                                    444 	.globl _I2SCFG0
                                    445 	.globl _VCO_VC_DAC
                                    446 	.globl _PKTSTATUS
                                    447 	.globl _MARCSTATE
                                    448 	.globl _RSSI
                                    449 	.globl _LQI
                                    450 	.globl _FREQEST
                                    451 	.globl _VERSION
                                    452 	.globl _PARTNUM
                                    453 	.globl __XREGDF35
                                    454 	.globl __XREGDF34
                                    455 	.globl __XREGDF33
                                    456 	.globl __XREGDF32
                                    457 	.globl _IOCFG0
                                    458 	.globl _IOCFG1
                                    459 	.globl _IOCFG2
                                    460 	.globl _PA_TABLE0
                                    461 	.globl _PA_TABLE1
                                    462 	.globl _PA_TABLE2
                                    463 	.globl _PA_TABLE3
                                    464 	.globl _PA_TABLE4
                                    465 	.globl _PA_TABLE5
                                    466 	.globl _PA_TABLE6
                                    467 	.globl _PA_TABLE7
                                    468 	.globl __XREGDF26
                                    469 	.globl _TEST0
                                    470 	.globl _TEST1
                                    471 	.globl _TEST2
                                    472 	.globl __XREGDF22
                                    473 	.globl __XREGDF21
                                    474 	.globl __XREGDF20
                                    475 	.globl _FSCAL0
                                    476 	.globl _FSCAL1
                                    477 	.globl _FSCAL2
                                    478 	.globl _FSCAL3
                                    479 	.globl _FREND0
                                    480 	.globl _FREND1
                                    481 	.globl _AGCCTRL0
                                    482 	.globl _AGCCTRL1
                                    483 	.globl _AGCCTRL2
                                    484 	.globl _BSCFG
                                    485 	.globl _FOCCFG
                                    486 	.globl _MCSM0
                                    487 	.globl _MCSM1
                                    488 	.globl _MCSM2
                                    489 	.globl _DEVIATN
                                    490 	.globl _MDMCFG0
                                    491 	.globl _MDMCFG1
                                    492 	.globl _MDMCFG2
                                    493 	.globl _MDMCFG3
                                    494 	.globl _MDMCFG4
                                    495 	.globl _FREQ0
                                    496 	.globl _FREQ1
                                    497 	.globl _FREQ2
                                    498 	.globl _FSCTRL0
                                    499 	.globl _FSCTRL1
                                    500 	.globl _CHANNR
                                    501 	.globl _ADDR
                                    502 	.globl _PKTCTRL0
                                    503 	.globl _PKTCTRL1
                                    504 	.globl _PKTLEN
                                    505 	.globl _SYNC0
                                    506 	.globl _SYNC1
                                    507 	.globl _MDMCTRL0H
                                    508 	.globl _PHY_set_channel
                                    509 	.globl _MAC_initChannels
                                    510 	.globl _begin_hopping
                                    511 	.globl _stop_hopping
                                    512 	.globl _MAC_tx
                                    513 	.globl _MAC_sync
                                    514 	.globl _MAC_set_chanidx
                                    515 	.globl _MAC_rx_handle
                                    516 	.globl _MAC_getNextChannel
                                    517 	.globl _t2IntHandler
                                    518 	.globl _t3IntHandler
                                    519 	.globl _appHandleEP5
                                    520 	.globl _appInitRf
                                    521 ;--------------------------------------------------------
                                    522 ; special function registers
                                    523 ;--------------------------------------------------------
                                    524 	.area RSEG    (ABS,DATA)
      000000                        525 	.org 0x0000
                           000080   526 _P0	=	0x0080
                           000081   527 _SP	=	0x0081
                           000082   528 _DPL0	=	0x0082
                           000083   529 _DPH0	=	0x0083
                           000084   530 _DPL1	=	0x0084
                           000085   531 _DPH1	=	0x0085
                           000086   532 _U0CSR	=	0x0086
                           000087   533 _PCON	=	0x0087
                           000088   534 _TCON	=	0x0088
                           000089   535 _P0IFG	=	0x0089
                           00008A   536 _P1IFG	=	0x008a
                           00008B   537 _P2IFG	=	0x008b
                           00008C   538 _PICTL	=	0x008c
                           00008D   539 _P1IEN	=	0x008d
                           00008E   540 __SFR8E	=	0x008e
                           00008F   541 _P0INP	=	0x008f
                           000090   542 _P1	=	0x0090
                           000091   543 _RFIM	=	0x0091
                           000092   544 _DPS	=	0x0092
                           000093   545 _MPAGE	=	0x0093
                           000093   546 __XPAGE	=	0x0093
                           000094   547 __SFR94	=	0x0094
                           000095   548 __SFR95	=	0x0095
                           000096   549 __SFR96	=	0x0096
                           000097   550 __SFR97	=	0x0097
                           000098   551 _S0CON	=	0x0098
                           000099   552 __SFR99	=	0x0099
                           00009A   553 _IEN2	=	0x009a
                           00009B   554 _S1CON	=	0x009b
                           00009C   555 _T2CT	=	0x009c
                           00009D   556 _T2PR	=	0x009d
                           00009E   557 _T2CTL	=	0x009e
                           00009F   558 __SFR9F	=	0x009f
                           0000A0   559 _P2	=	0x00a0
                           0000A1   560 _WORIRQ	=	0x00a1
                           0000A2   561 _WORCTRL	=	0x00a2
                           0000A3   562 _WOREVT0	=	0x00a3
                           0000A4   563 _WOREVT1	=	0x00a4
                           0000A5   564 _WORTIME0	=	0x00a5
                           0000A6   565 _WORTIME1	=	0x00a6
                           0000A7   566 __SFRA7	=	0x00a7
                           0000A8   567 _IEN0	=	0x00a8
                           0000A9   568 _IP0	=	0x00a9
                           0000AA   569 __SFRAA	=	0x00aa
                           0000AB   570 _FWT	=	0x00ab
                           0000AC   571 _FADDRL	=	0x00ac
                           0000AD   572 _FADDRH	=	0x00ad
                           0000AE   573 _FCTL	=	0x00ae
                           0000AF   574 _FWDATA	=	0x00af
                           0000B0   575 __SFRB0	=	0x00b0
                           0000B1   576 _ENCDI	=	0x00b1
                           0000B2   577 _ENCDO	=	0x00b2
                           0000B3   578 _ENCCS	=	0x00b3
                           0000B4   579 _ADCCON1	=	0x00b4
                           0000B5   580 _ADCCON2	=	0x00b5
                           0000B6   581 _ADCCON3	=	0x00b6
                           0000B7   582 __SFRB7	=	0x00b7
                           0000B8   583 _IEN1	=	0x00b8
                           0000B9   584 _IP1	=	0x00b9
                           0000BA   585 _ADCL	=	0x00ba
                           0000BB   586 _ADCH	=	0x00bb
                           0000BC   587 _RNDL	=	0x00bc
                           0000BD   588 _RNDH	=	0x00bd
                           0000BE   589 _SLEEP	=	0x00be
                           0000BF   590 __SFRBF	=	0x00bf
                           0000C0   591 _IRCON	=	0x00c0
                           0000C1   592 _U0DBUF	=	0x00c1
                           0000C2   593 _U0BAUD	=	0x00c2
                           0000C3   594 __SFRC3	=	0x00c3
                           0000C4   595 _U0UCR	=	0x00c4
                           0000C5   596 _U0GCR	=	0x00c5
                           0000C6   597 _CLKCON	=	0x00c6
                           0000C7   598 _MEMCTR	=	0x00c7
                           0000C8   599 __SFRC8	=	0x00c8
                           0000C9   600 _WDCTL	=	0x00c9
                           0000CA   601 _T3CNT	=	0x00ca
                           0000CB   602 _T3CTL	=	0x00cb
                           0000CC   603 _T3CCTL0	=	0x00cc
                           0000CD   604 _T3CC0	=	0x00cd
                           0000CE   605 _T3CCTL1	=	0x00ce
                           0000CF   606 _T3CC1	=	0x00cf
                           0000D0   607 _PSW	=	0x00d0
                           0000D1   608 _DMAIRQ	=	0x00d1
                           0000D2   609 _DMA1CFGL	=	0x00d2
                           0000D3   610 _DMA1CFGH	=	0x00d3
                           0000D4   611 _DMA0CFGL	=	0x00d4
                           0000D5   612 _DMA0CFGH	=	0x00d5
                           0000D6   613 _DMAARM	=	0x00d6
                           0000D7   614 _DMAREQ	=	0x00d7
                           0000D8   615 _TIMIF	=	0x00d8
                           0000D9   616 _RFD	=	0x00d9
                           0000DA   617 _T1CC0L	=	0x00da
                           0000DB   618 _T1CC0H	=	0x00db
                           0000DC   619 _T1CC1L	=	0x00dc
                           0000DD   620 _T1CC1H	=	0x00dd
                           0000DE   621 _T1CC2L	=	0x00de
                           0000DF   622 _T1CC2H	=	0x00df
                           0000E0   623 _ACC	=	0x00e0
                           0000E1   624 _RFST	=	0x00e1
                           0000E2   625 _T1CNTL	=	0x00e2
                           0000E3   626 _T1CNTH	=	0x00e3
                           0000E4   627 _T1CTL	=	0x00e4
                           0000E5   628 _T1CCTL0	=	0x00e5
                           0000E6   629 _T1CCTL1	=	0x00e6
                           0000E7   630 _T1CCTL2	=	0x00e7
                           0000E8   631 _IRCON2	=	0x00e8
                           0000E9   632 _RFIF	=	0x00e9
                           0000EA   633 _T4CNT	=	0x00ea
                           0000EB   634 _T4CTL	=	0x00eb
                           0000EC   635 _T4CCTL0	=	0x00ec
                           0000ED   636 _T4CC0	=	0x00ed
                           0000EE   637 _T4CCTL1	=	0x00ee
                           0000EF   638 _T4CC1	=	0x00ef
                           0000F0   639 _B	=	0x00f0
                           0000F1   640 _PERCFG	=	0x00f1
                           0000F2   641 _ADCCFG	=	0x00f2
                           0000F3   642 _P0SEL	=	0x00f3
                           0000F4   643 _P1SEL	=	0x00f4
                           0000F5   644 _P2SEL	=	0x00f5
                           0000F6   645 _P1INP	=	0x00f6
                           0000F7   646 _P2INP	=	0x00f7
                           0000F8   647 _U1CSR	=	0x00f8
                           0000F9   648 _U1DBUF	=	0x00f9
                           0000FA   649 _U1BAUD	=	0x00fa
                           0000FB   650 _U1UCR	=	0x00fb
                           0000FC   651 _U1GCR	=	0x00fc
                           0000FD   652 _P0DIR	=	0x00fd
                           0000FE   653 _P1DIR	=	0x00fe
                           0000FF   654 _P2DIR	=	0x00ff
                                    655 ;--------------------------------------------------------
                                    656 ; special function bits
                                    657 ;--------------------------------------------------------
                                    658 	.area RSEG    (ABS,DATA)
      000000                        659 	.org 0x0000
                           000080   660 _P0_0	=	0x0080
                           000081   661 _P0_1	=	0x0081
                           000082   662 _P0_2	=	0x0082
                           000083   663 _P0_3	=	0x0083
                           000084   664 _P0_4	=	0x0084
                           000085   665 _P0_5	=	0x0085
                           000086   666 _P0_6	=	0x0086
                           000087   667 _P0_7	=	0x0087
                           000088   668 _IT0	=	0x0088
                           000089   669 _RFTXRXIF	=	0x0089
                           00008A   670 _IT1	=	0x008a
                           00008B   671 _URX0IF	=	0x008b
                           00008D   672 _ADCIF	=	0x008d
                           00008F   673 _URX1IF	=	0x008f
                           000090   674 _P1_0	=	0x0090
                           000091   675 _P1_1	=	0x0091
                           000092   676 _P1_2	=	0x0092
                           000093   677 _P1_3	=	0x0093
                           000094   678 _P1_4	=	0x0094
                           000095   679 _P1_5	=	0x0095
                           000096   680 _P1_6	=	0x0096
                           000097   681 _P1_7	=	0x0097
                           000098   682 _ENCIF_0	=	0x0098
                           000099   683 _ENCIF_1	=	0x0099
                           0000A0   684 _P2_0	=	0x00a0
                           0000A1   685 _P2_1	=	0x00a1
                           0000A2   686 _P2_2	=	0x00a2
                           0000A3   687 _P2_3	=	0x00a3
                           0000A4   688 _P2_4	=	0x00a4
                           0000A5   689 _P2_5	=	0x00a5
                           0000A6   690 _P2_6	=	0x00a6
                           0000A7   691 _P2_7	=	0x00a7
                           0000A8   692 _RFTXRXIE	=	0x00a8
                           0000A9   693 _ADCIE	=	0x00a9
                           0000AA   694 _URX0IE	=	0x00aa
                           0000AB   695 _URX1IE	=	0x00ab
                           0000AC   696 _ENCIE	=	0x00ac
                           0000AD   697 _STIE	=	0x00ad
                           0000AF   698 _EA	=	0x00af
                           0000B8   699 _DMAIE	=	0x00b8
                           0000B9   700 _T1IE	=	0x00b9
                           0000BA   701 _T2IE	=	0x00ba
                           0000BB   702 _T3IE	=	0x00bb
                           0000BC   703 _T4IE	=	0x00bc
                           0000BD   704 _P0IE	=	0x00bd
                           0000C0   705 _DMAIF	=	0x00c0
                           0000C1   706 _T1IF	=	0x00c1
                           0000C2   707 _T2IF	=	0x00c2
                           0000C3   708 _T3IF	=	0x00c3
                           0000C4   709 _T4IF	=	0x00c4
                           0000C5   710 _P0IF	=	0x00c5
                           0000C7   711 _STIF	=	0x00c7
                           0000D0   712 _P	=	0x00d0
                           0000D1   713 _F1	=	0x00d1
                           0000D2   714 _OV	=	0x00d2
                           0000D3   715 _RS0	=	0x00d3
                           0000D4   716 _RS1	=	0x00d4
                           0000D5   717 _F0	=	0x00d5
                           0000D6   718 _AC	=	0x00d6
                           0000D7   719 _CY	=	0x00d7
                           0000D8   720 _T3OVFIF	=	0x00d8
                           0000D9   721 _T3CH0IF	=	0x00d9
                           0000DA   722 _T3CH1IF	=	0x00da
                           0000DB   723 _T4OVFIF	=	0x00db
                           0000DC   724 _T4CH0IF	=	0x00dc
                           0000DD   725 _T4CH1IF	=	0x00dd
                           0000DE   726 _OVFIM	=	0x00de
                           0000E0   727 _ACC_0	=	0x00e0
                           0000E1   728 _ACC_1	=	0x00e1
                           0000E2   729 _ACC_2	=	0x00e2
                           0000E3   730 _ACC_3	=	0x00e3
                           0000E4   731 _ACC_4	=	0x00e4
                           0000E5   732 _ACC_5	=	0x00e5
                           0000E6   733 _ACC_6	=	0x00e6
                           0000E7   734 _ACC_7	=	0x00e7
                           0000E8   735 _P2IF	=	0x00e8
                           0000E9   736 _UTX0IF	=	0x00e9
                           0000EA   737 _UTX1IF	=	0x00ea
                           0000EB   738 _P1IF	=	0x00eb
                           0000EC   739 _WDTIF	=	0x00ec
                           0000F0   740 _B_0	=	0x00f0
                           0000F1   741 _B_1	=	0x00f1
                           0000F2   742 _B_2	=	0x00f2
                           0000F3   743 _B_3	=	0x00f3
                           0000F4   744 _B_4	=	0x00f4
                           0000F5   745 _B_5	=	0x00f5
                           0000F6   746 _B_6	=	0x00f6
                           0000F7   747 _B_7	=	0x00f7
                           0000F8   748 _ACTIVE	=	0x00f8
                           0000F9   749 _TX_BYTE	=	0x00f9
                           0000FA   750 _RX_BYTE	=	0x00fa
                           0000FB   751 _ERR	=	0x00fb
                           0000FC   752 _FE	=	0x00fc
                           0000FD   753 _SLAVE	=	0x00fd
                           0000FE   754 _RE	=	0x00fe
                           0000FF   755 _MODE	=	0x00ff
                           0000E8   756 _USBIF	=	0x00e8
                                    757 ;--------------------------------------------------------
                                    758 ; overlayable register banks
                                    759 ;--------------------------------------------------------
                                    760 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        761 	.ds 8
                                    762 ;--------------------------------------------------------
                                    763 ; overlayable bit register bank
                                    764 ;--------------------------------------------------------
                                    765 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        766 bits:
      000000                        767 	.ds 1
                           008000   768 	b0 = bits[0]
                           008100   769 	b1 = bits[1]
                           008200   770 	b2 = bits[2]
                           008300   771 	b3 = bits[3]
                           008400   772 	b4 = bits[4]
                           008500   773 	b5 = bits[5]
                           008600   774 	b6 = bits[6]
                           008700   775 	b7 = bits[7]
                                    776 ;--------------------------------------------------------
                                    777 ; internal ram data
                                    778 ;--------------------------------------------------------
                                    779 	.area DSEG    (DATA)
                                    780 ;--------------------------------------------------------
                                    781 ; overlayable items in internal ram 
                                    782 ;--------------------------------------------------------
                                    783 	.area	OSEG    (OVR,DATA)
                                    784 ;--------------------------------------------------------
                                    785 ; Stack segment in internal ram 
                                    786 ;--------------------------------------------------------
                                    787 	.area	SSEG
      000000                        788 __start__stack:
      000000                        789 	.ds	1
                                    790 
                                    791 ;--------------------------------------------------------
                                    792 ; indirectly addressable internal ram data
                                    793 ;--------------------------------------------------------
                                    794 	.area ISEG    (DATA)
                                    795 ;--------------------------------------------------------
                                    796 ; absolute internal ram data
                                    797 ;--------------------------------------------------------
                                    798 	.area IABS    (ABS,DATA)
                                    799 	.area IABS    (ABS,DATA)
                                    800 ;--------------------------------------------------------
                                    801 ; bit data
                                    802 ;--------------------------------------------------------
                                    803 	.area BSEG    (BIT)
      000000                        804 _appMainLoop_sloc0_1_0:
      000000                        805 	.ds 1
                                    806 ;--------------------------------------------------------
                                    807 ; paged external ram data
                                    808 ;--------------------------------------------------------
                                    809 	.area PSEG    (PAG,XDATA)
                                    810 ;--------------------------------------------------------
                                    811 ; external ram data
                                    812 ;--------------------------------------------------------
                                    813 	.area XSEG    (XDATA)
                           00DF02   814 _MDMCTRL0H	=	0xdf02
                           00DF00   815 _SYNC1	=	0xdf00
                           00DF01   816 _SYNC0	=	0xdf01
                           00DF02   817 _PKTLEN	=	0xdf02
                           00DF03   818 _PKTCTRL1	=	0xdf03
                           00DF04   819 _PKTCTRL0	=	0xdf04
                           00DF05   820 _ADDR	=	0xdf05
                           00DF06   821 _CHANNR	=	0xdf06
                           00DF07   822 _FSCTRL1	=	0xdf07
                           00DF08   823 _FSCTRL0	=	0xdf08
                           00DF09   824 _FREQ2	=	0xdf09
                           00DF0A   825 _FREQ1	=	0xdf0a
                           00DF0B   826 _FREQ0	=	0xdf0b
                           00DF0C   827 _MDMCFG4	=	0xdf0c
                           00DF0D   828 _MDMCFG3	=	0xdf0d
                           00DF0E   829 _MDMCFG2	=	0xdf0e
                           00DF0F   830 _MDMCFG1	=	0xdf0f
                           00DF10   831 _MDMCFG0	=	0xdf10
                           00DF11   832 _DEVIATN	=	0xdf11
                           00DF12   833 _MCSM2	=	0xdf12
                           00DF13   834 _MCSM1	=	0xdf13
                           00DF14   835 _MCSM0	=	0xdf14
                           00DF15   836 _FOCCFG	=	0xdf15
                           00DF16   837 _BSCFG	=	0xdf16
                           00DF17   838 _AGCCTRL2	=	0xdf17
                           00DF18   839 _AGCCTRL1	=	0xdf18
                           00DF19   840 _AGCCTRL0	=	0xdf19
                           00DF1A   841 _FREND1	=	0xdf1a
                           00DF1B   842 _FREND0	=	0xdf1b
                           00DF1C   843 _FSCAL3	=	0xdf1c
                           00DF1D   844 _FSCAL2	=	0xdf1d
                           00DF1E   845 _FSCAL1	=	0xdf1e
                           00DF1F   846 _FSCAL0	=	0xdf1f
                           00DF20   847 __XREGDF20	=	0xdf20
                           00DF21   848 __XREGDF21	=	0xdf21
                           00DF22   849 __XREGDF22	=	0xdf22
                           00DF23   850 _TEST2	=	0xdf23
                           00DF24   851 _TEST1	=	0xdf24
                           00DF25   852 _TEST0	=	0xdf25
                           00DF26   853 __XREGDF26	=	0xdf26
                           00DF27   854 _PA_TABLE7	=	0xdf27
                           00DF28   855 _PA_TABLE6	=	0xdf28
                           00DF29   856 _PA_TABLE5	=	0xdf29
                           00DF2A   857 _PA_TABLE4	=	0xdf2a
                           00DF2B   858 _PA_TABLE3	=	0xdf2b
                           00DF2C   859 _PA_TABLE2	=	0xdf2c
                           00DF2D   860 _PA_TABLE1	=	0xdf2d
                           00DF2E   861 _PA_TABLE0	=	0xdf2e
                           00DF2F   862 _IOCFG2	=	0xdf2f
                           00DF30   863 _IOCFG1	=	0xdf30
                           00DF31   864 _IOCFG0	=	0xdf31
                           00DF32   865 __XREGDF32	=	0xdf32
                           00DF33   866 __XREGDF33	=	0xdf33
                           00DF34   867 __XREGDF34	=	0xdf34
                           00DF35   868 __XREGDF35	=	0xdf35
                           00DF36   869 _PARTNUM	=	0xdf36
                           00DF37   870 _VERSION	=	0xdf37
                           00DF38   871 _FREQEST	=	0xdf38
                           00DF39   872 _LQI	=	0xdf39
                           00DF3A   873 _RSSI	=	0xdf3a
                           00DF3B   874 _MARCSTATE	=	0xdf3b
                           00DF3C   875 _PKTSTATUS	=	0xdf3c
                           00DF3D   876 _VCO_VC_DAC	=	0xdf3d
                           00DF40   877 _I2SCFG0	=	0xdf40
                           00DF41   878 _I2SCFG1	=	0xdf41
                           00DF42   879 _I2SDATL	=	0xdf42
                           00DF43   880 _I2SDATH	=	0xdf43
                           00DF44   881 _I2SWCNT	=	0xdf44
                           00DF45   882 _I2SSTAT	=	0xdf45
                           00DF46   883 _I2SCLKF0	=	0xdf46
                           00DF47   884 _I2SCLKF1	=	0xdf47
                           00DF48   885 _I2SCLKF2	=	0xdf48
                           00DF80   886 __NA_P0	=	0xdf80
                           00DF81   887 __NA_SP	=	0xdf81
                           00DF82   888 __NA_DPL0	=	0xdf82
                           00DF83   889 __NA_DPH0	=	0xdf83
                           00DF84   890 __NA_DPL1	=	0xdf84
                           00DF85   891 __NA_DPH1	=	0xdf85
                           00DF86   892 _X_U0CSR	=	0xdf86
                           00DF87   893 __NA_PCON	=	0xdf87
                           00DF88   894 __NA_TCON	=	0xdf88
                           00DF89   895 _X_P0IFG	=	0xdf89
                           00DF8A   896 _X_P1IFG	=	0xdf8a
                           00DF8B   897 _X_P2IFG	=	0xdf8b
                           00DF8C   898 _X_PICTL	=	0xdf8c
                           00DF8D   899 _X_P1IEN	=	0xdf8d
                           00DF8E   900 __X_SFR8E	=	0xdf8e
                           00DF8F   901 _X_P0INP	=	0xdf8f
                           00DF90   902 __NA_P1	=	0xdf90
                           00DF91   903 _X_RFIM	=	0xdf91
                           00DF92   904 __NA_DPS	=	0xdf92
                           00DF93   905 _X_MPAGE	=	0xdf93
                           00DF94   906 __X_SFR94	=	0xdf94
                           00DF95   907 __X_SFR95	=	0xdf95
                           00DF96   908 __X_SFR96	=	0xdf96
                           00DF97   909 __X_SFR97	=	0xdf97
                           00DF98   910 __NA_S0CON	=	0xdf98
                           00DF99   911 __X_SFR99	=	0xdf99
                           00DF9A   912 __NA_IEN2	=	0xdf9a
                           00DF9B   913 __NA_S1CON	=	0xdf9b
                           00DF9C   914 _X_T2CT	=	0xdf9c
                           00DF9D   915 _X_T2PR	=	0xdf9d
                           00DF9E   916 _X_T2CTL	=	0xdf9e
                           00DF9F   917 __X_SFR9F	=	0xdf9f
                           00DFA0   918 __NA_P2	=	0xdfa0
                           00DFA1   919 _X_WORIRQ	=	0xdfa1
                           00DFA2   920 _X_WORCTRL	=	0xdfa2
                           00DFA3   921 _X_WOREVT0	=	0xdfa3
                           00DFA4   922 _X_WOREVT1	=	0xdfa4
                           00DFA5   923 _X_WORTIME0	=	0xdfa5
                           00DFA6   924 _X_WORTIME1	=	0xdfa6
                           00DFA7   925 __X_SFRA7	=	0xdfa7
                           00DFA8   926 __NA_IEN0	=	0xdfa8
                           00DFA9   927 __NA_IP0	=	0xdfa9
                           00DFAA   928 __X_SFRAA	=	0xdfaa
                           00DFAB   929 _X_FWT	=	0xdfab
                           00DFAC   930 _X_FADDRL	=	0xdfac
                           00DFAD   931 _X_FADDRH	=	0xdfad
                           00DFAE   932 _X_FCTL	=	0xdfae
                           00DFAF   933 _X_FWDATA	=	0xdfaf
                           00DFB0   934 __X_SFRB0	=	0xdfb0
                           00DFB1   935 _X_ENCDI	=	0xdfb1
                           00DFB2   936 _X_ENCDO	=	0xdfb2
                           00DFB3   937 _X_ENCCS	=	0xdfb3
                           00DFB4   938 _X_ADCCON1	=	0xdfb4
                           00DFB5   939 _X_ADCCON2	=	0xdfb5
                           00DFB6   940 _X_ADCCON3	=	0xdfb6
                           00DFB7   941 __X_SFRB7	=	0xdfb7
                           00DFB8   942 __NA_IEN1	=	0xdfb8
                           00DFB9   943 __NA_IP1	=	0xdfb9
                           00DFBA   944 _X_ADCL	=	0xdfba
                           00DFBB   945 _X_ADCH	=	0xdfbb
                           00DFBC   946 _X_RNDL	=	0xdfbc
                           00DFBD   947 _X_RNDH	=	0xdfbd
                           00DFBE   948 _X_SLEEP	=	0xdfbe
                           00DFBF   949 __X_SFRBF	=	0xdfbf
                           00DFC0   950 __NA_IRCON	=	0xdfc0
                           00DFC1   951 _X_U0DBUF	=	0xdfc1
                           00DFC2   952 _X_U0BAUD	=	0xdfc2
                           00DFC3   953 __X_SFRC3	=	0xdfc3
                           00DFC4   954 _X_U0UCR	=	0xdfc4
                           00DFC5   955 _X_U0GCR	=	0xdfc5
                           00DFC6   956 _X_CLKCON	=	0xdfc6
                           00DFC7   957 _X_MEMCTR	=	0xdfc7
                           00DFC8   958 __X_SFRC8	=	0xdfc8
                           00DFC9   959 _X_WDCTL	=	0xdfc9
                           00DFCA   960 _X_T3CNT	=	0xdfca
                           00DFCB   961 _X_T3CTL	=	0xdfcb
                           00DFCC   962 _X_T3CCTL0	=	0xdfcc
                           00DFCD   963 _X_T3CC0	=	0xdfcd
                           00DFCE   964 _X_T3CCTL1	=	0xdfce
                           00DFCF   965 _X_T3CC1	=	0xdfcf
                           00DFD0   966 __NA_PSW	=	0xdfd0
                           00DFD1   967 _X_DMAIRQ	=	0xdfd1
                           00DFD2   968 _X_DMA1CFGL	=	0xdfd2
                           00DFD3   969 _X_DMA1CFGH	=	0xdfd3
                           00DFD4   970 _X_DMA0CFGL	=	0xdfd4
                           00DFD5   971 _X_DMA0CFGH	=	0xdfd5
                           00DFD6   972 _X_DMAARM	=	0xdfd6
                           00DFD7   973 _X_DMAREQ	=	0xdfd7
                           00DFD8   974 _X_TIMIF	=	0xdfd8
                           00DFD9   975 _X_RFD	=	0xdfd9
                           00DFDA   976 _X_T1CC0L	=	0xdfda
                           00DFDB   977 _X_T1CC0H	=	0xdfdb
                           00DFDC   978 _X_T1CC1L	=	0xdfdc
                           00DFDD   979 _X_T1CC1H	=	0xdfdd
                           00DFDE   980 _X_T1CC2L	=	0xdfde
                           00DFDF   981 _X_T1CC2H	=	0xdfdf
                           00DFE0   982 __NA_ACC	=	0xdfe0
                           00DFE1   983 _X_RFST	=	0xdfe1
                           00DFE2   984 _X_T1CNTL	=	0xdfe2
                           00DFE3   985 _X_T1CNTH	=	0xdfe3
                           00DFE4   986 _X_T1CTL	=	0xdfe4
                           00DFE5   987 _X_T1CCTL0	=	0xdfe5
                           00DFE6   988 _X_T1CCTL1	=	0xdfe6
                           00DFE7   989 _X_T1CCTL2	=	0xdfe7
                           00DFE8   990 __NA_IRCON2	=	0xdfe8
                           00DFE9   991 _X_RFIF	=	0xdfe9
                           00DFEA   992 _X_T4CNT	=	0xdfea
                           00DFEB   993 _X_T4CTL	=	0xdfeb
                           00DFEC   994 _X_T4CCTL0	=	0xdfec
                           00DFED   995 _X_T4CC0	=	0xdfed
                           00DFEE   996 _X_T4CCTL1	=	0xdfee
                           00DFEF   997 _X_T4CC1	=	0xdfef
                           00DFF0   998 __NA_B	=	0xdff0
                           00DFF1   999 _X_PERCFG	=	0xdff1
                           00DFF2  1000 _X_ADCCFG	=	0xdff2
                           00DFF3  1001 _X_P0SEL	=	0xdff3
                           00DFF4  1002 _X_P1SEL	=	0xdff4
                           00DFF5  1003 _X_P2SEL	=	0xdff5
                           00DFF6  1004 _X_P1INP	=	0xdff6
                           00DFF7  1005 _X_P2INP	=	0xdff7
                           00DFF8  1006 _X_U1CSR	=	0xdff8
                           00DFF9  1007 _X_U1DBUF	=	0xdff9
                           00DFFA  1008 _X_U1BAUD	=	0xdffa
                           00DFFB  1009 _X_U1UCR	=	0xdffb
                           00DFFC  1010 _X_U1GCR	=	0xdffc
                           00DFFD  1011 _X_P0DIR	=	0xdffd
                           00DFFE  1012 _X_P1DIR	=	0xdffe
                           00DFFF  1013 _X_P2DIR	=	0xdfff
                           00DE00  1014 _USBADDR	=	0xde00
                           00DE01  1015 _USBPOW	=	0xde01
                           00DE02  1016 _USBIIF	=	0xde02
                           00DE04  1017 _USBOIF	=	0xde04
                           00DE06  1018 _USBCIF	=	0xde06
                           00DE07  1019 _USBIIE	=	0xde07
                           00DE09  1020 _USBOIE	=	0xde09
                           00DE0B  1021 _USBCIE	=	0xde0b
                           00DE0C  1022 _USBFRML	=	0xde0c
                           00DE0D  1023 _USBFRMH	=	0xde0d
                           00DE0E  1024 _USBINDEX	=	0xde0e
                           00DE10  1025 _USBMAXI	=	0xde10
                           00DE11  1026 _USBCS0	=	0xde11
                           00DE11  1027 _USBCSIL	=	0xde11
                           00DE12  1028 _USBCSIH	=	0xde12
                           00DE13  1029 _USBMAXO	=	0xde13
                           00DE14  1030 _USBCSOL	=	0xde14
                           00DE15  1031 _USBCSOH	=	0xde15
                           00DE16  1032 _USBCNT0	=	0xde16
                           00DE16  1033 _USBCNTL	=	0xde16
                           00DE17  1034 _USBCNTH	=	0xde17
                           00DE20  1035 _USBF0	=	0xde20
                           00DE22  1036 _USBF1	=	0xde22
                           00DE24  1037 _USBF2	=	0xde24
                           00DE26  1038 _USBF3	=	0xde26
                           00DE28  1039 _USBF4	=	0xde28
                           00DE2A  1040 _USBF5	=	0xde2a
      000000                       1041 _g_Channels::
      000000                       1042 	.ds 880
      000370                       1043 _g_NIC_ID::
      000370                       1044 	.ds 2
      000372                       1045 _g_txMsgQueue::
      000372                       1046 	.ds 482
      000554                       1047 _PHY_set_channel_chan_1_88:
      000554                       1048 	.ds 2
      000556                       1049 _begin_hopping_T2_offset_1_94:
      000556                       1050 	.ds 1
      000557                       1051 _transmit_long_PARM_2:
      000557                       1052 	.ds 2
      000559                       1053 _transmit_long_PARM_3:
      000559                       1054 	.ds 1
      00055A                       1055 _transmit_long_buf_1_98:
      00055A                       1056 	.ds 2
      00055C                       1057 _MAC_tx_PARM_2:
      00055C                       1058 	.ds 1
      00055D                       1059 _MAC_tx_msg_1_109:
      00055D                       1060 	.ds 2
      00055F                       1061 _MAC_sync_CellID_1_119:
      00055F                       1062 	.ds 2
      000561                       1063 _MAC_set_chanidx_chanidx_1_127:
      000561                       1064 	.ds 2
      000563                       1065 _MAC_set_NIC_ID_NIC_ID_1_129:
      000563                       1066 	.ds 2
      000565                       1067 _MAC_rx_handle_PARM_2:
      000565                       1068 	.ds 2
      000567                       1069 _t2IntHandler_packet_1_136:
      000567                       1070 	.ds 28
      000583                       1071 _processbuffer::
      000583                       1072 	.ds 1
      000584                       1073 _chan_table::
      000584                       1074 	.ds 2
                                   1075 ;--------------------------------------------------------
                                   1076 ; absolute external ram data
                                   1077 ;--------------------------------------------------------
                                   1078 	.area XABS    (ABS,XDATA)
                                   1079 ;--------------------------------------------------------
                                   1080 ; external initialized ram data
                                   1081 ;--------------------------------------------------------
                                   1082 	.area XISEG   (XDATA)
                                   1083 	.area HOME    (CODE)
                                   1084 	.area GSINIT0 (CODE)
                                   1085 	.area GSINIT1 (CODE)
                                   1086 	.area GSINIT2 (CODE)
                                   1087 	.area GSINIT3 (CODE)
                                   1088 	.area GSINIT4 (CODE)
                                   1089 	.area GSINIT5 (CODE)
                                   1090 	.area GSINIT  (CODE)
                                   1091 	.area GSFINAL (CODE)
                                   1092 	.area CSEG    (CODE)
                                   1093 ;--------------------------------------------------------
                                   1094 ; interrupt vector 
                                   1095 ;--------------------------------------------------------
                                   1096 	.area HOME    (CODE)
      000000                       1097 __interrupt_vect:
      000000 02r00r00         [24] 1098 	ljmp	__sdcc_gsinit_startup
      000003 02r00r00         [24] 1099 	ljmp	_rfTxRxIntHandler
      000006                       1100 	.ds	5
      00000B 32               [24] 1101 	reti
      00000C                       1102 	.ds	7
      000013 32               [24] 1103 	reti
      000014                       1104 	.ds	7
      00001B 32               [24] 1105 	reti
      00001C                       1106 	.ds	7
      000023 32               [24] 1107 	reti
      000024                       1108 	.ds	7
      00002B 32               [24] 1109 	reti
      00002C                       1110 	.ds	7
      000033 02r00r00         [24] 1111 	ljmp	_usbIntHandler
      000036                       1112 	.ds	5
      00003B 32               [24] 1113 	reti
      00003C                       1114 	.ds	7
      000043 32               [24] 1115 	reti
      000044                       1116 	.ds	7
      00004B 02r00r00         [24] 1117 	ljmp	_t1IntHandler
      00004E                       1118 	.ds	5
      000053 02r05rA9         [24] 1119 	ljmp	_t2IntHandler
      000056                       1120 	.ds	5
      00005B 02r08r83         [24] 1121 	ljmp	_t3IntHandler
      00005E                       1122 	.ds	5
      000063 32               [24] 1123 	reti
      000064                       1124 	.ds	7
      00006B 02r00r00         [24] 1125 	ljmp	_p0IntHandler
      00006E                       1126 	.ds	5
      000073 32               [24] 1127 	reti
      000074                       1128 	.ds	7
      00007B 32               [24] 1129 	reti
      00007C                       1130 	.ds	7
      000083 02r00r00         [24] 1131 	ljmp	_rfIntHandler
                                   1132 ;--------------------------------------------------------
                                   1133 ; global & static initialisations
                                   1134 ;--------------------------------------------------------
                                   1135 	.area HOME    (CODE)
                                   1136 	.area GSINIT  (CODE)
                                   1137 	.area GSFINAL (CODE)
                                   1138 	.area GSINIT  (CODE)
                                   1139 	.globl __sdcc_gsinit_startup
                                   1140 	.globl __sdcc_program_startup
                                   1141 	.globl __start__stack
                                   1142 	.globl __mcs51_genXINIT
                                   1143 	.globl __mcs51_genXRAMCLEAR
                                   1144 	.globl __mcs51_genRAMCLEAR
                                   1145 	.area GSFINAL (CODE)
      000000 02r00r86         [24] 1146 	ljmp	__sdcc_program_startup
                                   1147 ;--------------------------------------------------------
                                   1148 ; Home
                                   1149 ;--------------------------------------------------------
                                   1150 	.area HOME    (CODE)
                                   1151 	.area HOME    (CODE)
      000086                       1152 __sdcc_program_startup:
      000086 02r0Er34         [24] 1153 	ljmp	_main
                                   1154 ;	return from main will return to caller
                                   1155 ;--------------------------------------------------------
                                   1156 ; code
                                   1157 ;--------------------------------------------------------
                                   1158 	.area CSEG    (CODE)
                                   1159 ;------------------------------------------------------------
                                   1160 ;Allocation info for local variables in function 'PHY_set_channel'
                                   1161 ;------------------------------------------------------------
                                   1162 ;chan                      Allocated with name '_PHY_set_channel_chan_1_88'
                                   1163 ;------------------------------------------------------------
                                   1164 ;	appFHSSNIC.c:72: void PHY_set_channel(__xdata u16 chan)
                                   1165 ;	-----------------------------------------
                                   1166 ;	 function PHY_set_channel
                                   1167 ;	-----------------------------------------
      000000                       1168 _PHY_set_channel:
                           000007  1169 	ar7 = 0x07
                           000006  1170 	ar6 = 0x06
                           000005  1171 	ar5 = 0x05
                           000004  1172 	ar4 = 0x04
                           000003  1173 	ar3 = 0x03
                           000002  1174 	ar2 = 0x02
                           000001  1175 	ar1 = 0x01
                           000000  1176 	ar0 = 0x00
      000000 AF 83            [24] 1177 	mov	r7,dph
      000002 E5 82            [12] 1178 	mov	a,dpl
      000004 90r05r54         [24] 1179 	mov	dptr,#_PHY_set_channel_chan_1_88
      000007 F0               [24] 1180 	movx	@dptr,a
      000008 EF               [12] 1181 	mov	a,r7
      000009 A3               [24] 1182 	inc	dptr
      00000A F0               [24] 1183 	movx	@dptr,a
                                   1184 ;	appFHSSNIC.c:75: RFOFF;
      00000B 75 E1 04         [24] 1185 	mov	_RFST,#0x04
      00000E                       1186 00101$:
      00000E 90 DF 3B         [24] 1187 	mov	dptr,#_MARCSTATE
      000011 E0               [24] 1188 	movx	a,@dptr
      000012 FF               [12] 1189 	mov	r7,a
      000013 BF 01 F8         [24] 1190 	cjne	r7,#0x01,00101$
                                   1191 ;	appFHSSNIC.c:77: CHANNR = chan;
      000016 90r05r54         [24] 1192 	mov	dptr,#_PHY_set_channel_chan_1_88
      000019 E0               [24] 1193 	movx	a,@dptr
      00001A FE               [12] 1194 	mov	r6,a
      00001B A3               [24] 1195 	inc	dptr
      00001C E0               [24] 1196 	movx	a,@dptr
      00001D FF               [12] 1197 	mov	r7,a
      00001E 90 DF 06         [24] 1198 	mov	dptr,#_CHANNR
      000021 EE               [12] 1199 	mov	a,r6
      000022 F0               [24] 1200 	movx	@dptr,a
                                   1201 ;	appFHSSNIC.c:79: RFRX;
      000023 75 E1 02         [24] 1202 	mov	_RFST,#0x02
      000026                       1203 00107$:
      000026 90 DF 3B         [24] 1204 	mov	dptr,#_MARCSTATE
      000029 E0               [24] 1205 	movx	a,@dptr
      00002A FF               [12] 1206 	mov	r7,a
      00002B BF 0D F8         [24] 1207 	cjne	r7,#0x0D,00107$
      00002E 22               [24] 1208 	ret
                                   1209 ;------------------------------------------------------------
                                   1210 ;Allocation info for local variables in function 'MAC_initChannels'
                                   1211 ;------------------------------------------------------------
                                   1212 ;loop                      Allocated to registers r6 r7 
                                   1213 ;------------------------------------------------------------
                                   1214 ;	appFHSSNIC.c:86: void MAC_initChannels()
                                   1215 ;	-----------------------------------------
                                   1216 ;	 function MAC_initChannels
                                   1217 ;	-----------------------------------------
      00002F                       1218 _MAC_initChannels:
                                   1219 ;	appFHSSNIC.c:90: for (loop=0; loop<macdata.NumChannelHops; loop++)
      00002F 7E 00            [12] 1220 	mov	r6,#0x00
      000031 7F 00            [12] 1221 	mov	r7,#0x00
      000033                       1222 00103$:
      000033 90r00r07         [24] 1223 	mov	dptr,#(_macdata + 0x0007)
      000036 E0               [24] 1224 	movx	a,@dptr
      000037 FC               [12] 1225 	mov	r4,a
      000038 A3               [24] 1226 	inc	dptr
      000039 E0               [24] 1227 	movx	a,@dptr
      00003A FD               [12] 1228 	mov	r5,a
      00003B 8E 02            [24] 1229 	mov	ar2,r6
      00003D 8F 03            [24] 1230 	mov	ar3,r7
      00003F C3               [12] 1231 	clr	c
      000040 EA               [12] 1232 	mov	a,r2
      000041 9C               [12] 1233 	subb	a,r4
      000042 EB               [12] 1234 	mov	a,r3
      000043 9D               [12] 1235 	subb	a,r5
      000044 50 3A            [24] 1236 	jnc	00105$
                                   1237 ;	appFHSSNIC.c:92: g_Channels[loop] = loop % macdata.NumChannels;
      000046 EE               [12] 1238 	mov	a,r6
      000047 24r00            [12] 1239 	add	a,#_g_Channels
      000049 FC               [12] 1240 	mov	r4,a
      00004A EF               [12] 1241 	mov	a,r7
      00004B 34s00            [12] 1242 	addc	a,#(_g_Channels >> 8)
      00004D FD               [12] 1243 	mov	r5,a
      00004E 90r00r05         [24] 1244 	mov	dptr,#(_macdata + 0x0005)
      000051 E0               [24] 1245 	movx	a,@dptr
      000052 F5*00            [12] 1246 	mov	__moduint_PARM_2,a
      000054 A3               [24] 1247 	inc	dptr
      000055 E0               [24] 1248 	movx	a,@dptr
      000056 F5*01            [12] 1249 	mov	(__moduint_PARM_2 + 1),a
      000058 8A 82            [24] 1250 	mov	dpl,r2
      00005A 8B 83            [24] 1251 	mov	dph,r3
      00005C C0 07            [24] 1252 	push	ar7
      00005E C0 06            [24] 1253 	push	ar6
      000060 C0 05            [24] 1254 	push	ar5
      000062 C0 04            [24] 1255 	push	ar4
      000064 12r00r00         [24] 1256 	lcall	__moduint
      000067 AA 82            [24] 1257 	mov	r2,dpl
      000069 AB 83            [24] 1258 	mov	r3,dph
      00006B D0 04            [24] 1259 	pop	ar4
      00006D D0 05            [24] 1260 	pop	ar5
      00006F D0 06            [24] 1261 	pop	ar6
      000071 D0 07            [24] 1262 	pop	ar7
      000073 8C 82            [24] 1263 	mov	dpl,r4
      000075 8D 83            [24] 1264 	mov	dph,r5
      000077 EA               [12] 1265 	mov	a,r2
      000078 F0               [24] 1266 	movx	@dptr,a
                                   1267 ;	appFHSSNIC.c:90: for (loop=0; loop<macdata.NumChannelHops; loop++)
      000079 0E               [12] 1268 	inc	r6
      00007A BE 00 B6         [24] 1269 	cjne	r6,#0x00,00103$
      00007D 0F               [12] 1270 	inc	r7
      00007E 80 B3            [24] 1271 	sjmp	00103$
      000080                       1272 00105$:
      000080 22               [24] 1273 	ret
                                   1274 ;------------------------------------------------------------
                                   1275 ;Allocation info for local variables in function 'begin_hopping'
                                   1276 ;------------------------------------------------------------
                                   1277 ;T2_offset                 Allocated with name '_begin_hopping_T2_offset_1_94'
                                   1278 ;------------------------------------------------------------
                                   1279 ;	appFHSSNIC.c:97: void begin_hopping(__xdata u8 T2_offset)
                                   1280 ;	-----------------------------------------
                                   1281 ;	 function begin_hopping
                                   1282 ;	-----------------------------------------
      000081                       1283 _begin_hopping:
      000081 E5 82            [12] 1284 	mov	a,dpl
      000083 90r05r56         [24] 1285 	mov	dptr,#_begin_hopping_T2_offset_1_94
      000086 F0               [24] 1286 	movx	@dptr,a
                                   1287 ;	appFHSSNIC.c:100: T2CT -= T2_offset;
      000087 E0               [24] 1288 	movx	a,@dptr
      000088 FF               [12] 1289 	mov	r7,a
      000089 E5 9C            [12] 1290 	mov	a,_T2CT
      00008B C3               [12] 1291 	clr	c
      00008C 9F               [12] 1292 	subb	a,r7
      00008D F5 9C            [12] 1293 	mov	_T2CT,a
                                   1294 ;	appFHSSNIC.c:101: T2CT -= MAC_TIMER_STATIC_DIFF;
      00008F E5 9C            [12] 1295 	mov	a,_T2CT
      000091 24 FA            [12] 1296 	add	a,#0xFA
      000093 F5 9C            [12] 1297 	mov	_T2CT,a
                                   1298 ;	appFHSSNIC.c:103: T2CTL |= T2CTL_INT;
      000095 43 9E 10         [24] 1299 	orl	_T2CTL,#0x10
                                   1300 ;	appFHSSNIC.c:104: T2IE = 1;
      000098 D2 BA            [12] 1301 	setb	_T2IE
      00009A 22               [24] 1302 	ret
                                   1303 ;------------------------------------------------------------
                                   1304 ;Allocation info for local variables in function 'stop_hopping'
                                   1305 ;------------------------------------------------------------
                                   1306 ;	appFHSSNIC.c:108: void stop_hopping(void)
                                   1307 ;	-----------------------------------------
                                   1308 ;	 function stop_hopping
                                   1309 ;	-----------------------------------------
      00009B                       1310 _stop_hopping:
                                   1311 ;	appFHSSNIC.c:111: T2CTL &= ~T2CTL_INT;
      00009B AF 9E            [24] 1312 	mov	r7,_T2CTL
      00009D 74 EF            [12] 1313 	mov	a,#0xEF
      00009F 5F               [12] 1314 	anl	a,r7
      0000A0 F5 9E            [12] 1315 	mov	_T2CTL,a
      0000A2 22               [24] 1316 	ret
                                   1317 ;------------------------------------------------------------
                                   1318 ;Allocation info for local variables in function 'transmit_long'
                                   1319 ;------------------------------------------------------------
                                   1320 ;len                       Allocated with name '_transmit_long_PARM_2'
                                   1321 ;blocks                    Allocated with name '_transmit_long_PARM_3'
                                   1322 ;buf                       Allocated with name '_transmit_long_buf_1_98'
                                   1323 ;countdown                 Allocated with name '_transmit_long_countdown_1_99'
                                   1324 ;err                       Allocated with name '_transmit_long_err_1_99'
                                   1325 ;------------------------------------------------------------
                                   1326 ;	appFHSSNIC.c:116: __xdata u8 transmit_long(__xdata u8* __xdata buf, __xdata u16 len, __xdata u8 blocks)
                                   1327 ;	-----------------------------------------
                                   1328 ;	 function transmit_long
                                   1329 ;	-----------------------------------------
      0000A3                       1330 _transmit_long:
      0000A3 AF 83            [24] 1331 	mov	r7,dph
      0000A5 E5 82            [12] 1332 	mov	a,dpl
      0000A7 90r05r5A         [24] 1333 	mov	dptr,#_transmit_long_buf_1_98
      0000AA F0               [24] 1334 	movx	@dptr,a
      0000AB EF               [12] 1335 	mov	a,r7
      0000AC A3               [24] 1336 	inc	dptr
      0000AD F0               [24] 1337 	movx	@dptr,a
                                   1338 ;	appFHSSNIC.c:124: if (macdata.mac_state != MAC_STATE_NONHOPPING)
      0000AE 90r00r00         [24] 1339 	mov	dptr,#_macdata
      0000B1 E0               [24] 1340 	movx	a,@dptr
      0000B2 60 13            [24] 1341 	jz	00102$
                                   1342 ;	appFHSSNIC.c:126: debug("Cannot call transmit_long while FHSS Hopping or already processing transmit_long!");
      0000B4 90r00r00         [24] 1343 	mov	dptr,#___str_0
      0000B7 12r00r00         [24] 1344 	lcall	_debug
                                   1345 ;	appFHSSNIC.c:127: debughex(macdata.mac_state);
      0000BA 90r00r00         [24] 1346 	mov	dptr,#_macdata
      0000BD E0               [24] 1347 	movx	a,@dptr
      0000BE F5 82            [12] 1348 	mov	dpl,a
      0000C0 12r00r00         [24] 1349 	lcall	_debughex
                                   1350 ;	appFHSSNIC.c:128: return RC_RF_MODE_INCOMPAT;
      0000C3 75 82 EF         [24] 1351 	mov	dpl,#0xEF
      0000C6 22               [24] 1352 	ret
      0000C7                       1353 00102$:
                                   1354 ;	appFHSSNIC.c:131: macdata.mac_state = MAC_STATE_LONG_XMIT;
      0000C7 90r00r00         [24] 1355 	mov	dptr,#_macdata
      0000CA 74 06            [12] 1356 	mov	a,#0x06
      0000CC F0               [24] 1357 	movx	@dptr,a
                                   1358 ;	appFHSSNIC.c:132: while (MARCSTATE == MARC_STATE_TX)
      0000CD                       1359 00103$:
      0000CD 90 DF 3B         [24] 1360 	mov	dptr,#_MARCSTATE
      0000D0 E0               [24] 1361 	movx	a,@dptr
      0000D1 FF               [12] 1362 	mov	r7,a
      0000D2 BF 13 02         [24] 1363 	cjne	r7,#0x13,00164$
      0000D5 80 F6            [24] 1364 	sjmp	00103$
      0000D7                       1365 00164$:
                                   1366 ;	appFHSSNIC.c:137: LED = 0;
      0000D7 C2 A4            [12] 1367 	clr	_P2_4
                                   1368 ;	appFHSSNIC.c:140: rfTxTotalTXLen = len;
      0000D9 90r05r57         [24] 1369 	mov	dptr,#_transmit_long_PARM_2
      0000DC E0               [24] 1370 	movx	a,@dptr
      0000DD FE               [12] 1371 	mov	r6,a
      0000DE A3               [24] 1372 	inc	dptr
      0000DF E0               [24] 1373 	movx	a,@dptr
      0000E0 FF               [12] 1374 	mov	r7,a
      0000E1 90r00r00         [24] 1375 	mov	dptr,#_rfTxTotalTXLen
      0000E4 EE               [12] 1376 	mov	a,r6
      0000E5 F0               [24] 1377 	movx	@dptr,a
      0000E6 EF               [12] 1378 	mov	a,r7
      0000E7 A3               [24] 1379 	inc	dptr
      0000E8 F0               [24] 1380 	movx	@dptr,a
                                   1381 ;	appFHSSNIC.c:142: rfTxBufferEnd = MAX_TX_MSGLEN + 1; // add 1 for length byte
      0000E9 90r00r00         [24] 1382 	mov	dptr,#_rfTxBufferEnd
      0000EC 74 F1            [12] 1383 	mov	a,#0xF1
      0000EE F0               [24] 1384 	movx	@dptr,a
      0000EF E4               [12] 1385 	clr	a
      0000F0 A3               [24] 1386 	inc	dptr
      0000F1 F0               [24] 1387 	movx	@dptr,a
                                   1388 ;	appFHSSNIC.c:144: rftxbuf = (volatile __xdata u8*)&g_txMsgQueue[0][0];
      0000F2 90r00r00         [24] 1389 	mov	dptr,#_rftxbuf
      0000F5 74r72            [12] 1390 	mov	a,#_g_txMsgQueue
      0000F7 F0               [24] 1391 	movx	@dptr,a
      0000F8 74s03            [12] 1392 	mov	a,#(_g_txMsgQueue >> 8)
      0000FA A3               [24] 1393 	inc	dptr
      0000FB F0               [24] 1394 	movx	@dptr,a
                                   1395 ;	appFHSSNIC.c:145: rfTxRepeatCounter = 0;
      0000FC 90r00r00         [24] 1396 	mov	dptr,#_rfTxRepeatCounter
      0000FF E4               [12] 1397 	clr	a
      000100 F0               [24] 1398 	movx	@dptr,a
      000101 A3               [24] 1399 	inc	dptr
      000102 F0               [24] 1400 	movx	@dptr,a
                                   1401 ;	appFHSSNIC.c:146: rfTxCurBufIdx = macdata.txMsgIdxDone = 0;
      000103 90r00r12         [24] 1402 	mov	dptr,#(_macdata + 0x0012)
      000106 F0               [24] 1403 	movx	@dptr,a
      000107 90r00r00         [24] 1404 	mov	dptr,#_rfTxCurBufIdx
      00010A F0               [24] 1405 	movx	@dptr,a
                                   1406 ;	appFHSSNIC.c:147: macdata.txMsgIdx = 0;
      00010B 90r00r11         [24] 1407 	mov	dptr,#(_macdata + 0x0011)
      00010E F0               [24] 1408 	movx	@dptr,a
                                   1409 ;	appFHSSNIC.c:148: rfTxCounter = 1; // don't transmit length byte
      00010F 90r00r00         [24] 1410 	mov	dptr,#_rfTxCounter
      000112 04               [12] 1411 	inc	a
      000113 F0               [24] 1412 	movx	@dptr,a
      000114 E4               [12] 1413 	clr	a
      000115 A3               [24] 1414 	inc	dptr
      000116 F0               [24] 1415 	movx	@dptr,a
                                   1416 ;	appFHSSNIC.c:149: rfTxBufCount = MAX_TX_MSGS;
      000117 90r00r00         [24] 1417 	mov	dptr,#_rfTxBufCount
      00011A 74 02            [12] 1418 	mov	a,#0x02
      00011C F0               [24] 1419 	movx	@dptr,a
                                   1420 ;	appFHSSNIC.c:152: MAC_tx(NULL, 0);
      00011D 90r05r5C         [24] 1421 	mov	dptr,#_MAC_tx_PARM_2
      000120 E4               [12] 1422 	clr	a
      000121 F0               [24] 1423 	movx	@dptr,a
      000122 90 00 00         [24] 1424 	mov	dptr,#0x0000
      000125 12r02r48         [24] 1425 	lcall	_MAC_tx
                                   1426 ;	appFHSSNIC.c:155: for(countdown = 0 ; countdown < blocks ; ++countdown)
      000128 90r05r5A         [24] 1427 	mov	dptr,#_transmit_long_buf_1_98
      00012B E0               [24] 1428 	movx	a,@dptr
      00012C FE               [12] 1429 	mov	r6,a
      00012D A3               [24] 1430 	inc	dptr
      00012E E0               [24] 1431 	movx	a,@dptr
      00012F FF               [12] 1432 	mov	r7,a
      000130 90r05r59         [24] 1433 	mov	dptr,#_transmit_long_PARM_3
      000133 E0               [24] 1434 	movx	a,@dptr
      000134 FD               [12] 1435 	mov	r5,a
      000135 7B 00            [12] 1436 	mov	r3,#0x00
      000137 7C 00            [12] 1437 	mov	r4,#0x00
      000139                       1438 00122$:
      000139 8D 01            [24] 1439 	mov	ar1,r5
      00013B 7A 00            [12] 1440 	mov	r2,#0x00
      00013D C3               [12] 1441 	clr	c
      00013E EB               [12] 1442 	mov	a,r3
      00013F 99               [12] 1443 	subb	a,r1
      000140 EC               [12] 1444 	mov	a,r4
      000141 9A               [12] 1445 	subb	a,r2
      000142 50 54            [24] 1446 	jnc	00108$
                                   1447 ;	appFHSSNIC.c:157: err = MAC_tx(buf + (u8) (countdown * MAX_TX_MSGLEN), (u8) MAX_TX_MSGLEN);
      000144 8B 02            [24] 1448 	mov	ar2,r3
      000146 EA               [12] 1449 	mov	a,r2
      000147 75 F0 F0         [24] 1450 	mov	b,#0xF0
      00014A A4               [48] 1451 	mul	ab
      00014B 2E               [12] 1452 	add	a,r6
      00014C F9               [12] 1453 	mov	r1,a
      00014D E4               [12] 1454 	clr	a
      00014E 3F               [12] 1455 	addc	a,r7
      00014F FA               [12] 1456 	mov	r2,a
      000150 90r05r5C         [24] 1457 	mov	dptr,#_MAC_tx_PARM_2
      000153 74 F0            [12] 1458 	mov	a,#0xF0
      000155 F0               [24] 1459 	movx	@dptr,a
      000156 89 82            [24] 1460 	mov	dpl,r1
      000158 8A 83            [24] 1461 	mov	dph,r2
      00015A C0 07            [24] 1462 	push	ar7
      00015C C0 06            [24] 1463 	push	ar6
      00015E C0 05            [24] 1464 	push	ar5
      000160 C0 04            [24] 1465 	push	ar4
      000162 C0 03            [24] 1466 	push	ar3
      000164 12r02r48         [24] 1467 	lcall	_MAC_tx
      000167 AA 82            [24] 1468 	mov	r2,dpl
      000169 D0 03            [24] 1469 	pop	ar3
      00016B D0 04            [24] 1470 	pop	ar4
      00016D D0 05            [24] 1471 	pop	ar5
      00016F D0 06            [24] 1472 	pop	ar6
      000171 D0 07            [24] 1473 	pop	ar7
                                   1474 ;	appFHSSNIC.c:158: if(err)
      000173 EA               [12] 1475 	mov	a,r2
      000174 60 1B            [24] 1476 	jz	00123$
                                   1477 ;	appFHSSNIC.c:160: debug("MAC_tx() returned error");
      000176 90r00r52         [24] 1478 	mov	dptr,#___str_1
      000179 C0 02            [24] 1479 	push	ar2
      00017B 12r00r00         [24] 1480 	lcall	_debug
      00017E D0 02            [24] 1481 	pop	ar2
                                   1482 ;	appFHSSNIC.c:161: macdata.mac_state = MAC_STATE_NONHOPPING;
      000180 90r00r00         [24] 1483 	mov	dptr,#_macdata
      000183 E4               [12] 1484 	clr	a
      000184 F0               [24] 1485 	movx	@dptr,a
                                   1486 ;	appFHSSNIC.c:162: debughex(err);
      000185 8A 82            [24] 1487 	mov	dpl,r2
      000187 C0 02            [24] 1488 	push	ar2
      000189 12r00r00         [24] 1489 	lcall	_debughex
      00018C D0 02            [24] 1490 	pop	ar2
                                   1491 ;	appFHSSNIC.c:163: return err;
      00018E 8A 82            [24] 1492 	mov	dpl,r2
      000190 22               [24] 1493 	ret
      000191                       1494 00123$:
                                   1495 ;	appFHSSNIC.c:155: for(countdown = 0 ; countdown < blocks ; ++countdown)
      000191 0B               [12] 1496 	inc	r3
      000192 BB 00 A4         [24] 1497 	cjne	r3,#0x00,00122$
      000195 0C               [12] 1498 	inc	r4
      000196 80 A1            [24] 1499 	sjmp	00122$
      000198                       1500 00108$:
                                   1501 ;	appFHSSNIC.c:168: if(rfAESMode & AES_CRYPTO_OUT_ENABLE && rfTxTotalTXLen % 16)
      000198 90r00r00         [24] 1502 	mov	dptr,#_rfAESMode
      00019B E0               [24] 1503 	movx	a,@dptr
      00019C FF               [12] 1504 	mov	r7,a
      00019D 30 E3 33         [24] 1505 	jnb	acc.3,00110$
      0001A0 90r00r00         [24] 1506 	mov	dptr,#_rfTxTotalTXLen
      0001A3 E0               [24] 1507 	movx	a,@dptr
      0001A4 FE               [12] 1508 	mov	r6,a
      0001A5 A3               [24] 1509 	inc	dptr
      0001A6 E0               [24] 1510 	movx	a,@dptr
      0001A7 FF               [12] 1511 	mov	r7,a
      0001A8 EE               [12] 1512 	mov	a,r6
      0001A9 54 0F            [12] 1513 	anl	a,#0x0F
      0001AB 60 26            [24] 1514 	jz	00110$
                                   1515 ;	appFHSSNIC.c:171: rfTxTotalTXLen += 16 - (rfTxTotalTXLen % 16);
      0001AD 90r00r00         [24] 1516 	mov	dptr,#_rfTxTotalTXLen
      0001B0 E0               [24] 1517 	movx	a,@dptr
      0001B1 FE               [12] 1518 	mov	r6,a
      0001B2 A3               [24] 1519 	inc	dptr
      0001B3 E0               [24] 1520 	movx	a,@dptr
      0001B4 53 06 0F         [24] 1521 	anl	ar6,#0x0F
      0001B7 7F 00            [12] 1522 	mov	r7,#0x00
      0001B9 74 10            [12] 1523 	mov	a,#0x10
      0001BB C3               [12] 1524 	clr	c
      0001BC 9E               [12] 1525 	subb	a,r6
      0001BD FE               [12] 1526 	mov	r6,a
      0001BE E4               [12] 1527 	clr	a
      0001BF 9F               [12] 1528 	subb	a,r7
      0001C0 FF               [12] 1529 	mov	r7,a
      0001C1 90r00r00         [24] 1530 	mov	dptr,#_rfTxTotalTXLen
      0001C4 E0               [24] 1531 	movx	a,@dptr
      0001C5 FC               [12] 1532 	mov	r4,a
      0001C6 A3               [24] 1533 	inc	dptr
      0001C7 E0               [24] 1534 	movx	a,@dptr
      0001C8 FD               [12] 1535 	mov	r5,a
      0001C9 90r00r00         [24] 1536 	mov	dptr,#_rfTxTotalTXLen
      0001CC EE               [12] 1537 	mov	a,r6
      0001CD 2C               [12] 1538 	add	a,r4
      0001CE F0               [24] 1539 	movx	@dptr,a
      0001CF EF               [12] 1540 	mov	a,r7
      0001D0 3D               [12] 1541 	addc	a,r5
      0001D1 A3               [24] 1542 	inc	dptr
      0001D2 F0               [24] 1543 	movx	@dptr,a
      0001D3                       1544 00110$:
                                   1545 ;	appFHSSNIC.c:175: if(rfTxTotalTXLen > RF_MAX_TX_BLOCK)
      0001D3 90r00r00         [24] 1546 	mov	dptr,#_rfTxTotalTXLen
      0001D6 E0               [24] 1547 	movx	a,@dptr
      0001D7 FE               [12] 1548 	mov	r6,a
      0001D8 A3               [24] 1549 	inc	dptr
      0001D9 E0               [24] 1550 	movx	a,@dptr
      0001DA FF               [12] 1551 	mov	r7,a
      0001DB C3               [12] 1552 	clr	c
      0001DC 74 FF            [12] 1553 	mov	a,#0xFF
      0001DE 9E               [12] 1554 	subb	a,r6
      0001DF E4               [12] 1555 	clr	a
      0001E0 9F               [12] 1556 	subb	a,r7
      0001E1 50 23            [24] 1557 	jnc	00113$
                                   1558 ;	appFHSSNIC.c:177: PKTLEN = (u8) (rfTxTotalTXLen % 256);
      0001E3 90r00r00         [24] 1559 	mov	dptr,#_rfTxTotalTXLen
      0001E6 E0               [24] 1560 	movx	a,@dptr
      0001E7 FE               [12] 1561 	mov	r6,a
      0001E8 A3               [24] 1562 	inc	dptr
      0001E9 E0               [24] 1563 	movx	a,@dptr
      0001EA 90 DF 02         [24] 1564 	mov	dptr,#_PKTLEN
      0001ED EE               [12] 1565 	mov	a,r6
      0001EE F0               [24] 1566 	movx	@dptr,a
                                   1567 ;	appFHSSNIC.c:178: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
      0001EF 90 DF 04         [24] 1568 	mov	dptr,#_PKTCTRL0
      0001F2 E0               [24] 1569 	movx	a,@dptr
      0001F3 FF               [12] 1570 	mov	r7,a
      0001F4 74 FC            [12] 1571 	mov	a,#0xFC
      0001F6 5F               [12] 1572 	anl	a,r7
      0001F7 F0               [24] 1573 	movx	@dptr,a
                                   1574 ;	appFHSSNIC.c:179: PKTCTRL0 |= PKTCTRL0_LENGTH_CONFIG_INF;
      0001F8 E0               [24] 1575 	movx	a,@dptr
      0001F9 FF               [12] 1576 	mov	r7,a
      0001FA 74 02            [12] 1577 	mov	a,#0x02
      0001FC 4F               [12] 1578 	orl	a,r7
      0001FD F0               [24] 1579 	movx	@dptr,a
                                   1580 ;	appFHSSNIC.c:180: rfTxInfMode = 1;
      0001FE 90r00r00         [24] 1581 	mov	dptr,#_rfTxInfMode
      000201 74 01            [12] 1582 	mov	a,#0x01
      000203 F0               [24] 1583 	movx	@dptr,a
      000204 80 12            [24] 1584 	sjmp	00114$
      000206                       1585 00113$:
                                   1586 ;	appFHSSNIC.c:184: PKTLEN = (u8) rfTxTotalTXLen;
      000206 90r00r00         [24] 1587 	mov	dptr,#_rfTxTotalTXLen
      000209 E0               [24] 1588 	movx	a,@dptr
      00020A FE               [12] 1589 	mov	r6,a
      00020B A3               [24] 1590 	inc	dptr
      00020C E0               [24] 1591 	movx	a,@dptr
      00020D FF               [12] 1592 	mov	r7,a
      00020E 90 DF 02         [24] 1593 	mov	dptr,#_PKTLEN
      000211 EE               [12] 1594 	mov	a,r6
      000212 F0               [24] 1595 	movx	@dptr,a
                                   1596 ;	appFHSSNIC.c:185: rfTxInfMode = 0;
      000213 90r00r00         [24] 1597 	mov	dptr,#_rfTxInfMode
      000216 E4               [12] 1598 	clr	a
      000217 F0               [24] 1599 	movx	@dptr,a
      000218                       1600 00114$:
                                   1601 ;	appFHSSNIC.c:192: RFST = RFST_STX;
      000218 75 E1 03         [24] 1602 	mov	_RFST,#0x03
                                   1603 ;	appFHSSNIC.c:196: while (MARCSTATE != MARC_STATE_TX && --countdown)
      00021B 7E 60            [12] 1604 	mov	r6,#0x60
      00021D 7F EA            [12] 1605 	mov	r7,#0xEA
      00021F                       1606 00116$:
      00021F 90 DF 3B         [24] 1607 	mov	dptr,#_MARCSTATE
      000222 E0               [24] 1608 	movx	a,@dptr
      000223 FD               [12] 1609 	mov	r5,a
      000224 BD 13 02         [24] 1610 	cjne	r5,#0x13,00171$
      000227 80 09            [24] 1611 	sjmp	00118$
      000229                       1612 00171$:
      000229 1E               [12] 1613 	dec	r6
      00022A BE FF 01         [24] 1614 	cjne	r6,#0xFF,00172$
      00022D 1F               [12] 1615 	dec	r7
      00022E                       1616 00172$:
      00022E EE               [12] 1617 	mov	a,r6
      00022F 4F               [12] 1618 	orl	a,r7
      000230 70 ED            [24] 1619 	jnz	00116$
      000232                       1620 00118$:
                                   1621 ;	appFHSSNIC.c:201: LED = 1;
      000232 D2 A4            [12] 1622 	setb	_P2_4
                                   1623 ;	appFHSSNIC.c:202: if (!countdown)
      000234 EE               [12] 1624 	mov	a,r6
      000235 4F               [12] 1625 	orl	a,r7
      000236 70 0C            [24] 1626 	jnz	00120$
                                   1627 ;	appFHSSNIC.c:204: lastCode[1] = LCE_RFTX_NEVER_TX;
      000238 90r00r01         [24] 1628 	mov	dptr,#(_lastCode + 0x0001)
      00023B 74 13            [12] 1629 	mov	a,#0x13
      00023D F0               [24] 1630 	movx	@dptr,a
                                   1631 ;	appFHSSNIC.c:205: debug("never entered TX");
      00023E 90r00r6A         [24] 1632 	mov	dptr,#___str_2
      000241 12r00r00         [24] 1633 	lcall	_debug
      000244                       1634 00120$:
                                   1635 ;	appFHSSNIC.c:208: return RC_NO_ERROR;
      000244 75 82 00         [24] 1636 	mov	dpl,#0x00
      000247 22               [24] 1637 	ret
                                   1638 ;------------------------------------------------------------
                                   1639 ;Allocation info for local variables in function 'MAC_tx'
                                   1640 ;------------------------------------------------------------
                                   1641 ;len                       Allocated with name '_MAC_tx_PARM_2'
                                   1642 ;msg                       Allocated with name '_MAC_tx_msg_1_109'
                                   1643 ;------------------------------------------------------------
                                   1644 ;	appFHSSNIC.c:211: __xdata u8 MAC_tx(__xdata u8* __xdata msg, __xdata u8 len)
                                   1645 ;	-----------------------------------------
                                   1646 ;	 function MAC_tx
                                   1647 ;	-----------------------------------------
      000248                       1648 _MAC_tx:
      000248 AF 83            [24] 1649 	mov	r7,dph
      00024A E5 82            [12] 1650 	mov	a,dpl
      00024C 90r05r5D         [24] 1651 	mov	dptr,#_MAC_tx_msg_1_109
      00024F F0               [24] 1652 	movx	@dptr,a
      000250 EF               [12] 1653 	mov	a,r7
      000251 A3               [24] 1654 	inc	dptr
      000252 F0               [24] 1655 	movx	@dptr,a
                                   1656 ;	appFHSSNIC.c:221: if (len > MAX_TX_MSGLEN)
      000253 90r05r5C         [24] 1657 	mov	dptr,#_MAC_tx_PARM_2
      000256 E0               [24] 1658 	movx	a,@dptr
      000257 FF               [12] 1659 	mov  r7,a
      000258 24 0F            [12] 1660 	add	a,#0xff - 0xF0
      00025A 50 0A            [24] 1661 	jnc	00102$
                                   1662 ;	appFHSSNIC.c:223: debug("FHSSxmit message too long");
      00025C 90r00r7B         [24] 1663 	mov	dptr,#___str_3
      00025F 12r00r00         [24] 1664 	lcall	_debug
                                   1665 ;	appFHSSNIC.c:224: return RC_ERR_BUFFER_SIZE_EXCEEDED;
      000262 75 82 FF         [24] 1666 	mov	dpl,#0xFF
      000265 22               [24] 1667 	ret
      000266                       1668 00102$:
                                   1669 ;	appFHSSNIC.c:228: if(len == 0)
      000266 EF               [12] 1670 	mov	a,r7
      000267 70 3E            [24] 1671 	jnz	00105$
                                   1672 ;	appFHSSNIC.c:231: for(macdata.txMsgIdx = 0 ; macdata.txMsgIdx < rfTxBufCount ; ++macdata.txMsgIdx)
      000269 90r00r11         [24] 1673 	mov	dptr,#(_macdata + 0x0011)
      00026C E4               [12] 1674 	clr	a
      00026D F0               [24] 1675 	movx	@dptr,a
      00026E                       1676 00122$:
      00026E 90r00r11         [24] 1677 	mov	dptr,#(_macdata + 0x0011)
      000271 E0               [24] 1678 	movx	a,@dptr
      000272 FE               [12] 1679 	mov	r6,a
      000273 90r00r00         [24] 1680 	mov	dptr,#_rfTxBufCount
      000276 E0               [24] 1681 	movx	a,@dptr
      000277 FD               [12] 1682 	mov	r5,a
      000278 C3               [12] 1683 	clr	c
      000279 EE               [12] 1684 	mov	a,r6
      00027A 9D               [12] 1685 	subb	a,r5
      00027B 50 21            [24] 1686 	jnc	00103$
                                   1687 ;	appFHSSNIC.c:233: g_txMsgQueue[macdata.txMsgIdx][0] = BUFFER_AVAILABLE;
      00027D 90r00r11         [24] 1688 	mov	dptr,#(_macdata + 0x0011)
      000280 E0               [24] 1689 	movx	a,@dptr
      000281 75 F0 F1         [24] 1690 	mov	b,#0xF1
      000284 A4               [48] 1691 	mul	ab
      000285 24r72            [12] 1692 	add	a,#_g_txMsgQueue
      000287 F5 82            [12] 1693 	mov	dpl,a
      000289 74s03            [12] 1694 	mov	a,#(_g_txMsgQueue >> 8)
      00028B 35 F0            [12] 1695 	addc	a,b
      00028D F5 83            [12] 1696 	mov	dph,a
      00028F E4               [12] 1697 	clr	a
      000290 F0               [24] 1698 	movx	@dptr,a
                                   1699 ;	appFHSSNIC.c:231: for(macdata.txMsgIdx = 0 ; macdata.txMsgIdx < rfTxBufCount ; ++macdata.txMsgIdx)
      000291 90r00r11         [24] 1700 	mov	dptr,#(_macdata + 0x0011)
      000294 E0               [24] 1701 	movx	a,@dptr
      000295 FE               [12] 1702 	mov	r6,a
      000296 0E               [12] 1703 	inc	r6
      000297 90r00r11         [24] 1704 	mov	dptr,#(_macdata + 0x0011)
      00029A EE               [12] 1705 	mov	a,r6
      00029B F0               [24] 1706 	movx	@dptr,a
      00029C 80 D0            [24] 1707 	sjmp	00122$
      00029E                       1708 00103$:
                                   1709 ;	appFHSSNIC.c:235: macdata.txMsgIdx = 0;
      00029E 90r00r11         [24] 1710 	mov	dptr,#(_macdata + 0x0011)
      0002A1 E4               [12] 1711 	clr	a
      0002A2 F0               [24] 1712 	movx	@dptr,a
                                   1713 ;	appFHSSNIC.c:236: return RC_NO_ERROR;
      0002A3 75 82 00         [24] 1714 	mov	dpl,#0x00
      0002A6 22               [24] 1715 	ret
      0002A7                       1716 00105$:
                                   1717 ;	appFHSSNIC.c:239: switch (macdata.mac_state)
      0002A7 90r00r00         [24] 1718 	mov	dptr,#_macdata
      0002AA E0               [24] 1719 	movx	a,@dptr
      0002AB FE               [12] 1720 	mov	r6,a
      0002AC 60 1D            [24] 1721 	jz	00110$
      0002AE BE 06 1E         [24] 1722 	cjne	r6,#0x06,00111$
                                   1723 ;	appFHSSNIC.c:242: if (macdata.txMsgIdx && MARCSTATE != MARC_STATE_TX)
      0002B1 90r00r11         [24] 1724 	mov	dptr,#(_macdata + 0x0011)
      0002B4 E0               [24] 1725 	movx	a,@dptr
      0002B5 60 18            [24] 1726 	jz	00111$
      0002B7 90 DF 3B         [24] 1727 	mov	dptr,#_MARCSTATE
      0002BA E0               [24] 1728 	movx	a,@dptr
      0002BB FE               [12] 1729 	mov	r6,a
      0002BC BE 13 02         [24] 1730 	cjne	r6,#0x13,00169$
      0002BF 80 0E            [24] 1731 	sjmp	00111$
      0002C1                       1732 00169$:
                                   1733 ;	appFHSSNIC.c:244: macdata.mac_state = MAC_STATE_LONG_XMIT_FAIL;
      0002C1 90r00r00         [24] 1734 	mov	dptr,#_macdata
      0002C4 74 07            [12] 1735 	mov	a,#0x07
      0002C6 F0               [24] 1736 	movx	@dptr,a
                                   1737 ;	appFHSSNIC.c:245: return RC_TX_ERROR;
      0002C7 75 82 ED         [24] 1738 	mov	dpl,#0xED
      0002CA 22               [24] 1739 	ret
                                   1740 ;	appFHSSNIC.c:248: case MAC_STATE_NONHOPPING:
      0002CB                       1741 00110$:
                                   1742 ;	appFHSSNIC.c:249: return RC_TX_ERROR;
      0002CB 75 82 ED         [24] 1743 	mov	dpl,#0xED
      0002CE 22               [24] 1744 	ret
                                   1745 ;	appFHSSNIC.c:250: }
      0002CF                       1746 00111$:
                                   1747 ;	appFHSSNIC.c:251: if (g_txMsgQueue[macdata.txMsgIdx][0] != BUFFER_AVAILABLE)
      0002CF 90r00r11         [24] 1748 	mov	dptr,#(_macdata + 0x0011)
      0002D2 E0               [24] 1749 	movx	a,@dptr
      0002D3 75 F0 F1         [24] 1750 	mov	b,#0xF1
      0002D6 A4               [48] 1751 	mul	ab
      0002D7 24r72            [12] 1752 	add	a,#_g_txMsgQueue
      0002D9 FD               [12] 1753 	mov	r5,a
      0002DA 74s03            [12] 1754 	mov	a,#(_g_txMsgQueue >> 8)
      0002DC 35 F0            [12] 1755 	addc	a,b
      0002DE FE               [12] 1756 	mov	r6,a
      0002DF 8D 82            [24] 1757 	mov	dpl,r5
      0002E1 8E 83            [24] 1758 	mov	dph,r6
      0002E3 E0               [24] 1759 	movx	a,@dptr
      0002E4 60 0A            [24] 1760 	jz	00113$
                                   1761 ;	appFHSSNIC.c:254: lastCode[1] = LCE_RF_MULTI_BUFFER_NOT_FREE;
      0002E6 90r00r01         [24] 1762 	mov	dptr,#(_lastCode + 0x0001)
      0002E9 74 18            [12] 1763 	mov	a,#0x18
      0002EB F0               [24] 1764 	movx	@dptr,a
                                   1765 ;	appFHSSNIC.c:255: return RC_ERR_BUFFER_NOT_AVAILABLE;
      0002EC 75 82 FE         [24] 1766 	mov	dpl,#0xFE
      0002EF 22               [24] 1767 	ret
      0002F0                       1768 00113$:
                                   1769 ;	appFHSSNIC.c:259: g_txMsgQueue[macdata.txMsgIdx][0] = BUFFER_FILLING;
      0002F0 8D 82            [24] 1770 	mov	dpl,r5
      0002F2 8E 83            [24] 1771 	mov	dph,r6
      0002F4 74 FF            [12] 1772 	mov	a,#0xFF
      0002F6 F0               [24] 1773 	movx	@dptr,a
                                   1774 ;	appFHSSNIC.c:261: memcpy(&g_txMsgQueue[macdata.txMsgIdx][1], msg, len);
      0002F7 90r00r11         [24] 1775 	mov	dptr,#(_macdata + 0x0011)
      0002FA E0               [24] 1776 	movx	a,@dptr
      0002FB 75 F0 F1         [24] 1777 	mov	b,#0xF1
      0002FE A4               [48] 1778 	mul	ab
      0002FF 24r72            [12] 1779 	add	a,#_g_txMsgQueue
      000301 FD               [12] 1780 	mov	r5,a
      000302 74s03            [12] 1781 	mov	a,#(_g_txMsgQueue >> 8)
      000304 35 F0            [12] 1782 	addc	a,b
      000306 FE               [12] 1783 	mov	r6,a
      000307 0D               [12] 1784 	inc	r5
      000308 BD 00 01         [24] 1785 	cjne	r5,#0x00,00171$
      00030B 0E               [12] 1786 	inc	r6
      00030C                       1787 00171$:
      00030C 7C 00            [12] 1788 	mov	r4,#0x00
      00030E 90r05r5D         [24] 1789 	mov	dptr,#_MAC_tx_msg_1_109
      000311 E0               [24] 1790 	movx	a,@dptr
      000312 FA               [12] 1791 	mov	r2,a
      000313 A3               [24] 1792 	inc	dptr
      000314 E0               [24] 1793 	movx	a,@dptr
      000315 FB               [12] 1794 	mov	r3,a
      000316 8A*00            [24] 1795 	mov	_memcpy_PARM_2,r2
      000318 8B*01            [24] 1796 	mov	(_memcpy_PARM_2 + 1),r3
                                   1797 ;	1-genFromRTrack replaced	mov	(_memcpy_PARM_2 + 2),#0x00
      00031A 8C*02            [24] 1798 	mov	(_memcpy_PARM_2 + 2),r4
      00031C 8F 03            [24] 1799 	mov	ar3,r7
      00031E 7F 00            [12] 1800 	mov	r7,#0x00
      000320 8B*00            [24] 1801 	mov	_memcpy_PARM_3,r3
      000322 8F*01            [24] 1802 	mov	(_memcpy_PARM_3 + 1),r7
      000324 8D 82            [24] 1803 	mov	dpl,r5
      000326 8E 83            [24] 1804 	mov	dph,r6
      000328 8C F0            [24] 1805 	mov	b,r4
      00032A C0 07            [24] 1806 	push	ar7
      00032C C0 03            [24] 1807 	push	ar3
      00032E 12r00r00         [24] 1808 	lcall	_memcpy
      000331 D0 03            [24] 1809 	pop	ar3
      000333 D0 07            [24] 1810 	pop	ar7
                                   1811 ;	appFHSSNIC.c:266: if(rfAESMode & AES_CRYPTO_OUT_ENABLE)
      000335 90r00r00         [24] 1812 	mov	dptr,#_rfAESMode
      000338 E0               [24] 1813 	movx	a,@dptr
      000339 FE               [12] 1814 	mov	r6,a
      00033A 20 E3 03         [24] 1815 	jb	acc.3,00172$
      00033D 02r03rF0         [24] 1816 	ljmp	00118$
      000340                       1817 00172$:
                                   1818 ;	appFHSSNIC.c:268: len = padAES(&g_txMsgQueue[macdata.txMsgIdx][1], len);
      000340 90r00r11         [24] 1819 	mov	dptr,#(_macdata + 0x0011)
      000343 E0               [24] 1820 	movx	a,@dptr
      000344 75 F0 F1         [24] 1821 	mov	b,#0xF1
      000347 A4               [48] 1822 	mul	ab
      000348 24r72            [12] 1823 	add	a,#_g_txMsgQueue
      00034A FD               [12] 1824 	mov	r5,a
      00034B 74s03            [12] 1825 	mov	a,#(_g_txMsgQueue >> 8)
      00034D 35 F0            [12] 1826 	addc	a,b
      00034F FE               [12] 1827 	mov	r6,a
      000350 0D               [12] 1828 	inc	r5
      000351 BD 00 01         [24] 1829 	cjne	r5,#0x00,00173$
      000354 0E               [12] 1830 	inc	r6
      000355                       1831 00173$:
      000355 90r00r00         [24] 1832 	mov	dptr,#_padAES_PARM_2
      000358 EB               [12] 1833 	mov	a,r3
      000359 F0               [24] 1834 	movx	@dptr,a
      00035A EF               [12] 1835 	mov	a,r7
      00035B A3               [24] 1836 	inc	dptr
      00035C F0               [24] 1837 	movx	@dptr,a
      00035D 8D 82            [24] 1838 	mov	dpl,r5
      00035F 8E 83            [24] 1839 	mov	dph,r6
      000361 12r00r00         [24] 1840 	lcall	_padAES
      000364 AE 82            [24] 1841 	mov	r6,dpl
      000366 90r05r5C         [24] 1842 	mov	dptr,#_MAC_tx_PARM_2
      000369 EE               [12] 1843 	mov	a,r6
      00036A F0               [24] 1844 	movx	@dptr,a
                                   1845 ;	appFHSSNIC.c:269: if((rfAESMode & AES_CRYPTO_OUT_TYPE) == AES_CRYPTO_OUT_ENCRYPT)
      00036B 90r00r00         [24] 1846 	mov	dptr,#_rfAESMode
      00036E E0               [24] 1847 	movx	a,@dptr
      00036F FF               [12] 1848 	mov	r7,a
      000370 53 07 04         [24] 1849 	anl	ar7,#0x04
      000373 BF 04 3F         [24] 1850 	cjne	r7,#0x04,00115$
                                   1851 ;	appFHSSNIC.c:270: encAES(&g_txMsgQueue[macdata.txMsgIdx][1], &g_txMsgQueue[macdata.txMsgIdx][1], len, (rfAESMode & AES_CRYPTO_MODE));
      000376 90r00r11         [24] 1852 	mov	dptr,#(_macdata + 0x0011)
      000379 E0               [24] 1853 	movx	a,@dptr
      00037A 75 F0 F1         [24] 1854 	mov	b,#0xF1
      00037D A4               [48] 1855 	mul	ab
      00037E 24r72            [12] 1856 	add	a,#_g_txMsgQueue
      000380 FD               [12] 1857 	mov	r5,a
      000381 74s03            [12] 1858 	mov	a,#(_g_txMsgQueue >> 8)
      000383 35 F0            [12] 1859 	addc	a,b
      000385 FF               [12] 1860 	mov	r7,a
      000386 0D               [12] 1861 	inc	r5
      000387 BD 00 01         [24] 1862 	cjne	r5,#0x00,00176$
      00038A 0F               [12] 1863 	inc	r7
      00038B                       1864 00176$:
      00038B 8E 03            [24] 1865 	mov	ar3,r6
      00038D 7C 00            [12] 1866 	mov	r4,#0x00
      00038F 90r00r00         [24] 1867 	mov	dptr,#_rfAESMode
      000392 E0               [24] 1868 	movx	a,@dptr
      000393 FA               [12] 1869 	mov	r2,a
      000394 53 02 F0         [24] 1870 	anl	ar2,#0xF0
      000397 90r00r00         [24] 1871 	mov	dptr,#_encAES_PARM_2
      00039A ED               [12] 1872 	mov	a,r5
      00039B F0               [24] 1873 	movx	@dptr,a
      00039C EF               [12] 1874 	mov	a,r7
      00039D A3               [24] 1875 	inc	dptr
      00039E F0               [24] 1876 	movx	@dptr,a
      00039F 90r00r00         [24] 1877 	mov	dptr,#_encAES_PARM_3
      0003A2 EB               [12] 1878 	mov	a,r3
      0003A3 F0               [24] 1879 	movx	@dptr,a
      0003A4 EC               [12] 1880 	mov	a,r4
      0003A5 A3               [24] 1881 	inc	dptr
      0003A6 F0               [24] 1882 	movx	@dptr,a
      0003A7 90r00r00         [24] 1883 	mov	dptr,#_encAES_PARM_4
      0003AA EA               [12] 1884 	mov	a,r2
      0003AB F0               [24] 1885 	movx	@dptr,a
      0003AC 8D 82            [24] 1886 	mov	dpl,r5
      0003AE 8F 83            [24] 1887 	mov	dph,r7
      0003B0 12r00r00         [24] 1888 	lcall	_encAES
      0003B3 80 3B            [24] 1889 	sjmp	00118$
      0003B5                       1890 00115$:
                                   1891 ;	appFHSSNIC.c:272: decAES(&g_txMsgQueue[macdata.txMsgIdx][1], &g_txMsgQueue[macdata.txMsgIdx][1], len, (rfAESMode & AES_CRYPTO_MODE));
      0003B5 90r00r11         [24] 1892 	mov	dptr,#(_macdata + 0x0011)
      0003B8 E0               [24] 1893 	movx	a,@dptr
      0003B9 75 F0 F1         [24] 1894 	mov	b,#0xF1
      0003BC A4               [48] 1895 	mul	ab
      0003BD 24r72            [12] 1896 	add	a,#_g_txMsgQueue
      0003BF FD               [12] 1897 	mov	r5,a
      0003C0 74s03            [12] 1898 	mov	a,#(_g_txMsgQueue >> 8)
      0003C2 35 F0            [12] 1899 	addc	a,b
      0003C4 FF               [12] 1900 	mov	r7,a
      0003C5 0D               [12] 1901 	inc	r5
      0003C6 BD 00 01         [24] 1902 	cjne	r5,#0x00,00177$
      0003C9 0F               [12] 1903 	inc	r7
      0003CA                       1904 00177$:
      0003CA 7C 00            [12] 1905 	mov	r4,#0x00
      0003CC 90r00r00         [24] 1906 	mov	dptr,#_rfAESMode
      0003CF E0               [24] 1907 	movx	a,@dptr
      0003D0 FB               [12] 1908 	mov	r3,a
      0003D1 53 03 F0         [24] 1909 	anl	ar3,#0xF0
      0003D4 90r00r00         [24] 1910 	mov	dptr,#_decAES_PARM_2
      0003D7 ED               [12] 1911 	mov	a,r5
      0003D8 F0               [24] 1912 	movx	@dptr,a
      0003D9 EF               [12] 1913 	mov	a,r7
      0003DA A3               [24] 1914 	inc	dptr
      0003DB F0               [24] 1915 	movx	@dptr,a
      0003DC 90r00r00         [24] 1916 	mov	dptr,#_decAES_PARM_3
      0003DF EE               [12] 1917 	mov	a,r6
      0003E0 F0               [24] 1918 	movx	@dptr,a
      0003E1 EC               [12] 1919 	mov	a,r4
      0003E2 A3               [24] 1920 	inc	dptr
      0003E3 F0               [24] 1921 	movx	@dptr,a
      0003E4 90r00r00         [24] 1922 	mov	dptr,#_decAES_PARM_4
      0003E7 EB               [12] 1923 	mov	a,r3
      0003E8 F0               [24] 1924 	movx	@dptr,a
      0003E9 8D 82            [24] 1925 	mov	dpl,r5
      0003EB 8F 83            [24] 1926 	mov	dph,r7
      0003ED 12r00r00         [24] 1927 	lcall	_decAES
      0003F0                       1928 00118$:
                                   1929 ;	appFHSSNIC.c:275: g_txMsgQueue[macdata.txMsgIdx][0] = len;
      0003F0 90r00r11         [24] 1930 	mov	dptr,#(_macdata + 0x0011)
      0003F3 E0               [24] 1931 	movx	a,@dptr
      0003F4 75 F0 F1         [24] 1932 	mov	b,#0xF1
      0003F7 A4               [48] 1933 	mul	ab
      0003F8 24r72            [12] 1934 	add	a,#_g_txMsgQueue
      0003FA FE               [12] 1935 	mov	r6,a
      0003FB 74s03            [12] 1936 	mov	a,#(_g_txMsgQueue >> 8)
      0003FD 35 F0            [12] 1937 	addc	a,b
      0003FF FF               [12] 1938 	mov	r7,a
      000400 90r05r5C         [24] 1939 	mov	dptr,#_MAC_tx_PARM_2
      000403 E0               [24] 1940 	movx	a,@dptr
      000404 FD               [12] 1941 	mov	r5,a
      000405 8E 82            [24] 1942 	mov	dpl,r6
      000407 8F 83            [24] 1943 	mov	dph,r7
      000409 F0               [24] 1944 	movx	@dptr,a
                                   1945 ;	appFHSSNIC.c:282: if (++macdata.txMsgIdx == rfTxBufCount)
      00040A 90r00r11         [24] 1946 	mov	dptr,#(_macdata + 0x0011)
      00040D E0               [24] 1947 	movx	a,@dptr
      00040E FF               [12] 1948 	mov	r7,a
      00040F 0F               [12] 1949 	inc	r7
      000410 90r00r11         [24] 1950 	mov	dptr,#(_macdata + 0x0011)
      000413 EF               [12] 1951 	mov	a,r7
      000414 F0               [24] 1952 	movx	@dptr,a
      000415 90r00r00         [24] 1953 	mov	dptr,#_rfTxBufCount
      000418 E0               [24] 1954 	movx	a,@dptr
      000419 FE               [12] 1955 	mov	r6,a
      00041A EF               [12] 1956 	mov	a,r7
      00041B B5 06 05         [24] 1957 	cjne	a,ar6,00120$
                                   1958 ;	appFHSSNIC.c:284: macdata.txMsgIdx = 0;
      00041E 90r00r11         [24] 1959 	mov	dptr,#(_macdata + 0x0011)
      000421 E4               [12] 1960 	clr	a
      000422 F0               [24] 1961 	movx	@dptr,a
      000423                       1962 00120$:
                                   1963 ;	appFHSSNIC.c:287: return RC_NO_ERROR;
      000423 75 82 00         [24] 1964 	mov	dpl,#0x00
      000426 22               [24] 1965 	ret
                                   1966 ;------------------------------------------------------------
                                   1967 ;Allocation info for local variables in function 'MAC_sync'
                                   1968 ;------------------------------------------------------------
                                   1969 ;CellID                    Allocated with name '_MAC_sync_CellID_1_119'
                                   1970 ;------------------------------------------------------------
                                   1971 ;	appFHSSNIC.c:290: void MAC_sync(__xdata u16 CellID)
                                   1972 ;	-----------------------------------------
                                   1973 ;	 function MAC_sync
                                   1974 ;	-----------------------------------------
      000427                       1975 _MAC_sync:
      000427 AF 83            [24] 1976 	mov	r7,dph
      000429 E5 82            [12] 1977 	mov	a,dpl
      00042B 90r05r5F         [24] 1978 	mov	dptr,#_MAC_sync_CellID_1_119
      00042E F0               [24] 1979 	movx	@dptr,a
      00042F EF               [12] 1980 	mov	a,r7
      000430 A3               [24] 1981 	inc	dptr
      000431 F0               [24] 1982 	movx	@dptr,a
                                   1983 ;	appFHSSNIC.c:298: if (macdata.mac_state != MAC_STATE_NONHOPPING && macdata.mac_state != MAC_STATE_DISCOVERY)
      000432 90r00r00         [24] 1984 	mov	dptr,#_macdata
      000435 E0               [24] 1985 	movx	a,@dptr
      000436 FF               [12] 1986 	mov	r7,a
      000437 60 14            [24] 1987 	jz	00102$
      000439 BF 01 02         [24] 1988 	cjne	r7,#0x01,00133$
      00043C 80 0F            [24] 1989 	sjmp	00102$
      00043E                       1990 00133$:
                                   1991 ;	appFHSSNIC.c:300: debug("FHSS state entering SYNCHING from wrong state");
      00043E 90r00r95         [24] 1992 	mov	dptr,#___str_4
      000441 12r00r00         [24] 1993 	lcall	_debug
                                   1994 ;	appFHSSNIC.c:301: debughex(macdata.mac_state);
      000444 90r00r00         [24] 1995 	mov	dptr,#_macdata
      000447 E0               [24] 1996 	movx	a,@dptr
      000448 F5 82            [12] 1997 	mov	dpl,a
      00044A 12r00r00         [24] 1998 	lcall	_debughex
      00044D                       1999 00102$:
                                   2000 ;	appFHSSNIC.c:305: stop_hopping();
      00044D 12r00r9B         [24] 2001 	lcall	_stop_hopping
                                   2002 ;	appFHSSNIC.c:308: macdata.curChanIdx = 0;
      000450 90r00r09         [24] 2003 	mov	dptr,#(_macdata + 0x0009)
      000453 E4               [12] 2004 	clr	a
      000454 F0               [24] 2005 	movx	@dptr,a
      000455 A3               [24] 2006 	inc	dptr
      000456 F0               [24] 2007 	movx	@dptr,a
                                   2008 ;	appFHSSNIC.c:309: while (1)
      000457                       2009 00110$:
                                   2010 ;	appFHSSNIC.c:311: MAC_set_chanidx(macdata.curChanIdx);
      000457 90r00r09         [24] 2011 	mov	dptr,#(_macdata + 0x0009)
      00045A E0               [24] 2012 	movx	a,@dptr
      00045B FE               [12] 2013 	mov	r6,a
      00045C A3               [24] 2014 	inc	dptr
      00045D E0               [24] 2015 	movx	a,@dptr
      00045E FF               [12] 2016 	mov	r7,a
      00045F 8E 82            [24] 2017 	mov	dpl,r6
      000461 8F 83            [24] 2018 	mov	dph,r7
      000463 12r05r29         [24] 2019 	lcall	_MAC_set_chanidx
                                   2020 ;	appFHSSNIC.c:312: while (MARCSTATE != MARC_STATE_RX)
      000466                       2021 00104$:
      000466 90 DF 3B         [24] 2022 	mov	dptr,#_MARCSTATE
      000469 E0               [24] 2023 	movx	a,@dptr
      00046A FF               [12] 2024 	mov	r7,a
      00046B BF 0D F8         [24] 2025 	cjne	r7,#0x0D,00104$
                                   2026 ;	appFHSSNIC.c:314: if ((RSSI&0x7f) < 0x60)
      00046E 90 DF 3A         [24] 2027 	mov	dptr,#_RSSI
      000471 E0               [24] 2028 	movx	a,@dptr
      000472 FF               [12] 2029 	mov	r7,a
      000473 53 07 7F         [24] 2030 	anl	ar7,#0x7F
      000476 BF 60 00         [24] 2031 	cjne	r7,#0x60,00136$
      000479                       2032 00136$:
      000479 40 27            [24] 2033 	jc	00111$
                                   2034 ;	appFHSSNIC.c:317: macdata.curChanIdx++;
      00047B 90r00r09         [24] 2035 	mov	dptr,#(_macdata + 0x0009)
      00047E E0               [24] 2036 	movx	a,@dptr
      00047F FE               [12] 2037 	mov	r6,a
      000480 A3               [24] 2038 	inc	dptr
      000481 E0               [24] 2039 	movx	a,@dptr
      000482 FF               [12] 2040 	mov	r7,a
      000483 0E               [12] 2041 	inc	r6
      000484 BE 00 01         [24] 2042 	cjne	r6,#0x00,00138$
      000487 0F               [12] 2043 	inc	r7
      000488                       2044 00138$:
      000488 90r00r09         [24] 2045 	mov	dptr,#(_macdata + 0x0009)
      00048B EE               [12] 2046 	mov	a,r6
      00048C F0               [24] 2047 	movx	@dptr,a
      00048D EF               [12] 2048 	mov	a,r7
      00048E A3               [24] 2049 	inc	dptr
      00048F F0               [24] 2050 	movx	@dptr,a
                                   2051 ;	appFHSSNIC.c:318: blink(10,10);
      000490 D2 A4            [12] 2052 	setb	_P2_4
      000492 90 00 0A         [24] 2053 	mov	dptr,#0x000A
      000495 12r00r00         [24] 2054 	lcall	_sleepMillis
      000498 C2 A4            [12] 2055 	clr	_P2_4
      00049A 90 00 0A         [24] 2056 	mov	dptr,#0x000A
      00049D 12r00r00         [24] 2057 	lcall	_sleepMillis
      0004A0 80 B5            [24] 2058 	sjmp	00110$
      0004A2                       2059 00111$:
                                   2060 ;	appFHSSNIC.c:322: macdata.mac_state = MAC_STATE_SYNCHING;
      0004A2 90r00r00         [24] 2061 	mov	dptr,#_macdata
      0004A5 74 02            [12] 2062 	mov	a,#0x02
      0004A7 F0               [24] 2063 	movx	@dptr,a
                                   2064 ;	appFHSSNIC.c:325: macdata.tLastStateChange = clock;
      0004A8 90r00r00         [24] 2065 	mov	dptr,#_clock
      0004AB E0               [24] 2066 	movx	a,@dptr
      0004AC FC               [12] 2067 	mov	r4,a
      0004AD A3               [24] 2068 	inc	dptr
      0004AE E0               [24] 2069 	movx	a,@dptr
      0004AF FD               [12] 2070 	mov	r5,a
      0004B0 A3               [24] 2071 	inc	dptr
      0004B1 E0               [24] 2072 	movx	a,@dptr
      0004B2 A3               [24] 2073 	inc	dptr
      0004B3 E0               [24] 2074 	movx	a,@dptr
      0004B4 90r00r0B         [24] 2075 	mov	dptr,#(_macdata + 0x000b)
      0004B7 EC               [12] 2076 	mov	a,r4
      0004B8 F0               [24] 2077 	movx	@dptr,a
      0004B9 ED               [12] 2078 	mov	a,r5
      0004BA A3               [24] 2079 	inc	dptr
      0004BB F0               [24] 2080 	movx	@dptr,a
                                   2081 ;	appFHSSNIC.c:328: macdata.desperatelySeeking = CellID;
      0004BC 90r05r5F         [24] 2082 	mov	dptr,#_MAC_sync_CellID_1_119
      0004BF E0               [24] 2083 	movx	a,@dptr
      0004C0 FE               [12] 2084 	mov	r6,a
      0004C1 A3               [24] 2085 	inc	dptr
      0004C2 E0               [24] 2086 	movx	a,@dptr
      0004C3 FF               [12] 2087 	mov	r7,a
      0004C4 90r00r0F         [24] 2088 	mov	dptr,#(_macdata + 0x000f)
      0004C7 EE               [12] 2089 	mov	a,r6
      0004C8 F0               [24] 2090 	movx	@dptr,a
      0004C9 EF               [12] 2091 	mov	a,r7
      0004CA A3               [24] 2092 	inc	dptr
      0004CB F0               [24] 2093 	movx	@dptr,a
      0004CC 22               [24] 2094 	ret
                                   2095 ;------------------------------------------------------------
                                   2096 ;Allocation info for local variables in function 'MAC_stop_sync'
                                   2097 ;------------------------------------------------------------
                                   2098 ;	appFHSSNIC.c:333: void MAC_stop_sync()
                                   2099 ;	-----------------------------------------
                                   2100 ;	 function MAC_stop_sync
                                   2101 ;	-----------------------------------------
      0004CD                       2102 _MAC_stop_sync:
                                   2103 ;	appFHSSNIC.c:336: macdata.mac_state = MAC_STATE_NONHOPPING;
      0004CD 90r00r00         [24] 2104 	mov	dptr,#_macdata
      0004D0 E4               [12] 2105 	clr	a
      0004D1 F0               [24] 2106 	movx	@dptr,a
                                   2107 ;	appFHSSNIC.c:337: macdata.tLastStateChange = clock;
      0004D2 90r00r00         [24] 2108 	mov	dptr,#_clock
      0004D5 E0               [24] 2109 	movx	a,@dptr
      0004D6 FC               [12] 2110 	mov	r4,a
      0004D7 A3               [24] 2111 	inc	dptr
      0004D8 E0               [24] 2112 	movx	a,@dptr
      0004D9 FD               [12] 2113 	mov	r5,a
      0004DA A3               [24] 2114 	inc	dptr
      0004DB E0               [24] 2115 	movx	a,@dptr
      0004DC A3               [24] 2116 	inc	dptr
      0004DD E0               [24] 2117 	movx	a,@dptr
      0004DE 90r00r0B         [24] 2118 	mov	dptr,#(_macdata + 0x000b)
      0004E1 EC               [12] 2119 	mov	a,r4
      0004E2 F0               [24] 2120 	movx	@dptr,a
      0004E3 ED               [12] 2121 	mov	a,r5
      0004E4 A3               [24] 2122 	inc	dptr
      0004E5 F0               [24] 2123 	movx	@dptr,a
      0004E6 22               [24] 2124 	ret
                                   2125 ;------------------------------------------------------------
                                   2126 ;Allocation info for local variables in function 'MAC_become_master'
                                   2127 ;------------------------------------------------------------
                                   2128 ;	appFHSSNIC.c:341: void MAC_become_master()
                                   2129 ;	-----------------------------------------
                                   2130 ;	 function MAC_become_master
                                   2131 ;	-----------------------------------------
      0004E7                       2132 _MAC_become_master:
                                   2133 ;	appFHSSNIC.c:344: macdata.mac_state = MAC_STATE_SYNC_MASTER;
      0004E7 90r00r00         [24] 2134 	mov	dptr,#_macdata
      0004EA 74 04            [12] 2135 	mov	a,#0x04
      0004EC F0               [24] 2136 	movx	@dptr,a
                                   2137 ;	appFHSSNIC.c:345: macdata.tLastStateChange = clock;
      0004ED 90r00r00         [24] 2138 	mov	dptr,#_clock
      0004F0 E0               [24] 2139 	movx	a,@dptr
      0004F1 FC               [12] 2140 	mov	r4,a
      0004F2 A3               [24] 2141 	inc	dptr
      0004F3 E0               [24] 2142 	movx	a,@dptr
      0004F4 FD               [12] 2143 	mov	r5,a
      0004F5 A3               [24] 2144 	inc	dptr
      0004F6 E0               [24] 2145 	movx	a,@dptr
      0004F7 A3               [24] 2146 	inc	dptr
      0004F8 E0               [24] 2147 	movx	a,@dptr
      0004F9 90r00r0B         [24] 2148 	mov	dptr,#(_macdata + 0x000b)
      0004FC EC               [12] 2149 	mov	a,r4
      0004FD F0               [24] 2150 	movx	@dptr,a
      0004FE ED               [12] 2151 	mov	a,r5
      0004FF A3               [24] 2152 	inc	dptr
      000500 F0               [24] 2153 	movx	@dptr,a
      000501 22               [24] 2154 	ret
                                   2155 ;------------------------------------------------------------
                                   2156 ;Allocation info for local variables in function 'MAC_do_Master_scanny_thingy'
                                   2157 ;------------------------------------------------------------
                                   2158 ;	appFHSSNIC.c:349: void MAC_do_Master_scanny_thingy()
                                   2159 ;	-----------------------------------------
                                   2160 ;	 function MAC_do_Master_scanny_thingy
                                   2161 ;	-----------------------------------------
      000502                       2162 _MAC_do_Master_scanny_thingy:
                                   2163 ;	appFHSSNIC.c:351: macdata.mac_state = MAC_STATE_SYNCINGMASTER;
      000502 90r00r00         [24] 2164 	mov	dptr,#_macdata
      000505 74 05            [12] 2165 	mov	a,#0x05
      000507 F0               [24] 2166 	movx	@dptr,a
                                   2167 ;	appFHSSNIC.c:352: macdata.synched_chans = 0;
      000508 90r00r13         [24] 2168 	mov	dptr,#(_macdata + 0x0013)
      00050B E4               [12] 2169 	clr	a
      00050C F0               [24] 2170 	movx	@dptr,a
      00050D A3               [24] 2171 	inc	dptr
      00050E F0               [24] 2172 	movx	@dptr,a
                                   2173 ;	appFHSSNIC.c:353: macdata.tLastStateChange = clock;
      00050F 90r00r00         [24] 2174 	mov	dptr,#_clock
      000512 E0               [24] 2175 	movx	a,@dptr
      000513 FC               [12] 2176 	mov	r4,a
      000514 A3               [24] 2177 	inc	dptr
      000515 E0               [24] 2178 	movx	a,@dptr
      000516 FD               [12] 2179 	mov	r5,a
      000517 A3               [24] 2180 	inc	dptr
      000518 E0               [24] 2181 	movx	a,@dptr
      000519 A3               [24] 2182 	inc	dptr
      00051A E0               [24] 2183 	movx	a,@dptr
      00051B 90r00r0B         [24] 2184 	mov	dptr,#(_macdata + 0x000b)
      00051E EC               [12] 2185 	mov	a,r4
      00051F F0               [24] 2186 	movx	@dptr,a
      000520 ED               [12] 2187 	mov	a,r5
      000521 A3               [24] 2188 	inc	dptr
      000522 F0               [24] 2189 	movx	@dptr,a
                                   2190 ;	appFHSSNIC.c:354: begin_hopping(0);
      000523 75 82 00         [24] 2191 	mov	dpl,#0x00
      000526 02r00r81         [24] 2192 	ljmp	_begin_hopping
                                   2193 ;------------------------------------------------------------
                                   2194 ;Allocation info for local variables in function 'MAC_set_chanidx'
                                   2195 ;------------------------------------------------------------
                                   2196 ;chanidx                   Allocated with name '_MAC_set_chanidx_chanidx_1_127'
                                   2197 ;------------------------------------------------------------
                                   2198 ;	appFHSSNIC.c:358: void MAC_set_chanidx(__xdata u16 chanidx)
                                   2199 ;	-----------------------------------------
                                   2200 ;	 function MAC_set_chanidx
                                   2201 ;	-----------------------------------------
      000529                       2202 _MAC_set_chanidx:
      000529 AF 83            [24] 2203 	mov	r7,dph
      00052B E5 82            [12] 2204 	mov	a,dpl
      00052D 90r05r61         [24] 2205 	mov	dptr,#_MAC_set_chanidx_chanidx_1_127
      000530 F0               [24] 2206 	movx	@dptr,a
      000531 EF               [12] 2207 	mov	a,r7
      000532 A3               [24] 2208 	inc	dptr
      000533 F0               [24] 2209 	movx	@dptr,a
                                   2210 ;	appFHSSNIC.c:360: PHY_set_channel( g_Channels[ chanidx ] );
      000534 90r05r61         [24] 2211 	mov	dptr,#_MAC_set_chanidx_chanidx_1_127
      000537 E0               [24] 2212 	movx	a,@dptr
      000538 FE               [12] 2213 	mov	r6,a
      000539 A3               [24] 2214 	inc	dptr
      00053A E0               [24] 2215 	movx	a,@dptr
      00053B FF               [12] 2216 	mov	r7,a
      00053C EE               [12] 2217 	mov	a,r6
      00053D 24r00            [12] 2218 	add	a,#_g_Channels
      00053F F5 82            [12] 2219 	mov	dpl,a
      000541 EF               [12] 2220 	mov	a,r7
      000542 34s00            [12] 2221 	addc	a,#(_g_Channels >> 8)
      000544 F5 83            [12] 2222 	mov	dph,a
      000546 E0               [24] 2223 	movx	a,@dptr
      000547 FF               [12] 2224 	mov	r7,a
      000548 7E 00            [12] 2225 	mov	r6,#0x00
      00054A 8F 82            [24] 2226 	mov	dpl,r7
      00054C 8E 83            [24] 2227 	mov	dph,r6
      00054E 02r00r00         [24] 2228 	ljmp	_PHY_set_channel
                                   2229 ;------------------------------------------------------------
                                   2230 ;Allocation info for local variables in function 'MAC_set_NIC_ID'
                                   2231 ;------------------------------------------------------------
                                   2232 ;NIC_ID                    Allocated with name '_MAC_set_NIC_ID_NIC_ID_1_129'
                                   2233 ;------------------------------------------------------------
                                   2234 ;	appFHSSNIC.c:364: void MAC_set_NIC_ID(__xdata u16 NIC_ID)
                                   2235 ;	-----------------------------------------
                                   2236 ;	 function MAC_set_NIC_ID
                                   2237 ;	-----------------------------------------
      000551                       2238 _MAC_set_NIC_ID:
      000551 AF 83            [24] 2239 	mov	r7,dph
      000553 E5 82            [12] 2240 	mov	a,dpl
      000555 90r05r63         [24] 2241 	mov	dptr,#_MAC_set_NIC_ID_NIC_ID_1_129
      000558 F0               [24] 2242 	movx	@dptr,a
      000559 EF               [12] 2243 	mov	a,r7
      00055A A3               [24] 2244 	inc	dptr
      00055B F0               [24] 2245 	movx	@dptr,a
                                   2246 ;	appFHSSNIC.c:367: g_NIC_ID = NIC_ID;
      00055C 90r05r63         [24] 2247 	mov	dptr,#_MAC_set_NIC_ID_NIC_ID_1_129
      00055F E0               [24] 2248 	movx	a,@dptr
      000560 FE               [12] 2249 	mov	r6,a
      000561 A3               [24] 2250 	inc	dptr
      000562 E0               [24] 2251 	movx	a,@dptr
      000563 FF               [12] 2252 	mov	r7,a
      000564 90r03r70         [24] 2253 	mov	dptr,#_g_NIC_ID
      000567 EE               [12] 2254 	mov	a,r6
      000568 F0               [24] 2255 	movx	@dptr,a
      000569 EF               [12] 2256 	mov	a,r7
      00056A A3               [24] 2257 	inc	dptr
      00056B F0               [24] 2258 	movx	@dptr,a
      00056C 22               [24] 2259 	ret
                                   2260 ;------------------------------------------------------------
                                   2261 ;Allocation info for local variables in function 'MAC_rx_handle'
                                   2262 ;------------------------------------------------------------
                                   2263 ;message                   Allocated with name '_MAC_rx_handle_PARM_2'
                                   2264 ;len                       Allocated with name '_MAC_rx_handle_len_1_131'
                                   2265 ;------------------------------------------------------------
                                   2266 ;	appFHSSNIC.c:370: void MAC_rx_handle(__xdata u8 len, __xdata u8* __xdata message)
                                   2267 ;	-----------------------------------------
                                   2268 ;	 function MAC_rx_handle
                                   2269 ;	-----------------------------------------
      00056D                       2270 _MAC_rx_handle:
                                   2271 ;	appFHSSNIC.c:373: message;
      00056D 22               [24] 2272 	ret
                                   2273 ;------------------------------------------------------------
                                   2274 ;Allocation info for local variables in function 'MAC_getNextChannel'
                                   2275 ;------------------------------------------------------------
                                   2276 ;	appFHSSNIC.c:379: __xdata u8 MAC_getNextChannel()
                                   2277 ;	-----------------------------------------
                                   2278 ;	 function MAC_getNextChannel
                                   2279 ;	-----------------------------------------
      00056E                       2280 _MAC_getNextChannel:
                                   2281 ;	appFHSSNIC.c:381: macdata.curChanIdx++;
      00056E 90r00r09         [24] 2282 	mov	dptr,#(_macdata + 0x0009)
      000571 E0               [24] 2283 	movx	a,@dptr
      000572 FE               [12] 2284 	mov	r6,a
      000573 A3               [24] 2285 	inc	dptr
      000574 E0               [24] 2286 	movx	a,@dptr
      000575 FF               [12] 2287 	mov	r7,a
      000576 0E               [12] 2288 	inc	r6
      000577 BE 00 01         [24] 2289 	cjne	r6,#0x00,00108$
      00057A 0F               [12] 2290 	inc	r7
      00057B                       2291 00108$:
      00057B 90r00r09         [24] 2292 	mov	dptr,#(_macdata + 0x0009)
      00057E EE               [12] 2293 	mov	a,r6
      00057F F0               [24] 2294 	movx	@dptr,a
      000580 EF               [12] 2295 	mov	a,r7
      000581 A3               [24] 2296 	inc	dptr
      000582 F0               [24] 2297 	movx	@dptr,a
                                   2298 ;	appFHSSNIC.c:382: if (macdata.curChanIdx >= MAX_CHANNELS)
      000583 C3               [12] 2299 	clr	c
      000584 EE               [12] 2300 	mov	a,r6
      000585 94 70            [12] 2301 	subb	a,#0x70
      000587 EF               [12] 2302 	mov	a,r7
      000588 94 03            [12] 2303 	subb	a,#0x03
      00058A 40 07            [24] 2304 	jc	00102$
                                   2305 ;	appFHSSNIC.c:384: macdata.curChanIdx = 0;
      00058C 90r00r09         [24] 2306 	mov	dptr,#(_macdata + 0x0009)
      00058F E4               [12] 2307 	clr	a
      000590 F0               [24] 2308 	movx	@dptr,a
      000591 A3               [24] 2309 	inc	dptr
      000592 F0               [24] 2310 	movx	@dptr,a
      000593                       2311 00102$:
                                   2312 ;	appFHSSNIC.c:386: return g_Channels[macdata.curChanIdx];
      000593 90r00r09         [24] 2313 	mov	dptr,#(_macdata + 0x0009)
      000596 E0               [24] 2314 	movx	a,@dptr
      000597 FE               [12] 2315 	mov	r6,a
      000598 A3               [24] 2316 	inc	dptr
      000599 E0               [24] 2317 	movx	a,@dptr
      00059A FF               [12] 2318 	mov	r7,a
      00059B EE               [12] 2319 	mov	a,r6
      00059C 24r00            [12] 2320 	add	a,#_g_Channels
      00059E F5 82            [12] 2321 	mov	dpl,a
      0005A0 EF               [12] 2322 	mov	a,r7
      0005A1 34s00            [12] 2323 	addc	a,#(_g_Channels >> 8)
      0005A3 F5 83            [12] 2324 	mov	dph,a
      0005A5 E0               [24] 2325 	movx	a,@dptr
      0005A6 F5 82            [12] 2326 	mov	dpl,a
      0005A8 22               [24] 2327 	ret
                                   2328 ;------------------------------------------------------------
                                   2329 ;Allocation info for local variables in function 't2IntHandler'
                                   2330 ;------------------------------------------------------------
                                   2331 ;packet                    Allocated with name '_t2IntHandler_packet_1_136'
                                   2332 ;------------------------------------------------------------
                                   2333 ;	appFHSSNIC.c:393: void t2IntHandler(void) __interrupt T2_VECTOR  // interrupt handler should trigger on T2 overflow
                                   2334 ;	-----------------------------------------
                                   2335 ;	 function t2IntHandler
                                   2336 ;	-----------------------------------------
      0005A9                       2337 _t2IntHandler:
      0005A9 C0*00            [24] 2338 	push	bits
      0005AB C0 E0            [24] 2339 	push	acc
      0005AD C0 F0            [24] 2340 	push	b
      0005AF C0 82            [24] 2341 	push	dpl
      0005B1 C0 83            [24] 2342 	push	dph
      0005B3 C0 07            [24] 2343 	push	(0+7)
      0005B5 C0 06            [24] 2344 	push	(0+6)
      0005B7 C0 05            [24] 2345 	push	(0+5)
      0005B9 C0 04            [24] 2346 	push	(0+4)
      0005BB C0 03            [24] 2347 	push	(0+3)
      0005BD C0 02            [24] 2348 	push	(0+2)
      0005BF C0 01            [24] 2349 	push	(0+1)
      0005C1 C0 00            [24] 2350 	push	(0+0)
      0005C3 C0 D0            [24] 2351 	push	psw
      0005C5 75 D0 00         [24] 2352 	mov	psw,#0x00
                                   2353 ;	appFHSSNIC.c:402: if (++rf_MAC_timer == macdata.MAC_threshold)
      0005C8 90r00r00         [24] 2354 	mov	dptr,#_rf_MAC_timer
      0005CB E0               [24] 2355 	movx	a,@dptr
      0005CC 24 01            [12] 2356 	add	a,#0x01
      0005CE F0               [24] 2357 	movx	@dptr,a
      0005CF A3               [24] 2358 	inc	dptr
      0005D0 E0               [24] 2359 	movx	a,@dptr
      0005D1 34 00            [12] 2360 	addc	a,#0x00
      0005D3 F0               [24] 2361 	movx	@dptr,a
      0005D4 90r00r01         [24] 2362 	mov	dptr,#(_macdata + 0x0001)
      0005D7 E0               [24] 2363 	movx	a,@dptr
      0005D8 FE               [12] 2364 	mov	r6,a
      0005D9 A3               [24] 2365 	inc	dptr
      0005DA E0               [24] 2366 	movx	a,@dptr
      0005DB FF               [12] 2367 	mov	r7,a
      0005DC 90r00r00         [24] 2368 	mov	dptr,#_rf_MAC_timer
      0005DF E0               [24] 2369 	movx	a,@dptr
      0005E0 FC               [12] 2370 	mov	r4,a
      0005E1 A3               [24] 2371 	inc	dptr
      0005E2 E0               [24] 2372 	movx	a,@dptr
      0005E3 FD               [12] 2373 	mov	r5,a
      0005E4 EC               [12] 2374 	mov	a,r4
      0005E5 B5 06 0B         [24] 2375 	cjne	a,ar6,00102$
      0005E8 ED               [12] 2376 	mov	a,r5
      0005E9 B5 07 07         [24] 2377 	cjne	a,ar7,00102$
                                   2378 ;	appFHSSNIC.c:403: rf_MAC_timer = 0;   // since we're 0-based, MAC_threshold is actually past the end of our state machine, which makes it 0 *right now*
      0005EC 90r00r00         [24] 2379 	mov	dptr,#_rf_MAC_timer
      0005EF E4               [12] 2380 	clr	a
      0005F0 F0               [24] 2381 	movx	@dptr,a
      0005F1 A3               [24] 2382 	inc	dptr
      0005F2 F0               [24] 2383 	movx	@dptr,a
      0005F3                       2384 00102$:
                                   2385 ;	appFHSSNIC.c:405: switch (rf_MAC_timer)
      0005F3 90r00r00         [24] 2386 	mov	dptr,#_rf_MAC_timer
      0005F6 E0               [24] 2387 	movx	a,@dptr
      0005F7 FE               [12] 2388 	mov	r6,a
      0005F8 A3               [24] 2389 	inc	dptr
      0005F9 E0               [24] 2390 	movx	a,@dptr
      0005FA FF               [12] 2391 	mov	r7,a
      0005FB BE 00 05         [24] 2392 	cjne	r6,#0x00,00160$
      0005FE BF 00 02         [24] 2393 	cjne	r7,#0x00,00160$
      000601 80 0B            [24] 2394 	sjmp	00103$
      000603                       2395 00160$:
      000603 BE 01 05         [24] 2396 	cjne	r6,#0x01,00161$
      000606 BF 00 02         [24] 2397 	cjne	r7,#0x00,00161$
      000609 80 68            [24] 2398 	sjmp	00108$
      00060B                       2399 00161$:
      00060B 02r07r6B         [24] 2400 	ljmp	00111$
                                   2401 ;	appFHSSNIC.c:407: case 0:     // change channels
      00060E                       2402 00103$:
                                   2403 ;	appFHSSNIC.c:409: macdata.tLastHop = T2CT | (rf_MAC_timer<<8);        // should this be based on clock and T1?
      00060E 90r00r00         [24] 2404 	mov	dptr,#_rf_MAC_timer
      000611 E0               [24] 2405 	movx	a,@dptr
      000612 FE               [12] 2406 	mov	r6,a
      000613 A3               [24] 2407 	inc	dptr
      000614 E0               [24] 2408 	movx	a,@dptr
      000615 8E 07            [24] 2409 	mov	ar7,r6
      000617 7E 00            [12] 2410 	mov	r6,#0x00
      000619 AC 9C            [24] 2411 	mov	r4,_T2CT
      00061B 7D 00            [12] 2412 	mov	r5,#0x00
      00061D EC               [12] 2413 	mov	a,r4
      00061E 42 06            [12] 2414 	orl	ar6,a
      000620 ED               [12] 2415 	mov	a,r5
      000621 42 07            [12] 2416 	orl	ar7,a
      000623 90r00r0D         [24] 2417 	mov	dptr,#(_macdata + 0x000d)
      000626 EE               [12] 2418 	mov	a,r6
      000627 F0               [24] 2419 	movx	@dptr,a
      000628 EF               [12] 2420 	mov	a,r7
      000629 A3               [24] 2421 	inc	dptr
      00062A F0               [24] 2422 	movx	@dptr,a
                                   2423 ;	appFHSSNIC.c:412: if (++macdata.curChanIdx >= macdata.NumChannelHops)
      00062B 90r00r09         [24] 2424 	mov	dptr,#(_macdata + 0x0009)
      00062E E0               [24] 2425 	movx	a,@dptr
      00062F FE               [12] 2426 	mov	r6,a
      000630 A3               [24] 2427 	inc	dptr
      000631 E0               [24] 2428 	movx	a,@dptr
      000632 FF               [12] 2429 	mov	r7,a
      000633 0E               [12] 2430 	inc	r6
      000634 BE 00 01         [24] 2431 	cjne	r6,#0x00,00162$
      000637 0F               [12] 2432 	inc	r7
      000638                       2433 00162$:
      000638 90r00r09         [24] 2434 	mov	dptr,#(_macdata + 0x0009)
      00063B EE               [12] 2435 	mov	a,r6
      00063C F0               [24] 2436 	movx	@dptr,a
      00063D EF               [12] 2437 	mov	a,r7
      00063E A3               [24] 2438 	inc	dptr
      00063F F0               [24] 2439 	movx	@dptr,a
      000640 90r00r07         [24] 2440 	mov	dptr,#(_macdata + 0x0007)
      000643 E0               [24] 2441 	movx	a,@dptr
      000644 FC               [12] 2442 	mov	r4,a
      000645 A3               [24] 2443 	inc	dptr
      000646 E0               [24] 2444 	movx	a,@dptr
      000647 FD               [12] 2445 	mov	r5,a
      000648 C3               [12] 2446 	clr	c
      000649 EE               [12] 2447 	mov	a,r6
      00064A 9C               [12] 2448 	subb	a,r4
      00064B EF               [12] 2449 	mov	a,r7
      00064C 9D               [12] 2450 	subb	a,r5
      00064D 40 07            [24] 2451 	jc	00105$
                                   2452 ;	appFHSSNIC.c:414: macdata.curChanIdx = 0;
      00064F 90r00r09         [24] 2453 	mov	dptr,#(_macdata + 0x0009)
      000652 E4               [12] 2454 	clr	a
      000653 F0               [24] 2455 	movx	@dptr,a
      000654 A3               [24] 2456 	inc	dptr
      000655 F0               [24] 2457 	movx	@dptr,a
      000656                       2458 00105$:
                                   2459 ;	appFHSSNIC.c:419: if (MARCSTATE == MARC_STATE_TX)
      000656 90 DF 3B         [24] 2460 	mov	dptr,#_MARCSTATE
      000659 E0               [24] 2461 	movx	a,@dptr
      00065A FF               [12] 2462 	mov	r7,a
      00065B BF 13 03         [24] 2463 	cjne	r7,#0x13,00107$
                                   2464 ;	appFHSSNIC.c:420: return;
      00065E 02r08r66         [24] 2465 	ljmp	00123$
      000661                       2466 00107$:
                                   2467 ;	appFHSSNIC.c:424: MAC_set_chanidx(macdata.curChanIdx);
      000661 90r00r09         [24] 2468 	mov	dptr,#(_macdata + 0x0009)
      000664 E0               [24] 2469 	movx	a,@dptr
      000665 FE               [12] 2470 	mov	r6,a
      000666 A3               [24] 2471 	inc	dptr
      000667 E0               [24] 2472 	movx	a,@dptr
      000668 FF               [12] 2473 	mov	r7,a
      000669 8E 82            [24] 2474 	mov	dpl,r6
      00066B 8F 83            [24] 2475 	mov	dph,r7
      00066D 12r05r29         [24] 2476 	lcall	_MAC_set_chanidx
                                   2477 ;	appFHSSNIC.c:435: break;
      000670 02r08r66         [24] 2478 	ljmp	00123$
                                   2479 ;	appFHSSNIC.c:437: case 1:
      000673                       2480 00108$:
                                   2481 ;	appFHSSNIC.c:439: if (macdata.mac_state == MAC_STATE_SYNCINGMASTER)
      000673 90r00r00         [24] 2482 	mov	dptr,#_macdata
      000676 E0               [24] 2483 	movx	a,@dptr
      000677 FF               [12] 2484 	mov	r7,a
      000678 BF 05 02         [24] 2485 	cjne	r7,#0x05,00166$
      00067B 80 03            [24] 2486 	sjmp	00167$
      00067D                       2487 00166$:
      00067D 02r08r66         [24] 2488 	ljmp	00123$
      000680                       2489 00167$:
                                   2490 ;	appFHSSNIC.c:441: sleepMillis(FHSS_TX_SLEEP_DELAY);
      000680 90 00 19         [24] 2491 	mov	dptr,#0x0019
      000683 12r00r00         [24] 2492 	lcall	_sleepMillis
                                   2493 ;	appFHSSNIC.c:442: packet[0] = 28;
      000686 90r05r67         [24] 2494 	mov	dptr,#_t2IntHandler_packet_1_136
      000689 74 1C            [12] 2495 	mov	a,#0x1C
      00068B F0               [24] 2496 	movx	@dptr,a
                                   2497 ;	appFHSSNIC.c:443: packet[1] = macdata.curChanIdx & 0xff;
      00068C 90r00r09         [24] 2498 	mov	dptr,#(_macdata + 0x0009)
      00068F E0               [24] 2499 	movx	a,@dptr
      000690 FE               [12] 2500 	mov	r6,a
      000691 A3               [24] 2501 	inc	dptr
      000692 E0               [24] 2502 	movx	a,@dptr
      000693 90r05r68         [24] 2503 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0001)
      000696 EE               [12] 2504 	mov	a,r6
      000697 F0               [24] 2505 	movx	@dptr,a
                                   2506 ;	appFHSSNIC.c:444: packet[2] = macdata.curChanIdx >> 8;
      000698 90r00r09         [24] 2507 	mov	dptr,#(_macdata + 0x0009)
      00069B E0               [24] 2508 	movx	a,@dptr
      00069C A3               [24] 2509 	inc	dptr
      00069D E0               [24] 2510 	movx	a,@dptr
      00069E 90r05r69         [24] 2511 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0002)
      0006A1 F0               [24] 2512 	movx	@dptr,a
                                   2513 ;	appFHSSNIC.c:445: packet[3] =  'B';
      0006A2 90r05r6A         [24] 2514 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0003)
      0006A5 74 42            [12] 2515 	mov	a,#0x42
      0006A7 F0               [24] 2516 	movx	@dptr,a
                                   2517 ;	appFHSSNIC.c:446: packet[4] =  'L';
      0006A8 90r05r6B         [24] 2518 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0004)
      0006AB 74 4C            [12] 2519 	mov	a,#0x4C
      0006AD F0               [24] 2520 	movx	@dptr,a
                                   2521 ;	appFHSSNIC.c:447: packet[5] =  'A';
      0006AE 90r05r6C         [24] 2522 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0005)
      0006B1 74 41            [12] 2523 	mov	a,#0x41
      0006B3 F0               [24] 2524 	movx	@dptr,a
                                   2525 ;	appFHSSNIC.c:448: packet[6] =  'H';
      0006B4 90r05r6D         [24] 2526 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0006)
      0006B7 74 48            [12] 2527 	mov	a,#0x48
      0006B9 F0               [24] 2528 	movx	@dptr,a
                                   2529 ;	appFHSSNIC.c:449: packet[7] =  'B';
      0006BA 90r05r6E         [24] 2530 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0007)
      0006BD 74 42            [12] 2531 	mov	a,#0x42
      0006BF F0               [24] 2532 	movx	@dptr,a
                                   2533 ;	appFHSSNIC.c:450: packet[8] =  'L';
      0006C0 90r05r6F         [24] 2534 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0008)
      0006C3 74 4C            [12] 2535 	mov	a,#0x4C
      0006C5 F0               [24] 2536 	movx	@dptr,a
                                   2537 ;	appFHSSNIC.c:451: packet[9] =  'A';
      0006C6 90r05r70         [24] 2538 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0009)
      0006C9 74 41            [12] 2539 	mov	a,#0x41
      0006CB F0               [24] 2540 	movx	@dptr,a
                                   2541 ;	appFHSSNIC.c:452: packet[10] = 'H';
      0006CC 90r05r71         [24] 2542 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x000a)
      0006CF 74 48            [12] 2543 	mov	a,#0x48
      0006D1 F0               [24] 2544 	movx	@dptr,a
                                   2545 ;	appFHSSNIC.c:453: packet[11] = 'B';
      0006D2 90r05r72         [24] 2546 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x000b)
      0006D5 74 42            [12] 2547 	mov	a,#0x42
      0006D7 F0               [24] 2548 	movx	@dptr,a
                                   2549 ;	appFHSSNIC.c:454: packet[12] = 'L';
      0006D8 90r05r73         [24] 2550 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x000c)
      0006DB 74 4C            [12] 2551 	mov	a,#0x4C
      0006DD F0               [24] 2552 	movx	@dptr,a
                                   2553 ;	appFHSSNIC.c:455: packet[13] = 'A';
      0006DE 90r05r74         [24] 2554 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x000d)
      0006E1 74 41            [12] 2555 	mov	a,#0x41
      0006E3 F0               [24] 2556 	movx	@dptr,a
                                   2557 ;	appFHSSNIC.c:456: packet[14] = 'H';
      0006E4 90r05r75         [24] 2558 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x000e)
      0006E7 74 48            [12] 2559 	mov	a,#0x48
      0006E9 F0               [24] 2560 	movx	@dptr,a
                                   2561 ;	appFHSSNIC.c:457: packet[15] = 'B';
      0006EA 90r05r76         [24] 2562 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x000f)
      0006ED 74 42            [12] 2563 	mov	a,#0x42
      0006EF F0               [24] 2564 	movx	@dptr,a
                                   2565 ;	appFHSSNIC.c:458: packet[16] = 'L';
      0006F0 90r05r77         [24] 2566 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0010)
      0006F3 74 4C            [12] 2567 	mov	a,#0x4C
      0006F5 F0               [24] 2568 	movx	@dptr,a
                                   2569 ;	appFHSSNIC.c:459: packet[17] = 'A';
      0006F6 90r05r78         [24] 2570 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0011)
      0006F9 74 41            [12] 2571 	mov	a,#0x41
      0006FB F0               [24] 2572 	movx	@dptr,a
                                   2573 ;	appFHSSNIC.c:460: packet[18] = 'H';
      0006FC 90r05r79         [24] 2574 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0012)
      0006FF 74 48            [12] 2575 	mov	a,#0x48
      000701 F0               [24] 2576 	movx	@dptr,a
                                   2577 ;	appFHSSNIC.c:461: packet[19] = 'B';
      000702 90r05r7A         [24] 2578 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0013)
      000705 74 42            [12] 2579 	mov	a,#0x42
      000707 F0               [24] 2580 	movx	@dptr,a
                                   2581 ;	appFHSSNIC.c:462: packet[20] = 'L';
      000708 90r05r7B         [24] 2582 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0014)
      00070B 74 4C            [12] 2583 	mov	a,#0x4C
      00070D F0               [24] 2584 	movx	@dptr,a
                                   2585 ;	appFHSSNIC.c:463: packet[21] = 'A';
      00070E 90r05r7C         [24] 2586 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0015)
      000711 74 41            [12] 2587 	mov	a,#0x41
      000713 F0               [24] 2588 	movx	@dptr,a
                                   2589 ;	appFHSSNIC.c:464: packet[22] = 'H';
      000714 90r05r7D         [24] 2590 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0016)
      000717 74 48            [12] 2591 	mov	a,#0x48
      000719 F0               [24] 2592 	movx	@dptr,a
                                   2593 ;	appFHSSNIC.c:465: packet[23] = 'B';
      00071A 90r05r7E         [24] 2594 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0017)
      00071D 74 42            [12] 2595 	mov	a,#0x42
      00071F F0               [24] 2596 	movx	@dptr,a
                                   2597 ;	appFHSSNIC.c:466: packet[24] = 'L';
      000720 90r05r7F         [24] 2598 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0018)
      000723 74 4C            [12] 2599 	mov	a,#0x4C
      000725 F0               [24] 2600 	movx	@dptr,a
                                   2601 ;	appFHSSNIC.c:467: packet[25] = 'A';
      000726 90r05r80         [24] 2602 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0019)
      000729 74 41            [12] 2603 	mov	a,#0x41
      00072B F0               [24] 2604 	movx	@dptr,a
                                   2605 ;	appFHSSNIC.c:468: packet[26] = 'H';
      00072C 90r05r81         [24] 2606 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x001a)
      00072F 74 48            [12] 2607 	mov	a,#0x48
      000731 F0               [24] 2608 	movx	@dptr,a
                                   2609 ;	appFHSSNIC.c:469: packet[27] = ' ';
      000732 90r05r82         [24] 2610 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x001b)
      000735 74 20            [12] 2611 	mov	a,#0x20
      000737 F0               [24] 2612 	movx	@dptr,a
                                   2613 ;	appFHSSNIC.c:471: transmit((__xdata u8*)&packet[1], 28, 0, 0);
      000738 90r00r00         [24] 2614 	mov	dptr,#_transmit_PARM_2
      00073B 74 1C            [12] 2615 	mov	a,#0x1C
      00073D F0               [24] 2616 	movx	@dptr,a
      00073E E4               [12] 2617 	clr	a
      00073F A3               [24] 2618 	inc	dptr
      000740 F0               [24] 2619 	movx	@dptr,a
      000741 90r00r00         [24] 2620 	mov	dptr,#_transmit_PARM_3
      000744 F0               [24] 2621 	movx	@dptr,a
      000745 A3               [24] 2622 	inc	dptr
      000746 F0               [24] 2623 	movx	@dptr,a
      000747 90r00r00         [24] 2624 	mov	dptr,#_transmit_PARM_4
      00074A F0               [24] 2625 	movx	@dptr,a
      00074B A3               [24] 2626 	inc	dptr
      00074C F0               [24] 2627 	movx	@dptr,a
      00074D 90r05r68         [24] 2628 	mov	dptr,#(_t2IntHandler_packet_1_136 + 0x0001)
      000750 12r00r00         [24] 2629 	lcall	_transmit
                                   2630 ;	appFHSSNIC.c:472: macdata.synched_chans++;
      000753 90r00r13         [24] 2631 	mov	dptr,#(_macdata + 0x0013)
      000756 E0               [24] 2632 	movx	a,@dptr
      000757 FE               [12] 2633 	mov	r6,a
      000758 A3               [24] 2634 	inc	dptr
      000759 E0               [24] 2635 	movx	a,@dptr
      00075A FF               [12] 2636 	mov	r7,a
      00075B 0E               [12] 2637 	inc	r6
      00075C BE 00 01         [24] 2638 	cjne	r6,#0x00,00168$
      00075F 0F               [12] 2639 	inc	r7
      000760                       2640 00168$:
      000760 90r00r13         [24] 2641 	mov	dptr,#(_macdata + 0x0013)
      000763 EE               [12] 2642 	mov	a,r6
      000764 F0               [24] 2643 	movx	@dptr,a
      000765 EF               [12] 2644 	mov	a,r7
      000766 A3               [24] 2645 	inc	dptr
      000767 F0               [24] 2646 	movx	@dptr,a
                                   2647 ;	appFHSSNIC.c:473: break;      // don't want to do anything else if we're in this state.
      000768 02r08r66         [24] 2648 	ljmp	00123$
                                   2649 ;	appFHSSNIC.c:477: default:    // all other ticks we can transmit
      00076B                       2650 00111$:
                                   2651 ;	appFHSSNIC.c:480: switch (macdata.mac_state)
      00076B 90r00r00         [24] 2652 	mov	dptr,#_macdata
      00076E E0               [24] 2653 	movx	a,@dptr
      00076F FF               [12] 2654 	mov	r7,a
      000770 BF 03 02         [24] 2655 	cjne	r7,#0x03,00169$
      000773 80 65            [24] 2656 	sjmp	00116$
      000775                       2657 00169$:
      000775 BF 04 02         [24] 2658 	cjne	r7,#0x04,00170$
      000778 80 08            [24] 2659 	sjmp	00113$
      00077A                       2660 00170$:
      00077A BF 05 02         [24] 2661 	cjne	r7,#0x05,00171$
      00077D 80 03            [24] 2662 	sjmp	00172$
      00077F                       2663 00171$:
      00077F 02r08r66         [24] 2664 	ljmp	00123$
      000782                       2665 00172$:
                                   2666 ;	appFHSSNIC.c:483: case MAC_STATE_SYNC_MASTER:
      000782                       2667 00113$:
                                   2668 ;	appFHSSNIC.c:484: if (100 < (clock - macdata.tLastStateChange))   // periodically shift back to beaconing
      000782 90r00r0B         [24] 2669 	mov	dptr,#(_macdata + 0x000b)
      000785 E0               [24] 2670 	movx	a,@dptr
      000786 FE               [12] 2671 	mov	r6,a
      000787 A3               [24] 2672 	inc	dptr
      000788 E0               [24] 2673 	movx	a,@dptr
      000789 FF               [12] 2674 	mov	r7,a
      00078A 90r00r00         [24] 2675 	mov	dptr,#_clock
      00078D E0               [24] 2676 	movx	a,@dptr
      00078E FA               [12] 2677 	mov	r2,a
      00078F A3               [24] 2678 	inc	dptr
      000790 E0               [24] 2679 	movx	a,@dptr
      000791 FB               [12] 2680 	mov	r3,a
      000792 A3               [24] 2681 	inc	dptr
      000793 E0               [24] 2682 	movx	a,@dptr
      000794 FC               [12] 2683 	mov	r4,a
      000795 A3               [24] 2684 	inc	dptr
      000796 E0               [24] 2685 	movx	a,@dptr
      000797 FD               [12] 2686 	mov	r5,a
      000798 8E 00            [24] 2687 	mov	ar0,r6
      00079A 8F 01            [24] 2688 	mov	ar1,r7
      00079C E4               [12] 2689 	clr	a
      00079D FE               [12] 2690 	mov	r6,a
      00079E FF               [12] 2691 	mov	r7,a
      00079F EA               [12] 2692 	mov	a,r2
      0007A0 C3               [12] 2693 	clr	c
      0007A1 98               [12] 2694 	subb	a,r0
      0007A2 FA               [12] 2695 	mov	r2,a
      0007A3 EB               [12] 2696 	mov	a,r3
      0007A4 99               [12] 2697 	subb	a,r1
      0007A5 FB               [12] 2698 	mov	r3,a
      0007A6 EC               [12] 2699 	mov	a,r4
      0007A7 9E               [12] 2700 	subb	a,r6
      0007A8 FC               [12] 2701 	mov	r4,a
      0007A9 ED               [12] 2702 	mov	a,r5
      0007AA 9F               [12] 2703 	subb	a,r7
      0007AB FD               [12] 2704 	mov	r5,a
      0007AC C3               [12] 2705 	clr	c
      0007AD 74 64            [12] 2706 	mov	a,#0x64
      0007AF 9A               [12] 2707 	subb	a,r2
      0007B0 E4               [12] 2708 	clr	a
      0007B1 9B               [12] 2709 	subb	a,r3
      0007B2 E4               [12] 2710 	clr	a
      0007B3 9C               [12] 2711 	subb	a,r4
      0007B4 E4               [12] 2712 	clr	a
      0007B5 9D               [12] 2713 	subb	a,r5
      0007B6 50 22            [24] 2714 	jnc	00116$
                                   2715 ;	appFHSSNIC.c:486: debug("SYNCH_MASTER -> SYNCINGMASTER");
      0007B8 90r00rC3         [24] 2716 	mov	dptr,#___str_5
      0007BB 12r00r00         [24] 2717 	lcall	_debug
                                   2718 ;	appFHSSNIC.c:487: macdata.mac_state = MAC_STATE_SYNCINGMASTER;
      0007BE 90r00r00         [24] 2719 	mov	dptr,#_macdata
      0007C1 74 05            [12] 2720 	mov	a,#0x05
      0007C3 F0               [24] 2721 	movx	@dptr,a
                                   2722 ;	appFHSSNIC.c:488: macdata.tLastStateChange = clock;
      0007C4 90r00r00         [24] 2723 	mov	dptr,#_clock
      0007C7 E0               [24] 2724 	movx	a,@dptr
      0007C8 FC               [12] 2725 	mov	r4,a
      0007C9 A3               [24] 2726 	inc	dptr
      0007CA E0               [24] 2727 	movx	a,@dptr
      0007CB FD               [12] 2728 	mov	r5,a
      0007CC A3               [24] 2729 	inc	dptr
      0007CD E0               [24] 2730 	movx	a,@dptr
      0007CE FE               [12] 2731 	mov	r6,a
      0007CF A3               [24] 2732 	inc	dptr
      0007D0 E0               [24] 2733 	movx	a,@dptr
      0007D1 FF               [12] 2734 	mov	r7,a
      0007D2 90r00r0B         [24] 2735 	mov	dptr,#(_macdata + 0x000b)
      0007D5 EC               [12] 2736 	mov	a,r4
      0007D6 F0               [24] 2737 	movx	@dptr,a
      0007D7 ED               [12] 2738 	mov	a,r5
      0007D8 A3               [24] 2739 	inc	dptr
      0007D9 F0               [24] 2740 	movx	@dptr,a
                                   2741 ;	appFHSSNIC.c:491: case MAC_STATE_SYNCHED:
      0007DA                       2742 00116$:
                                   2743 ;	appFHSSNIC.c:501: if ( g_txMsgQueue[macdata.txMsgIdxDone][0])      // if length byte >0
      0007DA 90r00r12         [24] 2744 	mov	dptr,#(_macdata + 0x0012)
      0007DD E0               [24] 2745 	movx	a,@dptr
      0007DE 75 F0 F1         [24] 2746 	mov	b,#0xF1
      0007E1 A4               [48] 2747 	mul	ab
      0007E2 24r72            [12] 2748 	add	a,#_g_txMsgQueue
      0007E4 FE               [12] 2749 	mov	r6,a
      0007E5 74s03            [12] 2750 	mov	a,#(_g_txMsgQueue >> 8)
      0007E7 35 F0            [12] 2751 	addc	a,b
      0007E9 FF               [12] 2752 	mov	r7,a
      0007EA 8E 82            [24] 2753 	mov	dpl,r6
      0007EC 8F 83            [24] 2754 	mov	dph,r7
      0007EE E0               [24] 2755 	movx	a,@dptr
      0007EF 60 75            [24] 2756 	jz	00123$
                                   2757 ;	appFHSSNIC.c:504: sleepMillis(FHSS_TX_SLEEP_DELAY);
      0007F1 90 00 19         [24] 2758 	mov	dptr,#0x0019
      0007F4 12r00r00         [24] 2759 	lcall	_sleepMillis
                                   2760 ;	appFHSSNIC.c:505: transmit(&g_txMsgQueue[macdata.txMsgIdxDone][!(PKTCTRL0&1)], g_txMsgQueue[macdata.txMsgIdxDone][0], 0, 0);
      0007F7 90r00r12         [24] 2761 	mov	dptr,#(_macdata + 0x0012)
      0007FA E0               [24] 2762 	movx	a,@dptr
      0007FB 75 F0 F1         [24] 2763 	mov	b,#0xF1
      0007FE A4               [48] 2764 	mul	ab
      0007FF 24r72            [12] 2765 	add	a,#_g_txMsgQueue
      000801 FE               [12] 2766 	mov	r6,a
      000802 74s03            [12] 2767 	mov	a,#(_g_txMsgQueue >> 8)
      000804 35 F0            [12] 2768 	addc	a,b
      000806 FF               [12] 2769 	mov	r7,a
      000807 90 DF 04         [24] 2770 	mov	dptr,#_PKTCTRL0
      00080A E0               [24] 2771 	movx	a,@dptr
      00080B 54 01            [12] 2772 	anl	a,#0x01
      00080D FD               [12] 2773 	mov	r5,a
      00080E B4 01 00         [24] 2774 	cjne	a,#0x01,00175$
      000811                       2775 00175$:
      000811 E4               [12] 2776 	clr	a
      000812 33               [12] 2777 	rlc	a
      000813 2E               [12] 2778 	add	a,r6
      000814 FD               [12] 2779 	mov	r5,a
      000815 E4               [12] 2780 	clr	a
      000816 3F               [12] 2781 	addc	a,r7
      000817 FC               [12] 2782 	mov	r4,a
      000818 8E 82            [24] 2783 	mov	dpl,r6
      00081A 8F 83            [24] 2784 	mov	dph,r7
      00081C E0               [24] 2785 	movx	a,@dptr
      00081D 90r00r00         [24] 2786 	mov	dptr,#_transmit_PARM_2
      000820 F0               [24] 2787 	movx	@dptr,a
      000821 E4               [12] 2788 	clr	a
      000822 A3               [24] 2789 	inc	dptr
      000823 F0               [24] 2790 	movx	@dptr,a
      000824 90r00r00         [24] 2791 	mov	dptr,#_transmit_PARM_3
      000827 F0               [24] 2792 	movx	@dptr,a
      000828 A3               [24] 2793 	inc	dptr
      000829 F0               [24] 2794 	movx	@dptr,a
      00082A 90r00r00         [24] 2795 	mov	dptr,#_transmit_PARM_4
      00082D F0               [24] 2796 	movx	@dptr,a
      00082E A3               [24] 2797 	inc	dptr
      00082F F0               [24] 2798 	movx	@dptr,a
      000830 8D 82            [24] 2799 	mov	dpl,r5
      000832 8C 83            [24] 2800 	mov	dph,r4
      000834 12r00r00         [24] 2801 	lcall	_transmit
                                   2802 ;	appFHSSNIC.c:507: g_txMsgQueue[macdata.txMsgIdxDone][0] = 0;
      000837 90r00r12         [24] 2803 	mov	dptr,#(_macdata + 0x0012)
      00083A E0               [24] 2804 	movx	a,@dptr
      00083B 75 F0 F1         [24] 2805 	mov	b,#0xF1
      00083E A4               [48] 2806 	mul	ab
      00083F 24r72            [12] 2807 	add	a,#_g_txMsgQueue
      000841 F5 82            [12] 2808 	mov	dpl,a
      000843 74s03            [12] 2809 	mov	a,#(_g_txMsgQueue >> 8)
      000845 35 F0            [12] 2810 	addc	a,b
      000847 F5 83            [12] 2811 	mov	dph,a
      000849 E4               [12] 2812 	clr	a
      00084A F0               [24] 2813 	movx	@dptr,a
                                   2814 ;	appFHSSNIC.c:509: if (++macdata.txMsgIdxDone >= MAX_TX_MSGS)
      00084B 90r00r12         [24] 2815 	mov	dptr,#(_macdata + 0x0012)
      00084E E0               [24] 2816 	movx	a,@dptr
      00084F FF               [12] 2817 	mov	r7,a
      000850 0F               [12] 2818 	inc	r7
      000851 90r00r12         [24] 2819 	mov	dptr,#(_macdata + 0x0012)
      000854 EF               [12] 2820 	mov	a,r7
      000855 F0               [24] 2821 	movx	@dptr,a
      000856 BF 02 00         [24] 2822 	cjne	r7,#0x02,00176$
      000859                       2823 00176$:
      000859 40 05            [24] 2824 	jc	00118$
                                   2825 ;	appFHSSNIC.c:511: macdata.txMsgIdxDone = 0;
      00085B 90r00r12         [24] 2826 	mov	dptr,#(_macdata + 0x0012)
      00085E E4               [12] 2827 	clr	a
      00085F F0               [24] 2828 	movx	@dptr,a
      000860                       2829 00118$:
                                   2830 ;	appFHSSNIC.c:513: debug("FHSSxmit done");
      000860 90r00rE1         [24] 2831 	mov	dptr,#___str_6
      000863 12r00r00         [24] 2832 	lcall	_debug
                                   2833 ;	appFHSSNIC.c:516: }
      000866                       2834 00123$:
      000866 D0 D0            [24] 2835 	pop	psw
      000868 D0 00            [24] 2836 	pop	(0+0)
      00086A D0 01            [24] 2837 	pop	(0+1)
      00086C D0 02            [24] 2838 	pop	(0+2)
      00086E D0 03            [24] 2839 	pop	(0+3)
      000870 D0 04            [24] 2840 	pop	(0+4)
      000872 D0 05            [24] 2841 	pop	(0+5)
      000874 D0 06            [24] 2842 	pop	(0+6)
      000876 D0 07            [24] 2843 	pop	(0+7)
      000878 D0 83            [24] 2844 	pop	dph
      00087A D0 82            [24] 2845 	pop	dpl
      00087C D0 F0            [24] 2846 	pop	b
      00087E D0 E0            [24] 2847 	pop	acc
      000880 D0*00            [24] 2848 	pop	bits
      000882 32               [24] 2849 	reti
                                   2850 ;------------------------------------------------------------
                                   2851 ;Allocation info for local variables in function 't3IntHandler'
                                   2852 ;------------------------------------------------------------
                                   2853 ;	appFHSSNIC.c:519: void t3IntHandler(void) __interrupt T3_VECTOR
                                   2854 ;	-----------------------------------------
                                   2855 ;	 function t3IntHandler
                                   2856 ;	-----------------------------------------
      000883                       2857 _t3IntHandler:
                                   2858 ;	appFHSSNIC.c:523: }
      000883 32               [24] 2859 	reti
                                   2860 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2861 ;	eliminated unneeded push/pop psw
                                   2862 ;	eliminated unneeded push/pop dpl
                                   2863 ;	eliminated unneeded push/pop dph
                                   2864 ;	eliminated unneeded push/pop b
                                   2865 ;	eliminated unneeded push/pop acc
                                   2866 ;------------------------------------------------------------
                                   2867 ;Allocation info for local variables in function 'init_FHSS'
                                   2868 ;------------------------------------------------------------
                                   2869 ;	appFHSSNIC.c:525: void init_FHSS(void)
                                   2870 ;	-----------------------------------------
                                   2871 ;	 function init_FHSS
                                   2872 ;	-----------------------------------------
      000884                       2873 _init_FHSS:
                                   2874 ;	appFHSSNIC.c:527: macdata.mac_state = 0;
      000884 90r00r00         [24] 2875 	mov	dptr,#_macdata
      000887 E4               [12] 2876 	clr	a
      000888 F0               [24] 2877 	movx	@dptr,a
                                   2878 ;	appFHSSNIC.c:528: macdata.txMsgIdx = 0;
      000889 90r00r11         [24] 2879 	mov	dptr,#(_macdata + 0x0011)
      00088C F0               [24] 2880 	movx	@dptr,a
                                   2881 ;	appFHSSNIC.c:529: macdata.txMsgIdxDone = 0;
      00088D 90r00r12         [24] 2882 	mov	dptr,#(_macdata + 0x0012)
      000890 F0               [24] 2883 	movx	@dptr,a
                                   2884 ;	appFHSSNIC.c:530: macdata.curChanIdx = 0;
      000891 90r00r09         [24] 2885 	mov	dptr,#(_macdata + 0x0009)
      000894 F0               [24] 2886 	movx	@dptr,a
      000895 A3               [24] 2887 	inc	dptr
      000896 F0               [24] 2888 	movx	@dptr,a
                                   2889 ;	appFHSSNIC.c:531: macdata.NumChannels = DEFAULT_NUM_CHANS;
      000897 90r00r05         [24] 2890 	mov	dptr,#(_macdata + 0x0005)
      00089A 74 53            [12] 2891 	mov	a,#0x53
      00089C F0               [24] 2892 	movx	@dptr,a
      00089D E4               [12] 2893 	clr	a
      00089E A3               [24] 2894 	inc	dptr
      00089F F0               [24] 2895 	movx	@dptr,a
                                   2896 ;	appFHSSNIC.c:532: macdata.NumChannelHops = DEFAULT_NUM_CHANHOPS;
      0008A0 90r00r07         [24] 2897 	mov	dptr,#(_macdata + 0x0007)
      0008A3 74 53            [12] 2898 	mov	a,#0x53
      0008A5 F0               [24] 2899 	movx	@dptr,a
      0008A6 E4               [12] 2900 	clr	a
      0008A7 A3               [24] 2901 	inc	dptr
      0008A8 F0               [24] 2902 	movx	@dptr,a
                                   2903 ;	appFHSSNIC.c:533: macdata.tLastHop = 0;
      0008A9 90r00r0D         [24] 2904 	mov	dptr,#(_macdata + 0x000d)
      0008AC F0               [24] 2905 	movx	@dptr,a
      0008AD A3               [24] 2906 	inc	dptr
      0008AE F0               [24] 2907 	movx	@dptr,a
                                   2908 ;	appFHSSNIC.c:534: macdata.tLastStateChange = 0;
      0008AF 90r00r0B         [24] 2909 	mov	dptr,#(_macdata + 0x000b)
      0008B2 F0               [24] 2910 	movx	@dptr,a
      0008B3 A3               [24] 2911 	inc	dptr
      0008B4 F0               [24] 2912 	movx	@dptr,a
                                   2913 ;	appFHSSNIC.c:535: macdata.MAC_threshold = 6;
      0008B5 90r00r01         [24] 2914 	mov	dptr,#(_macdata + 0x0001)
      0008B8 74 06            [12] 2915 	mov	a,#0x06
      0008BA F0               [24] 2916 	movx	@dptr,a
      0008BB E4               [12] 2917 	clr	a
      0008BC A3               [24] 2918 	inc	dptr
      0008BD F0               [24] 2919 	movx	@dptr,a
                                   2920 ;	appFHSSNIC.c:536: macdata.MAC_timer = 0;
      0008BE 90r00r03         [24] 2921 	mov	dptr,#(_macdata + 0x0003)
      0008C1 F0               [24] 2922 	movx	@dptr,a
      0008C2 A3               [24] 2923 	inc	dptr
      0008C3 F0               [24] 2924 	movx	@dptr,a
                                   2925 ;	appFHSSNIC.c:537: macdata.desperatelySeeking = 0;
      0008C4 90r00r0F         [24] 2926 	mov	dptr,#(_macdata + 0x000f)
      0008C7 F0               [24] 2927 	movx	@dptr,a
      0008C8 A3               [24] 2928 	inc	dptr
      0008C9 F0               [24] 2929 	movx	@dptr,a
                                   2930 ;	appFHSSNIC.c:538: macdata.synched_chans = 0;
      0008CA 90r00r13         [24] 2931 	mov	dptr,#(_macdata + 0x0013)
      0008CD F0               [24] 2932 	movx	@dptr,a
      0008CE A3               [24] 2933 	inc	dptr
      0008CF F0               [24] 2934 	movx	@dptr,a
                                   2935 ;	appFHSSNIC.c:540: MAC_initChannels();
      0008D0 12r00r2F         [24] 2936 	lcall	_MAC_initChannels
                                   2937 ;	appFHSSNIC.c:542: macdata.mac_state = MAC_STATE_NONHOPPING;   // this is basic NIC functionality
      0008D3 90r00r00         [24] 2938 	mov	dptr,#_macdata
      0008D6 E4               [12] 2939 	clr	a
      0008D7 F0               [24] 2940 	movx	@dptr,a
                                   2941 ;	appFHSSNIC.c:552: T2PR = 0xdc;        
      0008D8 75 9D DC         [24] 2942 	mov	_T2PR,#0xDC
                                   2943 ;	appFHSSNIC.c:553: T2CTL |= T2CTL_TIP_64;  // 64, 128, 256, 1024
      0008DB 85 9E 9E         [24] 2944 	mov	_T2CTL,_T2CTL
                                   2945 ;	appFHSSNIC.c:587: T2CTL |= T2CTL_TIG;
      0008DE 43 9E 04         [24] 2946 	orl	_T2CTL,#0x04
                                   2947 ;	appFHSSNIC.c:593: T3CTL |= T3CTL_START;
      0008E1 43 CB 10         [24] 2948 	orl	_T3CTL,#0x10
      0008E4 22               [24] 2949 	ret
                                   2950 ;------------------------------------------------------------
                                   2951 ;Allocation info for local variables in function 'init_MAC'
                                   2952 ;------------------------------------------------------------
                                   2953 ;	appFHSSNIC.c:597: void init_MAC(void)
                                   2954 ;	-----------------------------------------
                                   2955 ;	 function init_MAC
                                   2956 ;	-----------------------------------------
      0008E5                       2957 _init_MAC:
                                   2958 ;	appFHSSNIC.c:599: init_FHSS();
      0008E5 02r08r84         [24] 2959 	ljmp	_init_FHSS
                                   2960 ;------------------------------------------------------------
                                   2961 ;Allocation info for local variables in function 'appMainInit'
                                   2962 ;------------------------------------------------------------
                                   2963 ;	appFHSSNIC.c:610: void appMainInit(void)
                                   2964 ;	-----------------------------------------
                                   2965 ;	 function appMainInit
                                   2966 ;	-----------------------------------------
      0008E8                       2967 _appMainInit:
                                   2968 ;	appFHSSNIC.c:612: registerCb_ep5( appHandleEP5 );
      0008E8 90r0Dr0C         [24] 2969 	mov	dptr,#_appHandleEP5
      0008EB 12r00r00         [24] 2970 	lcall	_registerCb_ep5
                                   2971 ;	appFHSSNIC.c:613: clock = 0;
      0008EE 90r00r00         [24] 2972 	mov	dptr,#_clock
      0008F1 E4               [12] 2973 	clr	a
      0008F2 F0               [24] 2974 	movx	@dptr,a
      0008F3 A3               [24] 2975 	inc	dptr
      0008F4 F0               [24] 2976 	movx	@dptr,a
      0008F5 A3               [24] 2977 	inc	dptr
      0008F6 F0               [24] 2978 	movx	@dptr,a
      0008F7 A3               [24] 2979 	inc	dptr
      0008F8 F0               [24] 2980 	movx	@dptr,a
                                   2981 ;	appFHSSNIC.c:615: init_MAC();
      0008F9 12r08rE5         [24] 2982 	lcall	_init_MAC
                                   2983 ;	appFHSSNIC.c:617: processbuffer = 0;
      0008FC 90r05r83         [24] 2984 	mov	dptr,#_processbuffer
      0008FF E4               [12] 2985 	clr	a
      000900 F0               [24] 2986 	movx	@dptr,a
                                   2987 ;	appFHSSNIC.c:618: chan_table = rfrxbuf[0];
      000901 90r05r84         [24] 2988 	mov	dptr,#_chan_table
      000904 74r00            [12] 2989 	mov	a,#_rfrxbuf
      000906 F0               [24] 2990 	movx	@dptr,a
      000907 74s00            [12] 2991 	mov	a,#(_rfrxbuf >> 8)
      000909 A3               [24] 2992 	inc	dptr
      00090A F0               [24] 2993 	movx	@dptr,a
      00090B 22               [24] 2994 	ret
                                   2995 ;------------------------------------------------------------
                                   2996 ;Allocation info for local variables in function 'appMainLoop'
                                   2997 ;------------------------------------------------------------
                                   2998 ;	appFHSSNIC.c:624: void appMainLoop(void)
                                   2999 ;	-----------------------------------------
                                   3000 ;	 function appMainLoop
                                   3001 ;	-----------------------------------------
      00090C                       3002 _appMainLoop:
                                   3003 ;	appFHSSNIC.c:627: switch  (macdata.mac_state)
      00090C 90r00r00         [24] 3004 	mov	dptr,#_macdata
      00090F E0               [24] 3005 	movx	a,@dptr
      000910 FF               [12] 3006 	mov	r7,a
      000911 BF 00 03         [24] 3007 	cjne	r7,#0x00,00271$
      000914 02r0Cr41         [24] 3008 	ljmp	00154$
      000917                       3009 00271$:
      000917 BF 01 03         [24] 3010 	cjne	r7,#0x01,00272$
      00091A 02r0Br12         [24] 3011 	ljmp	00139$
      00091D                       3012 00272$:
      00091D BF 02 03         [24] 3013 	cjne	r7,#0x02,00273$
      000920 02r0Ar10         [24] 3014 	ljmp	00129$
      000923                       3015 00273$:
      000923 BF 03 03         [24] 3016 	cjne	r7,#0x03,00274$
      000926 02r0Cr41         [24] 3017 	ljmp	00154$
      000929                       3018 00274$:
      000929 BF 04 03         [24] 3019 	cjne	r7,#0x04,00275$
      00092C 02r0Cr41         [24] 3020 	ljmp	00154$
      00092F                       3021 00275$:
      00092F BF 05 03         [24] 3022 	cjne	r7,#0x05,00276$
      000932 02r0Cr22         [24] 3023 	ljmp	00149$
      000935                       3024 00276$:
      000935 BF 06 01         [24] 3025 	cjne	r7,#0x06,00277$
      000938 22               [24] 3026 	ret
      000939                       3027 00277$:
      000939 BF 40 02         [24] 3028 	cjne	r7,#0x40,00278$
      00093C 80 06            [24] 3029 	sjmp	00106$
      00093E                       3030 00278$:
      00093E BF 41 02         [24] 3031 	cjne	r7,#0x41,00279$
      000941 80 42            [24] 3032 	sjmp	00109$
      000943                       3033 00279$:
      000943 22               [24] 3034 	ret
                                   3035 ;	appFHSSNIC.c:634: RFOFF;
      000944                       3036 00106$:
      000944 75 E1 04         [24] 3037 	mov	_RFST,#0x04
      000947                       3038 00103$:
      000947 90 DF 3B         [24] 3039 	mov	dptr,#_MARCSTATE
      00094A E0               [24] 3040 	movx	a,@dptr
      00094B FF               [12] 3041 	mov	r7,a
      00094C BF 01 F8         [24] 3042 	cjne	r7,#0x01,00103$
                                   3043 ;	appFHSSNIC.c:635: PKTCTRL1 =  0xE5;       // highest PQT, address check, append_status
      00094F 90 DF 03         [24] 3044 	mov	dptr,#_PKTCTRL1
      000952 74 E5            [12] 3045 	mov	a,#0xE5
      000954 F0               [24] 3046 	movx	@dptr,a
                                   3047 ;	appFHSSNIC.c:636: PKTCTRL0 =  0x04;       // crc enabled      ( we really don't want any packets coming our way :)
      000955 90 DF 04         [24] 3048 	mov	dptr,#_PKTCTRL0
      000958 74 04            [12] 3049 	mov	a,#0x04
      00095A F0               [24] 3050 	movx	@dptr,a
                                   3051 ;	appFHSSNIC.c:637: FSCTRL1 =   0x12;       // freq if
      00095B 90 DF 07         [24] 3052 	mov	dptr,#_FSCTRL1
      00095E 74 12            [12] 3053 	mov	a,#0x12
      000960 F0               [24] 3054 	movx	@dptr,a
                                   3055 ;	appFHSSNIC.c:638: FSCTRL0 =   0x00;
      000961 90 DF 08         [24] 3056 	mov	dptr,#_FSCTRL0
      000964 E4               [12] 3057 	clr	a
      000965 F0               [24] 3058 	movx	@dptr,a
                                   3059 ;	appFHSSNIC.c:639: MCSM0 =     0x10;       // autocal/no auto-cal....  hmmm...
      000966 90 DF 14         [24] 3060 	mov	dptr,#_MCSM0
      000969 74 10            [12] 3061 	mov	a,#0x10
      00096B F0               [24] 3062 	movx	@dptr,a
                                   3063 ;	appFHSSNIC.c:640: AGCCTRL2 |= AGCCTRL2_MAX_DVGA_GAIN;     // disable 3 highest gain settings
      00096C 90 DF 17         [24] 3064 	mov	dptr,#_AGCCTRL2
      00096F E0               [24] 3065 	movx	a,@dptr
      000970 FF               [12] 3066 	mov	r7,a
      000971 74 C0            [12] 3067 	mov	a,#0xC0
      000973 4F               [12] 3068 	orl	a,r7
      000974 F0               [24] 3069 	movx	@dptr,a
                                   3070 ;	appFHSSNIC.c:641: macdata.mac_state = MAC_STATE_SPECAN;
      000975 90r00r00         [24] 3071 	mov	dptr,#_macdata
      000978 74 41            [12] 3072 	mov	a,#0x41
      00097A F0               [24] 3073 	movx	@dptr,a
                                   3074 ;	appFHSSNIC.c:643: chan_table = rfrxbuf[0];
      00097B 90r05r84         [24] 3075 	mov	dptr,#_chan_table
      00097E 74r00            [12] 3076 	mov	a,#_rfrxbuf
      000980 F0               [24] 3077 	movx	@dptr,a
      000981 74s00            [12] 3078 	mov	a,#(_rfrxbuf >> 8)
      000983 A3               [24] 3079 	inc	dptr
      000984 F0               [24] 3080 	movx	@dptr,a
                                   3081 ;	appFHSSNIC.c:645: case MAC_STATE_SPECAN:
      000985                       3082 00109$:
                                   3083 ;	appFHSSNIC.c:646: for (processbuffer = 0; processbuffer < macdata.synched_chans; processbuffer++)
      000985 90r05r83         [24] 3084 	mov	dptr,#_processbuffer
      000988 E4               [12] 3085 	clr	a
      000989 F0               [24] 3086 	movx	@dptr,a
      00098A                       3087 00166$:
      00098A 90r00r13         [24] 3088 	mov	dptr,#(_macdata + 0x0013)
      00098D E0               [24] 3089 	movx	a,@dptr
      00098E FE               [12] 3090 	mov	r6,a
      00098F A3               [24] 3091 	inc	dptr
      000990 E0               [24] 3092 	movx	a,@dptr
      000991 FF               [12] 3093 	mov	r7,a
      000992 90r05r83         [24] 3094 	mov	dptr,#_processbuffer
      000995 E0               [24] 3095 	movx	a,@dptr
      000996 FD               [12] 3096 	mov	r5,a
      000997 FB               [12] 3097 	mov	r3,a
      000998 7C 00            [12] 3098 	mov	r4,#0x00
      00099A C3               [12] 3099 	clr	c
      00099B EB               [12] 3100 	mov	a,r3
      00099C 9E               [12] 3101 	subb	a,r6
      00099D EC               [12] 3102 	mov	a,r4
      00099E 9F               [12] 3103 	subb	a,r7
      00099F 50 45            [24] 3104 	jnc	00126$
                                   3105 ;	appFHSSNIC.c:649: CHANNR = processbuffer;        // may not be the fastest, but otherwise we have to store FSCAL data for each channel
      0009A1 90 DF 06         [24] 3106 	mov	dptr,#_CHANNR
      0009A4 ED               [12] 3107 	mov	a,r5
      0009A5 F0               [24] 3108 	movx	@dptr,a
                                   3109 ;	appFHSSNIC.c:650: RFOFF;
      0009A6 75 E1 04         [24] 3110 	mov	_RFST,#0x04
      0009A9                       3111 00110$:
      0009A9 90 DF 3B         [24] 3112 	mov	dptr,#_MARCSTATE
      0009AC E0               [24] 3113 	movx	a,@dptr
      0009AD FF               [12] 3114 	mov	r7,a
      0009AE BF 01 F8         [24] 3115 	cjne	r7,#0x01,00110$
                                   3116 ;	appFHSSNIC.c:651: RFRX;
      0009B1 75 E1 02         [24] 3117 	mov	_RFST,#0x02
      0009B4                       3118 00116$:
      0009B4 90 DF 3B         [24] 3119 	mov	dptr,#_MARCSTATE
      0009B7 E0               [24] 3120 	movx	a,@dptr
      0009B8 FF               [12] 3121 	mov	r7,a
      0009B9 BF 0D F8         [24] 3122 	cjne	r7,#0x0D,00116$
                                   3123 ;	appFHSSNIC.c:652: sleepMillis(2);
      0009BC 90 00 02         [24] 3124 	mov	dptr,#0x0002
      0009BF 12r00r00         [24] 3125 	lcall	_sleepMillis
                                   3126 ;	appFHSSNIC.c:655: chan_table[processbuffer] = (RSSI);
      0009C2 90r05r84         [24] 3127 	mov	dptr,#_chan_table
      0009C5 E0               [24] 3128 	movx	a,@dptr
      0009C6 FE               [12] 3129 	mov	r6,a
      0009C7 A3               [24] 3130 	inc	dptr
      0009C8 E0               [24] 3131 	movx	a,@dptr
      0009C9 FF               [12] 3132 	mov	r7,a
      0009CA 90r05r83         [24] 3133 	mov	dptr,#_processbuffer
      0009CD E0               [24] 3134 	movx	a,@dptr
      0009CE 2E               [12] 3135 	add	a,r6
      0009CF FE               [12] 3136 	mov	r6,a
      0009D0 E4               [12] 3137 	clr	a
      0009D1 3F               [12] 3138 	addc	a,r7
      0009D2 FF               [12] 3139 	mov	r7,a
      0009D3 90 DF 3A         [24] 3140 	mov	dptr,#_RSSI
      0009D6 E0               [24] 3141 	movx	a,@dptr
      0009D7 FD               [12] 3142 	mov	r5,a
      0009D8 8E 82            [24] 3143 	mov	dpl,r6
      0009DA 8F 83            [24] 3144 	mov	dph,r7
      0009DC F0               [24] 3145 	movx	@dptr,a
                                   3146 ;	appFHSSNIC.c:646: for (processbuffer = 0; processbuffer < macdata.synched_chans; processbuffer++)
      0009DD 90r05r83         [24] 3147 	mov	dptr,#_processbuffer
      0009E0 E0               [24] 3148 	movx	a,@dptr
      0009E1 24 01            [12] 3149 	add	a,#0x01
      0009E3 F0               [24] 3150 	movx	@dptr,a
                                   3151 ;	appFHSSNIC.c:659: RFOFF;
      0009E4 80 A4            [24] 3152 	sjmp	00166$
      0009E6                       3153 00126$:
      0009E6 75 E1 04         [24] 3154 	mov	_RFST,#0x04
      0009E9                       3155 00123$:
      0009E9 90 DF 3B         [24] 3156 	mov	dptr,#_MARCSTATE
      0009EC E0               [24] 3157 	movx	a,@dptr
      0009ED FF               [12] 3158 	mov	r7,a
      0009EE BF 01 F8         [24] 3159 	cjne	r7,#0x01,00123$
                                   3160 ;	appFHSSNIC.c:660: txdata( APP_SPECAN, SPECAN_QUEUE, (u8)macdata.synched_chans, (__xdata u8*)&chan_table[0] );
      0009F1 90r00r13         [24] 3161 	mov	dptr,#(_macdata + 0x0013)
      0009F4 E0               [24] 3162 	movx	a,@dptr
      0009F5 FE               [12] 3163 	mov	r6,a
      0009F6 A3               [24] 3164 	inc	dptr
      0009F7 E0               [24] 3165 	movx	a,@dptr
      0009F8 8E*00            [24] 3166 	mov	_txdata_PARM_3,r6
      0009FA 75*01 00         [24] 3167 	mov	(_txdata_PARM_3 + 1),#0x00
      0009FD 90r05r84         [24] 3168 	mov	dptr,#_chan_table
      000A00 E0               [24] 3169 	movx	a,@dptr
      000A01 F5*00            [12] 3170 	mov	_txdata_PARM_4,a
      000A03 A3               [24] 3171 	inc	dptr
      000A04 E0               [24] 3172 	movx	a,@dptr
      000A05 F5*01            [12] 3173 	mov	(_txdata_PARM_4 + 1),a
      000A07 75*00 01         [24] 3174 	mov	_txdata_PARM_2,#0x01
      000A0A 75 82 43         [24] 3175 	mov	dpl,#0x43
                                   3176 ;	appFHSSNIC.c:661: break;
      000A0D 02r00r00         [24] 3177 	ljmp	_txdata
                                   3178 ;	appFHSSNIC.c:663: case MAC_STATE_SYNCHING:
      000A10                       3179 00129$:
                                   3180 ;	appFHSSNIC.c:666: if (rfif)
      000A10 E5*00            [12] 3181 	mov	a,_rfif
      000A12 70 03            [24] 3182 	jnz	00289$
      000A14 02r0Br00         [24] 3183 	ljmp	00138$
      000A17                       3184 00289$:
                                   3185 ;	appFHSSNIC.c:668: lastCode[0] = 0xd;
      000A17 90r00r00         [24] 3186 	mov	dptr,#_lastCode
      000A1A 74 0D            [12] 3187 	mov	a,#0x0D
      000A1C F0               [24] 3188 	movx	@dptr,a
                                   3189 ;	appFHSSNIC.c:669: IEN2 &= ~IEN2_RFIE;   // FIXME: is this ok?
      000A1D AF 9A            [24] 3190 	mov	r7,_IEN2
      000A1F 74 FE            [12] 3191 	mov	a,#0xFE
      000A21 5F               [12] 3192 	anl	a,r7
      000A22 F5 9A            [12] 3193 	mov	_IEN2,a
                                   3194 ;	appFHSSNIC.c:671: if(rfif & RFIF_IRQ_DONE)
      000A24 E5*00            [12] 3195 	mov	a,_rfif
      000A26 20 E4 03         [24] 3196 	jb	acc.4,00290$
      000A29 02r0Br00         [24] 3197 	ljmp	00138$
      000A2C                       3198 00290$:
                                   3199 ;	appFHSSNIC.c:675: macdata.mac_state = MAC_STATE_SYNCHED;
      000A2C 90r00r00         [24] 3200 	mov	dptr,#_macdata
      000A2F 74 03            [12] 3201 	mov	a,#0x03
      000A31 F0               [24] 3202 	movx	@dptr,a
                                   3203 ;	appFHSSNIC.c:676: begin_hopping((u8)(rf_tLastRecv & 0xff));       // synching happens within
      000A32 90r00r00         [24] 3204 	mov	dptr,#_rf_tLastRecv
      000A35 E0               [24] 3205 	movx	a,@dptr
      000A36 FE               [12] 3206 	mov	r6,a
      000A37 A3               [24] 3207 	inc	dptr
      000A38 E0               [24] 3208 	movx	a,@dptr
      000A39 8E 82            [24] 3209 	mov	dpl,r6
      000A3B 12r00r81         [24] 3210 	lcall	_begin_hopping
                                   3211 ;	appFHSSNIC.c:678: debug("network packet(sync)");
      000A3E 90r00rEF         [24] 3212 	mov	dptr,#___str_7
      000A41 12r00r00         [24] 3213 	lcall	_debug
                                   3214 ;	appFHSSNIC.c:679: debughex16((u16)rf_tLastRecv);
      000A44 90r00r00         [24] 3215 	mov	dptr,#_rf_tLastRecv
      000A47 E0               [24] 3216 	movx	a,@dptr
      000A48 FE               [12] 3217 	mov	r6,a
      000A49 A3               [24] 3218 	inc	dptr
      000A4A E0               [24] 3219 	movx	a,@dptr
      000A4B FF               [12] 3220 	mov	r7,a
      000A4C 8E 82            [24] 3221 	mov	dpl,r6
      000A4E 8F 83            [24] 3222 	mov	dph,r7
      000A50 12r00r00         [24] 3223 	lcall	_debughex16
                                   3224 ;	appFHSSNIC.c:680: debug((__code u8*)&rfrxbuf[rfRxCurrentBuffer][0]);
      000A53 90r00r00         [24] 3225 	mov	dptr,#_rfRxCurrentBuffer
      000A56 E0               [24] 3226 	movx	a,@dptr
      000A57 25 E0            [12] 3227 	add	a,acc
      000A59 FE               [12] 3228 	mov	r6,a
      000A5A E4               [12] 3229 	clr	a
      000A5B 24r00            [12] 3230 	add	a,#_rfrxbuf
      000A5D FF               [12] 3231 	mov	r7,a
      000A5E EE               [12] 3232 	mov	a,r6
      000A5F 34s00            [12] 3233 	addc	a,#(_rfrxbuf >> 8)
      000A61 FE               [12] 3234 	mov	r6,a
      000A62 8F 82            [24] 3235 	mov	dpl,r7
      000A64 8E 83            [24] 3236 	mov	dph,r6
      000A66 12r00r00         [24] 3237 	lcall	_debug
                                   3238 ;	appFHSSNIC.c:683: processbuffer = !rfRxCurrentBuffer;
      000A69 90r00r00         [24] 3239 	mov	dptr,#_rfRxCurrentBuffer
      000A6C E0               [24] 3240 	movx	a,@dptr
      000A6D FF               [12] 3241 	mov	r7,a
      000A6E B4 01 00         [24] 3242 	cjne	a,#0x01,00291$
      000A71                       3243 00291$:
      000A71 E4               [12] 3244 	clr	a
      000A72 33               [12] 3245 	rlc	a
      000A73 FF               [12] 3246 	mov	r7,a
      000A74 90r05r83         [24] 3247 	mov	dptr,#_processbuffer
      000A77 F0               [24] 3248 	movx	@dptr,a
                                   3249 ;	appFHSSNIC.c:684: if(rfRxProcessed[processbuffer] == RX_UNPROCESSED)
      000A78 EF               [12] 3250 	mov	a,r7
      000A79 24r00            [12] 3251 	add	a,#_rfRxProcessed
      000A7B FD               [12] 3252 	mov	r5,a
      000A7C E4               [12] 3253 	clr	a
      000A7D 34s00            [12] 3254 	addc	a,#(_rfRxProcessed >> 8)
      000A7F FE               [12] 3255 	mov	r6,a
      000A80 8D 82            [24] 3256 	mov	dpl,r5
      000A82 8E 83            [24] 3257 	mov	dph,r6
      000A84 E0               [24] 3258 	movx	a,@dptr
      000A85 70 72            [24] 3259 	jnz	00134$
                                   3260 ;	appFHSSNIC.c:687: if (PKTCTRL0&1)     // variable length packets have a leading "length" byte, let's skip it
      000A87 90 DF 04         [24] 3261 	mov	dptr,#_PKTCTRL0
      000A8A E0               [24] 3262 	movx	a,@dptr
      000A8B FE               [12] 3263 	mov	r6,a
      000A8C 30 E0 37         [24] 3264 	jnb	acc.0,00131$
                                   3265 ;	appFHSSNIC.c:688: txdata(APP_NIC, NIC_RECV, (u8)rfrxbuf[processbuffer][0], (u8*)&rfrxbuf[processbuffer][1]);
      000A8F 8F 06            [24] 3266 	mov	ar6,r7
      000A91 EE               [12] 3267 	mov	a,r6
      000A92 2E               [12] 3268 	add	a,r6
      000A93 FD               [12] 3269 	mov	r5,a
      000A94 E4               [12] 3270 	clr	a
      000A95 24r00            [12] 3271 	add	a,#_rfrxbuf
      000A97 F5 82            [12] 3272 	mov	dpl,a
      000A99 ED               [12] 3273 	mov	a,r5
      000A9A 34s00            [12] 3274 	addc	a,#(_rfrxbuf >> 8)
      000A9C F5 83            [12] 3275 	mov	dph,a
      000A9E E0               [24] 3276 	movx	a,@dptr
      000A9F FE               [12] 3277 	mov	r6,a
      000AA0 8E*00            [24] 3278 	mov	_txdata_PARM_3,r6
      000AA2 75*01 00         [24] 3279 	mov	(_txdata_PARM_3 + 1),#0x00
      000AA5 8F 06            [24] 3280 	mov	ar6,r7
      000AA7 EE               [12] 3281 	mov	a,r6
      000AA8 2E               [12] 3282 	add	a,r6
      000AA9 FD               [12] 3283 	mov	r5,a
      000AAA E4               [12] 3284 	clr	a
      000AAB 24r00            [12] 3285 	add	a,#_rfrxbuf
      000AAD FE               [12] 3286 	mov	r6,a
      000AAE ED               [12] 3287 	mov	a,r5
      000AAF 34s00            [12] 3288 	addc	a,#(_rfrxbuf >> 8)
      000AB1 FD               [12] 3289 	mov	r5,a
      000AB2 74 01            [12] 3290 	mov	a,#0x01
      000AB4 2E               [12] 3291 	add	a,r6
      000AB5 F5*00            [12] 3292 	mov	_txdata_PARM_4,a
      000AB7 E4               [12] 3293 	clr	a
      000AB8 3D               [12] 3294 	addc	a,r5
      000AB9 F5*01            [12] 3295 	mov	(_txdata_PARM_4 + 1),a
      000ABB 75*00 01         [24] 3296 	mov	_txdata_PARM_2,#0x01
      000ABE 75 82 42         [24] 3297 	mov	dpl,#0x42
      000AC1 12r00r00         [24] 3298 	lcall	_txdata
      000AC4 80 22            [24] 3299 	sjmp	00132$
      000AC6                       3300 00131$:
                                   3301 ;	appFHSSNIC.c:690: txdata(APP_NIC, NIC_RECV, PKTLEN, (u8*)&rfrxbuf[processbuffer]);
      000AC6 90 DF 02         [24] 3302 	mov	dptr,#_PKTLEN
      000AC9 E0               [24] 3303 	movx	a,@dptr
      000ACA FE               [12] 3304 	mov	r6,a
      000ACB 8E*00            [24] 3305 	mov	_txdata_PARM_3,r6
      000ACD E4               [12] 3306 	clr	a
      000ACE F5*01            [12] 3307 	mov	(_txdata_PARM_3 + 1),a
      000AD0 EF               [12] 3308 	mov	a,r7
      000AD1 2F               [12] 3309 	add	a,r7
      000AD2 FE               [12] 3310 	mov	r6,a
      000AD3 E4               [12] 3311 	clr	a
      000AD4 24r00            [12] 3312 	add	a,#_rfrxbuf
      000AD6 FF               [12] 3313 	mov	r7,a
      000AD7 EE               [12] 3314 	mov	a,r6
      000AD8 34s00            [12] 3315 	addc	a,#(_rfrxbuf >> 8)
      000ADA FE               [12] 3316 	mov	r6,a
      000ADB 8F*00            [24] 3317 	mov	_txdata_PARM_4,r7
      000ADD 8E*01            [24] 3318 	mov	(_txdata_PARM_4 + 1),r6
      000ADF 75*00 01         [24] 3319 	mov	_txdata_PARM_2,#0x01
      000AE2 75 82 42         [24] 3320 	mov	dpl,#0x42
      000AE5 12r00r00         [24] 3321 	lcall	_txdata
      000AE8                       3322 00132$:
                                   3323 ;	appFHSSNIC.c:693: rfRxProcessed[processbuffer] = RX_PROCESSED;
      000AE8 90r05r83         [24] 3324 	mov	dptr,#_processbuffer
      000AEB E0               [24] 3325 	movx	a,@dptr
      000AEC FF               [12] 3326 	mov	r7,a
      000AED 24r00            [12] 3327 	add	a,#_rfRxProcessed
      000AEF F5 82            [12] 3328 	mov	dpl,a
      000AF1 E4               [12] 3329 	clr	a
      000AF2 34s00            [12] 3330 	addc	a,#(_rfRxProcessed >> 8)
      000AF4 F5 83            [12] 3331 	mov	dph,a
      000AF6 74 01            [12] 3332 	mov	a,#0x01
      000AF8 F0               [24] 3333 	movx	@dptr,a
      000AF9                       3334 00134$:
                                   3335 ;	appFHSSNIC.c:695: rfif &= ~RFIF_IRQ_DONE;
      000AF9 AF*00            [24] 3336 	mov	r7,_rfif
      000AFB 74 EF            [12] 3337 	mov	a,#0xEF
      000AFD 5F               [12] 3338 	anl	a,r7
      000AFE F5*00            [12] 3339 	mov	_rfif,a
      000B00                       3340 00138$:
                                   3341 ;	appFHSSNIC.c:699: __critical { rfif = 0; }
      000B00 D2*00            [12] 3342 	setb	_appMainLoop_sloc0_1_0
      000B02 10 AF 02         [24] 3343 	jbc	ea,00294$
      000B05 C2*00            [12] 3344 	clr	_appMainLoop_sloc0_1_0
      000B07                       3345 00294$:
      000B07 75*00 00         [24] 3346 	mov	_rfif,#0x00
      000B0A A2*00            [12] 3347 	mov	c,_appMainLoop_sloc0_1_0
      000B0C 92 AF            [24] 3348 	mov	ea,c
                                   3349 ;	appFHSSNIC.c:700: IEN2 |= IEN2_RFIE;
      000B0E 43 9A 01         [24] 3350 	orl	_IEN2,#0x01
                                   3351 ;	appFHSSNIC.c:701: break;
      000B11 22               [24] 3352 	ret
                                   3353 ;	appFHSSNIC.c:703: case MAC_STATE_DISCOVERY:
      000B12                       3354 00139$:
                                   3355 ;	appFHSSNIC.c:706: if (rfif)
      000B12 E5*00            [12] 3356 	mov	a,_rfif
      000B14 70 03            [24] 3357 	jnz	00295$
      000B16 02r0Cr10         [24] 3358 	ljmp	00148$
      000B19                       3359 00295$:
                                   3360 ;	appFHSSNIC.c:708: lastCode[0] = 0xd;
      000B19 90r00r00         [24] 3361 	mov	dptr,#_lastCode
      000B1C 74 0D            [12] 3362 	mov	a,#0x0D
      000B1E F0               [24] 3363 	movx	@dptr,a
                                   3364 ;	appFHSSNIC.c:709: IEN2 &= ~IEN2_RFIE;
      000B1F AF 9A            [24] 3365 	mov	r7,_IEN2
      000B21 74 FE            [12] 3366 	mov	a,#0xFE
      000B23 5F               [12] 3367 	anl	a,r7
      000B24 F5 9A            [12] 3368 	mov	_IEN2,a
                                   3369 ;	appFHSSNIC.c:711: if(rfif & RFIF_IRQ_DONE)
      000B26 E5*00            [12] 3370 	mov	a,_rfif
      000B28 20 E4 03         [24] 3371 	jb	acc.4,00296$
      000B2B 02r0Cr10         [24] 3372 	ljmp	00148$
      000B2E                       3373 00296$:
                                   3374 ;	appFHSSNIC.c:714: processbuffer = !rfRxCurrentBuffer;
      000B2E 90r00r00         [24] 3375 	mov	dptr,#_rfRxCurrentBuffer
      000B31 E0               [24] 3376 	movx	a,@dptr
      000B32 FF               [12] 3377 	mov	r7,a
      000B33 90r05r83         [24] 3378 	mov	dptr,#_processbuffer
      000B36 B4 01 00         [24] 3379 	cjne	a,#0x01,00297$
      000B39                       3380 00297$:
      000B39 E4               [12] 3381 	clr	a
      000B3A 33               [12] 3382 	rlc	a
      000B3B F0               [24] 3383 	movx	@dptr,a
                                   3384 ;	appFHSSNIC.c:715: debug("network packet(discovery)");
      000B3C 90r01r04         [24] 3385 	mov	dptr,#___str_8
      000B3F 12r00r00         [24] 3386 	lcall	_debug
                                   3387 ;	appFHSSNIC.c:716: debughex16((u16)rfrxbuf[processbuffer]);
      000B42 90r05r83         [24] 3388 	mov	dptr,#_processbuffer
      000B45 E0               [24] 3389 	movx	a,@dptr
      000B46 25 E0            [12] 3390 	add	a,acc
      000B48 FE               [12] 3391 	mov	r6,a
      000B49 E4               [12] 3392 	clr	a
      000B4A 24r00            [12] 3393 	add	a,#_rfrxbuf
      000B4C FF               [12] 3394 	mov	r7,a
      000B4D EE               [12] 3395 	mov	a,r6
      000B4E 34s00            [12] 3396 	addc	a,#(_rfrxbuf >> 8)
      000B50 FE               [12] 3397 	mov	r6,a
      000B51 8F 82            [24] 3398 	mov	dpl,r7
      000B53 8E 83            [24] 3399 	mov	dph,r6
      000B55 12r00r00         [24] 3400 	lcall	_debughex16
                                   3401 ;	appFHSSNIC.c:717: debug((__code u8*)&rfrxbuf[processbuffer][0]);
      000B58 90r05r83         [24] 3402 	mov	dptr,#_processbuffer
      000B5B E0               [24] 3403 	movx	a,@dptr
      000B5C 25 E0            [12] 3404 	add	a,acc
      000B5E FE               [12] 3405 	mov	r6,a
      000B5F E4               [12] 3406 	clr	a
      000B60 24r00            [12] 3407 	add	a,#_rfrxbuf
      000B62 FF               [12] 3408 	mov	r7,a
      000B63 EE               [12] 3409 	mov	a,r6
      000B64 34s00            [12] 3410 	addc	a,#(_rfrxbuf >> 8)
      000B66 FE               [12] 3411 	mov	r6,a
      000B67 8F 82            [24] 3412 	mov	dpl,r7
      000B69 8E 83            [24] 3413 	mov	dph,r6
      000B6B 12r00r00         [24] 3414 	lcall	_debug
                                   3415 ;	appFHSSNIC.c:720: processbuffer = !rfRxCurrentBuffer;
      000B6E 90r00r00         [24] 3416 	mov	dptr,#_rfRxCurrentBuffer
      000B71 E0               [24] 3417 	movx	a,@dptr
      000B72 FF               [12] 3418 	mov	r7,a
      000B73 B4 01 00         [24] 3419 	cjne	a,#0x01,00298$
      000B76                       3420 00298$:
      000B76 E4               [12] 3421 	clr	a
      000B77 33               [12] 3422 	rlc	a
      000B78 FF               [12] 3423 	mov	r7,a
      000B79 90r05r83         [24] 3424 	mov	dptr,#_processbuffer
      000B7C F0               [24] 3425 	movx	@dptr,a
                                   3426 ;	appFHSSNIC.c:721: if(rfRxProcessed[processbuffer] == RX_UNPROCESSED)
      000B7D EF               [12] 3427 	mov	a,r7
      000B7E 24r00            [12] 3428 	add	a,#_rfRxProcessed
      000B80 FD               [12] 3429 	mov	r5,a
      000B81 E4               [12] 3430 	clr	a
      000B82 34s00            [12] 3431 	addc	a,#(_rfRxProcessed >> 8)
      000B84 FE               [12] 3432 	mov	r6,a
      000B85 8D 82            [24] 3433 	mov	dpl,r5
      000B87 8E 83            [24] 3434 	mov	dph,r6
      000B89 E0               [24] 3435 	movx	a,@dptr
      000B8A 70 72            [24] 3436 	jnz	00144$
                                   3437 ;	appFHSSNIC.c:724: if (PKTCTRL0&1)     // variable length packets have a leading "length" byte, let's skip it
      000B8C 90 DF 04         [24] 3438 	mov	dptr,#_PKTCTRL0
      000B8F E0               [24] 3439 	movx	a,@dptr
      000B90 FE               [12] 3440 	mov	r6,a
      000B91 30 E0 37         [24] 3441 	jnb	acc.0,00141$
                                   3442 ;	appFHSSNIC.c:725: txdata(APP_NIC, NIC_RECV, (u8)rfrxbuf[processbuffer][0], (u8*)&rfrxbuf[processbuffer][1]);
      000B94 8F 06            [24] 3443 	mov	ar6,r7
      000B96 EE               [12] 3444 	mov	a,r6
      000B97 2E               [12] 3445 	add	a,r6
      000B98 FD               [12] 3446 	mov	r5,a
      000B99 E4               [12] 3447 	clr	a
      000B9A 24r00            [12] 3448 	add	a,#_rfrxbuf
      000B9C F5 82            [12] 3449 	mov	dpl,a
      000B9E ED               [12] 3450 	mov	a,r5
      000B9F 34s00            [12] 3451 	addc	a,#(_rfrxbuf >> 8)
      000BA1 F5 83            [12] 3452 	mov	dph,a
      000BA3 E0               [24] 3453 	movx	a,@dptr
      000BA4 FE               [12] 3454 	mov	r6,a
      000BA5 8E*00            [24] 3455 	mov	_txdata_PARM_3,r6
      000BA7 75*01 00         [24] 3456 	mov	(_txdata_PARM_3 + 1),#0x00
      000BAA 8F 06            [24] 3457 	mov	ar6,r7
      000BAC EE               [12] 3458 	mov	a,r6
      000BAD 2E               [12] 3459 	add	a,r6
      000BAE FD               [12] 3460 	mov	r5,a
      000BAF E4               [12] 3461 	clr	a
      000BB0 24r00            [12] 3462 	add	a,#_rfrxbuf
      000BB2 FE               [12] 3463 	mov	r6,a
      000BB3 ED               [12] 3464 	mov	a,r5
      000BB4 34s00            [12] 3465 	addc	a,#(_rfrxbuf >> 8)
      000BB6 FD               [12] 3466 	mov	r5,a
      000BB7 74 01            [12] 3467 	mov	a,#0x01
      000BB9 2E               [12] 3468 	add	a,r6
      000BBA F5*00            [12] 3469 	mov	_txdata_PARM_4,a
      000BBC E4               [12] 3470 	clr	a
      000BBD 3D               [12] 3471 	addc	a,r5
      000BBE F5*01            [12] 3472 	mov	(_txdata_PARM_4 + 1),a
      000BC0 75*00 01         [24] 3473 	mov	_txdata_PARM_2,#0x01
      000BC3 75 82 42         [24] 3474 	mov	dpl,#0x42
      000BC6 12r00r00         [24] 3475 	lcall	_txdata
      000BC9 80 22            [24] 3476 	sjmp	00142$
      000BCB                       3477 00141$:
                                   3478 ;	appFHSSNIC.c:727: txdata(APP_NIC, NIC_RECV, PKTLEN, (u8*)&rfrxbuf[processbuffer]);
      000BCB 90 DF 02         [24] 3479 	mov	dptr,#_PKTLEN
      000BCE E0               [24] 3480 	movx	a,@dptr
      000BCF FE               [12] 3481 	mov	r6,a
      000BD0 8E*00            [24] 3482 	mov	_txdata_PARM_3,r6
      000BD2 E4               [12] 3483 	clr	a
      000BD3 F5*01            [12] 3484 	mov	(_txdata_PARM_3 + 1),a
      000BD5 EF               [12] 3485 	mov	a,r7
      000BD6 2F               [12] 3486 	add	a,r7
      000BD7 FE               [12] 3487 	mov	r6,a
      000BD8 E4               [12] 3488 	clr	a
      000BD9 24r00            [12] 3489 	add	a,#_rfrxbuf
      000BDB FF               [12] 3490 	mov	r7,a
      000BDC EE               [12] 3491 	mov	a,r6
      000BDD 34s00            [12] 3492 	addc	a,#(_rfrxbuf >> 8)
      000BDF FE               [12] 3493 	mov	r6,a
      000BE0 8F*00            [24] 3494 	mov	_txdata_PARM_4,r7
      000BE2 8E*01            [24] 3495 	mov	(_txdata_PARM_4 + 1),r6
      000BE4 75*00 01         [24] 3496 	mov	_txdata_PARM_2,#0x01
      000BE7 75 82 42         [24] 3497 	mov	dpl,#0x42
      000BEA 12r00r00         [24] 3498 	lcall	_txdata
      000BED                       3499 00142$:
                                   3500 ;	appFHSSNIC.c:730: rfRxProcessed[processbuffer] = RX_PROCESSED;
      000BED 90r05r83         [24] 3501 	mov	dptr,#_processbuffer
      000BF0 E0               [24] 3502 	movx	a,@dptr
      000BF1 FF               [12] 3503 	mov	r7,a
      000BF2 24r00            [12] 3504 	add	a,#_rfRxProcessed
      000BF4 F5 82            [12] 3505 	mov	dpl,a
      000BF6 E4               [12] 3506 	clr	a
      000BF7 34s00            [12] 3507 	addc	a,#(_rfRxProcessed >> 8)
      000BF9 F5 83            [12] 3508 	mov	dph,a
      000BFB 74 01            [12] 3509 	mov	a,#0x01
      000BFD F0               [24] 3510 	movx	@dptr,a
      000BFE                       3511 00144$:
                                   3512 ;	appFHSSNIC.c:732: __critical { rfif &= ~RFIF_IRQ_DONE; }
      000BFE D2*00            [12] 3513 	setb	_appMainLoop_sloc0_1_0
      000C00 10 AF 02         [24] 3514 	jbc	ea,00301$
      000C03 C2*00            [12] 3515 	clr	_appMainLoop_sloc0_1_0
      000C05                       3516 00301$:
      000C05 AF*00            [24] 3517 	mov	r7,_rfif
      000C07 74 EF            [12] 3518 	mov	a,#0xEF
      000C09 5F               [12] 3519 	anl	a,r7
      000C0A F5*00            [12] 3520 	mov	_rfif,a
      000C0C A2*00            [12] 3521 	mov	c,_appMainLoop_sloc0_1_0
      000C0E 92 AF            [24] 3522 	mov	ea,c
      000C10                       3523 00148$:
                                   3524 ;	appFHSSNIC.c:736: __critical{ rfif = 0; }
      000C10 D2*00            [12] 3525 	setb	_appMainLoop_sloc0_1_0
      000C12 10 AF 02         [24] 3526 	jbc	ea,00302$
      000C15 C2*00            [12] 3527 	clr	_appMainLoop_sloc0_1_0
      000C17                       3528 00302$:
      000C17 75*00 00         [24] 3529 	mov	_rfif,#0x00
      000C1A A2*00            [12] 3530 	mov	c,_appMainLoop_sloc0_1_0
      000C1C 92 AF            [24] 3531 	mov	ea,c
                                   3532 ;	appFHSSNIC.c:737: IEN2 |= IEN2_RFIE;
      000C1E 43 9A 01         [24] 3533 	orl	_IEN2,#0x01
                                   3534 ;	appFHSSNIC.c:738: break;
      000C21 22               [24] 3535 	ret
                                   3536 ;	appFHSSNIC.c:740: case MAC_STATE_SYNCINGMASTER:
      000C22                       3537 00149$:
                                   3538 ;	appFHSSNIC.c:742: if (macdata.synched_chans >= macdata.NumChannelHops)
      000C22 90r00r13         [24] 3539 	mov	dptr,#(_macdata + 0x0013)
      000C25 E0               [24] 3540 	movx	a,@dptr
      000C26 FE               [12] 3541 	mov	r6,a
      000C27 A3               [24] 3542 	inc	dptr
      000C28 E0               [24] 3543 	movx	a,@dptr
      000C29 FF               [12] 3544 	mov	r7,a
      000C2A 90r00r07         [24] 3545 	mov	dptr,#(_macdata + 0x0007)
      000C2D E0               [24] 3546 	movx	a,@dptr
      000C2E FC               [12] 3547 	mov	r4,a
      000C2F A3               [24] 3548 	inc	dptr
      000C30 E0               [24] 3549 	movx	a,@dptr
      000C31 FD               [12] 3550 	mov	r5,a
      000C32 C3               [12] 3551 	clr	c
      000C33 EE               [12] 3552 	mov	a,r6
      000C34 9C               [12] 3553 	subb	a,r4
      000C35 EF               [12] 3554 	mov	a,r7
      000C36 9D               [12] 3555 	subb	a,r5
      000C37 50 01            [24] 3556 	jnc	00303$
      000C39 22               [24] 3557 	ret
      000C3A                       3558 00303$:
                                   3559 ;	appFHSSNIC.c:744: macdata.mac_state = MAC_STATE_SYNC_MASTER;
      000C3A 90r00r00         [24] 3560 	mov	dptr,#_macdata
      000C3D 74 04            [12] 3561 	mov	a,#0x04
      000C3F F0               [24] 3562 	movx	@dptr,a
                                   3563 ;	appFHSSNIC.c:746: break;
      000C40 22               [24] 3564 	ret
                                   3565 ;	appFHSSNIC.c:750: case MAC_STATE_NONHOPPING:
      000C41                       3566 00154$:
                                   3567 ;	appFHSSNIC.c:752: if (rfif)
      000C41 E5*00            [12] 3568 	mov	a,_rfif
      000C43 70 01            [24] 3569 	jnz	00304$
      000C45 22               [24] 3570 	ret
      000C46                       3571 00304$:
                                   3572 ;	appFHSSNIC.c:755: lastCode[0] = 0xd;
      000C46 90r00r00         [24] 3573 	mov	dptr,#_lastCode
      000C49 74 0D            [12] 3574 	mov	a,#0x0D
      000C4B F0               [24] 3575 	movx	@dptr,a
                                   3576 ;	appFHSSNIC.c:757: if(rfif & (RFIF_IRQ_DONE | RFIF_IRQ_TIMEOUT) )
      000C4C E5*00            [12] 3577 	mov	a,_rfif
      000C4E 54 30            [12] 3578 	anl	a,#0x30
      000C50 70 01            [24] 3579 	jnz	00305$
      000C52 22               [24] 3580 	ret
      000C53                       3581 00305$:
                                   3582 ;	appFHSSNIC.c:759: processbuffer = !rfRxCurrentBuffer;
      000C53 90r00r00         [24] 3583 	mov	dptr,#_rfRxCurrentBuffer
      000C56 E0               [24] 3584 	movx	a,@dptr
      000C57 FF               [12] 3585 	mov	r7,a
      000C58 B4 01 00         [24] 3586 	cjne	a,#0x01,00306$
      000C5B                       3587 00306$:
      000C5B E4               [12] 3588 	clr	a
      000C5C 33               [12] 3589 	rlc	a
      000C5D FF               [12] 3590 	mov	r7,a
      000C5E 90r05r83         [24] 3591 	mov	dptr,#_processbuffer
      000C61 F0               [24] 3592 	movx	@dptr,a
                                   3593 ;	appFHSSNIC.c:760: if(rfRxProcessed[processbuffer] == RX_UNPROCESSED)
      000C62 EF               [12] 3594 	mov	a,r7
      000C63 24r00            [12] 3595 	add	a,#_rfRxProcessed
      000C65 FD               [12] 3596 	mov	r5,a
      000C66 E4               [12] 3597 	clr	a
      000C67 34s00            [12] 3598 	addc	a,#(_rfRxProcessed >> 8)
      000C69 FE               [12] 3599 	mov	r6,a
      000C6A 8D 82            [24] 3600 	mov	dpl,r5
      000C6C 8E 83            [24] 3601 	mov	dph,r6
      000C6E E0               [24] 3602 	movx	a,@dptr
      000C6F 60 03            [24] 3603 	jz	00307$
      000C71 02r0CrF9         [24] 3604 	ljmp	00159$
      000C74                       3605 00307$:
                                   3606 ;	appFHSSNIC.c:763: if (PKTCTRL0&1)     // variable length packets have a leading "length" byte, let's skip it
      000C74 90 DF 04         [24] 3607 	mov	dptr,#_PKTCTRL0
      000C77 E0               [24] 3608 	movx	a,@dptr
      000C78 FE               [12] 3609 	mov	r6,a
      000C79 30 E0 37         [24] 3610 	jnb	acc.0,00156$
                                   3611 ;	appFHSSNIC.c:765: txdata(APP_NIC, NIC_RECV, (u8)rfrxbuf[processbuffer][0], (u8*)&rfrxbuf[processbuffer][1]);
      000C7C 8F 06            [24] 3612 	mov	ar6,r7
      000C7E EE               [12] 3613 	mov	a,r6
      000C7F 2E               [12] 3614 	add	a,r6
      000C80 FD               [12] 3615 	mov	r5,a
      000C81 E4               [12] 3616 	clr	a
      000C82 24r00            [12] 3617 	add	a,#_rfrxbuf
      000C84 F5 82            [12] 3618 	mov	dpl,a
      000C86 ED               [12] 3619 	mov	a,r5
      000C87 34s00            [12] 3620 	addc	a,#(_rfrxbuf >> 8)
      000C89 F5 83            [12] 3621 	mov	dph,a
      000C8B E0               [24] 3622 	movx	a,@dptr
      000C8C FE               [12] 3623 	mov	r6,a
      000C8D 8E*00            [24] 3624 	mov	_txdata_PARM_3,r6
      000C8F 75*01 00         [24] 3625 	mov	(_txdata_PARM_3 + 1),#0x00
      000C92 8F 06            [24] 3626 	mov	ar6,r7
      000C94 EE               [12] 3627 	mov	a,r6
      000C95 2E               [12] 3628 	add	a,r6
      000C96 FD               [12] 3629 	mov	r5,a
      000C97 E4               [12] 3630 	clr	a
      000C98 24r00            [12] 3631 	add	a,#_rfrxbuf
      000C9A FE               [12] 3632 	mov	r6,a
      000C9B ED               [12] 3633 	mov	a,r5
      000C9C 34s00            [12] 3634 	addc	a,#(_rfrxbuf >> 8)
      000C9E FD               [12] 3635 	mov	r5,a
      000C9F 74 01            [12] 3636 	mov	a,#0x01
      000CA1 2E               [12] 3637 	add	a,r6
      000CA2 F5*00            [12] 3638 	mov	_txdata_PARM_4,a
      000CA4 E4               [12] 3639 	clr	a
      000CA5 3D               [12] 3640 	addc	a,r5
      000CA6 F5*01            [12] 3641 	mov	(_txdata_PARM_4 + 1),a
      000CA8 75*00 01         [24] 3642 	mov	_txdata_PARM_2,#0x01
      000CAB 75 82 42         [24] 3643 	mov	dpl,#0x42
      000CAE 12r00r00         [24] 3644 	lcall	_txdata
      000CB1 80 35            [24] 3645 	sjmp	00157$
      000CB3                       3646 00156$:
                                   3647 ;	appFHSSNIC.c:767: txdata(APP_NIC, NIC_RECV, rfRxInfMode ? rfRxLargeLen : PKTLEN, (u8*)&rfrxbuf[processbuffer]);
      000CB3 90r00r00         [24] 3648 	mov	dptr,#_rfRxInfMode
      000CB6 E0               [24] 3649 	movx	a,@dptr
      000CB7 E0               [24] 3650 	movx	a,@dptr
      000CB8 60 0A            [24] 3651 	jz	00170$
      000CBA 90r00r00         [24] 3652 	mov	dptr,#_rfRxLargeLen
      000CBD E0               [24] 3653 	movx	a,@dptr
      000CBE FD               [12] 3654 	mov	r5,a
      000CBF A3               [24] 3655 	inc	dptr
      000CC0 E0               [24] 3656 	movx	a,@dptr
      000CC1 FE               [12] 3657 	mov	r6,a
      000CC2 80 08            [24] 3658 	sjmp	00171$
      000CC4                       3659 00170$:
      000CC4 90 DF 02         [24] 3660 	mov	dptr,#_PKTLEN
      000CC7 E0               [24] 3661 	movx	a,@dptr
      000CC8 FC               [12] 3662 	mov	r4,a
      000CC9 FD               [12] 3663 	mov	r5,a
      000CCA 7E 00            [12] 3664 	mov	r6,#0x00
      000CCC                       3665 00171$:
      000CCC EF               [12] 3666 	mov	a,r7
      000CCD 2F               [12] 3667 	add	a,r7
      000CCE FC               [12] 3668 	mov	r4,a
      000CCF E4               [12] 3669 	clr	a
      000CD0 24r00            [12] 3670 	add	a,#_rfrxbuf
      000CD2 FF               [12] 3671 	mov	r7,a
      000CD3 EC               [12] 3672 	mov	a,r4
      000CD4 34s00            [12] 3673 	addc	a,#(_rfrxbuf >> 8)
      000CD6 FC               [12] 3674 	mov	r4,a
      000CD7 8F*00            [24] 3675 	mov	_txdata_PARM_4,r7
      000CD9 8C*01            [24] 3676 	mov	(_txdata_PARM_4 + 1),r4
      000CDB 75*00 01         [24] 3677 	mov	_txdata_PARM_2,#0x01
      000CDE 8D*00            [24] 3678 	mov	_txdata_PARM_3,r5
      000CE0 8E*01            [24] 3679 	mov	(_txdata_PARM_3 + 1),r6
      000CE2 75 82 42         [24] 3680 	mov	dpl,#0x42
      000CE5 12r00r00         [24] 3681 	lcall	_txdata
      000CE8                       3682 00157$:
                                   3683 ;	appFHSSNIC.c:771: rfRxProcessed[processbuffer] = RX_PROCESSED;
      000CE8 90r05r83         [24] 3684 	mov	dptr,#_processbuffer
      000CEB E0               [24] 3685 	movx	a,@dptr
      000CEC FF               [12] 3686 	mov	r7,a
      000CED 24r00            [12] 3687 	add	a,#_rfRxProcessed
      000CEF F5 82            [12] 3688 	mov	dpl,a
      000CF1 E4               [12] 3689 	clr	a
      000CF2 34s00            [12] 3690 	addc	a,#(_rfRxProcessed >> 8)
      000CF4 F5 83            [12] 3691 	mov	dph,a
      000CF6 74 01            [12] 3692 	mov	a,#0x01
      000CF8 F0               [24] 3693 	movx	@dptr,a
      000CF9                       3694 00159$:
                                   3695 ;	appFHSSNIC.c:773: __critical { rfif &= ~( RFIF_IRQ_DONE | RFIF_IRQ_TIMEOUT );  }          // FIXME: rfif is way too easily tossed aside here...
      000CF9 D2*00            [12] 3696 	setb	_appMainLoop_sloc0_1_0
      000CFB 10 AF 02         [24] 3697 	jbc	ea,00310$
      000CFE C2*00            [12] 3698 	clr	_appMainLoop_sloc0_1_0
      000D00                       3699 00310$:
      000D00 AF*00            [24] 3700 	mov	r7,_rfif
      000D02 74 CF            [12] 3701 	mov	a,#0xCF
      000D04 5F               [12] 3702 	anl	a,r7
      000D05 F5*00            [12] 3703 	mov	_rfif,a
      000D07 A2*00            [12] 3704 	mov	c,_appMainLoop_sloc0_1_0
      000D09 92 AF            [24] 3705 	mov	ea,c
                                   3706 ;	appFHSSNIC.c:779: }
      000D0B 22               [24] 3707 	ret
                                   3708 ;------------------------------------------------------------
                                   3709 ;Allocation info for local variables in function 'appHandleEP5'
                                   3710 ;------------------------------------------------------------
                                   3711 ;	appFHSSNIC.c:795: int appHandleEP5()
                                   3712 ;	-----------------------------------------
                                   3713 ;	 function appHandleEP5
                                   3714 ;	-----------------------------------------
      000D0C                       3715 _appHandleEP5:
                                   3716 ;	appFHSSNIC.c:1131: return 0;
      000D0C 90 00 00         [24] 3717 	mov	dptr,#0x0000
      000D0F 22               [24] 3718 	ret
                                   3719 ;------------------------------------------------------------
                                   3720 ;Allocation info for local variables in function 'appHandleEP0OUTdone'
                                   3721 ;------------------------------------------------------------
                                   3722 ;	appFHSSNIC.c:1135: void appHandleEP0OUTdone(void)
                                   3723 ;	-----------------------------------------
                                   3724 ;	 function appHandleEP0OUTdone
                                   3725 ;	-----------------------------------------
      000D10                       3726 _appHandleEP0OUTdone:
                                   3727 ;	appFHSSNIC.c:1137: }
      000D10 22               [24] 3728 	ret
                                   3729 ;------------------------------------------------------------
                                   3730 ;Allocation info for local variables in function 'appHandleEP0OUT'
                                   3731 ;------------------------------------------------------------
                                   3732 ;	appFHSSNIC.c:1140: void appHandleEP0OUT(void)
                                   3733 ;	-----------------------------------------
                                   3734 ;	 function appHandleEP0OUT
                                   3735 ;	-----------------------------------------
      000D11                       3736 _appHandleEP0OUT:
                                   3737 ;	appFHSSNIC.c:1170: }
      000D11 22               [24] 3738 	ret
                                   3739 ;------------------------------------------------------------
                                   3740 ;Allocation info for local variables in function 'appHandleEP0'
                                   3741 ;------------------------------------------------------------
                                   3742 ;pReq                      Allocated to registers 
                                   3743 ;------------------------------------------------------------
                                   3744 ;	appFHSSNIC.c:1177: int appHandleEP0(__xdata USB_Setup_Header* pReq)
                                   3745 ;	-----------------------------------------
                                   3746 ;	 function appHandleEP0
                                   3747 ;	-----------------------------------------
      000D12                       3748 _appHandleEP0:
                                   3749 ;	appFHSSNIC.c:1213: return 0;
      000D12 90 00 00         [24] 3750 	mov	dptr,#0x0000
      000D15 22               [24] 3751 	ret
                                   3752 ;------------------------------------------------------------
                                   3753 ;Allocation info for local variables in function 'appInitRf'
                                   3754 ;------------------------------------------------------------
                                   3755 ;	appFHSSNIC.c:1223: void appInitRf(void)
                                   3756 ;	-----------------------------------------
                                   3757 ;	 function appInitRf
                                   3758 ;	-----------------------------------------
      000D16                       3759 _appInitRf:
                                   3760 ;	appFHSSNIC.c:1229: IOCFG2      = 0x00;
      000D16 90 DF 2F         [24] 3761 	mov	dptr,#_IOCFG2
      000D19 E4               [12] 3762 	clr	a
      000D1A F0               [24] 3763 	movx	@dptr,a
                                   3764 ;	appFHSSNIC.c:1230: IOCFG1      = 0x00;
      000D1B 90 DF 30         [24] 3765 	mov	dptr,#_IOCFG1
      000D1E F0               [24] 3766 	movx	@dptr,a
                                   3767 ;	appFHSSNIC.c:1231: IOCFG0      = 0x00;
      000D1F 90 DF 31         [24] 3768 	mov	dptr,#_IOCFG0
      000D22 F0               [24] 3769 	movx	@dptr,a
                                   3770 ;	appFHSSNIC.c:1232: SYNC1       = 0x0c;
      000D23 90 DF 00         [24] 3771 	mov	dptr,#_SYNC1
      000D26 74 0C            [12] 3772 	mov	a,#0x0C
      000D28 F0               [24] 3773 	movx	@dptr,a
                                   3774 ;	appFHSSNIC.c:1233: SYNC0       = 0x4e;
      000D29 90 DF 01         [24] 3775 	mov	dptr,#_SYNC0
      000D2C 74 4E            [12] 3776 	mov	a,#0x4E
      000D2E F0               [24] 3777 	movx	@dptr,a
                                   3778 ;	appFHSSNIC.c:1234: PKTLEN      = 0xff;
      000D2F 90 DF 02         [24] 3779 	mov	dptr,#_PKTLEN
      000D32 74 FF            [12] 3780 	mov	a,#0xFF
      000D34 F0               [24] 3781 	movx	@dptr,a
                                   3782 ;	appFHSSNIC.c:1235: PKTCTRL1    = 0x40; // PQT threshold  - was 0x00
      000D35 90 DF 03         [24] 3783 	mov	dptr,#_PKTCTRL1
      000D38 74 40            [12] 3784 	mov	a,#0x40
      000D3A F0               [24] 3785 	movx	@dptr,a
                                   3786 ;	appFHSSNIC.c:1236: PKTCTRL0    = 0x00; // FLEN.  for VLEN use |1 (ie.  FLEN=00, VLEN=01)
      000D3B 90 DF 04         [24] 3787 	mov	dptr,#_PKTCTRL0
      000D3E E4               [12] 3788 	clr	a
      000D3F F0               [24] 3789 	movx	@dptr,a
                                   3790 ;	appFHSSNIC.c:1237: ADDR        = 0x00;
      000D40 90 DF 05         [24] 3791 	mov	dptr,#_ADDR
      000D43 F0               [24] 3792 	movx	@dptr,a
                                   3793 ;	appFHSSNIC.c:1238: CHANNR      = 0x00;
      000D44 90 DF 06         [24] 3794 	mov	dptr,#_CHANNR
      000D47 F0               [24] 3795 	movx	@dptr,a
                                   3796 ;	appFHSSNIC.c:1239: FSCTRL1     = 0x06;
      000D48 90 DF 07         [24] 3797 	mov	dptr,#_FSCTRL1
      000D4B 74 06            [12] 3798 	mov	a,#0x06
      000D4D F0               [24] 3799 	movx	@dptr,a
                                   3800 ;	appFHSSNIC.c:1240: FSCTRL0     = 0x00;
      000D4E 90 DF 08         [24] 3801 	mov	dptr,#_FSCTRL0
      000D51 E4               [12] 3802 	clr	a
      000D52 F0               [24] 3803 	movx	@dptr,a
                                   3804 ;	appFHSSNIC.c:1241: FREQ2       = 0x24;
      000D53 90 DF 09         [24] 3805 	mov	dptr,#_FREQ2
      000D56 74 24            [12] 3806 	mov	a,#0x24
      000D58 F0               [24] 3807 	movx	@dptr,a
                                   3808 ;	appFHSSNIC.c:1242: FREQ1       = 0x3a;
      000D59 90 DF 0A         [24] 3809 	mov	dptr,#_FREQ1
      000D5C 74 3A            [12] 3810 	mov	a,#0x3A
      000D5E F0               [24] 3811 	movx	@dptr,a
                                   3812 ;	appFHSSNIC.c:1243: FREQ0       = 0xf1;
      000D5F 90 DF 0B         [24] 3813 	mov	dptr,#_FREQ0
      000D62 74 F1            [12] 3814 	mov	a,#0xF1
      000D64 F0               [24] 3815 	movx	@dptr,a
                                   3816 ;	appFHSSNIC.c:1244: MDMCFG4     = 0xca;
      000D65 90 DF 0C         [24] 3817 	mov	dptr,#_MDMCFG4
      000D68 74 CA            [12] 3818 	mov	a,#0xCA
      000D6A F0               [24] 3819 	movx	@dptr,a
                                   3820 ;	appFHSSNIC.c:1245: MDMCFG3     = 0xa3;
      000D6B 90 DF 0D         [24] 3821 	mov	dptr,#_MDMCFG3
      000D6E 74 A3            [12] 3822 	mov	a,#0xA3
      000D70 F0               [24] 3823 	movx	@dptr,a
                                   3824 ;	appFHSSNIC.c:1246: MDMCFG2     = 0x01;
      000D71 90 DF 0E         [24] 3825 	mov	dptr,#_MDMCFG2
      000D74 74 01            [12] 3826 	mov	a,#0x01
      000D76 F0               [24] 3827 	movx	@dptr,a
                                   3828 ;	appFHSSNIC.c:1247: MDMCFG1     = 0x23;
      000D77 90 DF 0F         [24] 3829 	mov	dptr,#_MDMCFG1
      000D7A 74 23            [12] 3830 	mov	a,#0x23
      000D7C F0               [24] 3831 	movx	@dptr,a
                                   3832 ;	appFHSSNIC.c:1248: MDMCFG0     = 0x11;
      000D7D 90 DF 10         [24] 3833 	mov	dptr,#_MDMCFG0
      000D80 74 11            [12] 3834 	mov	a,#0x11
      000D82 F0               [24] 3835 	movx	@dptr,a
                                   3836 ;	appFHSSNIC.c:1249: DEVIATN     = 0x36;
      000D83 90 DF 11         [24] 3837 	mov	dptr,#_DEVIATN
      000D86 74 36            [12] 3838 	mov	a,#0x36
      000D88 F0               [24] 3839 	movx	@dptr,a
                                   3840 ;	appFHSSNIC.c:1250: MCSM2       = 0x07;             // RX_TIMEOUT
      000D89 90 DF 12         [24] 3841 	mov	dptr,#_MCSM2
      000D8C 74 07            [12] 3842 	mov	a,#0x07
      000D8E F0               [24] 3843 	movx	@dptr,a
                                   3844 ;	appFHSSNIC.c:1251: MCSM1       = 0x0f;             // was 'CCA_MODE RSSI below threshold unless currently recvg pkt'-3, now 'Always'-0 - always end up in RX mode
      000D8F 90 DF 13         [24] 3845 	mov	dptr,#_MCSM1
      000D92 74 0F            [12] 3846 	mov	a,#0x0F
      000D94 F0               [24] 3847 	movx	@dptr,a
                                   3848 ;	appFHSSNIC.c:1252: MCSM0       = 0x18;             // fsautosync when going from idle to rx/tx/fstxon
      000D95 90 DF 14         [24] 3849 	mov	dptr,#_MCSM0
      000D98 74 18            [12] 3850 	mov	a,#0x18
      000D9A F0               [24] 3851 	movx	@dptr,a
                                   3852 ;	appFHSSNIC.c:1253: FOCCFG      = 0x17;
      000D9B 90 DF 15         [24] 3853 	mov	dptr,#_FOCCFG
      000D9E 14               [12] 3854 	dec	a
      000D9F F0               [24] 3855 	movx	@dptr,a
                                   3856 ;	appFHSSNIC.c:1254: BSCFG       = 0x6c;
      000DA0 90 DF 16         [24] 3857 	mov	dptr,#_BSCFG
      000DA3 74 6C            [12] 3858 	mov	a,#0x6C
      000DA5 F0               [24] 3859 	movx	@dptr,a
                                   3860 ;	appFHSSNIC.c:1255: AGCCTRL2    = 0x03;
      000DA6 90 DF 17         [24] 3861 	mov	dptr,#_AGCCTRL2
      000DA9 74 03            [12] 3862 	mov	a,#0x03
      000DAB F0               [24] 3863 	movx	@dptr,a
                                   3864 ;	appFHSSNIC.c:1256: AGCCTRL1    = 0x40;
      000DAC 90 DF 18         [24] 3865 	mov	dptr,#_AGCCTRL1
      000DAF 74 40            [12] 3866 	mov	a,#0x40
      000DB1 F0               [24] 3867 	movx	@dptr,a
                                   3868 ;	appFHSSNIC.c:1257: AGCCTRL0    = 0x91;
      000DB2 90 DF 19         [24] 3869 	mov	dptr,#_AGCCTRL0
      000DB5 74 91            [12] 3870 	mov	a,#0x91
      000DB7 F0               [24] 3871 	movx	@dptr,a
                                   3872 ;	appFHSSNIC.c:1258: FREND1      = 0x56;
      000DB8 90 DF 1A         [24] 3873 	mov	dptr,#_FREND1
      000DBB 74 56            [12] 3874 	mov	a,#0x56
      000DBD F0               [24] 3875 	movx	@dptr,a
                                   3876 ;	appFHSSNIC.c:1259: FREND0      = 0x10;
      000DBE 90 DF 1B         [24] 3877 	mov	dptr,#_FREND0
      000DC1 74 10            [12] 3878 	mov	a,#0x10
      000DC3 F0               [24] 3879 	movx	@dptr,a
                                   3880 ;	appFHSSNIC.c:1260: FSCAL3      = 0xe9;
      000DC4 90 DF 1C         [24] 3881 	mov	dptr,#_FSCAL3
      000DC7 74 E9            [12] 3882 	mov	a,#0xE9
      000DC9 F0               [24] 3883 	movx	@dptr,a
                                   3884 ;	appFHSSNIC.c:1261: FSCAL2      = 0x2a;
      000DCA 90 DF 1D         [24] 3885 	mov	dptr,#_FSCAL2
      000DCD 74 2A            [12] 3886 	mov	a,#0x2A
      000DCF F0               [24] 3887 	movx	@dptr,a
                                   3888 ;	appFHSSNIC.c:1262: FSCAL1      = 0x00;
      000DD0 90 DF 1E         [24] 3889 	mov	dptr,#_FSCAL1
      000DD3 E4               [12] 3890 	clr	a
      000DD4 F0               [24] 3891 	movx	@dptr,a
                                   3892 ;	appFHSSNIC.c:1263: FSCAL0      = 0x1f;
      000DD5 90 DF 1F         [24] 3893 	mov	dptr,#_FSCAL0
      000DD8 74 1F            [12] 3894 	mov	a,#0x1F
      000DDA F0               [24] 3895 	movx	@dptr,a
                                   3896 ;	appFHSSNIC.c:1264: TEST2       = 0x88; // low data rates, increased sensitivity provided by 0x81- was 0x88
      000DDB 90 DF 23         [24] 3897 	mov	dptr,#_TEST2
      000DDE 74 88            [12] 3898 	mov	a,#0x88
      000DE0 F0               [24] 3899 	movx	@dptr,a
                                   3900 ;	appFHSSNIC.c:1265: TEST1       = 0x31; // always 0x31 in tx-mode, for low data rates 0x35 provides increased sensitivity - was 0x31
      000DE1 90 DF 24         [24] 3901 	mov	dptr,#_TEST1
      000DE4 74 31            [12] 3902 	mov	a,#0x31
      000DE6 F0               [24] 3903 	movx	@dptr,a
                                   3904 ;	appFHSSNIC.c:1266: TEST0       = 0x09;
      000DE7 90 DF 25         [24] 3905 	mov	dptr,#_TEST0
      000DEA 74 09            [12] 3906 	mov	a,#0x09
      000DEC F0               [24] 3907 	movx	@dptr,a
                                   3908 ;	appFHSSNIC.c:1267: PA_TABLE0   = 0xc0;
      000DED 90 DF 2E         [24] 3909 	mov	dptr,#_PA_TABLE0
      000DF0 74 C0            [12] 3910 	mov	a,#0xC0
      000DF2 F0               [24] 3911 	movx	@dptr,a
                                   3912 ;	appFHSSNIC.c:1275: FSCTRL1     = 0x0c;             // Intermediate Frequency
      000DF3 90 DF 07         [24] 3913 	mov	dptr,#_FSCTRL1
      000DF6 C4               [12] 3914 	swap	a
      000DF7 F0               [24] 3915 	movx	@dptr,a
                                   3916 ;	appFHSSNIC.c:1277: FREQ2       = 0x25;
      000DF8 90 DF 09         [24] 3917 	mov	dptr,#_FREQ2
      000DFB 74 25            [12] 3918 	mov	a,#0x25
      000DFD F0               [24] 3919 	movx	@dptr,a
                                   3920 ;	appFHSSNIC.c:1278: FREQ1       = 0x95;
      000DFE 90 DF 0A         [24] 3921 	mov	dptr,#_FREQ1
      000E01 74 95            [12] 3922 	mov	a,#0x95
      000E03 F0               [24] 3923 	movx	@dptr,a
                                   3924 ;	appFHSSNIC.c:1279: FREQ0       = 0x55;
      000E04 90 DF 0B         [24] 3925 	mov	dptr,#_FREQ0
      000E07 74 55            [12] 3926 	mov	a,#0x55
      000E09 F0               [24] 3927 	movx	@dptr,a
                                   3928 ;	appFHSSNIC.c:1291: FREND1      = 0xb6;
      000E0A 90 DF 1A         [24] 3929 	mov	dptr,#_FREND1
      000E0D 74 B6            [12] 3930 	mov	a,#0xB6
      000E0F F0               [24] 3931 	movx	@dptr,a
                                   3932 ;	appFHSSNIC.c:1292: FREND0      = 0x10;
      000E10 90 DF 1B         [24] 3933 	mov	dptr,#_FREND0
      000E13 74 10            [12] 3934 	mov	a,#0x10
      000E15 F0               [24] 3935 	movx	@dptr,a
                                   3936 ;	appFHSSNIC.c:1293: FSCAL3      = 0xea;
      000E16 90 DF 1C         [24] 3937 	mov	dptr,#_FSCAL3
      000E19 74 EA            [12] 3938 	mov	a,#0xEA
      000E1B F0               [24] 3939 	movx	@dptr,a
                                   3940 ;	appFHSSNIC.c:1294: FSCAL2      = 0x2a;
      000E1C 90 DF 1D         [24] 3941 	mov	dptr,#_FSCAL2
      000E1F 74 2A            [12] 3942 	mov	a,#0x2A
      000E21 F0               [24] 3943 	movx	@dptr,a
                                   3944 ;	appFHSSNIC.c:1295: FSCAL1      = 0x00;
      000E22 90 DF 1E         [24] 3945 	mov	dptr,#_FSCAL1
      000E25 E4               [12] 3946 	clr	a
      000E26 F0               [24] 3947 	movx	@dptr,a
                                   3948 ;	appFHSSNIC.c:1296: FSCAL0      = 0x1f;
      000E27 90 DF 1F         [24] 3949 	mov	dptr,#_FSCAL0
      000E2A 74 1F            [12] 3950 	mov	a,#0x1F
      000E2C F0               [24] 3951 	movx	@dptr,a
      000E2D 22               [24] 3952 	ret
                                   3953 ;------------------------------------------------------------
                                   3954 ;Allocation info for local variables in function 'initBoard'
                                   3955 ;------------------------------------------------------------
                                   3956 ;	appFHSSNIC.c:1342: void initBoard(void)
                                   3957 ;	-----------------------------------------
                                   3958 ;	 function initBoard
                                   3959 ;	-----------------------------------------
      000E2E                       3960 _initBoard:
                                   3961 ;	appFHSSNIC.c:1345: clock_init();
      000E2E 12r00r00         [24] 3962 	lcall	_clock_init
                                   3963 ;	appFHSSNIC.c:1346: io_init();
      000E31 02r00r00         [24] 3964 	ljmp	_io_init
                                   3965 ;------------------------------------------------------------
                                   3966 ;Allocation info for local variables in function 'main'
                                   3967 ;------------------------------------------------------------
                                   3968 ;	appFHSSNIC.c:1350: void main (void)
                                   3969 ;	-----------------------------------------
                                   3970 ;	 function main
                                   3971 ;	-----------------------------------------
      000E34                       3972 _main:
                                   3973 ;	appFHSSNIC.c:1352: initBoard();
      000E34 12r0Er2E         [24] 3974 	lcall	_initBoard
                                   3975 ;	appFHSSNIC.c:1353: initDMA();  // do this early so peripherals that use DMA can allocate channels correctly
      000E37 12r00r00         [24] 3976 	lcall	_initDMA
                                   3977 ;	appFHSSNIC.c:1354: initAES();
      000E3A 12r00r00         [24] 3978 	lcall	_initAES
                                   3979 ;	appFHSSNIC.c:1355: initUSB();
      000E3D 12r00r00         [24] 3980 	lcall	_initUSB
                                   3981 ;	appFHSSNIC.c:1356: init_RF();
      000E40 12r00r00         [24] 3982 	lcall	_init_RF
                                   3983 ;	appFHSSNIC.c:1357: appMainInit();
      000E43 12r08rE8         [24] 3984 	lcall	_appMainInit
                                   3985 ;	appFHSSNIC.c:1359: usb_up();
      000E46 12r00r00         [24] 3986 	lcall	_usb_up
                                   3987 ;	appFHSSNIC.c:1362: EA = 1;
      000E49 D2 AF            [12] 3988 	setb	_EA
                                   3989 ;	appFHSSNIC.c:1363: waitForUSBsetup();
      000E4B 12r00r00         [24] 3990 	lcall	_waitForUSBsetup
                                   3991 ;	appFHSSNIC.c:1365: REALLYFASTBLINK();
      000E4E D2 A4            [12] 3992 	setb	_P2_4
      000E50 90 00 02         [24] 3993 	mov	dptr,#0x0002
      000E53 12r00r00         [24] 3994 	lcall	_sleepMillis
      000E56 C2 A4            [12] 3995 	clr	_P2_4
      000E58 90 00 0A         [24] 3996 	mov	dptr,#0x000A
      000E5B 12r00r00         [24] 3997 	lcall	_sleepMillis
                                   3998 ;	appFHSSNIC.c:1367: while (1)
      000E5E                       3999 00102$:
                                   4000 ;	appFHSSNIC.c:1369: usbProcessEvents();
      000E5E 12r00r00         [24] 4001 	lcall	_usbProcessEvents
                                   4002 ;	appFHSSNIC.c:1370: appMainLoop();
      000E61 12r09r0C         [24] 4003 	lcall	_appMainLoop
      000E64 80 F8            [24] 4004 	sjmp	00102$
                                   4005 	.area CSEG    (CODE)
                                   4006 	.area CONST   (CODE)
      000000                       4007 ___str_0:
      000000 43 61 6E 6E 6F 74 20  4008 	.ascii "Cannot call transmit_long while FHSS Hopping or already proc"
             63 61 6C 6C 20 74 72
             61 6E 73 6D 69 74 5F
             6C 6F 6E 67 20 77 68
             69 6C 65 20 46 48 53
             53 20 48 6F 70 70 69
             6E 67 20 6F 72 20 61
             6C 72 65 61 64 79 20
             70 72 6F 63
      00003C 65 73 73 69 6E 67 20  4009 	.ascii "essing transmit_long!"
             74 72 61 6E 73 6D 69
             74 5F 6C 6F 6E 67 21
      000051 00                    4010 	.db 0x00
      000052                       4011 ___str_1:
      000052 4D 41 43 5F 74 78 28  4012 	.ascii "MAC_tx() returned error"
             29 20 72 65 74 75 72
             6E 65 64 20 65 72 72
             6F 72
      000069 00                    4013 	.db 0x00
      00006A                       4014 ___str_2:
      00006A 6E 65 76 65 72 20 65  4015 	.ascii "never entered TX"
             6E 74 65 72 65 64 20
             54 58
      00007A 00                    4016 	.db 0x00
      00007B                       4017 ___str_3:
      00007B 46 48 53 53 78 6D 69  4018 	.ascii "FHSSxmit message too long"
             74 20 6D 65 73 73 61
             67 65 20 74 6F 6F 20
             6C 6F 6E 67
      000094 00                    4019 	.db 0x00
      000095                       4020 ___str_4:
      000095 46 48 53 53 20 73 74  4021 	.ascii "FHSS state entering SYNCHING from wrong state"
             61 74 65 20 65 6E 74
             65 72 69 6E 67 20 53
             59 4E 43 48 49 4E 47
             20 66 72 6F 6D 20 77
             72 6F 6E 67 20 73 74
             61 74 65
      0000C2 00                    4022 	.db 0x00
      0000C3                       4023 ___str_5:
      0000C3 53 59 4E 43 48 5F 4D  4024 	.ascii "SYNCH_MASTER -> SYNCINGMASTER"
             41 53 54 45 52 20 2D
             3E 20 53 59 4E 43 49
             4E 47 4D 41 53 54 45
             52
      0000E0 00                    4025 	.db 0x00
      0000E1                       4026 ___str_6:
      0000E1 46 48 53 53 78 6D 69  4027 	.ascii "FHSSxmit done"
             74 20 64 6F 6E 65
      0000EE 00                    4028 	.db 0x00
      0000EF                       4029 ___str_7:
      0000EF 6E 65 74 77 6F 72 6B  4030 	.ascii "network packet(sync)"
             20 70 61 63 6B 65 74
             28 73 79 6E 63 29
      000103 00                    4031 	.db 0x00
      000104                       4032 ___str_8:
      000104 6E 65 74 77 6F 72 6B  4033 	.ascii "network packet(discovery)"
             20 70 61 63 6B 65 74
             28 64 69 73 63 6F 76
             65 72 79 29
      00011D 00                    4034 	.db 0x00
                                   4035 	.area XINIT   (CODE)
                                   4036 	.area CABS    (ABS,CODE)

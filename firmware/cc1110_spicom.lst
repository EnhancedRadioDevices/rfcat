                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (Dec 30 2013) (Linux)
                              4 ; This file was generated Fri Dec 16 14:02:34 2016
                              5 ;--------------------------------------------------------
                              6 	.module cc1110_spicom
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _buildname
                             13 	.globl _sdccver
                             14 	.globl _vcom_down
                             15 	.globl _vcom_readline
                             16 	.globl _vcom_pollchar
                             17 	.globl _tx1_isr
                             18 	.globl _rx1_isr
                             19 	.globl _IdleMode
                             20 	.globl _TxMode
                             21 	.globl _RxMode
                             22 	.globl _strncmp
                             23 	.globl _sleepMillis
                             24 	.globl _USBIF
                             25 	.globl _MODE
                             26 	.globl _RE
                             27 	.globl _SLAVE
                             28 	.globl _FE
                             29 	.globl _ERR
                             30 	.globl _RX_BYTE
                             31 	.globl _TX_BYTE
                             32 	.globl _ACTIVE
                             33 	.globl _B_7
                             34 	.globl _B_6
                             35 	.globl _B_5
                             36 	.globl _B_4
                             37 	.globl _B_3
                             38 	.globl _B_2
                             39 	.globl _B_1
                             40 	.globl _B_0
                             41 	.globl _WDTIF
                             42 	.globl _P1IF
                             43 	.globl _UTX1IF
                             44 	.globl _UTX0IF
                             45 	.globl _P2IF
                             46 	.globl _ACC_7
                             47 	.globl _ACC_6
                             48 	.globl _ACC_5
                             49 	.globl _ACC_4
                             50 	.globl _ACC_3
                             51 	.globl _ACC_2
                             52 	.globl _ACC_1
                             53 	.globl _ACC_0
                             54 	.globl _OVFIM
                             55 	.globl _T4CH1IF
                             56 	.globl _T4CH0IF
                             57 	.globl _T4OVFIF
                             58 	.globl _T3CH1IF
                             59 	.globl _T3CH0IF
                             60 	.globl _T3OVFIF
                             61 	.globl _CY
                             62 	.globl _AC
                             63 	.globl _F0
                             64 	.globl _RS1
                             65 	.globl _RS0
                             66 	.globl _OV
                             67 	.globl _F1
                             68 	.globl _P
                             69 	.globl _STIF
                             70 	.globl _P0IF
                             71 	.globl _T4IF
                             72 	.globl _T3IF
                             73 	.globl _T2IF
                             74 	.globl _T1IF
                             75 	.globl _DMAIF
                             76 	.globl _P0IE
                             77 	.globl _T4IE
                             78 	.globl _T3IE
                             79 	.globl _T2IE
                             80 	.globl _T1IE
                             81 	.globl _DMAIE
                             82 	.globl _EA
                             83 	.globl _STIE
                             84 	.globl _ENCIE
                             85 	.globl _URX1IE
                             86 	.globl _URX0IE
                             87 	.globl _ADCIE
                             88 	.globl _RFTXRXIE
                             89 	.globl _P2_7
                             90 	.globl _P2_6
                             91 	.globl _P2_5
                             92 	.globl _P2_4
                             93 	.globl _P2_3
                             94 	.globl _P2_2
                             95 	.globl _P2_1
                             96 	.globl _P2_0
                             97 	.globl _ENCIF_1
                             98 	.globl _ENCIF_0
                             99 	.globl _P1_7
                            100 	.globl _P1_6
                            101 	.globl _P1_5
                            102 	.globl _P1_4
                            103 	.globl _P1_3
                            104 	.globl _P1_2
                            105 	.globl _P1_1
                            106 	.globl _P1_0
                            107 	.globl _URX1IF
                            108 	.globl _ADCIF
                            109 	.globl _URX0IF
                            110 	.globl _IT1
                            111 	.globl _RFTXRXIF
                            112 	.globl _IT0
                            113 	.globl _P0_7
                            114 	.globl _P0_6
                            115 	.globl _P0_5
                            116 	.globl _P0_4
                            117 	.globl _P0_3
                            118 	.globl _P0_2
                            119 	.globl _P0_1
                            120 	.globl _P0_0
                            121 	.globl _P2DIR
                            122 	.globl _P1DIR
                            123 	.globl _P0DIR
                            124 	.globl _U1GCR
                            125 	.globl _U1UCR
                            126 	.globl _U1BAUD
                            127 	.globl _U1DBUF
                            128 	.globl _U1CSR
                            129 	.globl _P2INP
                            130 	.globl _P1INP
                            131 	.globl _P2SEL
                            132 	.globl _P1SEL
                            133 	.globl _P0SEL
                            134 	.globl _ADCCFG
                            135 	.globl _PERCFG
                            136 	.globl _B
                            137 	.globl _T4CC1
                            138 	.globl _T4CCTL1
                            139 	.globl _T4CC0
                            140 	.globl _T4CCTL0
                            141 	.globl _T4CTL
                            142 	.globl _T4CNT
                            143 	.globl _RFIF
                            144 	.globl _IRCON2
                            145 	.globl _T1CCTL2
                            146 	.globl _T1CCTL1
                            147 	.globl _T1CCTL0
                            148 	.globl _T1CTL
                            149 	.globl _T1CNTH
                            150 	.globl _T1CNTL
                            151 	.globl _RFST
                            152 	.globl _ACC
                            153 	.globl _T1CC2H
                            154 	.globl _T1CC2L
                            155 	.globl _T1CC1H
                            156 	.globl _T1CC1L
                            157 	.globl _T1CC0H
                            158 	.globl _T1CC0L
                            159 	.globl _RFD
                            160 	.globl _TIMIF
                            161 	.globl _DMAREQ
                            162 	.globl _DMAARM
                            163 	.globl _DMA0CFGH
                            164 	.globl _DMA0CFGL
                            165 	.globl _DMA1CFGH
                            166 	.globl _DMA1CFGL
                            167 	.globl _DMAIRQ
                            168 	.globl _PSW
                            169 	.globl _T3CC1
                            170 	.globl _T3CCTL1
                            171 	.globl _T3CC0
                            172 	.globl _T3CCTL0
                            173 	.globl _T3CTL
                            174 	.globl _T3CNT
                            175 	.globl _WDCTL
                            176 	.globl __SFRC8
                            177 	.globl _MEMCTR
                            178 	.globl _CLKCON
                            179 	.globl _U0GCR
                            180 	.globl _U0UCR
                            181 	.globl __SFRC3
                            182 	.globl _U0BAUD
                            183 	.globl _U0DBUF
                            184 	.globl _IRCON
                            185 	.globl __SFRBF
                            186 	.globl _SLEEP
                            187 	.globl _RNDH
                            188 	.globl _RNDL
                            189 	.globl _ADCH
                            190 	.globl _ADCL
                            191 	.globl _IP1
                            192 	.globl _IEN1
                            193 	.globl __SFRB7
                            194 	.globl _ADCCON3
                            195 	.globl _ADCCON2
                            196 	.globl _ADCCON1
                            197 	.globl _ENCCS
                            198 	.globl _ENCDO
                            199 	.globl _ENCDI
                            200 	.globl __SFRB0
                            201 	.globl _FWDATA
                            202 	.globl _FCTL
                            203 	.globl _FADDRH
                            204 	.globl _FADDRL
                            205 	.globl _FWT
                            206 	.globl __SFRAA
                            207 	.globl _IP0
                            208 	.globl _IEN0
                            209 	.globl __SFRA7
                            210 	.globl _WORTIME1
                            211 	.globl _WORTIME0
                            212 	.globl _WOREVT1
                            213 	.globl _WOREVT0
                            214 	.globl _WORCTRL
                            215 	.globl _WORIRQ
                            216 	.globl _P2
                            217 	.globl __SFR9F
                            218 	.globl _T2CTL
                            219 	.globl _T2PR
                            220 	.globl _T2CT
                            221 	.globl _S1CON
                            222 	.globl _IEN2
                            223 	.globl __SFR99
                            224 	.globl _S0CON
                            225 	.globl __SFR97
                            226 	.globl __SFR96
                            227 	.globl __SFR95
                            228 	.globl __SFR94
                            229 	.globl __XPAGE
                            230 	.globl _MPAGE
                            231 	.globl _DPS
                            232 	.globl _RFIM
                            233 	.globl _P1
                            234 	.globl _P0INP
                            235 	.globl __SFR8E
                            236 	.globl _P1IEN
                            237 	.globl _PICTL
                            238 	.globl _P2IFG
                            239 	.globl _P1IFG
                            240 	.globl _P0IFG
                            241 	.globl _TCON
                            242 	.globl _PCON
                            243 	.globl _U0CSR
                            244 	.globl _DPH1
                            245 	.globl _DPL1
                            246 	.globl _DPH0
                            247 	.globl _DPL0
                            248 	.globl _SP
                            249 	.globl _P0
                            250 	.globl _appReturn_PARM_2
                            251 	.globl _ep5
                            252 	.globl _usb_ep5_OUTbuf
                            253 	.globl _spi_output_buf
                            254 	.globl _spi_input_buf
                            255 	.globl _USBF5
                            256 	.globl _USBF4
                            257 	.globl _USBF3
                            258 	.globl _USBF2
                            259 	.globl _USBF1
                            260 	.globl _USBF0
                            261 	.globl _USBCNTH
                            262 	.globl _USBCNTL
                            263 	.globl _USBCNT0
                            264 	.globl _USBCSOH
                            265 	.globl _USBCSOL
                            266 	.globl _USBMAXO
                            267 	.globl _USBCSIH
                            268 	.globl _USBCSIL
                            269 	.globl _USBCS0
                            270 	.globl _USBMAXI
                            271 	.globl _USBINDEX
                            272 	.globl _USBFRMH
                            273 	.globl _USBFRML
                            274 	.globl _USBCIE
                            275 	.globl _USBOIE
                            276 	.globl _USBIIE
                            277 	.globl _USBCIF
                            278 	.globl _USBOIF
                            279 	.globl _USBIIF
                            280 	.globl _USBPOW
                            281 	.globl _USBADDR
                            282 	.globl _X_P2DIR
                            283 	.globl _X_P1DIR
                            284 	.globl _X_P0DIR
                            285 	.globl _X_U1GCR
                            286 	.globl _X_U1UCR
                            287 	.globl _X_U1BAUD
                            288 	.globl _X_U1DBUF
                            289 	.globl _X_U1CSR
                            290 	.globl _X_P2INP
                            291 	.globl _X_P1INP
                            292 	.globl _X_P2SEL
                            293 	.globl _X_P1SEL
                            294 	.globl _X_P0SEL
                            295 	.globl _X_ADCCFG
                            296 	.globl _X_PERCFG
                            297 	.globl __NA_B
                            298 	.globl _X_T4CC1
                            299 	.globl _X_T4CCTL1
                            300 	.globl _X_T4CC0
                            301 	.globl _X_T4CCTL0
                            302 	.globl _X_T4CTL
                            303 	.globl _X_T4CNT
                            304 	.globl _X_RFIF
                            305 	.globl __NA_IRCON2
                            306 	.globl _X_T1CCTL2
                            307 	.globl _X_T1CCTL1
                            308 	.globl _X_T1CCTL0
                            309 	.globl _X_T1CTL
                            310 	.globl _X_T1CNTH
                            311 	.globl _X_T1CNTL
                            312 	.globl _X_RFST
                            313 	.globl __NA_ACC
                            314 	.globl _X_T1CC2H
                            315 	.globl _X_T1CC2L
                            316 	.globl _X_T1CC1H
                            317 	.globl _X_T1CC1L
                            318 	.globl _X_T1CC0H
                            319 	.globl _X_T1CC0L
                            320 	.globl _X_RFD
                            321 	.globl _X_TIMIF
                            322 	.globl _X_DMAREQ
                            323 	.globl _X_DMAARM
                            324 	.globl _X_DMA0CFGH
                            325 	.globl _X_DMA0CFGL
                            326 	.globl _X_DMA1CFGH
                            327 	.globl _X_DMA1CFGL
                            328 	.globl _X_DMAIRQ
                            329 	.globl __NA_PSW
                            330 	.globl _X_T3CC1
                            331 	.globl _X_T3CCTL1
                            332 	.globl _X_T3CC0
                            333 	.globl _X_T3CCTL0
                            334 	.globl _X_T3CTL
                            335 	.globl _X_T3CNT
                            336 	.globl _X_WDCTL
                            337 	.globl __X_SFRC8
                            338 	.globl _X_MEMCTR
                            339 	.globl _X_CLKCON
                            340 	.globl _X_U0GCR
                            341 	.globl _X_U0UCR
                            342 	.globl __X_SFRC3
                            343 	.globl _X_U0BAUD
                            344 	.globl _X_U0DBUF
                            345 	.globl __NA_IRCON
                            346 	.globl __X_SFRBF
                            347 	.globl _X_SLEEP
                            348 	.globl _X_RNDH
                            349 	.globl _X_RNDL
                            350 	.globl _X_ADCH
                            351 	.globl _X_ADCL
                            352 	.globl __NA_IP1
                            353 	.globl __NA_IEN1
                            354 	.globl __X_SFRB7
                            355 	.globl _X_ADCCON3
                            356 	.globl _X_ADCCON2
                            357 	.globl _X_ADCCON1
                            358 	.globl _X_ENCCS
                            359 	.globl _X_ENCDO
                            360 	.globl _X_ENCDI
                            361 	.globl __X_SFRB0
                            362 	.globl _X_FWDATA
                            363 	.globl _X_FCTL
                            364 	.globl _X_FADDRH
                            365 	.globl _X_FADDRL
                            366 	.globl _X_FWT
                            367 	.globl __X_SFRAA
                            368 	.globl __NA_IP0
                            369 	.globl __NA_IEN0
                            370 	.globl __X_SFRA7
                            371 	.globl _X_WORTIME1
                            372 	.globl _X_WORTIME0
                            373 	.globl _X_WOREVT1
                            374 	.globl _X_WOREVT0
                            375 	.globl _X_WORCTRL
                            376 	.globl _X_WORIRQ
                            377 	.globl __NA_P2
                            378 	.globl __X_SFR9F
                            379 	.globl _X_T2CTL
                            380 	.globl _X_T2PR
                            381 	.globl _X_T2CT
                            382 	.globl __NA_S1CON
                            383 	.globl __NA_IEN2
                            384 	.globl __X_SFR99
                            385 	.globl __NA_S0CON
                            386 	.globl __X_SFR97
                            387 	.globl __X_SFR96
                            388 	.globl __X_SFR95
                            389 	.globl __X_SFR94
                            390 	.globl _X_MPAGE
                            391 	.globl __NA_DPS
                            392 	.globl _X_RFIM
                            393 	.globl __NA_P1
                            394 	.globl _X_P0INP
                            395 	.globl __X_SFR8E
                            396 	.globl _X_P1IEN
                            397 	.globl _X_PICTL
                            398 	.globl _X_P2IFG
                            399 	.globl _X_P1IFG
                            400 	.globl _X_P0IFG
                            401 	.globl __NA_TCON
                            402 	.globl __NA_PCON
                            403 	.globl _X_U0CSR
                            404 	.globl __NA_DPH1
                            405 	.globl __NA_DPL1
                            406 	.globl __NA_DPH0
                            407 	.globl __NA_DPL0
                            408 	.globl __NA_SP
                            409 	.globl __NA_P0
                            410 	.globl _I2SCLKF2
                            411 	.globl _I2SCLKF1
                            412 	.globl _I2SCLKF0
                            413 	.globl _I2SSTAT
                            414 	.globl _I2SWCNT
                            415 	.globl _I2SDATH
                            416 	.globl _I2SDATL
                            417 	.globl _I2SCFG1
                            418 	.globl _I2SCFG0
                            419 	.globl _VCO_VC_DAC
                            420 	.globl _PKTSTATUS
                            421 	.globl _MARCSTATE
                            422 	.globl _RSSI
                            423 	.globl _LQI
                            424 	.globl _FREQEST
                            425 	.globl _VERSION
                            426 	.globl _PARTNUM
                            427 	.globl __XREGDF35
                            428 	.globl __XREGDF34
                            429 	.globl __XREGDF33
                            430 	.globl __XREGDF32
                            431 	.globl _IOCFG0
                            432 	.globl _IOCFG1
                            433 	.globl _IOCFG2
                            434 	.globl _PA_TABLE0
                            435 	.globl _PA_TABLE1
                            436 	.globl _PA_TABLE2
                            437 	.globl _PA_TABLE3
                            438 	.globl _PA_TABLE4
                            439 	.globl _PA_TABLE5
                            440 	.globl _PA_TABLE6
                            441 	.globl _PA_TABLE7
                            442 	.globl __XREGDF26
                            443 	.globl _TEST0
                            444 	.globl _TEST1
                            445 	.globl _TEST2
                            446 	.globl __XREGDF22
                            447 	.globl __XREGDF21
                            448 	.globl __XREGDF20
                            449 	.globl _FSCAL0
                            450 	.globl _FSCAL1
                            451 	.globl _FSCAL2
                            452 	.globl _FSCAL3
                            453 	.globl _FREND0
                            454 	.globl _FREND1
                            455 	.globl _AGCCTRL0
                            456 	.globl _AGCCTRL1
                            457 	.globl _AGCCTRL2
                            458 	.globl _BSCFG
                            459 	.globl _FOCCFG
                            460 	.globl _MCSM0
                            461 	.globl _MCSM1
                            462 	.globl _MCSM2
                            463 	.globl _DEVIATN
                            464 	.globl _MDMCFG0
                            465 	.globl _MDMCFG1
                            466 	.globl _MDMCFG2
                            467 	.globl _MDMCFG3
                            468 	.globl _MDMCFG4
                            469 	.globl _FREQ0
                            470 	.globl _FREQ1
                            471 	.globl _FREQ2
                            472 	.globl _FSCTRL0
                            473 	.globl _FSCTRL1
                            474 	.globl _CHANNR
                            475 	.globl _ADDR
                            476 	.globl _PKTCTRL0
                            477 	.globl _PKTCTRL1
                            478 	.globl _PKTLEN
                            479 	.globl _SYNC0
                            480 	.globl _SYNC1
                            481 	.globl _MDMCTRL0H
                            482 	.globl _txdata_PARM_4
                            483 	.globl _txdata_PARM_3
                            484 	.globl _txdata_PARM_2
                            485 	.globl _cb_ep5
                            486 	.globl _slave_send_size
                            487 	.globl _master_send_size
                            488 	.globl _spi_mode
                            489 	.globl _serial_data_available
                            490 	.globl _output_tail_idx
                            491 	.globl _output_head_idx
                            492 	.globl _output_size
                            493 	.globl _input_tail_idx
                            494 	.globl _input_head_idx
                            495 	.globl _input_size
                            496 	.globl _vcom_flush
                            497 	.globl _vcom_putchar
                            498 	.globl _vcom_getchar
                            499 	.globl _vcom_enable
                            500 	.globl _vcom_disable
                            501 	.globl _initUSB
                            502 	.globl _usbProcessEvents
                            503 	.globl _vcom_putstr
                            504 	.globl _usb_up
                            505 	.globl _txdata
                            506 	.globl _usbIntHandler
                            507 	.globl _p0IntHandler
                            508 	.globl _waitForUSBsetup
                            509 	.globl _registerCb_ep5
                            510 	.globl _appReturn
                            511 	.globl _processOUTEP5
                            512 ;--------------------------------------------------------
                            513 ; special function registers
                            514 ;--------------------------------------------------------
                            515 	.area RSEG    (ABS,DATA)
   0000                     516 	.org 0x0000
                     0080   517 _P0	=	0x0080
                     0081   518 _SP	=	0x0081
                     0082   519 _DPL0	=	0x0082
                     0083   520 _DPH0	=	0x0083
                     0084   521 _DPL1	=	0x0084
                     0085   522 _DPH1	=	0x0085
                     0086   523 _U0CSR	=	0x0086
                     0087   524 _PCON	=	0x0087
                     0088   525 _TCON	=	0x0088
                     0089   526 _P0IFG	=	0x0089
                     008A   527 _P1IFG	=	0x008a
                     008B   528 _P2IFG	=	0x008b
                     008C   529 _PICTL	=	0x008c
                     008D   530 _P1IEN	=	0x008d
                     008E   531 __SFR8E	=	0x008e
                     008F   532 _P0INP	=	0x008f
                     0090   533 _P1	=	0x0090
                     0091   534 _RFIM	=	0x0091
                     0092   535 _DPS	=	0x0092
                     0093   536 _MPAGE	=	0x0093
                     0093   537 __XPAGE	=	0x0093
                     0094   538 __SFR94	=	0x0094
                     0095   539 __SFR95	=	0x0095
                     0096   540 __SFR96	=	0x0096
                     0097   541 __SFR97	=	0x0097
                     0098   542 _S0CON	=	0x0098
                     0099   543 __SFR99	=	0x0099
                     009A   544 _IEN2	=	0x009a
                     009B   545 _S1CON	=	0x009b
                     009C   546 _T2CT	=	0x009c
                     009D   547 _T2PR	=	0x009d
                     009E   548 _T2CTL	=	0x009e
                     009F   549 __SFR9F	=	0x009f
                     00A0   550 _P2	=	0x00a0
                     00A1   551 _WORIRQ	=	0x00a1
                     00A2   552 _WORCTRL	=	0x00a2
                     00A3   553 _WOREVT0	=	0x00a3
                     00A4   554 _WOREVT1	=	0x00a4
                     00A5   555 _WORTIME0	=	0x00a5
                     00A6   556 _WORTIME1	=	0x00a6
                     00A7   557 __SFRA7	=	0x00a7
                     00A8   558 _IEN0	=	0x00a8
                     00A9   559 _IP0	=	0x00a9
                     00AA   560 __SFRAA	=	0x00aa
                     00AB   561 _FWT	=	0x00ab
                     00AC   562 _FADDRL	=	0x00ac
                     00AD   563 _FADDRH	=	0x00ad
                     00AE   564 _FCTL	=	0x00ae
                     00AF   565 _FWDATA	=	0x00af
                     00B0   566 __SFRB0	=	0x00b0
                     00B1   567 _ENCDI	=	0x00b1
                     00B2   568 _ENCDO	=	0x00b2
                     00B3   569 _ENCCS	=	0x00b3
                     00B4   570 _ADCCON1	=	0x00b4
                     00B5   571 _ADCCON2	=	0x00b5
                     00B6   572 _ADCCON3	=	0x00b6
                     00B7   573 __SFRB7	=	0x00b7
                     00B8   574 _IEN1	=	0x00b8
                     00B9   575 _IP1	=	0x00b9
                     00BA   576 _ADCL	=	0x00ba
                     00BB   577 _ADCH	=	0x00bb
                     00BC   578 _RNDL	=	0x00bc
                     00BD   579 _RNDH	=	0x00bd
                     00BE   580 _SLEEP	=	0x00be
                     00BF   581 __SFRBF	=	0x00bf
                     00C0   582 _IRCON	=	0x00c0
                     00C1   583 _U0DBUF	=	0x00c1
                     00C2   584 _U0BAUD	=	0x00c2
                     00C3   585 __SFRC3	=	0x00c3
                     00C4   586 _U0UCR	=	0x00c4
                     00C5   587 _U0GCR	=	0x00c5
                     00C6   588 _CLKCON	=	0x00c6
                     00C7   589 _MEMCTR	=	0x00c7
                     00C8   590 __SFRC8	=	0x00c8
                     00C9   591 _WDCTL	=	0x00c9
                     00CA   592 _T3CNT	=	0x00ca
                     00CB   593 _T3CTL	=	0x00cb
                     00CC   594 _T3CCTL0	=	0x00cc
                     00CD   595 _T3CC0	=	0x00cd
                     00CE   596 _T3CCTL1	=	0x00ce
                     00CF   597 _T3CC1	=	0x00cf
                     00D0   598 _PSW	=	0x00d0
                     00D1   599 _DMAIRQ	=	0x00d1
                     00D2   600 _DMA1CFGL	=	0x00d2
                     00D3   601 _DMA1CFGH	=	0x00d3
                     00D4   602 _DMA0CFGL	=	0x00d4
                     00D5   603 _DMA0CFGH	=	0x00d5
                     00D6   604 _DMAARM	=	0x00d6
                     00D7   605 _DMAREQ	=	0x00d7
                     00D8   606 _TIMIF	=	0x00d8
                     00D9   607 _RFD	=	0x00d9
                     00DA   608 _T1CC0L	=	0x00da
                     00DB   609 _T1CC0H	=	0x00db
                     00DC   610 _T1CC1L	=	0x00dc
                     00DD   611 _T1CC1H	=	0x00dd
                     00DE   612 _T1CC2L	=	0x00de
                     00DF   613 _T1CC2H	=	0x00df
                     00E0   614 _ACC	=	0x00e0
                     00E1   615 _RFST	=	0x00e1
                     00E2   616 _T1CNTL	=	0x00e2
                     00E3   617 _T1CNTH	=	0x00e3
                     00E4   618 _T1CTL	=	0x00e4
                     00E5   619 _T1CCTL0	=	0x00e5
                     00E6   620 _T1CCTL1	=	0x00e6
                     00E7   621 _T1CCTL2	=	0x00e7
                     00E8   622 _IRCON2	=	0x00e8
                     00E9   623 _RFIF	=	0x00e9
                     00EA   624 _T4CNT	=	0x00ea
                     00EB   625 _T4CTL	=	0x00eb
                     00EC   626 _T4CCTL0	=	0x00ec
                     00ED   627 _T4CC0	=	0x00ed
                     00EE   628 _T4CCTL1	=	0x00ee
                     00EF   629 _T4CC1	=	0x00ef
                     00F0   630 _B	=	0x00f0
                     00F1   631 _PERCFG	=	0x00f1
                     00F2   632 _ADCCFG	=	0x00f2
                     00F3   633 _P0SEL	=	0x00f3
                     00F4   634 _P1SEL	=	0x00f4
                     00F5   635 _P2SEL	=	0x00f5
                     00F6   636 _P1INP	=	0x00f6
                     00F7   637 _P2INP	=	0x00f7
                     00F8   638 _U1CSR	=	0x00f8
                     00F9   639 _U1DBUF	=	0x00f9
                     00FA   640 _U1BAUD	=	0x00fa
                     00FB   641 _U1UCR	=	0x00fb
                     00FC   642 _U1GCR	=	0x00fc
                     00FD   643 _P0DIR	=	0x00fd
                     00FE   644 _P1DIR	=	0x00fe
                     00FF   645 _P2DIR	=	0x00ff
                            646 ;--------------------------------------------------------
                            647 ; special function bits
                            648 ;--------------------------------------------------------
                            649 	.area RSEG    (ABS,DATA)
   0000                     650 	.org 0x0000
                     0080   651 _P0_0	=	0x0080
                     0081   652 _P0_1	=	0x0081
                     0082   653 _P0_2	=	0x0082
                     0083   654 _P0_3	=	0x0083
                     0084   655 _P0_4	=	0x0084
                     0085   656 _P0_5	=	0x0085
                     0086   657 _P0_6	=	0x0086
                     0087   658 _P0_7	=	0x0087
                     0088   659 _IT0	=	0x0088
                     0089   660 _RFTXRXIF	=	0x0089
                     008A   661 _IT1	=	0x008a
                     008B   662 _URX0IF	=	0x008b
                     008D   663 _ADCIF	=	0x008d
                     008F   664 _URX1IF	=	0x008f
                     0090   665 _P1_0	=	0x0090
                     0091   666 _P1_1	=	0x0091
                     0092   667 _P1_2	=	0x0092
                     0093   668 _P1_3	=	0x0093
                     0094   669 _P1_4	=	0x0094
                     0095   670 _P1_5	=	0x0095
                     0096   671 _P1_6	=	0x0096
                     0097   672 _P1_7	=	0x0097
                     0098   673 _ENCIF_0	=	0x0098
                     0099   674 _ENCIF_1	=	0x0099
                     00A0   675 _P2_0	=	0x00a0
                     00A1   676 _P2_1	=	0x00a1
                     00A2   677 _P2_2	=	0x00a2
                     00A3   678 _P2_3	=	0x00a3
                     00A4   679 _P2_4	=	0x00a4
                     00A5   680 _P2_5	=	0x00a5
                     00A6   681 _P2_6	=	0x00a6
                     00A7   682 _P2_7	=	0x00a7
                     00A8   683 _RFTXRXIE	=	0x00a8
                     00A9   684 _ADCIE	=	0x00a9
                     00AA   685 _URX0IE	=	0x00aa
                     00AB   686 _URX1IE	=	0x00ab
                     00AC   687 _ENCIE	=	0x00ac
                     00AD   688 _STIE	=	0x00ad
                     00AF   689 _EA	=	0x00af
                     00B8   690 _DMAIE	=	0x00b8
                     00B9   691 _T1IE	=	0x00b9
                     00BA   692 _T2IE	=	0x00ba
                     00BB   693 _T3IE	=	0x00bb
                     00BC   694 _T4IE	=	0x00bc
                     00BD   695 _P0IE	=	0x00bd
                     00C0   696 _DMAIF	=	0x00c0
                     00C1   697 _T1IF	=	0x00c1
                     00C2   698 _T2IF	=	0x00c2
                     00C3   699 _T3IF	=	0x00c3
                     00C4   700 _T4IF	=	0x00c4
                     00C5   701 _P0IF	=	0x00c5
                     00C7   702 _STIF	=	0x00c7
                     00D0   703 _P	=	0x00d0
                     00D1   704 _F1	=	0x00d1
                     00D2   705 _OV	=	0x00d2
                     00D3   706 _RS0	=	0x00d3
                     00D4   707 _RS1	=	0x00d4
                     00D5   708 _F0	=	0x00d5
                     00D6   709 _AC	=	0x00d6
                     00D7   710 _CY	=	0x00d7
                     00D8   711 _T3OVFIF	=	0x00d8
                     00D9   712 _T3CH0IF	=	0x00d9
                     00DA   713 _T3CH1IF	=	0x00da
                     00DB   714 _T4OVFIF	=	0x00db
                     00DC   715 _T4CH0IF	=	0x00dc
                     00DD   716 _T4CH1IF	=	0x00dd
                     00DE   717 _OVFIM	=	0x00de
                     00E0   718 _ACC_0	=	0x00e0
                     00E1   719 _ACC_1	=	0x00e1
                     00E2   720 _ACC_2	=	0x00e2
                     00E3   721 _ACC_3	=	0x00e3
                     00E4   722 _ACC_4	=	0x00e4
                     00E5   723 _ACC_5	=	0x00e5
                     00E6   724 _ACC_6	=	0x00e6
                     00E7   725 _ACC_7	=	0x00e7
                     00E8   726 _P2IF	=	0x00e8
                     00E9   727 _UTX0IF	=	0x00e9
                     00EA   728 _UTX1IF	=	0x00ea
                     00EB   729 _P1IF	=	0x00eb
                     00EC   730 _WDTIF	=	0x00ec
                     00F0   731 _B_0	=	0x00f0
                     00F1   732 _B_1	=	0x00f1
                     00F2   733 _B_2	=	0x00f2
                     00F3   734 _B_3	=	0x00f3
                     00F4   735 _B_4	=	0x00f4
                     00F5   736 _B_5	=	0x00f5
                     00F6   737 _B_6	=	0x00f6
                     00F7   738 _B_7	=	0x00f7
                     00F8   739 _ACTIVE	=	0x00f8
                     00F9   740 _TX_BYTE	=	0x00f9
                     00FA   741 _RX_BYTE	=	0x00fa
                     00FB   742 _ERR	=	0x00fb
                     00FC   743 _FE	=	0x00fc
                     00FD   744 _SLAVE	=	0x00fd
                     00FE   745 _RE	=	0x00fe
                     00FF   746 _MODE	=	0x00ff
                     00E8   747 _USBIF	=	0x00e8
                            748 ;--------------------------------------------------------
                            749 ; overlayable register banks
                            750 ;--------------------------------------------------------
                            751 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     752 	.ds 8
                            753 ;--------------------------------------------------------
                            754 ; overlayable bit register bank
                            755 ;--------------------------------------------------------
                            756 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     757 bits:
   0000                     758 	.ds 1
                     8000   759 	b0 = bits[0]
                     8100   760 	b1 = bits[1]
                     8200   761 	b2 = bits[2]
                     8300   762 	b3 = bits[3]
                     8400   763 	b4 = bits[4]
                     8500   764 	b5 = bits[5]
                     8600   765 	b6 = bits[6]
                     8700   766 	b7 = bits[7]
                            767 ;--------------------------------------------------------
                            768 ; internal ram data
                            769 ;--------------------------------------------------------
                            770 	.area DSEG    (DATA)
   0000                     771 _input_size::
   0000                     772 	.ds 1
   0001                     773 _input_head_idx::
   0001                     774 	.ds 1
   0002                     775 _input_tail_idx::
   0002                     776 	.ds 1
   0003                     777 _output_size::
   0003                     778 	.ds 1
   0004                     779 _output_head_idx::
   0004                     780 	.ds 1
   0005                     781 _output_tail_idx::
   0005                     782 	.ds 1
   0006                     783 _serial_data_available::
   0006                     784 	.ds 1
   0007                     785 _spi_mode::
   0007                     786 	.ds 1
   0008                     787 _master_send_size::
   0008                     788 	.ds 1
   0009                     789 _slave_send_size::
   0009                     790 	.ds 1
   000A                     791 _cb_ep5::
   000A                     792 	.ds 2
   000C                     793 _txdata_PARM_2:
   000C                     794 	.ds 1
   000D                     795 _txdata_PARM_3:
   000D                     796 	.ds 2
   000F                     797 _txdata_PARM_4:
   000F                     798 	.ds 2
   0011                     799 _processOUTEP5_loop_1_117:
   0011                     800 	.ds 2
   0013                     801 _processOUTEP5_sloc0_1_0:
   0013                     802 	.ds 2
   0015                     803 _processOUTEP5_sloc1_1_0:
   0015                     804 	.ds 2
   0017                     805 _processOUTEP5_sloc2_1_0:
   0017                     806 	.ds 2
                            807 ;--------------------------------------------------------
                            808 ; overlayable items in internal ram 
                            809 ;--------------------------------------------------------
                            810 	.area	OSEG    (OVR,DATA)
                            811 	.area	OSEG    (OVR,DATA)
                            812 	.area	OSEG    (OVR,DATA)
                            813 ;--------------------------------------------------------
                            814 ; indirectly addressable internal ram data
                            815 ;--------------------------------------------------------
                            816 	.area ISEG    (DATA)
                            817 ;--------------------------------------------------------
                            818 ; absolute internal ram data
                            819 ;--------------------------------------------------------
                            820 	.area IABS    (ABS,DATA)
                            821 	.area IABS    (ABS,DATA)
                            822 ;--------------------------------------------------------
                            823 ; bit data
                            824 ;--------------------------------------------------------
                            825 	.area BSEG    (BIT)
                            826 ;--------------------------------------------------------
                            827 ; paged external ram data
                            828 ;--------------------------------------------------------
                            829 	.area PSEG    (PAG,XDATA)
                            830 ;--------------------------------------------------------
                            831 ; external ram data
                            832 ;--------------------------------------------------------
                            833 	.area XSEG    (XDATA)
                     DF02   834 _MDMCTRL0H	=	0xdf02
                     DF00   835 _SYNC1	=	0xdf00
                     DF01   836 _SYNC0	=	0xdf01
                     DF02   837 _PKTLEN	=	0xdf02
                     DF03   838 _PKTCTRL1	=	0xdf03
                     DF04   839 _PKTCTRL0	=	0xdf04
                     DF05   840 _ADDR	=	0xdf05
                     DF06   841 _CHANNR	=	0xdf06
                     DF07   842 _FSCTRL1	=	0xdf07
                     DF08   843 _FSCTRL0	=	0xdf08
                     DF09   844 _FREQ2	=	0xdf09
                     DF0A   845 _FREQ1	=	0xdf0a
                     DF0B   846 _FREQ0	=	0xdf0b
                     DF0C   847 _MDMCFG4	=	0xdf0c
                     DF0D   848 _MDMCFG3	=	0xdf0d
                     DF0E   849 _MDMCFG2	=	0xdf0e
                     DF0F   850 _MDMCFG1	=	0xdf0f
                     DF10   851 _MDMCFG0	=	0xdf10
                     DF11   852 _DEVIATN	=	0xdf11
                     DF12   853 _MCSM2	=	0xdf12
                     DF13   854 _MCSM1	=	0xdf13
                     DF14   855 _MCSM0	=	0xdf14
                     DF15   856 _FOCCFG	=	0xdf15
                     DF16   857 _BSCFG	=	0xdf16
                     DF17   858 _AGCCTRL2	=	0xdf17
                     DF18   859 _AGCCTRL1	=	0xdf18
                     DF19   860 _AGCCTRL0	=	0xdf19
                     DF1A   861 _FREND1	=	0xdf1a
                     DF1B   862 _FREND0	=	0xdf1b
                     DF1C   863 _FSCAL3	=	0xdf1c
                     DF1D   864 _FSCAL2	=	0xdf1d
                     DF1E   865 _FSCAL1	=	0xdf1e
                     DF1F   866 _FSCAL0	=	0xdf1f
                     DF20   867 __XREGDF20	=	0xdf20
                     DF21   868 __XREGDF21	=	0xdf21
                     DF22   869 __XREGDF22	=	0xdf22
                     DF23   870 _TEST2	=	0xdf23
                     DF24   871 _TEST1	=	0xdf24
                     DF25   872 _TEST0	=	0xdf25
                     DF26   873 __XREGDF26	=	0xdf26
                     DF27   874 _PA_TABLE7	=	0xdf27
                     DF28   875 _PA_TABLE6	=	0xdf28
                     DF29   876 _PA_TABLE5	=	0xdf29
                     DF2A   877 _PA_TABLE4	=	0xdf2a
                     DF2B   878 _PA_TABLE3	=	0xdf2b
                     DF2C   879 _PA_TABLE2	=	0xdf2c
                     DF2D   880 _PA_TABLE1	=	0xdf2d
                     DF2E   881 _PA_TABLE0	=	0xdf2e
                     DF2F   882 _IOCFG2	=	0xdf2f
                     DF30   883 _IOCFG1	=	0xdf30
                     DF31   884 _IOCFG0	=	0xdf31
                     DF32   885 __XREGDF32	=	0xdf32
                     DF33   886 __XREGDF33	=	0xdf33
                     DF34   887 __XREGDF34	=	0xdf34
                     DF35   888 __XREGDF35	=	0xdf35
                     DF36   889 _PARTNUM	=	0xdf36
                     DF37   890 _VERSION	=	0xdf37
                     DF38   891 _FREQEST	=	0xdf38
                     DF39   892 _LQI	=	0xdf39
                     DF3A   893 _RSSI	=	0xdf3a
                     DF3B   894 _MARCSTATE	=	0xdf3b
                     DF3C   895 _PKTSTATUS	=	0xdf3c
                     DF3D   896 _VCO_VC_DAC	=	0xdf3d
                     DF40   897 _I2SCFG0	=	0xdf40
                     DF41   898 _I2SCFG1	=	0xdf41
                     DF42   899 _I2SDATL	=	0xdf42
                     DF43   900 _I2SDATH	=	0xdf43
                     DF44   901 _I2SWCNT	=	0xdf44
                     DF45   902 _I2SSTAT	=	0xdf45
                     DF46   903 _I2SCLKF0	=	0xdf46
                     DF47   904 _I2SCLKF1	=	0xdf47
                     DF48   905 _I2SCLKF2	=	0xdf48
                     DF80   906 __NA_P0	=	0xdf80
                     DF81   907 __NA_SP	=	0xdf81
                     DF82   908 __NA_DPL0	=	0xdf82
                     DF83   909 __NA_DPH0	=	0xdf83
                     DF84   910 __NA_DPL1	=	0xdf84
                     DF85   911 __NA_DPH1	=	0xdf85
                     DF86   912 _X_U0CSR	=	0xdf86
                     DF87   913 __NA_PCON	=	0xdf87
                     DF88   914 __NA_TCON	=	0xdf88
                     DF89   915 _X_P0IFG	=	0xdf89
                     DF8A   916 _X_P1IFG	=	0xdf8a
                     DF8B   917 _X_P2IFG	=	0xdf8b
                     DF8C   918 _X_PICTL	=	0xdf8c
                     DF8D   919 _X_P1IEN	=	0xdf8d
                     DF8E   920 __X_SFR8E	=	0xdf8e
                     DF8F   921 _X_P0INP	=	0xdf8f
                     DF90   922 __NA_P1	=	0xdf90
                     DF91   923 _X_RFIM	=	0xdf91
                     DF92   924 __NA_DPS	=	0xdf92
                     DF93   925 _X_MPAGE	=	0xdf93
                     DF94   926 __X_SFR94	=	0xdf94
                     DF95   927 __X_SFR95	=	0xdf95
                     DF96   928 __X_SFR96	=	0xdf96
                     DF97   929 __X_SFR97	=	0xdf97
                     DF98   930 __NA_S0CON	=	0xdf98
                     DF99   931 __X_SFR99	=	0xdf99
                     DF9A   932 __NA_IEN2	=	0xdf9a
                     DF9B   933 __NA_S1CON	=	0xdf9b
                     DF9C   934 _X_T2CT	=	0xdf9c
                     DF9D   935 _X_T2PR	=	0xdf9d
                     DF9E   936 _X_T2CTL	=	0xdf9e
                     DF9F   937 __X_SFR9F	=	0xdf9f
                     DFA0   938 __NA_P2	=	0xdfa0
                     DFA1   939 _X_WORIRQ	=	0xdfa1
                     DFA2   940 _X_WORCTRL	=	0xdfa2
                     DFA3   941 _X_WOREVT0	=	0xdfa3
                     DFA4   942 _X_WOREVT1	=	0xdfa4
                     DFA5   943 _X_WORTIME0	=	0xdfa5
                     DFA6   944 _X_WORTIME1	=	0xdfa6
                     DFA7   945 __X_SFRA7	=	0xdfa7
                     DFA8   946 __NA_IEN0	=	0xdfa8
                     DFA9   947 __NA_IP0	=	0xdfa9
                     DFAA   948 __X_SFRAA	=	0xdfaa
                     DFAB   949 _X_FWT	=	0xdfab
                     DFAC   950 _X_FADDRL	=	0xdfac
                     DFAD   951 _X_FADDRH	=	0xdfad
                     DFAE   952 _X_FCTL	=	0xdfae
                     DFAF   953 _X_FWDATA	=	0xdfaf
                     DFB0   954 __X_SFRB0	=	0xdfb0
                     DFB1   955 _X_ENCDI	=	0xdfb1
                     DFB2   956 _X_ENCDO	=	0xdfb2
                     DFB3   957 _X_ENCCS	=	0xdfb3
                     DFB4   958 _X_ADCCON1	=	0xdfb4
                     DFB5   959 _X_ADCCON2	=	0xdfb5
                     DFB6   960 _X_ADCCON3	=	0xdfb6
                     DFB7   961 __X_SFRB7	=	0xdfb7
                     DFB8   962 __NA_IEN1	=	0xdfb8
                     DFB9   963 __NA_IP1	=	0xdfb9
                     DFBA   964 _X_ADCL	=	0xdfba
                     DFBB   965 _X_ADCH	=	0xdfbb
                     DFBC   966 _X_RNDL	=	0xdfbc
                     DFBD   967 _X_RNDH	=	0xdfbd
                     DFBE   968 _X_SLEEP	=	0xdfbe
                     DFBF   969 __X_SFRBF	=	0xdfbf
                     DFC0   970 __NA_IRCON	=	0xdfc0
                     DFC1   971 _X_U0DBUF	=	0xdfc1
                     DFC2   972 _X_U0BAUD	=	0xdfc2
                     DFC3   973 __X_SFRC3	=	0xdfc3
                     DFC4   974 _X_U0UCR	=	0xdfc4
                     DFC5   975 _X_U0GCR	=	0xdfc5
                     DFC6   976 _X_CLKCON	=	0xdfc6
                     DFC7   977 _X_MEMCTR	=	0xdfc7
                     DFC8   978 __X_SFRC8	=	0xdfc8
                     DFC9   979 _X_WDCTL	=	0xdfc9
                     DFCA   980 _X_T3CNT	=	0xdfca
                     DFCB   981 _X_T3CTL	=	0xdfcb
                     DFCC   982 _X_T3CCTL0	=	0xdfcc
                     DFCD   983 _X_T3CC0	=	0xdfcd
                     DFCE   984 _X_T3CCTL1	=	0xdfce
                     DFCF   985 _X_T3CC1	=	0xdfcf
                     DFD0   986 __NA_PSW	=	0xdfd0
                     DFD1   987 _X_DMAIRQ	=	0xdfd1
                     DFD2   988 _X_DMA1CFGL	=	0xdfd2
                     DFD3   989 _X_DMA1CFGH	=	0xdfd3
                     DFD4   990 _X_DMA0CFGL	=	0xdfd4
                     DFD5   991 _X_DMA0CFGH	=	0xdfd5
                     DFD6   992 _X_DMAARM	=	0xdfd6
                     DFD7   993 _X_DMAREQ	=	0xdfd7
                     DFD8   994 _X_TIMIF	=	0xdfd8
                     DFD9   995 _X_RFD	=	0xdfd9
                     DFDA   996 _X_T1CC0L	=	0xdfda
                     DFDB   997 _X_T1CC0H	=	0xdfdb
                     DFDC   998 _X_T1CC1L	=	0xdfdc
                     DFDD   999 _X_T1CC1H	=	0xdfdd
                     DFDE  1000 _X_T1CC2L	=	0xdfde
                     DFDF  1001 _X_T1CC2H	=	0xdfdf
                     DFE0  1002 __NA_ACC	=	0xdfe0
                     DFE1  1003 _X_RFST	=	0xdfe1
                     DFE2  1004 _X_T1CNTL	=	0xdfe2
                     DFE3  1005 _X_T1CNTH	=	0xdfe3
                     DFE4  1006 _X_T1CTL	=	0xdfe4
                     DFE5  1007 _X_T1CCTL0	=	0xdfe5
                     DFE6  1008 _X_T1CCTL1	=	0xdfe6
                     DFE7  1009 _X_T1CCTL2	=	0xdfe7
                     DFE8  1010 __NA_IRCON2	=	0xdfe8
                     DFE9  1011 _X_RFIF	=	0xdfe9
                     DFEA  1012 _X_T4CNT	=	0xdfea
                     DFEB  1013 _X_T4CTL	=	0xdfeb
                     DFEC  1014 _X_T4CCTL0	=	0xdfec
                     DFED  1015 _X_T4CC0	=	0xdfed
                     DFEE  1016 _X_T4CCTL1	=	0xdfee
                     DFEF  1017 _X_T4CC1	=	0xdfef
                     DFF0  1018 __NA_B	=	0xdff0
                     DFF1  1019 _X_PERCFG	=	0xdff1
                     DFF2  1020 _X_ADCCFG	=	0xdff2
                     DFF3  1021 _X_P0SEL	=	0xdff3
                     DFF4  1022 _X_P1SEL	=	0xdff4
                     DFF5  1023 _X_P2SEL	=	0xdff5
                     DFF6  1024 _X_P1INP	=	0xdff6
                     DFF7  1025 _X_P2INP	=	0xdff7
                     DFF8  1026 _X_U1CSR	=	0xdff8
                     DFF9  1027 _X_U1DBUF	=	0xdff9
                     DFFA  1028 _X_U1BAUD	=	0xdffa
                     DFFB  1029 _X_U1UCR	=	0xdffb
                     DFFC  1030 _X_U1GCR	=	0xdffc
                     DFFD  1031 _X_P0DIR	=	0xdffd
                     DFFE  1032 _X_P1DIR	=	0xdffe
                     DFFF  1033 _X_P2DIR	=	0xdfff
                     DE00  1034 _USBADDR	=	0xde00
                     DE01  1035 _USBPOW	=	0xde01
                     DE02  1036 _USBIIF	=	0xde02
                     DE04  1037 _USBOIF	=	0xde04
                     DE06  1038 _USBCIF	=	0xde06
                     DE07  1039 _USBIIE	=	0xde07
                     DE09  1040 _USBOIE	=	0xde09
                     DE0B  1041 _USBCIE	=	0xde0b
                     DE0C  1042 _USBFRML	=	0xde0c
                     DE0D  1043 _USBFRMH	=	0xde0d
                     DE0E  1044 _USBINDEX	=	0xde0e
                     DE10  1045 _USBMAXI	=	0xde10
                     DE11  1046 _USBCS0	=	0xde11
                     DE11  1047 _USBCSIL	=	0xde11
                     DE12  1048 _USBCSIH	=	0xde12
                     DE13  1049 _USBMAXO	=	0xde13
                     DE14  1050 _USBCSOL	=	0xde14
                     DE15  1051 _USBCSOH	=	0xde15
                     DE16  1052 _USBCNT0	=	0xde16
                     DE16  1053 _USBCNTL	=	0xde16
                     DE17  1054 _USBCNTH	=	0xde17
                     DE20  1055 _USBF0	=	0xde20
                     DE22  1056 _USBF1	=	0xde22
                     DE24  1057 _USBF2	=	0xde24
                     DE26  1058 _USBF3	=	0xde26
                     DE28  1059 _USBF4	=	0xde28
                     DE2A  1060 _USBF5	=	0xde2a
   0000                    1061 _spi_input_buf::
   0000                    1062 	.ds 220
   00DC                    1063 _spi_output_buf::
   00DC                    1064 	.ds 220
   01B8                    1065 _usb_ep5_OUTbuf::
   01B8                    1066 	.ds 516
   03BC                    1067 _ep5::
   03BC                    1068 	.ds 18
   03CE                    1069 _vcom_putstr_buff_1_98:
   03CE                    1070 	.ds 3
   03D1                    1071 _appReturn_PARM_2:
   03D1                    1072 	.ds 2
   03D3                    1073 _appReturn_len_1_114:
   03D3                    1074 	.ds 1
   03D4                    1075 _processOUTEP5_ptr_1_117:
   03D4                    1076 	.ds 2
                           1077 ;--------------------------------------------------------
                           1078 ; absolute external ram data
                           1079 ;--------------------------------------------------------
                           1080 	.area XABS    (ABS,XDATA)
                           1081 ;--------------------------------------------------------
                           1082 ; external initialized ram data
                           1083 ;--------------------------------------------------------
                           1084 	.area XISEG   (XDATA)
                           1085 	.area HOME    (CODE)
                           1086 	.area GSINIT0 (CODE)
                           1087 	.area GSINIT1 (CODE)
                           1088 	.area GSINIT2 (CODE)
                           1089 	.area GSINIT3 (CODE)
                           1090 	.area GSINIT4 (CODE)
                           1091 	.area GSINIT5 (CODE)
                           1092 	.area GSINIT  (CODE)
                           1093 	.area GSFINAL (CODE)
                           1094 	.area CSEG    (CODE)
                           1095 ;--------------------------------------------------------
                           1096 ; global & static initialisations
                           1097 ;--------------------------------------------------------
                           1098 	.area HOME    (CODE)
                           1099 	.area GSINIT  (CODE)
                           1100 	.area GSFINAL (CODE)
                           1101 	.area GSINIT  (CODE)
                           1102 ;	cc1110_spicom.c:40: volatile uint8_t input_size = 0;
   0000 75*00 00      [24] 1103 	mov	_input_size,#0x00
                           1104 ;	cc1110_spicom.c:41: volatile uint8_t input_head_idx = 0;
   0003 75*01 00      [24] 1105 	mov	_input_head_idx,#0x00
                           1106 ;	cc1110_spicom.c:42: volatile uint8_t input_tail_idx = 0;
   0006 75*02 00      [24] 1107 	mov	_input_tail_idx,#0x00
                           1108 ;	cc1110_spicom.c:45: volatile uint8_t output_size = 0;
   0009 75*03 00      [24] 1109 	mov	_output_size,#0x00
                           1110 ;	cc1110_spicom.c:46: volatile uint8_t output_head_idx = 0;
   000C 75*04 00      [24] 1111 	mov	_output_head_idx,#0x00
                           1112 ;	cc1110_spicom.c:47: volatile uint8_t output_tail_idx = 0;
   000F 75*05 00      [24] 1113 	mov	_output_tail_idx,#0x00
                           1114 ;	cc1110_spicom.c:56: volatile uint8_t master_send_size = 0;
   0012 75*08 00      [24] 1115 	mov	_master_send_size,#0x00
                           1116 ;	cc1110_spicom.c:57: volatile uint8_t slave_send_size = 0;
   0015 75*09 00      [24] 1117 	mov	_slave_send_size,#0x00
                           1118 ;--------------------------------------------------------
                           1119 ; Home
                           1120 ;--------------------------------------------------------
                           1121 	.area HOME    (CODE)
                           1122 	.area HOME    (CODE)
                           1123 ;--------------------------------------------------------
                           1124 ; code
                           1125 ;--------------------------------------------------------
                           1126 	.area CSEG    (CODE)
                           1127 ;------------------------------------------------------------
                           1128 ;Allocation info for local variables in function 'rx1_isr'
                           1129 ;------------------------------------------------------------
                           1130 ;value                     Allocated to registers r7 
                           1131 ;------------------------------------------------------------
                           1132 ;	cc1110_spicom.c:89: void rx1_isr(void) __interrupt URX1_VECTOR {
                           1133 ;	-----------------------------------------
                           1134 ;	 function rx1_isr
                           1135 ;	-----------------------------------------
   0000                    1136 _rx1_isr:
                     0007  1137 	ar7 = 0x07
                     0006  1138 	ar6 = 0x06
                     0005  1139 	ar5 = 0x05
                     0004  1140 	ar4 = 0x04
                     0003  1141 	ar3 = 0x03
                     0002  1142 	ar2 = 0x02
                     0001  1143 	ar1 = 0x01
                     0000  1144 	ar0 = 0x00
   0000 C0*00         [24] 1145 	push	bits
   0002 C0 E0         [24] 1146 	push	acc
   0004 C0 F0         [24] 1147 	push	b
   0006 C0 82         [24] 1148 	push	dpl
   0008 C0 83         [24] 1149 	push	dph
   000A C0 07         [24] 1150 	push	(0+7)
   000C C0 06         [24] 1151 	push	(0+6)
   000E C0 05         [24] 1152 	push	(0+5)
   0010 C0 04         [24] 1153 	push	(0+4)
   0012 C0 03         [24] 1154 	push	(0+3)
   0014 C0 02         [24] 1155 	push	(0+2)
   0016 C0 01         [24] 1156 	push	(0+1)
   0018 C0 00         [24] 1157 	push	(0+0)
   001A C0 D0         [24] 1158 	push	psw
   001C 75 D0 00      [24] 1159 	mov	psw,#0x00
                           1160 ;	cc1110_spicom.c:91: value = U1DBUF;
   001F AF F9         [24] 1161 	mov	r7,_U1DBUF
                           1162 ;	cc1110_spicom.c:93: if (spi_mode == SPI_MODE_WAIT && value == 0x99) {
   0021 E5*07         [12] 1163 	mov	a,_spi_mode
   0023 70 0F         [24] 1164 	jnz	00102$
   0025 BF 99 0C      [24] 1165 	cjne	r7,#0x99,00102$
                           1166 ;	cc1110_spicom.c:94: slave_send_size = output_size;
   0028 85*03*09      [24] 1167 	mov	_slave_send_size,_output_size
                           1168 ;	cc1110_spicom.c:96: spi_mode = SPI_MODE_SIZE;
   002B 75*07 01      [24] 1169 	mov	_spi_mode,#0x01
                           1170 ;	cc1110_spicom.c:97: U1DBUF = slave_send_size;
   002E 85*09 F9      [24] 1171 	mov	_U1DBUF,_slave_send_size
                           1172 ;	cc1110_spicom.c:98: return;
   0031 02r00rDE      [24] 1173 	ljmp	00126$
   0034                    1174 00102$:
                           1175 ;	cc1110_spicom.c:101: if (spi_mode == SPI_MODE_SIZE) {
   0034 74 01         [12] 1176 	mov	a,#0x01
   0036 B5*07 2C      [24] 1177 	cjne	a,_spi_mode,00109$
                           1178 ;	cc1110_spicom.c:102: master_send_size = value;
   0039 8F*08         [24] 1179 	mov	_master_send_size,r7
                           1180 ;	cc1110_spicom.c:103: input_size = 0;
   003B 75*00 00      [24] 1181 	mov	_input_size,#0x00
                           1182 ;	cc1110_spicom.c:104: ep5.OUTlen = value - 2; // first two bytes are app and cmd
   003E 8F 05         [24] 1183 	mov	ar5,r7
   0040 7E 00         [12] 1184 	mov	r6,#0x00
   0042 ED            [12] 1185 	mov	a,r5
   0043 24 FE         [12] 1186 	add	a,#0xFE
   0045 FD            [12] 1187 	mov	r5,a
   0046 EE            [12] 1188 	mov	a,r6
   0047 34 FF         [12] 1189 	addc	a,#0xFF
   0049 FE            [12] 1190 	mov	r6,a
   004A 90r03rC4      [24] 1191 	mov	dptr,#(_ep5 + 0x0008)
   004D ED            [12] 1192 	mov	a,r5
   004E F0            [24] 1193 	movx	@dptr,a
   004F EE            [12] 1194 	mov	a,r6
   0050 A3            [24] 1195 	inc	dptr
   0051 F0            [24] 1196 	movx	@dptr,a
                           1197 ;	cc1110_spicom.c:105: if (master_send_size > 0 || slave_send_size > 0) {
   0052 E5*08         [12] 1198 	mov	a,_master_send_size
   0054 70 04         [24] 1199 	jnz	00104$
   0056 E5*09         [12] 1200 	mov	a,_slave_send_size
   0058 60 05         [24] 1201 	jz	00105$
   005A                    1202 00104$:
                           1203 ;	cc1110_spicom.c:106: spi_mode = SPI_MODE_XFER;
   005A 75*07 02      [24] 1204 	mov	_spi_mode,#0x02
   005D 80 03         [24] 1205 	sjmp	00106$
   005F                    1206 00105$:
                           1207 ;	cc1110_spicom.c:108: spi_mode = SPI_MODE_WAIT;
   005F 75*07 00      [24] 1208 	mov	_spi_mode,#0x00
   0062                    1209 00106$:
                           1210 ;	cc1110_spicom.c:110: return;
   0062 02r00rDE      [24] 1211 	ljmp	00126$
   0065                    1212 00109$:
                           1213 ;	cc1110_spicom.c:113: if (spi_mode == SPI_MODE_XFER && input_size < master_send_size) {
   0065 74 02         [12] 1214 	mov	a,#0x02
   0067 B5*07 02      [24] 1215 	cjne	a,_spi_mode,00171$
   006A 80 03         [24] 1216 	sjmp	00172$
   006C                    1217 00171$:
   006C 02r00rDE      [24] 1218 	ljmp	00126$
   006F                    1219 00172$:
   006F C3            [12] 1220 	clr	c
   0070 E5*00         [12] 1221 	mov	a,_input_size
   0072 95*08         [12] 1222 	subb	a,_master_send_size
   0074 50 68         [24] 1223 	jnc	00126$
                           1224 ;	cc1110_spicom.c:114: if (input_size == 0) {
   0076 E5*00         [12] 1225 	mov	a,_input_size
   0078 70 07         [24] 1226 	jnz	00114$
                           1227 ;	cc1110_spicom.c:116: ep5.OUTapp = value;
   007A 90r03rC6      [24] 1228 	mov	dptr,#(_ep5 + 0x000a)
   007D EF            [12] 1229 	mov	a,r7
   007E F0            [24] 1230 	movx	@dptr,a
   007F 80 33         [24] 1231 	sjmp	00115$
   0081                    1232 00114$:
                           1233 ;	cc1110_spicom.c:118: } else if (input_size == 1) {
   0081 74 01         [12] 1234 	mov	a,#0x01
   0083 B5*00 07      [24] 1235 	cjne	a,_input_size,00111$
                           1236 ;	cc1110_spicom.c:120: ep5.OUTcmd = value;
   0086 90r03rC7      [24] 1237 	mov	dptr,#(_ep5 + 0x000b)
   0089 EF            [12] 1238 	mov	a,r7
   008A F0            [24] 1239 	movx	@dptr,a
   008B 80 27         [24] 1240 	sjmp	00115$
   008D                    1241 00111$:
                           1242 ;	cc1110_spicom.c:124: ep5.OUTbuf[input_size - 2] = value;
   008D 90r03rC1      [24] 1243 	mov	dptr,#(_ep5 + 0x0005)
   0090 E0            [24] 1244 	movx	a,@dptr
   0091 FC            [12] 1245 	mov	r4,a
   0092 A3            [24] 1246 	inc	dptr
   0093 E0            [24] 1247 	movx	a,@dptr
   0094 FD            [12] 1248 	mov	r5,a
   0095 A3            [24] 1249 	inc	dptr
   0096 E0            [24] 1250 	movx	a,@dptr
   0097 FE            [12] 1251 	mov	r6,a
   0098 AA*00         [24] 1252 	mov	r2,_input_size
   009A 7B 00         [12] 1253 	mov	r3,#0x00
   009C EA            [12] 1254 	mov	a,r2
   009D 24 FE         [12] 1255 	add	a,#0xFE
   009F FA            [12] 1256 	mov	r2,a
   00A0 EB            [12] 1257 	mov	a,r3
   00A1 34 FF         [12] 1258 	addc	a,#0xFF
   00A3 FB            [12] 1259 	mov	r3,a
   00A4 EA            [12] 1260 	mov	a,r2
   00A5 2C            [12] 1261 	add	a,r4
   00A6 FC            [12] 1262 	mov	r4,a
   00A7 EB            [12] 1263 	mov	a,r3
   00A8 3D            [12] 1264 	addc	a,r5
   00A9 FD            [12] 1265 	mov	r5,a
   00AA 8C 82         [24] 1266 	mov	dpl,r4
   00AC 8D 83         [24] 1267 	mov	dph,r5
   00AE 8E F0         [24] 1268 	mov	b,r6
   00B0 EF            [12] 1269 	mov	a,r7
   00B1 12r00r00      [24] 1270 	lcall	__gptrput
   00B4                    1271 00115$:
                           1272 ;	cc1110_spicom.c:126: input_size++;
   00B4 05*00         [12] 1273 	inc	_input_size
                           1274 ;	cc1110_spicom.c:127: if (input_size == master_send_size) {
   00B6 E5*08         [12] 1275 	mov	a,_master_send_size
   00B8 B5*00 06      [24] 1276 	cjne	a,_input_size,00117$
                           1277 ;	cc1110_spicom.c:128: master_send_size = 0;
   00BB 75*08 00      [24] 1278 	mov	_master_send_size,#0x00
                           1279 ;	cc1110_spicom.c:129: serial_data_available = 1;
   00BE 75*06 01      [24] 1280 	mov	_serial_data_available,#0x01
   00C1                    1281 00117$:
                           1282 ;	cc1110_spicom.c:131: if (slave_send_size == 0 && master_send_size == 0) {
   00C1 E5*09         [12] 1283 	mov	a,_slave_send_size
   00C3 70 06         [24] 1284 	jnz	00119$
   00C5 E5*08         [12] 1285 	mov	a,_master_send_size
                           1286 ;	cc1110_spicom.c:132: spi_mode = SPI_MODE_WAIT;
   00C7 70 02         [24] 1287 	jnz	00119$
   00C9 F5*07         [12] 1288 	mov	_spi_mode,a
   00CB                    1289 00119$:
                           1290 ;	cc1110_spicom.c:135: if (serial_data_available)
   00CB E5*06         [12] 1291 	mov	a,_serial_data_available
   00CD 60 0F         [24] 1292 	jz	00126$
                           1293 ;	cc1110_spicom.c:137: ep5.flags |= EP_OUTBUF_WRITTEN;
   00CF 90r03rCA      [24] 1294 	mov	dptr,#(_ep5 + 0x000e)
   00D2 E0            [24] 1295 	movx	a,@dptr
   00D3 44 02         [12] 1296 	orl	a,#0x02
   00D5 F0            [24] 1297 	movx	@dptr,a
                           1298 ;	cc1110_spicom.c:138: LED_RED = 1;
   00D6 D2 A3         [12] 1299 	setb	_P2_3
                           1300 ;	cc1110_spicom.c:139: processOUTEP5();
   00D8 12r03r7B      [24] 1301 	lcall	_processOUTEP5
                           1302 ;	cc1110_spicom.c:141: serial_data_available = 0;
   00DB 75*06 00      [24] 1303 	mov	_serial_data_available,#0x00
   00DE                    1304 00126$:
   00DE D0 D0         [24] 1305 	pop	psw
   00E0 D0 00         [24] 1306 	pop	(0+0)
   00E2 D0 01         [24] 1307 	pop	(0+1)
   00E4 D0 02         [24] 1308 	pop	(0+2)
   00E6 D0 03         [24] 1309 	pop	(0+3)
   00E8 D0 04         [24] 1310 	pop	(0+4)
   00EA D0 05         [24] 1311 	pop	(0+5)
   00EC D0 06         [24] 1312 	pop	(0+6)
   00EE D0 07         [24] 1313 	pop	(0+7)
   00F0 D0 83         [24] 1314 	pop	dph
   00F2 D0 82         [24] 1315 	pop	dpl
   00F4 D0 F0         [24] 1316 	pop	b
   00F6 D0 E0         [24] 1317 	pop	acc
   00F8 D0*00         [24] 1318 	pop	bits
   00FA 32            [24] 1319 	reti
                           1320 ;------------------------------------------------------------
                           1321 ;Allocation info for local variables in function 'tx1_isr'
                           1322 ;------------------------------------------------------------
                           1323 ;	cc1110_spicom.c:146: void tx1_isr(void) __interrupt UTX1_VECTOR {
                           1324 ;	-----------------------------------------
                           1325 ;	 function tx1_isr
                           1326 ;	-----------------------------------------
   00FB                    1327 _tx1_isr:
   00FB C0 E0         [24] 1328 	push	acc
   00FD C0 82         [24] 1329 	push	dpl
   00FF C0 83         [24] 1330 	push	dph
   0101 C0 07         [24] 1331 	push	ar7
   0103 C0 D0         [24] 1332 	push	psw
   0105 75 D0 00      [24] 1333 	mov	psw,#0x00
                           1334 ;	cc1110_spicom.c:147: IRCON2 &= ~BIT2; // Clear UTX1IF
   0108 AF E8         [24] 1335 	mov	r7,_IRCON2
   010A 74 FB         [12] 1336 	mov	a,#0xFB
   010C 5F            [12] 1337 	anl	a,r7
   010D F5 E8         [12] 1338 	mov	_IRCON2,a
                           1339 ;	cc1110_spicom.c:148: if (spi_mode == SPI_MODE_SIZE || spi_mode == SPI_MODE_XFER) {
   010F 74 01         [12] 1340 	mov	a,#0x01
   0111 B5*07 02      [24] 1341 	cjne	a,_spi_mode,00139$
   0114 80 05         [24] 1342 	sjmp	00112$
   0116                    1343 00139$:
   0116 74 02         [12] 1344 	mov	a,#0x02
   0118 B5*07 42      [24] 1345 	cjne	a,_spi_mode,00113$
   011B                    1346 00112$:
                           1347 ;	cc1110_spicom.c:149: if (slave_send_size > 0 && output_size > 0) {
   011B E5*09         [12] 1348 	mov	a,_slave_send_size
   011D 60 39         [24] 1349 	jz	00109$
   011F E5*03         [12] 1350 	mov	a,_output_size
   0121 60 35         [24] 1351 	jz	00109$
                           1352 ;	cc1110_spicom.c:150: slave_send_size--;
   0123 15*09         [12] 1353 	dec	_slave_send_size
                           1354 ;	cc1110_spicom.c:151: if (slave_send_size == 0 && master_send_size == 0) {
   0125 E5*09         [12] 1355 	mov	a,_slave_send_size
   0127 70 06         [24] 1356 	jnz	00102$
   0129 E5*08         [12] 1357 	mov	a,_master_send_size
                           1358 ;	cc1110_spicom.c:152: spi_mode = SPI_MODE_WAIT;
   012B 70 02         [24] 1359 	jnz	00102$
   012D F5*07         [12] 1360 	mov	_spi_mode,a
   012F                    1361 00102$:
                           1362 ;	cc1110_spicom.c:154: U1DBUF = spi_output_buf[output_tail_idx];
   012F E5*05         [12] 1363 	mov	a,_output_tail_idx
   0131 24rDC         [12] 1364 	add	a,#_spi_output_buf
   0133 F5 82         [12] 1365 	mov	dpl,a
   0135 E4            [12] 1366 	clr	a
   0136 34s00         [12] 1367 	addc	a,#(_spi_output_buf >> 8)
   0138 F5 83         [12] 1368 	mov	dph,a
   013A E0            [24] 1369 	movx	a,@dptr
   013B F5 F9         [12] 1370 	mov	_U1DBUF,a
                           1371 ;	cc1110_spicom.c:155: output_size--;
   013D 15*03         [12] 1372 	dec	_output_size
                           1373 ;	cc1110_spicom.c:156: if (output_size == 0) {
   013F E5*03         [12] 1374 	mov	a,_output_size
   0141 70 08         [24] 1375 	jnz	00105$
                           1376 ;	cc1110_spicom.c:157: ep5.flags &= ~EP_INBUF_WRITTEN;
   0143 90r03rCA      [24] 1377 	mov	dptr,#(_ep5 + 0x000e)
   0146 E0            [24] 1378 	movx	a,@dptr
   0147 54 FE         [12] 1379 	anl	a,#0xFE
   0149 FF            [12] 1380 	mov	r7,a
   014A F0            [24] 1381 	movx	@dptr,a
   014B                    1382 00105$:
                           1383 ;	cc1110_spicom.c:159: output_tail_idx++;
   014B 05*05         [12] 1384 	inc	_output_tail_idx
                           1385 ;	cc1110_spicom.c:160: if (output_tail_idx >= SPI_BUF_LEN) {
   014D 74 24         [12] 1386 	mov	a,#0x100 - 0xDC
   014F 25*05         [12] 1387 	add	a,_output_tail_idx
   0151 50 0D         [24] 1388 	jnc	00116$
                           1389 ;	cc1110_spicom.c:161: output_tail_idx = 0;
   0153 75*05 00      [24] 1390 	mov	_output_tail_idx,#0x00
   0156 80 08         [24] 1391 	sjmp	00116$
   0158                    1392 00109$:
                           1393 ;	cc1110_spicom.c:164: U1DBUF = 0x99;
   0158 75 F9 99      [24] 1394 	mov	_U1DBUF,#0x99
   015B 80 03         [24] 1395 	sjmp	00116$
   015D                    1396 00113$:
                           1397 ;	cc1110_spicom.c:167: U1DBUF = 0x99;
   015D 75 F9 99      [24] 1398 	mov	_U1DBUF,#0x99
   0160                    1399 00116$:
   0160 D0 D0         [24] 1400 	pop	psw
   0162 D0 07         [24] 1401 	pop	ar7
   0164 D0 83         [24] 1402 	pop	dph
   0166 D0 82         [24] 1403 	pop	dpl
   0168 D0 E0         [24] 1404 	pop	acc
   016A 32            [24] 1405 	reti
                           1406 ;	eliminated unneeded push/pop b
                           1407 ;------------------------------------------------------------
                           1408 ;Allocation info for local variables in function 'vcom_flush'
                           1409 ;------------------------------------------------------------
                           1410 ;	cc1110_spicom.c:171: void vcom_flush()
                           1411 ;	-----------------------------------------
                           1412 ;	 function vcom_flush
                           1413 ;	-----------------------------------------
   016B                    1414 _vcom_flush:
                           1415 ;	cc1110_spicom.c:174: return;
   016B 22            [24] 1416 	ret
                           1417 ;------------------------------------------------------------
                           1418 ;Allocation info for local variables in function 'vcom_putchar'
                           1419 ;------------------------------------------------------------
                           1420 ;c                         Allocated to registers r7 
                           1421 ;------------------------------------------------------------
                           1422 ;	cc1110_spicom.c:177: void vcom_putchar(char c)
                           1423 ;	-----------------------------------------
                           1424 ;	 function vcom_putchar
                           1425 ;	-----------------------------------------
   016C                    1426 _vcom_putchar:
   016C AF 82         [24] 1427 	mov	r7,dpl
                           1428 ;	cc1110_spicom.c:179: if (output_size >= SPI_BUF_LEN) {
   016E 74 24         [12] 1429 	mov	a,#0x100 - 0xDC
   0170 25*03         [12] 1430 	add	a,_output_size
   0172 50 0D         [24] 1431 	jnc	00104$
                           1432 ;	cc1110_spicom.c:181: output_size--;
   0174 15*03         [12] 1433 	dec	_output_size
                           1434 ;	cc1110_spicom.c:182: output_tail_idx++;
   0176 05*05         [12] 1435 	inc	_output_tail_idx
                           1436 ;	cc1110_spicom.c:183: if (output_tail_idx >= SPI_BUF_LEN) {
   0178 74 24         [12] 1437 	mov	a,#0x100 - 0xDC
   017A 25*05         [12] 1438 	add	a,_output_tail_idx
   017C 50 03         [24] 1439 	jnc	00104$
                           1440 ;	cc1110_spicom.c:184: output_tail_idx = 0;
   017E 75*05 00      [24] 1441 	mov	_output_tail_idx,#0x00
   0181                    1442 00104$:
                           1443 ;	cc1110_spicom.c:187: spi_output_buf[output_head_idx] = c;
   0181 E5*04         [12] 1444 	mov	a,_output_head_idx
   0183 24rDC         [12] 1445 	add	a,#_spi_output_buf
   0185 F5 82         [12] 1446 	mov	dpl,a
   0187 E4            [12] 1447 	clr	a
   0188 34s00         [12] 1448 	addc	a,#(_spi_output_buf >> 8)
   018A F5 83         [12] 1449 	mov	dph,a
   018C EF            [12] 1450 	mov	a,r7
   018D F0            [24] 1451 	movx	@dptr,a
                           1452 ;	cc1110_spicom.c:189: output_head_idx++;
   018E 05*04         [12] 1453 	inc	_output_head_idx
                           1454 ;	cc1110_spicom.c:190: if (output_head_idx >= SPI_BUF_LEN) {
   0190 74 24         [12] 1455 	mov	a,#0x100 - 0xDC
   0192 25*04         [12] 1456 	add	a,_output_head_idx
   0194 50 03         [24] 1457 	jnc	00106$
                           1458 ;	cc1110_spicom.c:191: output_head_idx = 0;
   0196 75*04 00      [24] 1459 	mov	_output_head_idx,#0x00
   0199                    1460 00106$:
                           1461 ;	cc1110_spicom.c:193: output_size++;
   0199 05*03         [12] 1462 	inc	_output_size
                           1463 ;	cc1110_spicom.c:195: ep5.flags |= EP_INBUF_WRITTEN;
   019B 90r03rCA      [24] 1464 	mov	dptr,#(_ep5 + 0x000e)
   019E E0            [24] 1465 	movx	a,@dptr
   019F 44 01         [12] 1466 	orl	a,#0x01
   01A1 F0            [24] 1467 	movx	@dptr,a
   01A2 22            [24] 1468 	ret
                           1469 ;------------------------------------------------------------
                           1470 ;Allocation info for local variables in function 'vcom_pollchar'
                           1471 ;------------------------------------------------------------
                           1472 ;	cc1110_spicom.c:198: char vcom_pollchar()
                           1473 ;	-----------------------------------------
                           1474 ;	 function vcom_pollchar
                           1475 ;	-----------------------------------------
   01A3                    1476 _vcom_pollchar:
                           1477 ;	cc1110_spicom.c:200: if (serial_data_available == 0) {
   01A3 E5*06         [12] 1478 	mov	a,_serial_data_available
   01A5 70 04         [24] 1479 	jnz	00102$
                           1480 ;	cc1110_spicom.c:201: return USB_READ_AGAIN;
   01A7 75 82 FF      [24] 1481 	mov	dpl,#0xFF
   01AA 22            [24] 1482 	ret
   01AB                    1483 00102$:
                           1484 ;	cc1110_spicom.c:203: return spi_input_buf[input_tail_idx];
   01AB E5*02         [12] 1485 	mov	a,_input_tail_idx
   01AD 24r00         [12] 1486 	add	a,#_spi_input_buf
   01AF F5 82         [12] 1487 	mov	dpl,a
   01B1 E4            [12] 1488 	clr	a
   01B2 34s00         [12] 1489 	addc	a,#(_spi_input_buf >> 8)
   01B4 F5 83         [12] 1490 	mov	dph,a
   01B6 E0            [24] 1491 	movx	a,@dptr
   01B7 F5 82         [12] 1492 	mov	dpl,a
   01B9 22            [24] 1493 	ret
                           1494 ;------------------------------------------------------------
                           1495 ;Allocation info for local variables in function 'vcom_getchar'
                           1496 ;------------------------------------------------------------
                           1497 ;s_data                    Allocated to registers r7 
                           1498 ;------------------------------------------------------------
                           1499 ;	cc1110_spicom.c:206: char vcom_getchar()
                           1500 ;	-----------------------------------------
                           1501 ;	 function vcom_getchar
                           1502 ;	-----------------------------------------
   01BA                    1503 _vcom_getchar:
                           1504 ;	cc1110_spicom.c:210: if (serial_data_available == 0) {
   01BA E5*06         [12] 1505 	mov	a,_serial_data_available
   01BC 70 04         [24] 1506 	jnz	00102$
                           1507 ;	cc1110_spicom.c:211: return USB_READ_AGAIN;
   01BE 75 82 FF      [24] 1508 	mov	dpl,#0xFF
   01C1 22            [24] 1509 	ret
   01C2                    1510 00102$:
                           1511 ;	cc1110_spicom.c:214: s_data = spi_input_buf[input_tail_idx];
   01C2 E5*02         [12] 1512 	mov	a,_input_tail_idx
   01C4 24r00         [12] 1513 	add	a,#_spi_input_buf
   01C6 F5 82         [12] 1514 	mov	dpl,a
   01C8 E4            [12] 1515 	clr	a
   01C9 34s00         [12] 1516 	addc	a,#(_spi_input_buf >> 8)
   01CB F5 83         [12] 1517 	mov	dph,a
   01CD E0            [24] 1518 	movx	a,@dptr
   01CE FF            [12] 1519 	mov	r7,a
                           1520 ;	cc1110_spicom.c:215: input_tail_idx++;
   01CF 05*02         [12] 1521 	inc	_input_tail_idx
                           1522 ;	cc1110_spicom.c:216: if (input_tail_idx >= SPI_BUF_LEN) {
   01D1 74 24         [12] 1523 	mov	a,#0x100 - 0xDC
   01D3 25*02         [12] 1524 	add	a,_input_tail_idx
   01D5 50 03         [24] 1525 	jnc	00104$
                           1526 ;	cc1110_spicom.c:217: input_tail_idx = 0;
   01D7 75*02 00      [24] 1527 	mov	_input_tail_idx,#0x00
   01DA                    1528 00104$:
                           1529 ;	cc1110_spicom.c:219: input_size--;
   01DA 15*00         [12] 1530 	dec	_input_size
                           1531 ;	cc1110_spicom.c:220: if (input_size == 0) {
   01DC E5*00         [12] 1532 	mov	a,_input_size
                           1533 ;	cc1110_spicom.c:221: serial_data_available = 0;
   01DE 70 02         [24] 1534 	jnz	00106$
   01E0 F5*06         [12] 1535 	mov	_serial_data_available,a
   01E2                    1536 00106$:
                           1537 ;	cc1110_spicom.c:223: return s_data;
   01E2 8F 82         [24] 1538 	mov	dpl,r7
   01E4 22            [24] 1539 	ret
                           1540 ;------------------------------------------------------------
                           1541 ;Allocation info for local variables in function 'vcom_enable'
                           1542 ;------------------------------------------------------------
                           1543 ;	cc1110_spicom.c:226: void vcom_enable()
                           1544 ;	-----------------------------------------
                           1545 ;	 function vcom_enable
                           1546 ;	-----------------------------------------
   01E5                    1547 _vcom_enable:
                           1548 ;	cc1110_spicom.c:228: TCON &= ~BIT3; // Clear URX1IF
   01E5 AF 88         [24] 1549 	mov	r7,_TCON
   01E7 74 F7         [12] 1550 	mov	a,#0xF7
   01E9 5F            [12] 1551 	anl	a,r7
   01EA F5 88         [12] 1552 	mov	_TCON,a
                           1553 ;	cc1110_spicom.c:229: URX1IE = 1;    // Enable URX1IE interrupt
   01EC D2 AB         [12] 1554 	setb	_URX1IE
                           1555 ;	cc1110_spicom.c:231: IRCON2 &= ~BIT2; // Clear UTX1IF
   01EE AF E8         [24] 1556 	mov	r7,_IRCON2
   01F0 74 FB         [12] 1557 	mov	a,#0xFB
   01F2 5F            [12] 1558 	anl	a,r7
   01F3 F5 E8         [12] 1559 	mov	_IRCON2,a
                           1560 ;	cc1110_spicom.c:232: IEN2 |= BIT3;    // Enable UTX1IE interrupt
   01F5 43 9A 08      [24] 1561 	orl	_IEN2,#0x08
   01F8 22            [24] 1562 	ret
                           1563 ;------------------------------------------------------------
                           1564 ;Allocation info for local variables in function 'vcom_disable'
                           1565 ;------------------------------------------------------------
                           1566 ;	cc1110_spicom.c:235: void vcom_disable()
                           1567 ;	-----------------------------------------
                           1568 ;	 function vcom_disable
                           1569 ;	-----------------------------------------
   01F9                    1570 _vcom_disable:
                           1571 ;	cc1110_spicom.c:237: TCON &= ~BIT3; // Clear URX1IF
   01F9 AF 88         [24] 1572 	mov	r7,_TCON
   01FB 74 F7         [12] 1573 	mov	a,#0xF7
   01FD 5F            [12] 1574 	anl	a,r7
   01FE F5 88         [12] 1575 	mov	_TCON,a
                           1576 ;	cc1110_spicom.c:238: URX1IE = 0;    // Disable URX1IE interrupt
   0200 C2 AB         [12] 1577 	clr	_URX1IE
                           1578 ;	cc1110_spicom.c:240: IRCON2 &= ~BIT2; // Clear UTX1IF
   0202 AF E8         [24] 1579 	mov	r7,_IRCON2
   0204 74 FB         [12] 1580 	mov	a,#0xFB
   0206 5F            [12] 1581 	anl	a,r7
   0207 F5 E8         [12] 1582 	mov	_IRCON2,a
                           1583 ;	cc1110_spicom.c:241: IEN2 &= ~BIT3;    // Disable UTX1IE interrupt
   0209 AF 9A         [24] 1584 	mov	r7,_IEN2
   020B 74 F7         [12] 1585 	mov	a,#0xF7
   020D 5F            [12] 1586 	anl	a,r7
   020E F5 9A         [12] 1587 	mov	_IEN2,a
   0210 22            [24] 1588 	ret
                           1589 ;------------------------------------------------------------
                           1590 ;Allocation info for local variables in function 'initUSB'
                           1591 ;------------------------------------------------------------
                           1592 ;	cc1110_spicom.c:244: void initUSB()
                           1593 ;	-----------------------------------------
                           1594 ;	 function initUSB
                           1595 ;	-----------------------------------------
   0211                    1596 _initUSB:
                           1597 ;	cc1110_spicom.c:258: PERCFG = (PERCFG & ~PERCFG_U0CFG) | PERCFG_U1CFG;
   0211 AF F1         [24] 1598 	mov	r7,_PERCFG
   0213 74 FE         [12] 1599 	mov	a,#0xFE
   0215 5F            [12] 1600 	anl	a,r7
   0216 44 02         [12] 1601 	orl	a,#0x02
   0218 F5 F1         [12] 1602 	mov	_PERCFG,a
                           1603 ;	cc1110_spicom.c:261: P1SEL = P1SEL | BIT4 | BIT5 | BIT6 | BIT7;
   021A 43 F4 F0      [24] 1604 	orl	_P1SEL,#0xF0
                           1605 ;	cc1110_spicom.c:262: P1DIR = P1DIR & ~(BIT4 | BIT5 | BIT6 | BIT7);
   021D AF FE         [24] 1606 	mov	r7,_P1DIR
   021F 74 0F         [12] 1607 	mov	a,#0x0F
   0221 5F            [12] 1608 	anl	a,r7
   0222 F5 FE         [12] 1609 	mov	_P1DIR,a
                           1610 ;	cc1110_spicom.c:269: U1CSR = (U1CSR & ~U1CSR_MODE) | U1CSR_SLAVE;
   0224 AF F8         [24] 1611 	mov	r7,_U1CSR
   0226 74 7F         [12] 1612 	mov	a,#0x7F
   0228 5F            [12] 1613 	anl	a,r7
   0229 44 20         [12] 1614 	orl	a,#0x20
   022B F5 F8         [12] 1615 	mov	_U1CSR,a
                           1616 ;	cc1110_spicom.c:282: U1BAUD = SPI_BAUD_M;
   022D 75 FA 3B      [24] 1617 	mov	_U1BAUD,#0x3B
                           1618 ;	cc1110_spicom.c:283: U1GCR = (U1GCR & ~(U1GCR_BAUD_E | U1GCR_CPOL | U1GCR_CPHA | U1GCR_ORDER))
   0230 E5 FC         [12] 1619 	mov	a,_U1GCR
   0232 75 FC 0B      [24] 1620 	mov	_U1GCR,#0x0B
                           1621 ;	cc1110_spicom.c:286: TCON &= ~BIT3; // Clear URX1IF
   0235 AF 88         [24] 1622 	mov	r7,_TCON
   0237 74 F7         [12] 1623 	mov	a,#0xF7
   0239 5F            [12] 1624 	anl	a,r7
   023A F5 88         [12] 1625 	mov	_TCON,a
                           1626 ;	cc1110_spicom.c:287: URX1IE = 1;    // Enable URX1IE interrupt
   023C D2 AB         [12] 1627 	setb	_URX1IE
                           1628 ;	cc1110_spicom.c:289: IRCON2 &= ~BIT2; // Clear UTX1IF
   023E AF E8         [24] 1629 	mov	r7,_IRCON2
   0240 74 FB         [12] 1630 	mov	a,#0xFB
   0242 5F            [12] 1631 	anl	a,r7
   0243 F5 E8         [12] 1632 	mov	_IRCON2,a
                           1633 ;	cc1110_spicom.c:290: IEN2 |= BIT3;    // Enable UTX1IE interrupt
   0245 43 9A 08      [24] 1634 	orl	_IEN2,#0x08
                           1635 ;	cc1110_spicom.c:292: ep5.OUTbuf = usb_ep5_OUTbuf;
   0248 90r03rC1      [24] 1636 	mov	dptr,#(_ep5 + 0x0005)
   024B 74rB8         [12] 1637 	mov	a,#_usb_ep5_OUTbuf
   024D F0            [24] 1638 	movx	@dptr,a
   024E 74s01         [12] 1639 	mov	a,#(_usb_ep5_OUTbuf >> 8)
   0250 A3            [24] 1640 	inc	dptr
   0251 F0            [24] 1641 	movx	@dptr,a
   0252 E4            [12] 1642 	clr	a
   0253 A3            [24] 1643 	inc	dptr
   0254 F0            [24] 1644 	movx	@dptr,a
                           1645 ;	cc1110_spicom.c:294: spi_mode = SPI_MODE_WAIT;
   0255 75*07 00      [24] 1646 	mov	_spi_mode,#0x00
   0258 22            [24] 1647 	ret
                           1648 ;------------------------------------------------------------
                           1649 ;Allocation info for local variables in function 'usbProcessEvents'
                           1650 ;------------------------------------------------------------
                           1651 ;	cc1110_spicom.c:300: void usbProcessEvents()
                           1652 ;	-----------------------------------------
                           1653 ;	 function usbProcessEvents
                           1654 ;	-----------------------------------------
   0259                    1655 _usbProcessEvents:
                           1656 ;	cc1110_spicom.c:302: return; /* dummy function */
   0259 22            [24] 1657 	ret
                           1658 ;------------------------------------------------------------
                           1659 ;Allocation info for local variables in function 'vcom_readline'
                           1660 ;------------------------------------------------------------
                           1661 ;buff                      Allocated to registers 
                           1662 ;c                         Allocated to registers r3 
                           1663 ;------------------------------------------------------------
                           1664 ;	cc1110_spicom.c:305: void vcom_readline(char* buff) {
                           1665 ;	-----------------------------------------
                           1666 ;	 function vcom_readline
                           1667 ;	-----------------------------------------
   025A                    1668 _vcom_readline:
   025A AD 82         [24] 1669 	mov	r5,dpl
   025C AE 83         [24] 1670 	mov	r6,dph
   025E AF F0         [24] 1671 	mov	r7,b
                           1672 ;	cc1110_spicom.c:307: while ((c = vcom_getchar()) != '\n') {
   0260                    1673 00101$:
   0260 C0 07         [24] 1674 	push	ar7
   0262 C0 06         [24] 1675 	push	ar6
   0264 C0 05         [24] 1676 	push	ar5
   0266 12r01rBA      [24] 1677 	lcall	_vcom_getchar
   0269 AC 82         [24] 1678 	mov	r4,dpl
   026B D0 05         [24] 1679 	pop	ar5
   026D D0 06         [24] 1680 	pop	ar6
   026F D0 07         [24] 1681 	pop	ar7
   0271 8C 03         [24] 1682 	mov	ar3,r4
   0273 BC 0A 02      [24] 1683 	cjne	r4,#0x0A,00113$
   0276 80 11         [24] 1684 	sjmp	00103$
   0278                    1685 00113$:
                           1686 ;	cc1110_spicom.c:308: *buff++ = c;
   0278 8D 82         [24] 1687 	mov	dpl,r5
   027A 8E 83         [24] 1688 	mov	dph,r6
   027C 8F F0         [24] 1689 	mov	b,r7
   027E EB            [12] 1690 	mov	a,r3
   027F 12r00r00      [24] 1691 	lcall	__gptrput
   0282 A3            [24] 1692 	inc	dptr
   0283 AD 82         [24] 1693 	mov	r5,dpl
   0285 AE 83         [24] 1694 	mov	r6,dph
   0287 80 D7         [24] 1695 	sjmp	00101$
   0289                    1696 00103$:
                           1697 ;	cc1110_spicom.c:310: *buff = 0;
   0289 8D 82         [24] 1698 	mov	dpl,r5
   028B 8E 83         [24] 1699 	mov	dph,r6
   028D 8F F0         [24] 1700 	mov	b,r7
   028F E4            [12] 1701 	clr	a
   0290 02r00r00      [24] 1702 	ljmp	__gptrput
                           1703 ;------------------------------------------------------------
                           1704 ;Allocation info for local variables in function 'vcom_putstr'
                           1705 ;------------------------------------------------------------
                           1706 ;buff                      Allocated with name '_vcom_putstr_buff_1_98'
                           1707 ;------------------------------------------------------------
                           1708 ;	cc1110_spicom.c:313: void vcom_putstr(char* __xdata buff) {
                           1709 ;	-----------------------------------------
                           1710 ;	 function vcom_putstr
                           1711 ;	-----------------------------------------
   0293                    1712 _vcom_putstr:
   0293 AF F0         [24] 1713 	mov	r7,b
   0295 AE 83         [24] 1714 	mov	r6,dph
   0297 E5 82         [12] 1715 	mov	a,dpl
   0299 90r03rCE      [24] 1716 	mov	dptr,#_vcom_putstr_buff_1_98
   029C F0            [24] 1717 	movx	@dptr,a
   029D EE            [12] 1718 	mov	a,r6
   029E A3            [24] 1719 	inc	dptr
   029F F0            [24] 1720 	movx	@dptr,a
   02A0 EF            [12] 1721 	mov	a,r7
   02A1 A3            [24] 1722 	inc	dptr
   02A2 F0            [24] 1723 	movx	@dptr,a
                           1724 ;	cc1110_spicom.c:314: while (*buff) {
   02A3 90r03rCE      [24] 1725 	mov	dptr,#_vcom_putstr_buff_1_98
   02A6 E0            [24] 1726 	movx	a,@dptr
   02A7 FD            [12] 1727 	mov	r5,a
   02A8 A3            [24] 1728 	inc	dptr
   02A9 E0            [24] 1729 	movx	a,@dptr
   02AA FE            [12] 1730 	mov	r6,a
   02AB A3            [24] 1731 	inc	dptr
   02AC E0            [24] 1732 	movx	a,@dptr
   02AD FF            [12] 1733 	mov	r7,a
   02AE                    1734 00101$:
   02AE 8D 82         [24] 1735 	mov	dpl,r5
   02B0 8E 83         [24] 1736 	mov	dph,r6
   02B2 8F F0         [24] 1737 	mov	b,r7
   02B4 12r00r00      [24] 1738 	lcall	__gptrget
   02B7 FC            [12] 1739 	mov	r4,a
   02B8 60 23         [24] 1740 	jz	00108$
                           1741 ;	cc1110_spicom.c:315: vcom_putchar(*buff++);
   02BA 0D            [12] 1742 	inc	r5
   02BB BD 00 01      [24] 1743 	cjne	r5,#0x00,00114$
   02BE 0E            [12] 1744 	inc	r6
   02BF                    1745 00114$:
   02BF 90r03rCE      [24] 1746 	mov	dptr,#_vcom_putstr_buff_1_98
   02C2 ED            [12] 1747 	mov	a,r5
   02C3 F0            [24] 1748 	movx	@dptr,a
   02C4 EE            [12] 1749 	mov	a,r6
   02C5 A3            [24] 1750 	inc	dptr
   02C6 F0            [24] 1751 	movx	@dptr,a
   02C7 EF            [12] 1752 	mov	a,r7
   02C8 A3            [24] 1753 	inc	dptr
   02C9 F0            [24] 1754 	movx	@dptr,a
   02CA 8C 82         [24] 1755 	mov	dpl,r4
   02CC C0 07         [24] 1756 	push	ar7
   02CE C0 06         [24] 1757 	push	ar6
   02D0 C0 05         [24] 1758 	push	ar5
   02D2 12r01r6C      [24] 1759 	lcall	_vcom_putchar
   02D5 D0 05         [24] 1760 	pop	ar5
   02D7 D0 06         [24] 1761 	pop	ar6
   02D9 D0 07         [24] 1762 	pop	ar7
   02DB 80 D1         [24] 1763 	sjmp	00101$
   02DD                    1764 00108$:
   02DD 90r03rCE      [24] 1765 	mov	dptr,#_vcom_putstr_buff_1_98
   02E0 ED            [12] 1766 	mov	a,r5
   02E1 F0            [24] 1767 	movx	@dptr,a
   02E2 EE            [12] 1768 	mov	a,r6
   02E3 A3            [24] 1769 	inc	dptr
   02E4 F0            [24] 1770 	movx	@dptr,a
   02E5 EF            [12] 1771 	mov	a,r7
   02E6 A3            [24] 1772 	inc	dptr
   02E7 F0            [24] 1773 	movx	@dptr,a
                           1774 ;	cc1110_spicom.c:317: vcom_flush();
   02E8 02r01r6B      [24] 1775 	ljmp	_vcom_flush
                           1776 ;------------------------------------------------------------
                           1777 ;Allocation info for local variables in function 'usb_up'
                           1778 ;------------------------------------------------------------
                           1779 ;	cc1110_spicom.c:320: void usb_up() {
                           1780 ;	-----------------------------------------
                           1781 ;	 function usb_up
                           1782 ;	-----------------------------------------
   02EB                    1783 _usb_up:
                           1784 ;	cc1110_spicom.c:322: vcom_enable();
   02EB 02r01rE5      [24] 1785 	ljmp	_vcom_enable
                           1786 ;------------------------------------------------------------
                           1787 ;Allocation info for local variables in function 'vcom_down'
                           1788 ;------------------------------------------------------------
                           1789 ;	cc1110_spicom.c:325: void vcom_down() {
                           1790 ;	-----------------------------------------
                           1791 ;	 function vcom_down
                           1792 ;	-----------------------------------------
   02EE                    1793 _vcom_down:
                           1794 ;	cc1110_spicom.c:327: vcom_disable();
   02EE 02r01rF9      [24] 1795 	ljmp	_vcom_disable
                           1796 ;------------------------------------------------------------
                           1797 ;Allocation info for local variables in function 'txdata'
                           1798 ;------------------------------------------------------------
                           1799 ;cmd                       Allocated with name '_txdata_PARM_2'
                           1800 ;len                       Allocated with name '_txdata_PARM_3'
                           1801 ;dataptr                   Allocated with name '_txdata_PARM_4'
                           1802 ;app                       Allocated to registers 
                           1803 ;test                      Allocated to registers 
                           1804 ;------------------------------------------------------------
                           1805 ;	cc1110_spicom.c:330: int txdata(u8 app, u8 cmd, u16 len, __xdata u8* dataptr)
                           1806 ;	-----------------------------------------
                           1807 ;	 function txdata
                           1808 ;	-----------------------------------------
   02F1                    1809 _txdata:
                           1810 ;	cc1110_spicom.c:336: vcom_putchar(app);
   02F1 12r01r6C      [24] 1811 	lcall	_vcom_putchar
                           1812 ;	cc1110_spicom.c:337: vcom_putchar(cmd);
   02F4 85*0C 82      [24] 1813 	mov	dpl,_txdata_PARM_2
   02F7 12r01r6C      [24] 1814 	lcall	_vcom_putchar
                           1815 ;	cc1110_spicom.c:338: vcom_putchar((u8)len);
   02FA 85*0D 82      [24] 1816 	mov	dpl,_txdata_PARM_3
   02FD 12r01r6C      [24] 1817 	lcall	_vcom_putchar
                           1818 ;	cc1110_spicom.c:341: while (len > 0) //*dataptr) 
   0300 AE*0F         [24] 1819 	mov	r6,_txdata_PARM_4
   0302 AF*10         [24] 1820 	mov	r7,(_txdata_PARM_4 + 1)
   0304 AC*0D         [24] 1821 	mov	r4,_txdata_PARM_3
   0306 AD*0E         [24] 1822 	mov	r5,(_txdata_PARM_3 + 1)
   0308                    1823 00101$:
   0308 EC            [12] 1824 	mov	a,r4
   0309 4D            [12] 1825 	orl	a,r5
   030A 60 27         [24] 1826 	jz	00103$
                           1827 ;	cc1110_spicom.c:343: vcom_putchar(*dataptr++);
   030C 8E 82         [24] 1828 	mov	dpl,r6
   030E 8F 83         [24] 1829 	mov	dph,r7
   0310 E0            [24] 1830 	movx	a,@dptr
   0311 FB            [12] 1831 	mov	r3,a
   0312 A3            [24] 1832 	inc	dptr
   0313 AE 82         [24] 1833 	mov	r6,dpl
   0315 AF 83         [24] 1834 	mov	r7,dph
   0317 8B 82         [24] 1835 	mov	dpl,r3
   0319 C0 07         [24] 1836 	push	ar7
   031B C0 06         [24] 1837 	push	ar6
   031D C0 05         [24] 1838 	push	ar5
   031F C0 04         [24] 1839 	push	ar4
   0321 12r01r6C      [24] 1840 	lcall	_vcom_putchar
   0324 D0 04         [24] 1841 	pop	ar4
   0326 D0 05         [24] 1842 	pop	ar5
   0328 D0 06         [24] 1843 	pop	ar6
   032A D0 07         [24] 1844 	pop	ar7
                           1845 ;	cc1110_spicom.c:344: len--;
   032C 1C            [12] 1846 	dec	r4
   032D BC FF 01      [24] 1847 	cjne	r4,#0xFF,00114$
   0330 1D            [12] 1848 	dec	r5
   0331                    1849 00114$:
   0331 80 D5         [24] 1850 	sjmp	00101$
   0333                    1851 00103$:
                           1852 ;	cc1110_spicom.c:346: vcom_putchar(0);
   0333 75 82 00      [24] 1853 	mov	dpl,#0x00
   0336 12r01r6C      [24] 1854 	lcall	_vcom_putchar
                           1855 ;	cc1110_spicom.c:347: vcom_flush();
   0339 12r01r6B      [24] 1856 	lcall	_vcom_flush
                           1857 ;	cc1110_spicom.c:351: return 0;
   033C 90 00 00      [24] 1858 	mov	dptr,#0x0000
   033F 22            [24] 1859 	ret
                           1860 ;------------------------------------------------------------
                           1861 ;Allocation info for local variables in function 'usbIntHandler'
                           1862 ;------------------------------------------------------------
                           1863 ;	cc1110_spicom.c:356: void usbIntHandler(void) __interrupt P2INT_VECTOR
                           1864 ;	-----------------------------------------
                           1865 ;	 function usbIntHandler
                           1866 ;	-----------------------------------------
   0340                    1867 _usbIntHandler:
                           1868 ;	cc1110_spicom.c:358: return;
   0340 32            [24] 1869 	reti
                           1870 ;	eliminated unneeded mov psw,# (no regs used in bank)
                           1871 ;	eliminated unneeded push/pop psw
                           1872 ;	eliminated unneeded push/pop dpl
                           1873 ;	eliminated unneeded push/pop dph
                           1874 ;	eliminated unneeded push/pop b
                           1875 ;	eliminated unneeded push/pop acc
                           1876 ;------------------------------------------------------------
                           1877 ;Allocation info for local variables in function 'p0IntHandler'
                           1878 ;------------------------------------------------------------
                           1879 ;	cc1110_spicom.c:361: void p0IntHandler(void) __interrupt P0INT_VECTOR
                           1880 ;	-----------------------------------------
                           1881 ;	 function p0IntHandler
                           1882 ;	-----------------------------------------
   0341                    1883 _p0IntHandler:
                           1884 ;	cc1110_spicom.c:363: return;
   0341 32            [24] 1885 	reti
                           1886 ;	eliminated unneeded mov psw,# (no regs used in bank)
                           1887 ;	eliminated unneeded push/pop psw
                           1888 ;	eliminated unneeded push/pop dpl
                           1889 ;	eliminated unneeded push/pop dph
                           1890 ;	eliminated unneeded push/pop b
                           1891 ;	eliminated unneeded push/pop acc
                           1892 ;------------------------------------------------------------
                           1893 ;Allocation info for local variables in function 'waitForUSBsetup'
                           1894 ;------------------------------------------------------------
                           1895 ;	cc1110_spicom.c:366: void waitForUSBsetup()
                           1896 ;	-----------------------------------------
                           1897 ;	 function waitForUSBsetup
                           1898 ;	-----------------------------------------
   0342                    1899 _waitForUSBsetup:
                           1900 ;	cc1110_spicom.c:368: return;
   0342 22            [24] 1901 	ret
                           1902 ;------------------------------------------------------------
                           1903 ;Allocation info for local variables in function 'registerCb_ep5'
                           1904 ;------------------------------------------------------------
                           1905 ;callback                  Allocated to registers 
                           1906 ;------------------------------------------------------------
                           1907 ;	cc1110_spicom.c:371: void registerCb_ep5(int (*callback)(void))
                           1908 ;	-----------------------------------------
                           1909 ;	 function registerCb_ep5
                           1910 ;	-----------------------------------------
   0343                    1911 _registerCb_ep5:
   0343 85 82*0A      [24] 1912 	mov	_cb_ep5,dpl
   0346 85 83*0B      [24] 1913 	mov	(_cb_ep5 + 1),dph
                           1914 ;	cc1110_spicom.c:373: cb_ep5 = callback;
   0349 22            [24] 1915 	ret
                           1916 ;------------------------------------------------------------
                           1917 ;Allocation info for local variables in function 'appReturn'
                           1918 ;------------------------------------------------------------
                           1919 ;response                  Allocated with name '_appReturn_PARM_2'
                           1920 ;len                       Allocated with name '_appReturn_len_1_114'
                           1921 ;------------------------------------------------------------
                           1922 ;	cc1110_spicom.c:376: void appReturn(__xdata u8 len, __xdata u8* __xdata  response)
                           1923 ;	-----------------------------------------
                           1924 ;	 function appReturn
                           1925 ;	-----------------------------------------
   034A                    1926 _appReturn:
   034A E5 82         [12] 1927 	mov	a,dpl
   034C 90r03rD3      [24] 1928 	mov	dptr,#_appReturn_len_1_114
   034F F0            [24] 1929 	movx	@dptr,a
                           1930 ;	cc1110_spicom.c:378: ep5.flags &= ~EP_OUTBUF_WRITTEN;                       // this should be superfluous... but could be causing problems?
   0350 90r03rCA      [24] 1931 	mov	dptr,#(_ep5 + 0x000e)
   0353 E0            [24] 1932 	movx	a,@dptr
   0354 54 FD         [12] 1933 	anl	a,#0xFD
   0356 F0            [24] 1934 	movx	@dptr,a
                           1935 ;	cc1110_spicom.c:379: txdata(ep5.OUTapp,ep5.OUTcmd, len, response);
   0357 90r03rC6      [24] 1936 	mov	dptr,#(_ep5 + 0x000a)
   035A E0            [24] 1937 	movx	a,@dptr
   035B FF            [12] 1938 	mov	r7,a
   035C 90r03rC7      [24] 1939 	mov	dptr,#(_ep5 + 0x000b)
   035F E0            [24] 1940 	movx	a,@dptr
   0360 F5*0C         [12] 1941 	mov	_txdata_PARM_2,a
   0362 90r03rD3      [24] 1942 	mov	dptr,#_appReturn_len_1_114
   0365 E0            [24] 1943 	movx	a,@dptr
   0366 FE            [12] 1944 	mov	r6,a
   0367 8E*0D         [24] 1945 	mov	_txdata_PARM_3,r6
   0369 75*0E 00      [24] 1946 	mov	(_txdata_PARM_3 + 1),#0x00
   036C 90r03rD1      [24] 1947 	mov	dptr,#_appReturn_PARM_2
   036F E0            [24] 1948 	movx	a,@dptr
   0370 F5*0F         [12] 1949 	mov	_txdata_PARM_4,a
   0372 A3            [24] 1950 	inc	dptr
   0373 E0            [24] 1951 	movx	a,@dptr
   0374 F5*10         [12] 1952 	mov	(_txdata_PARM_4 + 1),a
   0376 8F 82         [24] 1953 	mov	dpl,r7
   0378 02r02rF1      [24] 1954 	ljmp	_txdata
                           1955 ;------------------------------------------------------------
                           1956 ;Allocation info for local variables in function 'processOUTEP5'
                           1957 ;------------------------------------------------------------
                           1958 ;loop                      Allocated with name '_processOUTEP5_loop_1_117'
                           1959 ;sloc0                     Allocated with name '_processOUTEP5_sloc0_1_0'
                           1960 ;sloc1                     Allocated with name '_processOUTEP5_sloc1_1_0'
                           1961 ;sloc2                     Allocated with name '_processOUTEP5_sloc2_1_0'
                           1962 ;ptr                       Allocated with name '_processOUTEP5_ptr_1_117'
                           1963 ;------------------------------------------------------------
                           1964 ;	cc1110_spicom.c:382: void processOUTEP5(void)
                           1965 ;	-----------------------------------------
                           1966 ;	 function processOUTEP5
                           1967 ;	-----------------------------------------
   037B                    1968 _processOUTEP5:
                           1969 ;	cc1110_spicom.c:388: if ((ep5.flags & EP_OUTBUF_WRITTEN) == 0)
   037B 90r03rCA      [24] 1970 	mov	dptr,#(_ep5 + 0x000e)
   037E E0            [24] 1971 	movx	a,@dptr
   037F FF            [12] 1972 	mov	r7,a
   0380 20 E1 01      [24] 1973 	jb	acc.1,00102$
                           1974 ;	cc1110_spicom.c:389: return;
   0383 22            [24] 1975 	ret
   0384                    1976 00102$:
                           1977 ;	cc1110_spicom.c:391: ptr = &ep5.OUTbuf[2]; // skip first two bytes (they're superfluous)
   0384 90r03rC1      [24] 1978 	mov	dptr,#(_ep5 + 0x0005)
   0387 E0            [24] 1979 	movx	a,@dptr
   0388 FD            [12] 1980 	mov	r5,a
   0389 A3            [24] 1981 	inc	dptr
   038A E0            [24] 1982 	movx	a,@dptr
   038B FE            [12] 1983 	mov	r6,a
   038C A3            [24] 1984 	inc	dptr
   038D E0            [24] 1985 	movx	a,@dptr
   038E FF            [12] 1986 	mov	r7,a
   038F 74 02         [12] 1987 	mov	a,#0x02
   0391 2D            [12] 1988 	add	a,r5
   0392 FD            [12] 1989 	mov	r5,a
   0393 E4            [12] 1990 	clr	a
   0394 3E            [12] 1991 	addc	a,r6
   0395 FE            [12] 1992 	mov	r6,a
   0396 90r03rD4      [24] 1993 	mov	dptr,#_processOUTEP5_ptr_1_117
   0399 ED            [12] 1994 	mov	a,r5
   039A F0            [24] 1995 	movx	@dptr,a
   039B EE            [12] 1996 	mov	a,r6
   039C A3            [24] 1997 	inc	dptr
   039D F0            [24] 1998 	movx	@dptr,a
                           1999 ;	cc1110_spicom.c:392: ep5.OUTlen -= 2;
   039E 90r03rC4      [24] 2000 	mov	dptr,#(_ep5 + 0x0008)
   03A1 E0            [24] 2001 	movx	a,@dptr
   03A2 FB            [12] 2002 	mov	r3,a
   03A3 A3            [24] 2003 	inc	dptr
   03A4 E0            [24] 2004 	movx	a,@dptr
   03A5 FC            [12] 2005 	mov	r4,a
   03A6 EB            [12] 2006 	mov	a,r3
   03A7 24 FE         [12] 2007 	add	a,#0xFE
   03A9 FB            [12] 2008 	mov	r3,a
   03AA EC            [12] 2009 	mov	a,r4
   03AB 34 FF         [12] 2010 	addc	a,#0xFF
   03AD FC            [12] 2011 	mov	r4,a
   03AE 90r03rC4      [24] 2012 	mov	dptr,#(_ep5 + 0x0008)
   03B1 EB            [12] 2013 	mov	a,r3
   03B2 F0            [24] 2014 	movx	@dptr,a
   03B3 EC            [12] 2015 	mov	a,r4
   03B4 A3            [24] 2016 	inc	dptr
   03B5 F0            [24] 2017 	movx	@dptr,a
                           2018 ;	cc1110_spicom.c:394: if (ep5.OUTapp == 0xff)                                        
   03B6 90r03rC6      [24] 2019 	mov	dptr,#(_ep5 + 0x000a)
   03B9 E0            [24] 2020 	movx	a,@dptr
   03BA F5*17         [12] 2021 	mov	_processOUTEP5_sloc2_1_0,a
   03BC 74 FF         [12] 2022 	mov	a,#0xFF
   03BE B5*17 02      [24] 2023 	cjne	a,_processOUTEP5_sloc2_1_0,00200$
   03C1 80 03         [24] 2024 	sjmp	00201$
   03C3                    2025 00200$:
   03C3 02r08r0A      [24] 2026 	ljmp	00135$
   03C6                    2027 00201$:
                           2028 ;	cc1110_spicom.c:397: switch (ep5.OUTcmd)
   03C6 90r03rC7      [24] 2029 	mov	dptr,#(_ep5 + 0x000b)
   03C9 E0            [24] 2030 	movx	a,@dptr
   03CA FB            [12] 2031 	mov	r3,a
   03CB BB 80 00      [24] 2032 	cjne	r3,#0x80,00202$
   03CE                    2033 00202$:
   03CE 50 03         [24] 2034 	jnc	00203$
   03D0 02r07rEC      [24] 2035 	ljmp	00127$
   03D3                    2036 00203$:
   03D3 EB            [12] 2037 	mov	a,r3
   03D4 24 6F         [12] 2038 	add	a,#0xff - 0x90
   03D6 50 03         [24] 2039 	jnc	00204$
   03D8 02r07rEC      [24] 2040 	ljmp	00127$
   03DB                    2041 00204$:
   03DB EB            [12] 2042 	mov	a,r3
   03DC 24 80         [12] 2043 	add	a,#0x80
   03DE FA            [12] 2044 	mov	r2,a
   03DF 24 0A         [12] 2045 	add	a,#(00205$-3-.)
   03E1 83            [24] 2046 	movc	a,@a+pc
   03E2 F5 82         [12] 2047 	mov	dpl,a
   03E4 EA            [12] 2048 	mov	a,r2
   03E5 24 15         [12] 2049 	add	a,#(00206$-3-.)
   03E7 83            [24] 2050 	movc	a,@a+pc
   03E8 F5 83         [12] 2051 	mov	dph,a
   03EA E4            [12] 2052 	clr	a
   03EB 73            [24] 2053 	jmp	@a+dptr
   03EC                    2054 00205$:
   03ECr0E                 2055 	.db	00103$
   03EDrA1                 2056 	.db	00104$
   03EEr37                 2057 	.db	00112$
   03EFr74                 2058 	.db	00113$
   03F0r54                 2059 	.db	00106$
   03F1r8B                 2060 	.db	00114$
   03F2rAC                 2061 	.db	00115$
   03F3rEC                 2062 	.db	00127$
   03F4rDA                 2063 	.db	00117$
   03F5rC3                 2064 	.db	00116$
   03F6rEC                 2065 	.db	00127$
   03F7rEC                 2066 	.db	00127$
   03F8rEC                 2067 	.db	00127$
   03F9rEC                 2068 	.db	00127$
   03FAr42                 2069 	.db	00122$
   03FBr76                 2070 	.db	00123$
   03FCrD3                 2071 	.db	00126$
   03FD                    2072 00206$:
   03FDs04                 2073 	.db	00103$>>8
   03FEs04                 2074 	.db	00104$>>8
   03FFs06                 2075 	.db	00112$>>8
   0400s06                 2076 	.db	00113$>>8
   0401s05                 2077 	.db	00106$>>8
   0402s06                 2078 	.db	00114$>>8
   0403s06                 2079 	.db	00115$>>8
   0404s07                 2080 	.db	00127$>>8
   0405s06                 2081 	.db	00117$>>8
   0406s06                 2082 	.db	00116$>>8
   0407s07                 2083 	.db	00127$>>8
   0408s07                 2084 	.db	00127$>>8
   0409s07                 2085 	.db	00127$>>8
   040As07                 2086 	.db	00127$>>8
   040Bs07                 2087 	.db	00122$>>8
   040Cs07                 2088 	.db	00123$>>8
   040Ds07                 2089 	.db	00126$>>8
                           2090 ;	cc1110_spicom.c:399: case CMD_PEEK:
   040E                    2091 00103$:
                           2092 ;	cc1110_spicom.c:400: ep5.OUTbytesleft =  *ptr++;
   040E 8D 82         [24] 2093 	mov	dpl,r5
   0410 8E 83         [24] 2094 	mov	dph,r6
   0412 8F F0         [24] 2095 	mov	b,r7
   0414 12r00r00      [24] 2096 	lcall	__gptrget
   0417 FA            [12] 2097 	mov	r2,a
   0418 74 01         [12] 2098 	mov	a,#0x01
   041A 2D            [12] 2099 	add	a,r5
   041B F5*13         [12] 2100 	mov	_processOUTEP5_sloc0_1_0,a
   041D E4            [12] 2101 	clr	a
   041E 3E            [12] 2102 	addc	a,r6
   041F F5*14         [12] 2103 	mov	(_processOUTEP5_sloc0_1_0 + 1),a
   0421 8A*15         [24] 2104 	mov	_processOUTEP5_sloc1_1_0,r2
   0423 75*16 00      [24] 2105 	mov	(_processOUTEP5_sloc1_1_0 + 1),#0x00
   0426 90r03rC8      [24] 2106 	mov	dptr,#(_ep5 + 0x000c)
   0429 E5*15         [12] 2107 	mov	a,_processOUTEP5_sloc1_1_0
   042B F0            [24] 2108 	movx	@dptr,a
   042C E5*16         [12] 2109 	mov	a,(_processOUTEP5_sloc1_1_0 + 1)
   042E A3            [24] 2110 	inc	dptr
   042F F0            [24] 2111 	movx	@dptr,a
                           2112 ;	cc1110_spicom.c:401: ep5.OUTbytesleft += (u16)*ptr++ << 8;
   0430 85*13 82      [24] 2113 	mov	dpl,_processOUTEP5_sloc0_1_0
   0433 85*14 83      [24] 2114 	mov	dph,(_processOUTEP5_sloc0_1_0 + 1)
   0436 E0            [24] 2115 	movx	a,@dptr
   0437 F5*13         [12] 2116 	mov	_processOUTEP5_sloc0_1_0,a
   0439 74 02         [12] 2117 	mov	a,#0x02
   043B 2D            [12] 2118 	add	a,r5
   043C F5*17         [12] 2119 	mov	_processOUTEP5_sloc2_1_0,a
   043E E4            [12] 2120 	clr	a
   043F 3E            [12] 2121 	addc	a,r6
   0440 F5*18         [12] 2122 	mov	(_processOUTEP5_sloc2_1_0 + 1),a
   0442 A9*13         [24] 2123 	mov	r1,_processOUTEP5_sloc0_1_0
   0444 89 02         [24] 2124 	mov	ar2,r1
   0446 E4            [12] 2125 	clr	a
   0447 25*15         [12] 2126 	add	a,_processOUTEP5_sloc1_1_0
   0449 F5*15         [12] 2127 	mov	_processOUTEP5_sloc1_1_0,a
   044B EA            [12] 2128 	mov	a,r2
   044C 35*16         [12] 2129 	addc	a,(_processOUTEP5_sloc1_1_0 + 1)
   044E F5*16         [12] 2130 	mov	(_processOUTEP5_sloc1_1_0 + 1),a
   0450 90r03rC8      [24] 2131 	mov	dptr,#(_ep5 + 0x000c)
   0453 E5*15         [12] 2132 	mov	a,_processOUTEP5_sloc1_1_0
   0455 F0            [24] 2133 	movx	@dptr,a
   0456 E5*16         [12] 2134 	mov	a,(_processOUTEP5_sloc1_1_0 + 1)
   0458 A3            [24] 2135 	inc	dptr
   0459 F0            [24] 2136 	movx	@dptr,a
                           2137 ;	cc1110_spicom.c:403: loop =  (u16)*ptr++;
   045A 85*17 82      [24] 2138 	mov	dpl,_processOUTEP5_sloc2_1_0
   045D 85*18 83      [24] 2139 	mov	dph,(_processOUTEP5_sloc2_1_0 + 1)
   0460 E0            [24] 2140 	movx	a,@dptr
   0461 F8            [12] 2141 	mov	r0,a
   0462 8D 82         [24] 2142 	mov	dpl,r5
   0464 8E 83         [24] 2143 	mov	dph,r6
   0466 A3            [24] 2144 	inc	dptr
   0467 A3            [24] 2145 	inc	dptr
   0468 A3            [24] 2146 	inc	dptr
   0469 88*11         [24] 2147 	mov	_processOUTEP5_loop_1_117,r0
   046B 75*12 00      [24] 2148 	mov	(_processOUTEP5_loop_1_117 + 1),#0x00
                           2149 ;	cc1110_spicom.c:404: loop += (u16)*ptr++ << 8;
   046E E0            [24] 2150 	movx	a,@dptr
   046F FA            [12] 2151 	mov	r2,a
   0470 E4            [12] 2152 	clr	a
   0471 25*11         [12] 2153 	add	a,_processOUTEP5_loop_1_117
   0473 F5*11         [12] 2154 	mov	_processOUTEP5_loop_1_117,a
   0475 EA            [12] 2155 	mov	a,r2
   0476 35*12         [12] 2156 	addc	a,(_processOUTEP5_loop_1_117 + 1)
   0478 F5*12         [12] 2157 	mov	(_processOUTEP5_loop_1_117 + 1),a
                           2158 ;	cc1110_spicom.c:405: ptr = (__xdata u8*) loop;
   047A 85*11*0F      [24] 2159 	mov	_txdata_PARM_4,_processOUTEP5_loop_1_117
   047D 85*12*10      [24] 2160 	mov	(_txdata_PARM_4 + 1),(_processOUTEP5_loop_1_117 + 1)
                           2161 ;	cc1110_spicom.c:407: txdata(ep5.OUTapp, ep5.OUTcmd, ep5.OUTbytesleft, ptr);
   0480 90r03rC6      [24] 2162 	mov	dptr,#(_ep5 + 0x000a)
   0483 E0            [24] 2163 	movx	a,@dptr
   0484 FA            [12] 2164 	mov	r2,a
   0485 90r03rC7      [24] 2165 	mov	dptr,#(_ep5 + 0x000b)
   0488 E0            [24] 2166 	movx	a,@dptr
   0489 F5*0C         [12] 2167 	mov	_txdata_PARM_2,a
   048B 85*15*0D      [24] 2168 	mov	_txdata_PARM_3,_processOUTEP5_sloc1_1_0
   048E 85*16*0E      [24] 2169 	mov	(_txdata_PARM_3 + 1),(_processOUTEP5_sloc1_1_0 + 1)
   0491 8A 82         [24] 2170 	mov	dpl,r2
   0493 12r02rF1      [24] 2171 	lcall	_txdata
                           2172 ;	cc1110_spicom.c:408: ep5.OUTbytesleft = 0;
   0496 90r03rC8      [24] 2173 	mov	dptr,#(_ep5 + 0x000c)
   0499 E4            [12] 2174 	clr	a
   049A F0            [24] 2175 	movx	@dptr,a
   049B E4            [12] 2176 	clr	a
   049C A3            [24] 2177 	inc	dptr
   049D F0            [24] 2178 	movx	@dptr,a
                           2179 ;	cc1110_spicom.c:409: break;
   049E 02r08r02      [24] 2180 	ljmp	00128$
                           2181 ;	cc1110_spicom.c:411: case CMD_POKE:
   04A1                    2182 00104$:
                           2183 ;	cc1110_spicom.c:412: loop =  *ptr++;
   04A1 8D 82         [24] 2184 	mov	dpl,r5
   04A3 8E 83         [24] 2185 	mov	dph,r6
   04A5 8F F0         [24] 2186 	mov	b,r7
   04A7 12r00r00      [24] 2187 	lcall	__gptrget
   04AA FA            [12] 2188 	mov	r2,a
   04AB 8D 82         [24] 2189 	mov	dpl,r5
   04AD 8E 83         [24] 2190 	mov	dph,r6
   04AF A3            [24] 2191 	inc	dptr
   04B0 8A*11         [24] 2192 	mov	_processOUTEP5_loop_1_117,r2
   04B2 75*12 00      [24] 2193 	mov	(_processOUTEP5_loop_1_117 + 1),#0x00
                           2194 ;	cc1110_spicom.c:413: loop += *ptr++ << 8;
   04B5 E0            [24] 2195 	movx	a,@dptr
   04B6 FA            [12] 2196 	mov	r2,a
   04B7 74 02         [12] 2197 	mov	a,#0x02
   04B9 2D            [12] 2198 	add	a,r5
   04BA F5*17         [12] 2199 	mov	_processOUTEP5_sloc2_1_0,a
   04BC E4            [12] 2200 	clr	a
   04BD 3E            [12] 2201 	addc	a,r6
   04BE F5*18         [12] 2202 	mov	(_processOUTEP5_sloc2_1_0 + 1),a
   04C0 8A 01         [24] 2203 	mov	ar1,r2
   04C2 89 02         [24] 2204 	mov	ar2,r1
   04C4 E4            [12] 2205 	clr	a
   04C5 25*11         [12] 2206 	add	a,_processOUTEP5_loop_1_117
   04C7 F5*11         [12] 2207 	mov	_processOUTEP5_loop_1_117,a
   04C9 EA            [12] 2208 	mov	a,r2
   04CA 35*12         [12] 2209 	addc	a,(_processOUTEP5_loop_1_117 + 1)
   04CC F5*12         [12] 2210 	mov	(_processOUTEP5_loop_1_117 + 1),a
                           2211 ;	cc1110_spicom.c:414: ep5.dptr = (__xdata u8*) loop;
   04CE A8*11         [24] 2212 	mov	r0,_processOUTEP5_loop_1_117
   04D0 AA*12         [24] 2213 	mov	r2,(_processOUTEP5_loop_1_117 + 1)
   04D2 90r03rCC      [24] 2214 	mov	dptr,#(_ep5 + 0x0010)
   04D5 E8            [12] 2215 	mov	a,r0
   04D6 F0            [24] 2216 	movx	@dptr,a
   04D7 EA            [12] 2217 	mov	a,r2
   04D8 A3            [24] 2218 	inc	dptr
   04D9 F0            [24] 2219 	movx	@dptr,a
                           2220 ;	cc1110_spicom.c:416: loop = ep5.OUTlen - 2;
   04DA 90r03rC4      [24] 2221 	mov	dptr,#(_ep5 + 0x0008)
   04DD E0            [24] 2222 	movx	a,@dptr
   04DE F9            [12] 2223 	mov	r1,a
   04DF A3            [24] 2224 	inc	dptr
   04E0 E0            [24] 2225 	movx	a,@dptr
   04E1 FA            [12] 2226 	mov	r2,a
   04E2 E9            [12] 2227 	mov	a,r1
   04E3 24 FE         [12] 2228 	add	a,#0xFE
   04E5 F5*11         [12] 2229 	mov	_processOUTEP5_loop_1_117,a
   04E7 EA            [12] 2230 	mov	a,r2
   04E8 34 FF         [12] 2231 	addc	a,#0xFF
   04EA F5*12         [12] 2232 	mov	(_processOUTEP5_loop_1_117 + 1),a
   04EC 85*11*15      [24] 2233 	mov	_processOUTEP5_sloc1_1_0,_processOUTEP5_loop_1_117
   04EF 85*12*16      [24] 2234 	mov	(_processOUTEP5_sloc1_1_0 + 1),(_processOUTEP5_loop_1_117 + 1)
   04F2                    2235 00138$:
                           2236 ;	cc1110_spicom.c:418: for (;loop>0;loop--)
   04F2 E5*15         [12] 2237 	mov	a,_processOUTEP5_sloc1_1_0
   04F4 45*16         [12] 2238 	orl	a,(_processOUTEP5_sloc1_1_0 + 1)
   04F6 60 3D         [24] 2239 	jz	00105$
                           2240 ;	cc1110_spicom.c:420: *ep5.dptr++ = *ptr++;
   04F8 90r03rCC      [24] 2241 	mov	dptr,#(_ep5 + 0x0010)
   04FB E0            [24] 2242 	movx	a,@dptr
   04FC F5*13         [12] 2243 	mov	_processOUTEP5_sloc0_1_0,a
   04FE A3            [24] 2244 	inc	dptr
   04FF E0            [24] 2245 	movx	a,@dptr
   0500 F5*14         [12] 2246 	mov	(_processOUTEP5_sloc0_1_0 + 1),a
   0502 74 01         [12] 2247 	mov	a,#0x01
   0504 25*13         [12] 2248 	add	a,_processOUTEP5_sloc0_1_0
   0506 F9            [12] 2249 	mov	r1,a
   0507 E4            [12] 2250 	clr	a
   0508 35*14         [12] 2251 	addc	a,(_processOUTEP5_sloc0_1_0 + 1)
   050A FA            [12] 2252 	mov	r2,a
   050B 90r03rCC      [24] 2253 	mov	dptr,#(_ep5 + 0x0010)
   050E E9            [12] 2254 	mov	a,r1
   050F F0            [24] 2255 	movx	@dptr,a
   0510 EA            [12] 2256 	mov	a,r2
   0511 A3            [24] 2257 	inc	dptr
   0512 F0            [24] 2258 	movx	@dptr,a
   0513 85*17 82      [24] 2259 	mov	dpl,_processOUTEP5_sloc2_1_0
   0516 85*18 83      [24] 2260 	mov	dph,(_processOUTEP5_sloc2_1_0 + 1)
   0519 E0            [24] 2261 	movx	a,@dptr
   051A FA            [12] 2262 	mov	r2,a
   051B A3            [24] 2263 	inc	dptr
   051C 85 82*17      [24] 2264 	mov	_processOUTEP5_sloc2_1_0,dpl
   051F 85 83*18      [24] 2265 	mov	(_processOUTEP5_sloc2_1_0 + 1),dph
   0522 85*13 82      [24] 2266 	mov	dpl,_processOUTEP5_sloc0_1_0
   0525 85*14 83      [24] 2267 	mov	dph,(_processOUTEP5_sloc0_1_0 + 1)
   0528 EA            [12] 2268 	mov	a,r2
   0529 F0            [24] 2269 	movx	@dptr,a
                           2270 ;	cc1110_spicom.c:418: for (;loop>0;loop--)
   052A 15*15         [12] 2271 	dec	_processOUTEP5_sloc1_1_0
   052C 74 FF         [12] 2272 	mov	a,#0xFF
   052E B5*15 02      [24] 2273 	cjne	a,_processOUTEP5_sloc1_1_0,00208$
   0531 15*16         [12] 2274 	dec	(_processOUTEP5_sloc1_1_0 + 1)
   0533                    2275 00208$:
   0533 80 BD         [24] 2276 	sjmp	00138$
   0535                    2277 00105$:
                           2278 ;	cc1110_spicom.c:424: txdata(ep5.OUTapp, ep5.OUTcmd, 2, (__xdata u8*)&(ep5.OUTbytesleft));
   0535 90r03rC6      [24] 2279 	mov	dptr,#(_ep5 + 0x000a)
   0538 E0            [24] 2280 	movx	a,@dptr
   0539 FA            [12] 2281 	mov	r2,a
   053A 90r03rC7      [24] 2282 	mov	dptr,#(_ep5 + 0x000b)
   053D E0            [24] 2283 	movx	a,@dptr
   053E F5*0C         [12] 2284 	mov	_txdata_PARM_2,a
   0540 75*0FrC8      [24] 2285 	mov	_txdata_PARM_4,#(_ep5 + 0x000c)
   0543 75*10s03      [24] 2286 	mov	(_txdata_PARM_4 + 1),#((_ep5 + 0x000c) >> 8)
   0546 75*0D 02      [24] 2287 	mov	_txdata_PARM_3,#0x02
   0549 75*0E 00      [24] 2288 	mov	(_txdata_PARM_3 + 1),#0x00
   054C 8A 82         [24] 2289 	mov	dpl,r2
   054E 12r02rF1      [24] 2290 	lcall	_txdata
                           2291 ;	cc1110_spicom.c:425: break;
   0551 02r08r02      [24] 2292 	ljmp	00128$
                           2293 ;	cc1110_spicom.c:427: case CMD_POKE_REG:
   0554                    2294 00106$:
                           2295 ;	cc1110_spicom.c:428: if (!(ep5.flags & EP_OUTBUF_CONTINUED))
   0554 90r03rCA      [24] 2296 	mov	dptr,#(_ep5 + 0x000e)
   0557 E0            [24] 2297 	movx	a,@dptr
   0558 FA            [12] 2298 	mov	r2,a
   0559 20 E2 3C      [24] 2299 	jb	acc.2,00108$
                           2300 ;	cc1110_spicom.c:430: loop =  *ptr++;
   055C 8D 82         [24] 2301 	mov	dpl,r5
   055E 8E 83         [24] 2302 	mov	dph,r6
   0560 8F F0         [24] 2303 	mov	b,r7
   0562 12r00r00      [24] 2304 	lcall	__gptrget
   0565 FA            [12] 2305 	mov	r2,a
   0566 8D 82         [24] 2306 	mov	dpl,r5
   0568 8E 83         [24] 2307 	mov	dph,r6
   056A A3            [24] 2308 	inc	dptr
   056B 8A*11         [24] 2309 	mov	_processOUTEP5_loop_1_117,r2
   056D 75*12 00      [24] 2310 	mov	(_processOUTEP5_loop_1_117 + 1),#0x00
                           2311 ;	cc1110_spicom.c:431: loop += *ptr++ << 8;
   0570 E0            [24] 2312 	movx	a,@dptr
   0571 FA            [12] 2313 	mov	r2,a
   0572 90r03rD4      [24] 2314 	mov	dptr,#_processOUTEP5_ptr_1_117
   0575 74 02         [12] 2315 	mov	a,#0x02
   0577 2D            [12] 2316 	add	a,r5
   0578 F0            [24] 2317 	movx	@dptr,a
   0579 E4            [12] 2318 	clr	a
   057A 3E            [12] 2319 	addc	a,r6
   057B A3            [24] 2320 	inc	dptr
   057C F0            [24] 2321 	movx	@dptr,a
   057D 8A 01         [24] 2322 	mov	ar1,r2
   057F 89 02         [24] 2323 	mov	ar2,r1
   0581 E4            [12] 2324 	clr	a
   0582 F9            [12] 2325 	mov	r1,a
   0583 25*11         [12] 2326 	add	a,_processOUTEP5_loop_1_117
   0585 F5*11         [12] 2327 	mov	_processOUTEP5_loop_1_117,a
   0587 EA            [12] 2328 	mov	a,r2
   0588 35*12         [12] 2329 	addc	a,(_processOUTEP5_loop_1_117 + 1)
   058A F5*12         [12] 2330 	mov	(_processOUTEP5_loop_1_117 + 1),a
                           2331 ;	cc1110_spicom.c:432: ep5.dptr = (__xdata u8*) loop;
   058C A8*11         [24] 2332 	mov	r0,_processOUTEP5_loop_1_117
   058E AA*12         [24] 2333 	mov	r2,(_processOUTEP5_loop_1_117 + 1)
   0590 90r03rCC      [24] 2334 	mov	dptr,#(_ep5 + 0x0010)
   0593 E8            [12] 2335 	mov	a,r0
   0594 F0            [24] 2336 	movx	@dptr,a
   0595 EA            [12] 2337 	mov	a,r2
   0596 A3            [24] 2338 	inc	dptr
   0597 F0            [24] 2339 	movx	@dptr,a
   0598                    2340 00108$:
                           2341 ;	cc1110_spicom.c:436: loop = ep5.OUTbytesleft;
   0598 90r03rC8      [24] 2342 	mov	dptr,#(_ep5 + 0x000c)
   059B E0            [24] 2343 	movx	a,@dptr
   059C F9            [12] 2344 	mov	r1,a
   059D A3            [24] 2345 	inc	dptr
   059E E0            [24] 2346 	movx	a,@dptr
   059F FA            [12] 2347 	mov	r2,a
   05A0 89*11         [24] 2348 	mov	_processOUTEP5_loop_1_117,r1
   05A2 8A*12         [24] 2349 	mov	(_processOUTEP5_loop_1_117 + 1),r2
                           2350 ;	cc1110_spicom.c:437: if (loop > EP5OUT_MAX_PACKET_SIZE)
   05A4 C3            [12] 2351 	clr	c
   05A5 74 40         [12] 2352 	mov	a,#0x40
   05A7 95*11         [12] 2353 	subb	a,_processOUTEP5_loop_1_117
   05A9 E4            [12] 2354 	clr	a
   05AA 95*12         [12] 2355 	subb	a,(_processOUTEP5_loop_1_117 + 1)
   05AC 50 06         [24] 2356 	jnc	00110$
                           2357 ;	cc1110_spicom.c:439: loop = EP5OUT_MAX_PACKET_SIZE;
   05AE 75*11 40      [24] 2358 	mov	_processOUTEP5_loop_1_117,#0x40
   05B1 75*12 00      [24] 2359 	mov	(_processOUTEP5_loop_1_117 + 1),#0x00
   05B4                    2360 00110$:
                           2361 ;	cc1110_spicom.c:442: ep5.OUTbytesleft -= loop;
   05B4 E9            [12] 2362 	mov	a,r1
   05B5 C3            [12] 2363 	clr	c
   05B6 95*11         [12] 2364 	subb	a,_processOUTEP5_loop_1_117
   05B8 F9            [12] 2365 	mov	r1,a
   05B9 EA            [12] 2366 	mov	a,r2
   05BA 95*12         [12] 2367 	subb	a,(_processOUTEP5_loop_1_117 + 1)
   05BC FA            [12] 2368 	mov	r2,a
   05BD 90r03rC8      [24] 2369 	mov	dptr,#(_ep5 + 0x000c)
   05C0 E9            [12] 2370 	mov	a,r1
   05C1 F0            [24] 2371 	movx	@dptr,a
   05C2 EA            [12] 2372 	mov	a,r2
   05C3 A3            [24] 2373 	inc	dptr
   05C4 F0            [24] 2374 	movx	@dptr,a
   05C5 90r03rD4      [24] 2375 	mov	dptr,#_processOUTEP5_ptr_1_117
   05C8 E0            [24] 2376 	movx	a,@dptr
   05C9 F5*15         [12] 2377 	mov	_processOUTEP5_sloc1_1_0,a
   05CB A3            [24] 2378 	inc	dptr
   05CC E0            [24] 2379 	movx	a,@dptr
   05CD F5*16         [12] 2380 	mov	(_processOUTEP5_sloc1_1_0 + 1),a
   05CF 85*11*17      [24] 2381 	mov	_processOUTEP5_sloc2_1_0,_processOUTEP5_loop_1_117
   05D2 85*12*18      [24] 2382 	mov	(_processOUTEP5_sloc2_1_0 + 1),(_processOUTEP5_loop_1_117 + 1)
   05D5                    2383 00141$:
                           2384 ;	cc1110_spicom.c:445: for (;loop>0;loop--)
   05D5 E5*17         [12] 2385 	mov	a,_processOUTEP5_sloc2_1_0
   05D7 45*18         [12] 2386 	orl	a,(_processOUTEP5_sloc2_1_0 + 1)
   05D9 60 3D         [24] 2387 	jz	00111$
                           2388 ;	cc1110_spicom.c:447: *ep5.dptr++ = *ptr++;
   05DB 90r03rCC      [24] 2389 	mov	dptr,#(_ep5 + 0x0010)
   05DE E0            [24] 2390 	movx	a,@dptr
   05DF F5*13         [12] 2391 	mov	_processOUTEP5_sloc0_1_0,a
   05E1 A3            [24] 2392 	inc	dptr
   05E2 E0            [24] 2393 	movx	a,@dptr
   05E3 F5*14         [12] 2394 	mov	(_processOUTEP5_sloc0_1_0 + 1),a
   05E5 74 01         [12] 2395 	mov	a,#0x01
   05E7 25*13         [12] 2396 	add	a,_processOUTEP5_sloc0_1_0
   05E9 F9            [12] 2397 	mov	r1,a
   05EA E4            [12] 2398 	clr	a
   05EB 35*14         [12] 2399 	addc	a,(_processOUTEP5_sloc0_1_0 + 1)
   05ED FA            [12] 2400 	mov	r2,a
   05EE 90r03rCC      [24] 2401 	mov	dptr,#(_ep5 + 0x0010)
   05F1 E9            [12] 2402 	mov	a,r1
   05F2 F0            [24] 2403 	movx	@dptr,a
   05F3 EA            [12] 2404 	mov	a,r2
   05F4 A3            [24] 2405 	inc	dptr
   05F5 F0            [24] 2406 	movx	@dptr,a
   05F6 85*15 82      [24] 2407 	mov	dpl,_processOUTEP5_sloc1_1_0
   05F9 85*16 83      [24] 2408 	mov	dph,(_processOUTEP5_sloc1_1_0 + 1)
   05FC E0            [24] 2409 	movx	a,@dptr
   05FD FA            [12] 2410 	mov	r2,a
   05FE A3            [24] 2411 	inc	dptr
   05FF 85 82*15      [24] 2412 	mov	_processOUTEP5_sloc1_1_0,dpl
   0602 85 83*16      [24] 2413 	mov	(_processOUTEP5_sloc1_1_0 + 1),dph
   0605 85*13 82      [24] 2414 	mov	dpl,_processOUTEP5_sloc0_1_0
   0608 85*14 83      [24] 2415 	mov	dph,(_processOUTEP5_sloc0_1_0 + 1)
   060B EA            [12] 2416 	mov	a,r2
   060C F0            [24] 2417 	movx	@dptr,a
                           2418 ;	cc1110_spicom.c:445: for (;loop>0;loop--)
   060D 15*17         [12] 2419 	dec	_processOUTEP5_sloc2_1_0
   060F 74 FF         [12] 2420 	mov	a,#0xFF
   0611 B5*17 02      [24] 2421 	cjne	a,_processOUTEP5_sloc2_1_0,00212$
   0614 15*18         [12] 2422 	dec	(_processOUTEP5_sloc2_1_0 + 1)
   0616                    2423 00212$:
   0616 80 BD         [24] 2424 	sjmp	00141$
   0618                    2425 00111$:
                           2426 ;	cc1110_spicom.c:450: txdata(ep5.OUTapp, ep5.OUTcmd, 2, (__xdata u8*)&(ep5.OUTbytesleft));
   0618 90r03rC6      [24] 2427 	mov	dptr,#(_ep5 + 0x000a)
   061B E0            [24] 2428 	movx	a,@dptr
   061C FA            [12] 2429 	mov	r2,a
   061D 90r03rC7      [24] 2430 	mov	dptr,#(_ep5 + 0x000b)
   0620 E0            [24] 2431 	movx	a,@dptr
   0621 F5*0C         [12] 2432 	mov	_txdata_PARM_2,a
   0623 75*0FrC8      [24] 2433 	mov	_txdata_PARM_4,#(_ep5 + 0x000c)
   0626 75*10s03      [24] 2434 	mov	(_txdata_PARM_4 + 1),#((_ep5 + 0x000c) >> 8)
   0629 75*0D 02      [24] 2435 	mov	_txdata_PARM_3,#0x02
   062C 75*0E 00      [24] 2436 	mov	(_txdata_PARM_3 + 1),#0x00
   062F 8A 82         [24] 2437 	mov	dpl,r2
   0631 12r02rF1      [24] 2438 	lcall	_txdata
                           2439 ;	cc1110_spicom.c:452: break;
   0634 02r08r02      [24] 2440 	ljmp	00128$
                           2441 ;	cc1110_spicom.c:453: case CMD_PING:
   0637                    2442 00112$:
                           2443 ;	cc1110_spicom.c:454: blink(2,2);
   0637 D2 A4         [12] 2444 	setb	_P2_4
   0639 90 00 02      [24] 2445 	mov	dptr,#0x0002
   063C C0 07         [24] 2446 	push	ar7
   063E C0 06         [24] 2447 	push	ar6
   0640 C0 05         [24] 2448 	push	ar5
   0642 12r00r00      [24] 2449 	lcall	_sleepMillis
   0645 C2 A4         [12] 2450 	clr	_P2_4
   0647 90 00 02      [24] 2451 	mov	dptr,#0x0002
   064A 12r00r00      [24] 2452 	lcall	_sleepMillis
   064D D0 05         [24] 2453 	pop	ar5
   064F D0 06         [24] 2454 	pop	ar6
   0651 D0 07         [24] 2455 	pop	ar7
                           2456 ;	cc1110_spicom.c:455: txdata(ep5.OUTapp,ep5.OUTcmd,ep5.OUTlen,ptr);
   0653 90r03rC6      [24] 2457 	mov	dptr,#(_ep5 + 0x000a)
   0656 E0            [24] 2458 	movx	a,@dptr
   0657 FA            [12] 2459 	mov	r2,a
   0658 90r03rC7      [24] 2460 	mov	dptr,#(_ep5 + 0x000b)
   065B E0            [24] 2461 	movx	a,@dptr
   065C F5*0C         [12] 2462 	mov	_txdata_PARM_2,a
   065E 90r03rC4      [24] 2463 	mov	dptr,#(_ep5 + 0x0008)
   0661 E0            [24] 2464 	movx	a,@dptr
   0662 F5*0D         [12] 2465 	mov	_txdata_PARM_3,a
   0664 A3            [24] 2466 	inc	dptr
   0665 E0            [24] 2467 	movx	a,@dptr
   0666 F5*0E         [12] 2468 	mov	(_txdata_PARM_3 + 1),a
   0668 8D*0F         [24] 2469 	mov	_txdata_PARM_4,r5
   066A 8E*10         [24] 2470 	mov	(_txdata_PARM_4 + 1),r6
   066C 8A 82         [24] 2471 	mov	dpl,r2
   066E 12r02rF1      [24] 2472 	lcall	_txdata
                           2473 ;	cc1110_spicom.c:456: break;
   0671 02r08r02      [24] 2474 	ljmp	00128$
                           2475 ;	cc1110_spicom.c:458: case CMD_STATUS:
   0674                    2476 00113$:
                           2477 ;	cc1110_spicom.c:459: txdata(ep5.OUTapp, ep5.OUTcmd, 13, (__xdata u8*)"UNIMPLEMENTED");
   0674 75*0Fr18      [24] 2478 	mov	_txdata_PARM_4,#__str_0
   0677 75*10s00      [24] 2479 	mov	(_txdata_PARM_4 + 1),#(__str_0 >> 8)
   067A 8B*0C         [24] 2480 	mov	_txdata_PARM_2,r3
   067C 75*0D 0D      [24] 2481 	mov	_txdata_PARM_3,#0x0D
   067F 75*0E 00      [24] 2482 	mov	(_txdata_PARM_3 + 1),#0x00
   0682 85*17 82      [24] 2483 	mov	dpl,_processOUTEP5_sloc2_1_0
   0685 12r02rF1      [24] 2484 	lcall	_txdata
                           2485 ;	cc1110_spicom.c:461: break;
   0688 02r08r02      [24] 2486 	ljmp	00128$
                           2487 ;	cc1110_spicom.c:463: case CMD_GET_CLOCK:
   068B                    2488 00114$:
                           2489 ;	cc1110_spicom.c:464: txdata(ep5.OUTapp, ep5.OUTcmd, 4, (__xdata u8*)clock);
   068B 90r00r00      [24] 2490 	mov	dptr,#_clock
   068E E0            [24] 2491 	movx	a,@dptr
   068F F8            [12] 2492 	mov	r0,a
   0690 A3            [24] 2493 	inc	dptr
   0691 E0            [24] 2494 	movx	a,@dptr
   0692 F9            [12] 2495 	mov	r1,a
   0693 A3            [24] 2496 	inc	dptr
   0694 E0            [24] 2497 	movx	a,@dptr
   0695 A3            [24] 2498 	inc	dptr
   0696 E0            [24] 2499 	movx	a,@dptr
   0697 88*0F         [24] 2500 	mov	_txdata_PARM_4,r0
   0699 89*10         [24] 2501 	mov	(_txdata_PARM_4 + 1),r1
   069B 8B*0C         [24] 2502 	mov	_txdata_PARM_2,r3
   069D 75*0D 04      [24] 2503 	mov	_txdata_PARM_3,#0x04
   06A0 75*0E 00      [24] 2504 	mov	(_txdata_PARM_3 + 1),#0x00
   06A3 85*17 82      [24] 2505 	mov	dpl,_processOUTEP5_sloc2_1_0
   06A6 12r02rF1      [24] 2506 	lcall	_txdata
                           2507 ;	cc1110_spicom.c:465: break;
   06A9 02r08r02      [24] 2508 	ljmp	00128$
                           2509 ;	cc1110_spicom.c:467: case CMD_BUILDTYPE:
   06AC                    2510 00115$:
                           2511 ;	cc1110_spicom.c:468: txdata(ep5.OUTapp, ep5.OUTcmd, sizeof(buildname), (__xdata u8*)&buildname[0]);
   06AC 75*0Fr09      [24] 2512 	mov	_txdata_PARM_4,#_buildname
   06AF 75*10s00      [24] 2513 	mov	(_txdata_PARM_4 + 1),#(_buildname >> 8)
   06B2 8B*0C         [24] 2514 	mov	_txdata_PARM_2,r3
   06B4 75*0D 0F      [24] 2515 	mov	_txdata_PARM_3,#0x0F
   06B7 75*0E 00      [24] 2516 	mov	(_txdata_PARM_3 + 1),#0x00
   06BA 85*17 82      [24] 2517 	mov	dpl,_processOUTEP5_sloc2_1_0
   06BD 12r02rF1      [24] 2518 	lcall	_txdata
                           2519 ;	cc1110_spicom.c:469: break;
   06C0 02r08r02      [24] 2520 	ljmp	00128$
                           2521 ;	cc1110_spicom.c:471: case CMD_COMPILER:
   06C3                    2522 00116$:
                           2523 ;	cc1110_spicom.c:472: txdata(ep5.OUTapp, ep5.OUTcmd, sizeof(sdccver), (__xdata u8*)&sdccver[0]);
   06C3 75*0Fr00      [24] 2524 	mov	_txdata_PARM_4,#_sdccver
   06C6 75*10s00      [24] 2525 	mov	(_txdata_PARM_4 + 1),#(_sdccver >> 8)
   06C9 8B*0C         [24] 2526 	mov	_txdata_PARM_2,r3
   06CB 75*0D 09      [24] 2527 	mov	_txdata_PARM_3,#0x09
   06CE 75*0E 00      [24] 2528 	mov	(_txdata_PARM_3 + 1),#0x00
   06D1 85*17 82      [24] 2529 	mov	dpl,_processOUTEP5_sloc2_1_0
   06D4 12r02rF1      [24] 2530 	lcall	_txdata
                           2531 ;	cc1110_spicom.c:473: break;
   06D7 02r08r02      [24] 2532 	ljmp	00128$
                           2533 ;	cc1110_spicom.c:475: case CMD_RFMODE:
   06DA                    2534 00117$:
                           2535 ;	cc1110_spicom.c:476: switch (*ptr++)
   06DA 8D 82         [24] 2536 	mov	dpl,r5
   06DC 8E 83         [24] 2537 	mov	dph,r6
   06DE 8F F0         [24] 2538 	mov	b,r7
   06E0 12r00r00      [24] 2539 	lcall	__gptrget
   06E3 FC            [12] 2540 	mov	r4,a
   06E4 74 01         [12] 2541 	mov	a,#0x01
   06E6 2D            [12] 2542 	add	a,r5
   06E7 F9            [12] 2543 	mov	r1,a
   06E8 E4            [12] 2544 	clr	a
   06E9 3E            [12] 2545 	addc	a,r6
   06EA FA            [12] 2546 	mov	r2,a
   06EB BC 02 02      [24] 2547 	cjne	r4,#0x02,00213$
   06EE 80 0A         [24] 2548 	sjmp	00118$
   06F0                    2549 00213$:
   06F0 BC 03 02      [24] 2550 	cjne	r4,#0x03,00214$
   06F3 80 21         [24] 2551 	sjmp	00120$
   06F5                    2552 00214$:
                           2553 ;	cc1110_spicom.c:478: case RFST_SRX:
   06F5 BC 04 29      [24] 2554 	cjne	r4,#0x04,00121$
   06F8 80 0D         [24] 2555 	sjmp	00119$
   06FA                    2556 00118$:
                           2557 ;	cc1110_spicom.c:479: RxMode();
   06FA C0 02         [24] 2558 	push	ar2
   06FC C0 01         [24] 2559 	push	ar1
   06FE 12r00r00      [24] 2560 	lcall	_RxMode
   0701 D0 01         [24] 2561 	pop	ar1
   0703 D0 02         [24] 2562 	pop	ar2
                           2563 ;	cc1110_spicom.c:480: break;
                           2564 ;	cc1110_spicom.c:481: case RFST_SIDLE:
   0705 80 1A         [24] 2565 	sjmp	00121$
   0707                    2566 00119$:
                           2567 ;	cc1110_spicom.c:482: LED = 0;
   0707 C2 A4         [12] 2568 	clr	_P2_4
                           2569 ;	cc1110_spicom.c:483: IdleMode();
   0709 C0 02         [24] 2570 	push	ar2
   070B C0 01         [24] 2571 	push	ar1
   070D 12r00r00      [24] 2572 	lcall	_IdleMode
   0710 D0 01         [24] 2573 	pop	ar1
   0712 D0 02         [24] 2574 	pop	ar2
                           2575 ;	cc1110_spicom.c:484: break;
                           2576 ;	cc1110_spicom.c:485: case RFST_STX:
   0714 80 0B         [24] 2577 	sjmp	00121$
   0716                    2578 00120$:
                           2579 ;	cc1110_spicom.c:486: TxMode();
   0716 C0 02         [24] 2580 	push	ar2
   0718 C0 01         [24] 2581 	push	ar1
   071A 12r00r00      [24] 2582 	lcall	_TxMode
   071D D0 01         [24] 2583 	pop	ar1
   071F D0 02         [24] 2584 	pop	ar2
                           2585 ;	cc1110_spicom.c:488: }
   0721                    2586 00121$:
                           2587 ;	cc1110_spicom.c:490: txdata(ep5.OUTapp,ep5.OUTcmd,ep5.OUTlen,ptr);
   0721 90r03rC6      [24] 2588 	mov	dptr,#(_ep5 + 0x000a)
   0724 E0            [24] 2589 	movx	a,@dptr
   0725 FC            [12] 2590 	mov	r4,a
   0726 90r03rC7      [24] 2591 	mov	dptr,#(_ep5 + 0x000b)
   0729 E0            [24] 2592 	movx	a,@dptr
   072A F5*0C         [12] 2593 	mov	_txdata_PARM_2,a
   072C 90r03rC4      [24] 2594 	mov	dptr,#(_ep5 + 0x0008)
   072F E0            [24] 2595 	movx	a,@dptr
   0730 F5*0D         [12] 2596 	mov	_txdata_PARM_3,a
   0732 A3            [24] 2597 	inc	dptr
   0733 E0            [24] 2598 	movx	a,@dptr
   0734 F5*0E         [12] 2599 	mov	(_txdata_PARM_3 + 1),a
   0736 89*0F         [24] 2600 	mov	_txdata_PARM_4,r1
   0738 8A*10         [24] 2601 	mov	(_txdata_PARM_4 + 1),r2
   073A 8C 82         [24] 2602 	mov	dpl,r4
   073C 12r02rF1      [24] 2603 	lcall	_txdata
                           2604 ;	cc1110_spicom.c:491: break;
   073F 02r08r02      [24] 2605 	ljmp	00128$
                           2606 ;	cc1110_spicom.c:493: case CMD_PARTNUM:
   0742                    2607 00122$:
                           2608 ;	cc1110_spicom.c:494: ep5.OUTbytesleft = 1;
   0742 90r03rC8      [24] 2609 	mov	dptr,#(_ep5 + 0x000c)
   0745 74 01         [12] 2610 	mov	a,#0x01
   0747 F0            [24] 2611 	movx	@dptr,a
   0748 E4            [12] 2612 	clr	a
   0749 A3            [24] 2613 	inc	dptr
   074A F0            [24] 2614 	movx	@dptr,a
                           2615 ;	cc1110_spicom.c:496: ptr = (__xdata u8*) &PARTNUM;
   074B 75*0F 36      [24] 2616 	mov	_txdata_PARM_4,#_PARTNUM
   074E 75*10 DF      [24] 2617 	mov	(_txdata_PARM_4 + 1),#(_PARTNUM >> 8)
                           2618 ;	cc1110_spicom.c:498: txdata(ep5.OUTapp, ep5.OUTcmd, ep5.OUTbytesleft, ptr);
   0751 90r03rC6      [24] 2619 	mov	dptr,#(_ep5 + 0x000a)
   0754 E0            [24] 2620 	movx	a,@dptr
   0755 FC            [12] 2621 	mov	r4,a
   0756 90r03rC7      [24] 2622 	mov	dptr,#(_ep5 + 0x000b)
   0759 E0            [24] 2623 	movx	a,@dptr
   075A F5*0C         [12] 2624 	mov	_txdata_PARM_2,a
   075C 90r03rC8      [24] 2625 	mov	dptr,#(_ep5 + 0x000c)
   075F E0            [24] 2626 	movx	a,@dptr
   0760 F5*0D         [12] 2627 	mov	_txdata_PARM_3,a
   0762 A3            [24] 2628 	inc	dptr
   0763 E0            [24] 2629 	movx	a,@dptr
   0764 F5*0E         [12] 2630 	mov	(_txdata_PARM_3 + 1),a
   0766 8C 82         [24] 2631 	mov	dpl,r4
   0768 12r02rF1      [24] 2632 	lcall	_txdata
                           2633 ;	cc1110_spicom.c:499: ep5.OUTbytesleft = 0;
   076B 90r03rC8      [24] 2634 	mov	dptr,#(_ep5 + 0x000c)
   076E E4            [12] 2635 	clr	a
   076F F0            [24] 2636 	movx	@dptr,a
   0770 E4            [12] 2637 	clr	a
   0771 A3            [24] 2638 	inc	dptr
   0772 F0            [24] 2639 	movx	@dptr,a
                           2640 ;	cc1110_spicom.c:500: break;
   0773 02r08r02      [24] 2641 	ljmp	00128$
                           2642 ;	cc1110_spicom.c:502: case CMD_RESET:
   0776                    2643 00123$:
                           2644 ;	cc1110_spicom.c:503: if (strncmp(ptr, "RESET_NOW", 9))
   0776 8D 02         [24] 2645 	mov	ar2,r5
   0778 8E 04         [24] 2646 	mov	ar4,r6
   077A 8C 01         [24] 2647 	mov	ar1,r4
   077C 7C 00         [12] 2648 	mov	r4,#0x00
   077E 90r00r00      [24] 2649 	mov	dptr,#_strncmp_PARM_2
   0781 74r26         [12] 2650 	mov	a,#__str_1
   0783 F0            [24] 2651 	movx	@dptr,a
   0784 74s00         [12] 2652 	mov	a,#(__str_1 >> 8)
   0786 A3            [24] 2653 	inc	dptr
   0787 F0            [24] 2654 	movx	@dptr,a
   0788 74 80         [12] 2655 	mov	a,#0x80
   078A A3            [24] 2656 	inc	dptr
   078B F0            [24] 2657 	movx	@dptr,a
   078C 75*00 09      [24] 2658 	mov	_strncmp_PARM_3,#0x09
   078F 75*01 00      [24] 2659 	mov	(_strncmp_PARM_3 + 1),#0x00
   0792 8A 82         [24] 2660 	mov	dpl,r2
   0794 89 83         [24] 2661 	mov	dph,r1
   0796 8C F0         [24] 2662 	mov	b,r4
   0798 C0 07         [24] 2663 	push	ar7
   079A C0 06         [24] 2664 	push	ar6
   079C C0 05         [24] 2665 	push	ar5
   079E 12r00r00      [24] 2666 	lcall	_strncmp
   07A1 E5 82         [12] 2667 	mov	a,dpl
   07A3 85 83 F0      [24] 2668 	mov	b,dph
   07A6 D0 05         [24] 2669 	pop	ar5
   07A8 D0 06         [24] 2670 	pop	ar6
   07AA D0 07         [24] 2671 	pop	ar7
   07AC 45 F0         [12] 2672 	orl	a,b
   07AE 70 52         [24] 2673 	jnz	00128$
                           2674 ;	cc1110_spicom.c:507: WDCTL = 0x80;   // Watchdog ENABLE, Watchdog mode, 1s until reset
   07B0 75 C9 80      [24] 2675 	mov	_WDCTL,#0x80
                           2676 ;	cc1110_spicom.c:509: txdata(ep5.OUTapp,ep5.OUTcmd,ep5.OUTlen,ptr);
   07B3 90r03rC6      [24] 2677 	mov	dptr,#(_ep5 + 0x000a)
   07B6 E0            [24] 2678 	movx	a,@dptr
   07B7 FC            [12] 2679 	mov	r4,a
   07B8 90r03rC7      [24] 2680 	mov	dptr,#(_ep5 + 0x000b)
   07BB E0            [24] 2681 	movx	a,@dptr
   07BC F5*0C         [12] 2682 	mov	_txdata_PARM_2,a
   07BE 90r03rC4      [24] 2683 	mov	dptr,#(_ep5 + 0x0008)
   07C1 E0            [24] 2684 	movx	a,@dptr
   07C2 F5*0D         [12] 2685 	mov	_txdata_PARM_3,a
   07C4 A3            [24] 2686 	inc	dptr
   07C5 E0            [24] 2687 	movx	a,@dptr
   07C6 F5*0E         [12] 2688 	mov	(_txdata_PARM_3 + 1),a
   07C8 8D*0F         [24] 2689 	mov	_txdata_PARM_4,r5
   07CA 8E*10         [24] 2690 	mov	(_txdata_PARM_4 + 1),r6
   07CC 8C 82         [24] 2691 	mov	dpl,r4
   07CE 12r02rF1      [24] 2692 	lcall	_txdata
                           2693 ;	cc1110_spicom.c:510: break;
                           2694 ;	cc1110_spicom.c:512: case CMD_CLEAR_CODES:
   07D1 80 2F         [24] 2695 	sjmp	00128$
   07D3                    2696 00126$:
                           2697 ;	cc1110_spicom.c:513: lastCode[0] = 0;
   07D3 90r00r00      [24] 2698 	mov	dptr,#_lastCode
                           2699 ;	cc1110_spicom.c:514: lastCode[1] = 0;
   07D6 E4            [12] 2700 	clr	a
   07D7 F0            [24] 2701 	movx	@dptr,a
   07D8 90r00r01      [24] 2702 	mov	dptr,#(_lastCode + 0x0001)
   07DB F0            [24] 2703 	movx	@dptr,a
                           2704 ;	cc1110_spicom.c:516: appReturn(2, ptr);
   07DC 90r03rD1      [24] 2705 	mov	dptr,#_appReturn_PARM_2
   07DF ED            [12] 2706 	mov	a,r5
   07E0 F0            [24] 2707 	movx	@dptr,a
   07E1 EE            [12] 2708 	mov	a,r6
   07E2 A3            [24] 2709 	inc	dptr
   07E3 F0            [24] 2710 	movx	@dptr,a
   07E4 75 82 02      [24] 2711 	mov	dpl,#0x02
   07E7 12r03r4A      [24] 2712 	lcall	_appReturn
                           2713 ;	cc1110_spicom.c:517: break;
                           2714 ;	cc1110_spicom.c:519: default:
   07EA 80 16         [24] 2715 	sjmp	00128$
   07EC                    2716 00127$:
                           2717 ;	cc1110_spicom.c:520: txdata(ep5.OUTapp,ep5.OUTcmd,ep5.OUTlen,ptr);
   07EC 90r03rC4      [24] 2718 	mov	dptr,#(_ep5 + 0x0008)
   07EF E0            [24] 2719 	movx	a,@dptr
   07F0 F5*0D         [12] 2720 	mov	_txdata_PARM_3,a
   07F2 A3            [24] 2721 	inc	dptr
   07F3 E0            [24] 2722 	movx	a,@dptr
   07F4 F5*0E         [12] 2723 	mov	(_txdata_PARM_3 + 1),a
   07F6 8B*0C         [24] 2724 	mov	_txdata_PARM_2,r3
   07F8 8D*0F         [24] 2725 	mov	_txdata_PARM_4,r5
   07FA 8E*10         [24] 2726 	mov	(_txdata_PARM_4 + 1),r6
   07FC 85*17 82      [24] 2727 	mov	dpl,_processOUTEP5_sloc2_1_0
   07FF 12r02rF1      [24] 2728 	lcall	_txdata
                           2729 ;	cc1110_spicom.c:521: }
   0802                    2730 00128$:
                           2731 ;	cc1110_spicom.c:523: ep5.flags &= ~EP_OUTBUF_WRITTEN; 
   0802 90r03rCA      [24] 2732 	mov	dptr,#(_ep5 + 0x000e)
   0805 E0            [24] 2733 	movx	a,@dptr
   0806 54 FD         [12] 2734 	anl	a,#0xFD
   0808 F0            [24] 2735 	movx	@dptr,a
   0809 22            [24] 2736 	ret
   080A                    2737 00135$:
                           2738 ;	cc1110_spicom.c:527: if (cb_ep5)
   080A E5*0A         [12] 2739 	mov	a,_cb_ep5
   080C 45*0B         [12] 2740 	orl	a,(_cb_ep5 + 1)
   080E 60 19         [24] 2741 	jz	00132$
                           2742 ;	cc1110_spicom.c:529: if (! cb_ep5())
   0810 85*0A 82      [24] 2743 	mov	dpl,_cb_ep5
   0813 85*0B 83      [24] 2744 	mov	dph,(_cb_ep5 + 1)
   0816 12r00r00      [24] 2745 	lcall	__sdcc_call_dptr
   0819 AE 82         [24] 2746 	mov	r6,dpl
   081B AF 83         [24] 2747 	mov	r7,dph
   081D EE            [12] 2748 	mov	a,r6
   081E 4F            [12] 2749 	orl	a,r7
   081F 70 10         [24] 2750 	jnz	00143$
                           2751 ;	cc1110_spicom.c:533: ep5.flags &= ~EP_OUTBUF_WRITTEN; 
   0821 90r03rCA      [24] 2752 	mov	dptr,#(_ep5 + 0x000e)
   0824 E0            [24] 2753 	movx	a,@dptr
   0825 54 FD         [12] 2754 	anl	a,#0xFD
   0827 F0            [24] 2755 	movx	@dptr,a
   0828 22            [24] 2756 	ret
   0829                    2757 00132$:
                           2758 ;	cc1110_spicom.c:538: ep5.flags &= ~EP_OUTBUF_WRITTEN; 
   0829 90r03rCA      [24] 2759 	mov	dptr,#(_ep5 + 0x000e)
   082C E0            [24] 2760 	movx	a,@dptr
   082D 54 FD         [12] 2761 	anl	a,#0xFD
   082F FF            [12] 2762 	mov	r7,a
   0830 F0            [24] 2763 	movx	@dptr,a
   0831                    2764 00143$:
   0831 22            [24] 2765 	ret
                           2766 	.area CSEG    (CODE)
                           2767 	.area CONST   (CODE)
   0000                    2768 _sdccver:
   0000 53 44 43 43 76 33  2769 	.ascii "SDCCv330"
        33 30
   0008 00                 2770 	.db 0x00
   0009                    2771 _buildname:
   0009 45                 2772 	.db #0x45	; 69	'E'
   000A 58                 2773 	.db #0x58	; 88	'X'
   000B 50                 2774 	.db #0x50	; 80	'P'
   000C 4C                 2775 	.db #0x4C	; 76	'L'
   000D 4F                 2776 	.db #0x4F	; 79	'O'
   000E 52                 2777 	.db #0x52	; 82	'R'
   000F 45                 2778 	.db #0x45	; 69	'E'
   0010 52                 2779 	.db #0x52	; 82	'R'
   0011 20                 2780 	.db #0x20	; 32
   0012 72                 2781 	.db #0x72	; 114	'r'
   0013 35                 2782 	.db #0x35	; 53	'5'
   0014 35                 2783 	.db #0x35	; 53	'5'
   0015 33                 2784 	.db #0x33	; 51	'3'
   0016 35                 2785 	.db #0x35	; 53	'5'
   0017 00                 2786 	.db #0x00	; 0
   0018                    2787 __str_0:
   0018 55 4E 49 4D 50 4C  2788 	.ascii "UNIMPLEMENTED"
        45 4D 45 4E 54 45
        44
   0025 00                 2789 	.db 0x00
   0026                    2790 __str_1:
   0026 52 45 53 45 54 5F  2791 	.ascii "RESET_NOW"
        4E 4F 57
   002F 00                 2792 	.db 0x00
                           2793 	.area XINIT   (CODE)
                           2794 	.area CABS    (ABS,CODE)

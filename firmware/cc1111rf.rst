                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (Dec 30 2013) (Linux)
                              4 ; This file was generated Wed Dec 14 17:38:39 2016
                              5 ;--------------------------------------------------------
                              6 	.module cc1111rf
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _RepeaterStop
                             13 	.globl _RepeaterStart
                             14 	.globl _setFreq
                             15 	.globl _memset
                             16 	.globl _decAES
                             17 	.globl _encAES
                             18 	.globl _padAES
                             19 	.globl _appInitRf
                             20 	.globl _sleepMicros
                             21 	.globl _usbProcessEvents
                             22 	.globl _USBIF
                             23 	.globl _MODE
                             24 	.globl _RE
                             25 	.globl _SLAVE
                             26 	.globl _FE
                             27 	.globl _ERR
                             28 	.globl _RX_BYTE
                             29 	.globl _TX_BYTE
                             30 	.globl _ACTIVE
                             31 	.globl _B_7
                             32 	.globl _B_6
                             33 	.globl _B_5
                             34 	.globl _B_4
                             35 	.globl _B_3
                             36 	.globl _B_2
                             37 	.globl _B_1
                             38 	.globl _B_0
                             39 	.globl _WDTIF
                             40 	.globl _P1IF
                             41 	.globl _UTX1IF
                             42 	.globl _UTX0IF
                             43 	.globl _P2IF
                             44 	.globl _ACC_7
                             45 	.globl _ACC_6
                             46 	.globl _ACC_5
                             47 	.globl _ACC_4
                             48 	.globl _ACC_3
                             49 	.globl _ACC_2
                             50 	.globl _ACC_1
                             51 	.globl _ACC_0
                             52 	.globl _OVFIM
                             53 	.globl _T4CH1IF
                             54 	.globl _T4CH0IF
                             55 	.globl _T4OVFIF
                             56 	.globl _T3CH1IF
                             57 	.globl _T3CH0IF
                             58 	.globl _T3OVFIF
                             59 	.globl _CY
                             60 	.globl _AC
                             61 	.globl _F0
                             62 	.globl _RS1
                             63 	.globl _RS0
                             64 	.globl _OV
                             65 	.globl _F1
                             66 	.globl _P
                             67 	.globl _STIF
                             68 	.globl _P0IF
                             69 	.globl _T4IF
                             70 	.globl _T3IF
                             71 	.globl _T2IF
                             72 	.globl _T1IF
                             73 	.globl _DMAIF
                             74 	.globl _P0IE
                             75 	.globl _T4IE
                             76 	.globl _T3IE
                             77 	.globl _T2IE
                             78 	.globl _T1IE
                             79 	.globl _DMAIE
                             80 	.globl _EA
                             81 	.globl _STIE
                             82 	.globl _ENCIE
                             83 	.globl _URX1IE
                             84 	.globl _URX0IE
                             85 	.globl _ADCIE
                             86 	.globl _RFTXRXIE
                             87 	.globl _P2_7
                             88 	.globl _P2_6
                             89 	.globl _P2_5
                             90 	.globl _P2_4
                             91 	.globl _P2_3
                             92 	.globl _P2_2
                             93 	.globl _P2_1
                             94 	.globl _P2_0
                             95 	.globl _ENCIF_1
                             96 	.globl _ENCIF_0
                             97 	.globl _P1_7
                             98 	.globl _P1_6
                             99 	.globl _P1_5
                            100 	.globl _P1_4
                            101 	.globl _P1_3
                            102 	.globl _P1_2
                            103 	.globl _P1_1
                            104 	.globl _P1_0
                            105 	.globl _URX1IF
                            106 	.globl _ADCIF
                            107 	.globl _URX0IF
                            108 	.globl _IT1
                            109 	.globl _RFTXRXIF
                            110 	.globl _IT0
                            111 	.globl _P0_7
                            112 	.globl _P0_6
                            113 	.globl _P0_5
                            114 	.globl _P0_4
                            115 	.globl _P0_3
                            116 	.globl _P0_2
                            117 	.globl _P0_1
                            118 	.globl _P0_0
                            119 	.globl _P2DIR
                            120 	.globl _P1DIR
                            121 	.globl _P0DIR
                            122 	.globl _U1GCR
                            123 	.globl _U1UCR
                            124 	.globl _U1BAUD
                            125 	.globl _U1DBUF
                            126 	.globl _U1CSR
                            127 	.globl _P2INP
                            128 	.globl _P1INP
                            129 	.globl _P2SEL
                            130 	.globl _P1SEL
                            131 	.globl _P0SEL
                            132 	.globl _ADCCFG
                            133 	.globl _PERCFG
                            134 	.globl _B
                            135 	.globl _T4CC1
                            136 	.globl _T4CCTL1
                            137 	.globl _T4CC0
                            138 	.globl _T4CCTL0
                            139 	.globl _T4CTL
                            140 	.globl _T4CNT
                            141 	.globl _RFIF
                            142 	.globl _IRCON2
                            143 	.globl _T1CCTL2
                            144 	.globl _T1CCTL1
                            145 	.globl _T1CCTL0
                            146 	.globl _T1CTL
                            147 	.globl _T1CNTH
                            148 	.globl _T1CNTL
                            149 	.globl _RFST
                            150 	.globl _ACC
                            151 	.globl _T1CC2H
                            152 	.globl _T1CC2L
                            153 	.globl _T1CC1H
                            154 	.globl _T1CC1L
                            155 	.globl _T1CC0H
                            156 	.globl _T1CC0L
                            157 	.globl _RFD
                            158 	.globl _TIMIF
                            159 	.globl _DMAREQ
                            160 	.globl _DMAARM
                            161 	.globl _DMA0CFGH
                            162 	.globl _DMA0CFGL
                            163 	.globl _DMA1CFGH
                            164 	.globl _DMA1CFGL
                            165 	.globl _DMAIRQ
                            166 	.globl _PSW
                            167 	.globl _T3CC1
                            168 	.globl _T3CCTL1
                            169 	.globl _T3CC0
                            170 	.globl _T3CCTL0
                            171 	.globl _T3CTL
                            172 	.globl _T3CNT
                            173 	.globl _WDCTL
                            174 	.globl __SFRC8
                            175 	.globl _MEMCTR
                            176 	.globl _CLKCON
                            177 	.globl _U0GCR
                            178 	.globl _U0UCR
                            179 	.globl __SFRC3
                            180 	.globl _U0BAUD
                            181 	.globl _U0DBUF
                            182 	.globl _IRCON
                            183 	.globl __SFRBF
                            184 	.globl _SLEEP
                            185 	.globl _RNDH
                            186 	.globl _RNDL
                            187 	.globl _ADCH
                            188 	.globl _ADCL
                            189 	.globl _IP1
                            190 	.globl _IEN1
                            191 	.globl __SFRB7
                            192 	.globl _ADCCON3
                            193 	.globl _ADCCON2
                            194 	.globl _ADCCON1
                            195 	.globl _ENCCS
                            196 	.globl _ENCDO
                            197 	.globl _ENCDI
                            198 	.globl __SFRB0
                            199 	.globl _FWDATA
                            200 	.globl _FCTL
                            201 	.globl _FADDRH
                            202 	.globl _FADDRL
                            203 	.globl _FWT
                            204 	.globl __SFRAA
                            205 	.globl _IP0
                            206 	.globl _IEN0
                            207 	.globl __SFRA7
                            208 	.globl _WORTIME1
                            209 	.globl _WORTIME0
                            210 	.globl _WOREVT1
                            211 	.globl _WOREVT0
                            212 	.globl _WORCTRL
                            213 	.globl _WORIRQ
                            214 	.globl _P2
                            215 	.globl __SFR9F
                            216 	.globl _T2CTL
                            217 	.globl _T2PR
                            218 	.globl _T2CT
                            219 	.globl _S1CON
                            220 	.globl _IEN2
                            221 	.globl __SFR99
                            222 	.globl _S0CON
                            223 	.globl __SFR97
                            224 	.globl __SFR96
                            225 	.globl __SFR95
                            226 	.globl __SFR94
                            227 	.globl __XPAGE
                            228 	.globl _MPAGE
                            229 	.globl _DPS
                            230 	.globl _RFIM
                            231 	.globl _P1
                            232 	.globl _P0INP
                            233 	.globl __SFR8E
                            234 	.globl _P1IEN
                            235 	.globl _PICTL
                            236 	.globl _P2IFG
                            237 	.globl _P1IFG
                            238 	.globl _P0IFG
                            239 	.globl _TCON
                            240 	.globl _PCON
                            241 	.globl _U0CSR
                            242 	.globl _DPH1
                            243 	.globl _DPL1
                            244 	.globl _DPH0
                            245 	.globl _DPL0
                            246 	.globl _SP
                            247 	.globl _P0
                            248 	.globl _bRepeatMode
                            249 	.globl _rfAmpMode
                            250 	.globl _rfAESMode
                            251 	.globl _rfTxInfMode
                            252 	.globl _rfTxTotalTXLen
                            253 	.globl _rfTxRepeatOffset
                            254 	.globl _rfTxRepeatLen
                            255 	.globl _rfTxBufferEnd
                            256 	.globl _rfTxRepeatCounter
                            257 	.globl _rfTxCounter
                            258 	.globl _rfTxBufCount
                            259 	.globl _rfTxCurBufIdx
                            260 	.globl _rfRxLargeLen
                            261 	.globl _rfRxTotalRXLen
                            262 	.globl _rfRxInfMode
                            263 	.globl _byte_shuffle_PARM_3
                            264 	.globl _byte_shuffle_PARM_2
                            265 	.globl _transmit_PARM_4
                            266 	.globl _transmit_PARM_3
                            267 	.globl _transmit_PARM_2
                            268 	.globl _macdata
                            269 	.globl _rf_tLastRecv
                            270 	.globl _rf_MAC_timer
                            271 	.globl _rf_status
                            272 	.globl _txTotal
                            273 	.globl _rftxbuf
                            274 	.globl _rfRxProcessed
                            275 	.globl _rfRxCounter
                            276 	.globl _rfrxbuf
                            277 	.globl _rfRxCurrentBuffer
                            278 	.globl _USBF5
                            279 	.globl _USBF4
                            280 	.globl _USBF3
                            281 	.globl _USBF2
                            282 	.globl _USBF1
                            283 	.globl _USBF0
                            284 	.globl _USBCNTH
                            285 	.globl _USBCNTL
                            286 	.globl _USBCNT0
                            287 	.globl _USBCSOH
                            288 	.globl _USBCSOL
                            289 	.globl _USBMAXO
                            290 	.globl _USBCSIH
                            291 	.globl _USBCSIL
                            292 	.globl _USBCS0
                            293 	.globl _USBMAXI
                            294 	.globl _USBINDEX
                            295 	.globl _USBFRMH
                            296 	.globl _USBFRML
                            297 	.globl _USBCIE
                            298 	.globl _USBOIE
                            299 	.globl _USBIIE
                            300 	.globl _USBCIF
                            301 	.globl _USBOIF
                            302 	.globl _USBIIF
                            303 	.globl _USBPOW
                            304 	.globl _USBADDR
                            305 	.globl _X_P2DIR
                            306 	.globl _X_P1DIR
                            307 	.globl _X_P0DIR
                            308 	.globl _X_U1GCR
                            309 	.globl _X_U1UCR
                            310 	.globl _X_U1BAUD
                            311 	.globl _X_U1DBUF
                            312 	.globl _X_U1CSR
                            313 	.globl _X_P2INP
                            314 	.globl _X_P1INP
                            315 	.globl _X_P2SEL
                            316 	.globl _X_P1SEL
                            317 	.globl _X_P0SEL
                            318 	.globl _X_ADCCFG
                            319 	.globl _X_PERCFG
                            320 	.globl __NA_B
                            321 	.globl _X_T4CC1
                            322 	.globl _X_T4CCTL1
                            323 	.globl _X_T4CC0
                            324 	.globl _X_T4CCTL0
                            325 	.globl _X_T4CTL
                            326 	.globl _X_T4CNT
                            327 	.globl _X_RFIF
                            328 	.globl __NA_IRCON2
                            329 	.globl _X_T1CCTL2
                            330 	.globl _X_T1CCTL1
                            331 	.globl _X_T1CCTL0
                            332 	.globl _X_T1CTL
                            333 	.globl _X_T1CNTH
                            334 	.globl _X_T1CNTL
                            335 	.globl _X_RFST
                            336 	.globl __NA_ACC
                            337 	.globl _X_T1CC2H
                            338 	.globl _X_T1CC2L
                            339 	.globl _X_T1CC1H
                            340 	.globl _X_T1CC1L
                            341 	.globl _X_T1CC0H
                            342 	.globl _X_T1CC0L
                            343 	.globl _X_RFD
                            344 	.globl _X_TIMIF
                            345 	.globl _X_DMAREQ
                            346 	.globl _X_DMAARM
                            347 	.globl _X_DMA0CFGH
                            348 	.globl _X_DMA0CFGL
                            349 	.globl _X_DMA1CFGH
                            350 	.globl _X_DMA1CFGL
                            351 	.globl _X_DMAIRQ
                            352 	.globl __NA_PSW
                            353 	.globl _X_T3CC1
                            354 	.globl _X_T3CCTL1
                            355 	.globl _X_T3CC0
                            356 	.globl _X_T3CCTL0
                            357 	.globl _X_T3CTL
                            358 	.globl _X_T3CNT
                            359 	.globl _X_WDCTL
                            360 	.globl __X_SFRC8
                            361 	.globl _X_MEMCTR
                            362 	.globl _X_CLKCON
                            363 	.globl _X_U0GCR
                            364 	.globl _X_U0UCR
                            365 	.globl __X_SFRC3
                            366 	.globl _X_U0BAUD
                            367 	.globl _X_U0DBUF
                            368 	.globl __NA_IRCON
                            369 	.globl __X_SFRBF
                            370 	.globl _X_SLEEP
                            371 	.globl _X_RNDH
                            372 	.globl _X_RNDL
                            373 	.globl _X_ADCH
                            374 	.globl _X_ADCL
                            375 	.globl __NA_IP1
                            376 	.globl __NA_IEN1
                            377 	.globl __X_SFRB7
                            378 	.globl _X_ADCCON3
                            379 	.globl _X_ADCCON2
                            380 	.globl _X_ADCCON1
                            381 	.globl _X_ENCCS
                            382 	.globl _X_ENCDO
                            383 	.globl _X_ENCDI
                            384 	.globl __X_SFRB0
                            385 	.globl _X_FWDATA
                            386 	.globl _X_FCTL
                            387 	.globl _X_FADDRH
                            388 	.globl _X_FADDRL
                            389 	.globl _X_FWT
                            390 	.globl __X_SFRAA
                            391 	.globl __NA_IP0
                            392 	.globl __NA_IEN0
                            393 	.globl __X_SFRA7
                            394 	.globl _X_WORTIME1
                            395 	.globl _X_WORTIME0
                            396 	.globl _X_WOREVT1
                            397 	.globl _X_WOREVT0
                            398 	.globl _X_WORCTRL
                            399 	.globl _X_WORIRQ
                            400 	.globl __NA_P2
                            401 	.globl __X_SFR9F
                            402 	.globl _X_T2CTL
                            403 	.globl _X_T2PR
                            404 	.globl _X_T2CT
                            405 	.globl __NA_S1CON
                            406 	.globl __NA_IEN2
                            407 	.globl __X_SFR99
                            408 	.globl __NA_S0CON
                            409 	.globl __X_SFR97
                            410 	.globl __X_SFR96
                            411 	.globl __X_SFR95
                            412 	.globl __X_SFR94
                            413 	.globl _X_MPAGE
                            414 	.globl __NA_DPS
                            415 	.globl _X_RFIM
                            416 	.globl __NA_P1
                            417 	.globl _X_P0INP
                            418 	.globl __X_SFR8E
                            419 	.globl _X_P1IEN
                            420 	.globl _X_PICTL
                            421 	.globl _X_P2IFG
                            422 	.globl _X_P1IFG
                            423 	.globl _X_P0IFG
                            424 	.globl __NA_TCON
                            425 	.globl __NA_PCON
                            426 	.globl _X_U0CSR
                            427 	.globl __NA_DPH1
                            428 	.globl __NA_DPL1
                            429 	.globl __NA_DPH0
                            430 	.globl __NA_DPL0
                            431 	.globl __NA_SP
                            432 	.globl __NA_P0
                            433 	.globl _I2SCLKF2
                            434 	.globl _I2SCLKF1
                            435 	.globl _I2SCLKF0
                            436 	.globl _I2SSTAT
                            437 	.globl _I2SWCNT
                            438 	.globl _I2SDATH
                            439 	.globl _I2SDATL
                            440 	.globl _I2SCFG1
                            441 	.globl _I2SCFG0
                            442 	.globl _VCO_VC_DAC
                            443 	.globl _PKTSTATUS
                            444 	.globl _MARCSTATE
                            445 	.globl _RSSI
                            446 	.globl _LQI
                            447 	.globl _FREQEST
                            448 	.globl _VERSION
                            449 	.globl _PARTNUM
                            450 	.globl __XREGDF35
                            451 	.globl __XREGDF34
                            452 	.globl __XREGDF33
                            453 	.globl __XREGDF32
                            454 	.globl _IOCFG0
                            455 	.globl _IOCFG1
                            456 	.globl _IOCFG2
                            457 	.globl _PA_TABLE0
                            458 	.globl _PA_TABLE1
                            459 	.globl _PA_TABLE2
                            460 	.globl _PA_TABLE3
                            461 	.globl _PA_TABLE4
                            462 	.globl _PA_TABLE5
                            463 	.globl _PA_TABLE6
                            464 	.globl _PA_TABLE7
                            465 	.globl __XREGDF26
                            466 	.globl _TEST0
                            467 	.globl _TEST1
                            468 	.globl _TEST2
                            469 	.globl __XREGDF22
                            470 	.globl __XREGDF21
                            471 	.globl __XREGDF20
                            472 	.globl _FSCAL0
                            473 	.globl _FSCAL1
                            474 	.globl _FSCAL2
                            475 	.globl _FSCAL3
                            476 	.globl _FREND0
                            477 	.globl _FREND1
                            478 	.globl _AGCCTRL0
                            479 	.globl _AGCCTRL1
                            480 	.globl _AGCCTRL2
                            481 	.globl _BSCFG
                            482 	.globl _FOCCFG
                            483 	.globl _MCSM0
                            484 	.globl _MCSM1
                            485 	.globl _MCSM2
                            486 	.globl _DEVIATN
                            487 	.globl _MDMCFG0
                            488 	.globl _MDMCFG1
                            489 	.globl _MDMCFG2
                            490 	.globl _MDMCFG3
                            491 	.globl _MDMCFG4
                            492 	.globl _FREQ0
                            493 	.globl _FREQ1
                            494 	.globl _FREQ2
                            495 	.globl _FSCTRL0
                            496 	.globl _FSCTRL1
                            497 	.globl _CHANNR
                            498 	.globl _ADDR
                            499 	.globl _PKTCTRL0
                            500 	.globl _PKTCTRL1
                            501 	.globl _PKTLEN
                            502 	.globl _SYNC0
                            503 	.globl _SYNC1
                            504 	.globl _MDMCTRL0H
                            505 	.globl _rfif
                            506 	.globl _resetRFSTATE
                            507 	.globl _RxMode
                            508 	.globl _TxMode
                            509 	.globl _IdleMode
                            510 	.globl _init_RF
                            511 	.globl _waitRSSI
                            512 	.globl _transmit
                            513 	.globl _startRX
                            514 	.globl _rfTxRxIntHandler
                            515 	.globl _rfIntHandler
                            516 	.globl _byte_shuffle
                            517 ;--------------------------------------------------------
                            518 ; special function registers
                            519 ;--------------------------------------------------------
                            520 	.area RSEG    (ABS,DATA)
   0000                     521 	.org 0x0000
                     0080   522 _P0	=	0x0080
                     0081   523 _SP	=	0x0081
                     0082   524 _DPL0	=	0x0082
                     0083   525 _DPH0	=	0x0083
                     0084   526 _DPL1	=	0x0084
                     0085   527 _DPH1	=	0x0085
                     0086   528 _U0CSR	=	0x0086
                     0087   529 _PCON	=	0x0087
                     0088   530 _TCON	=	0x0088
                     0089   531 _P0IFG	=	0x0089
                     008A   532 _P1IFG	=	0x008a
                     008B   533 _P2IFG	=	0x008b
                     008C   534 _PICTL	=	0x008c
                     008D   535 _P1IEN	=	0x008d
                     008E   536 __SFR8E	=	0x008e
                     008F   537 _P0INP	=	0x008f
                     0090   538 _P1	=	0x0090
                     0091   539 _RFIM	=	0x0091
                     0092   540 _DPS	=	0x0092
                     0093   541 _MPAGE	=	0x0093
                     0093   542 __XPAGE	=	0x0093
                     0094   543 __SFR94	=	0x0094
                     0095   544 __SFR95	=	0x0095
                     0096   545 __SFR96	=	0x0096
                     0097   546 __SFR97	=	0x0097
                     0098   547 _S0CON	=	0x0098
                     0099   548 __SFR99	=	0x0099
                     009A   549 _IEN2	=	0x009a
                     009B   550 _S1CON	=	0x009b
                     009C   551 _T2CT	=	0x009c
                     009D   552 _T2PR	=	0x009d
                     009E   553 _T2CTL	=	0x009e
                     009F   554 __SFR9F	=	0x009f
                     00A0   555 _P2	=	0x00a0
                     00A1   556 _WORIRQ	=	0x00a1
                     00A2   557 _WORCTRL	=	0x00a2
                     00A3   558 _WOREVT0	=	0x00a3
                     00A4   559 _WOREVT1	=	0x00a4
                     00A5   560 _WORTIME0	=	0x00a5
                     00A6   561 _WORTIME1	=	0x00a6
                     00A7   562 __SFRA7	=	0x00a7
                     00A8   563 _IEN0	=	0x00a8
                     00A9   564 _IP0	=	0x00a9
                     00AA   565 __SFRAA	=	0x00aa
                     00AB   566 _FWT	=	0x00ab
                     00AC   567 _FADDRL	=	0x00ac
                     00AD   568 _FADDRH	=	0x00ad
                     00AE   569 _FCTL	=	0x00ae
                     00AF   570 _FWDATA	=	0x00af
                     00B0   571 __SFRB0	=	0x00b0
                     00B1   572 _ENCDI	=	0x00b1
                     00B2   573 _ENCDO	=	0x00b2
                     00B3   574 _ENCCS	=	0x00b3
                     00B4   575 _ADCCON1	=	0x00b4
                     00B5   576 _ADCCON2	=	0x00b5
                     00B6   577 _ADCCON3	=	0x00b6
                     00B7   578 __SFRB7	=	0x00b7
                     00B8   579 _IEN1	=	0x00b8
                     00B9   580 _IP1	=	0x00b9
                     00BA   581 _ADCL	=	0x00ba
                     00BB   582 _ADCH	=	0x00bb
                     00BC   583 _RNDL	=	0x00bc
                     00BD   584 _RNDH	=	0x00bd
                     00BE   585 _SLEEP	=	0x00be
                     00BF   586 __SFRBF	=	0x00bf
                     00C0   587 _IRCON	=	0x00c0
                     00C1   588 _U0DBUF	=	0x00c1
                     00C2   589 _U0BAUD	=	0x00c2
                     00C3   590 __SFRC3	=	0x00c3
                     00C4   591 _U0UCR	=	0x00c4
                     00C5   592 _U0GCR	=	0x00c5
                     00C6   593 _CLKCON	=	0x00c6
                     00C7   594 _MEMCTR	=	0x00c7
                     00C8   595 __SFRC8	=	0x00c8
                     00C9   596 _WDCTL	=	0x00c9
                     00CA   597 _T3CNT	=	0x00ca
                     00CB   598 _T3CTL	=	0x00cb
                     00CC   599 _T3CCTL0	=	0x00cc
                     00CD   600 _T3CC0	=	0x00cd
                     00CE   601 _T3CCTL1	=	0x00ce
                     00CF   602 _T3CC1	=	0x00cf
                     00D0   603 _PSW	=	0x00d0
                     00D1   604 _DMAIRQ	=	0x00d1
                     00D2   605 _DMA1CFGL	=	0x00d2
                     00D3   606 _DMA1CFGH	=	0x00d3
                     00D4   607 _DMA0CFGL	=	0x00d4
                     00D5   608 _DMA0CFGH	=	0x00d5
                     00D6   609 _DMAARM	=	0x00d6
                     00D7   610 _DMAREQ	=	0x00d7
                     00D8   611 _TIMIF	=	0x00d8
                     00D9   612 _RFD	=	0x00d9
                     00DA   613 _T1CC0L	=	0x00da
                     00DB   614 _T1CC0H	=	0x00db
                     00DC   615 _T1CC1L	=	0x00dc
                     00DD   616 _T1CC1H	=	0x00dd
                     00DE   617 _T1CC2L	=	0x00de
                     00DF   618 _T1CC2H	=	0x00df
                     00E0   619 _ACC	=	0x00e0
                     00E1   620 _RFST	=	0x00e1
                     00E2   621 _T1CNTL	=	0x00e2
                     00E3   622 _T1CNTH	=	0x00e3
                     00E4   623 _T1CTL	=	0x00e4
                     00E5   624 _T1CCTL0	=	0x00e5
                     00E6   625 _T1CCTL1	=	0x00e6
                     00E7   626 _T1CCTL2	=	0x00e7
                     00E8   627 _IRCON2	=	0x00e8
                     00E9   628 _RFIF	=	0x00e9
                     00EA   629 _T4CNT	=	0x00ea
                     00EB   630 _T4CTL	=	0x00eb
                     00EC   631 _T4CCTL0	=	0x00ec
                     00ED   632 _T4CC0	=	0x00ed
                     00EE   633 _T4CCTL1	=	0x00ee
                     00EF   634 _T4CC1	=	0x00ef
                     00F0   635 _B	=	0x00f0
                     00F1   636 _PERCFG	=	0x00f1
                     00F2   637 _ADCCFG	=	0x00f2
                     00F3   638 _P0SEL	=	0x00f3
                     00F4   639 _P1SEL	=	0x00f4
                     00F5   640 _P2SEL	=	0x00f5
                     00F6   641 _P1INP	=	0x00f6
                     00F7   642 _P2INP	=	0x00f7
                     00F8   643 _U1CSR	=	0x00f8
                     00F9   644 _U1DBUF	=	0x00f9
                     00FA   645 _U1BAUD	=	0x00fa
                     00FB   646 _U1UCR	=	0x00fb
                     00FC   647 _U1GCR	=	0x00fc
                     00FD   648 _P0DIR	=	0x00fd
                     00FE   649 _P1DIR	=	0x00fe
                     00FF   650 _P2DIR	=	0x00ff
                            651 ;--------------------------------------------------------
                            652 ; special function bits
                            653 ;--------------------------------------------------------
                            654 	.area RSEG    (ABS,DATA)
   0000                     655 	.org 0x0000
                     0080   656 _P0_0	=	0x0080
                     0081   657 _P0_1	=	0x0081
                     0082   658 _P0_2	=	0x0082
                     0083   659 _P0_3	=	0x0083
                     0084   660 _P0_4	=	0x0084
                     0085   661 _P0_5	=	0x0085
                     0086   662 _P0_6	=	0x0086
                     0087   663 _P0_7	=	0x0087
                     0088   664 _IT0	=	0x0088
                     0089   665 _RFTXRXIF	=	0x0089
                     008A   666 _IT1	=	0x008a
                     008B   667 _URX0IF	=	0x008b
                     008D   668 _ADCIF	=	0x008d
                     008F   669 _URX1IF	=	0x008f
                     0090   670 _P1_0	=	0x0090
                     0091   671 _P1_1	=	0x0091
                     0092   672 _P1_2	=	0x0092
                     0093   673 _P1_3	=	0x0093
                     0094   674 _P1_4	=	0x0094
                     0095   675 _P1_5	=	0x0095
                     0096   676 _P1_6	=	0x0096
                     0097   677 _P1_7	=	0x0097
                     0098   678 _ENCIF_0	=	0x0098
                     0099   679 _ENCIF_1	=	0x0099
                     00A0   680 _P2_0	=	0x00a0
                     00A1   681 _P2_1	=	0x00a1
                     00A2   682 _P2_2	=	0x00a2
                     00A3   683 _P2_3	=	0x00a3
                     00A4   684 _P2_4	=	0x00a4
                     00A5   685 _P2_5	=	0x00a5
                     00A6   686 _P2_6	=	0x00a6
                     00A7   687 _P2_7	=	0x00a7
                     00A8   688 _RFTXRXIE	=	0x00a8
                     00A9   689 _ADCIE	=	0x00a9
                     00AA   690 _URX0IE	=	0x00aa
                     00AB   691 _URX1IE	=	0x00ab
                     00AC   692 _ENCIE	=	0x00ac
                     00AD   693 _STIE	=	0x00ad
                     00AF   694 _EA	=	0x00af
                     00B8   695 _DMAIE	=	0x00b8
                     00B9   696 _T1IE	=	0x00b9
                     00BA   697 _T2IE	=	0x00ba
                     00BB   698 _T3IE	=	0x00bb
                     00BC   699 _T4IE	=	0x00bc
                     00BD   700 _P0IE	=	0x00bd
                     00C0   701 _DMAIF	=	0x00c0
                     00C1   702 _T1IF	=	0x00c1
                     00C2   703 _T2IF	=	0x00c2
                     00C3   704 _T3IF	=	0x00c3
                     00C4   705 _T4IF	=	0x00c4
                     00C5   706 _P0IF	=	0x00c5
                     00C7   707 _STIF	=	0x00c7
                     00D0   708 _P	=	0x00d0
                     00D1   709 _F1	=	0x00d1
                     00D2   710 _OV	=	0x00d2
                     00D3   711 _RS0	=	0x00d3
                     00D4   712 _RS1	=	0x00d4
                     00D5   713 _F0	=	0x00d5
                     00D6   714 _AC	=	0x00d6
                     00D7   715 _CY	=	0x00d7
                     00D8   716 _T3OVFIF	=	0x00d8
                     00D9   717 _T3CH0IF	=	0x00d9
                     00DA   718 _T3CH1IF	=	0x00da
                     00DB   719 _T4OVFIF	=	0x00db
                     00DC   720 _T4CH0IF	=	0x00dc
                     00DD   721 _T4CH1IF	=	0x00dd
                     00DE   722 _OVFIM	=	0x00de
                     00E0   723 _ACC_0	=	0x00e0
                     00E1   724 _ACC_1	=	0x00e1
                     00E2   725 _ACC_2	=	0x00e2
                     00E3   726 _ACC_3	=	0x00e3
                     00E4   727 _ACC_4	=	0x00e4
                     00E5   728 _ACC_5	=	0x00e5
                     00E6   729 _ACC_6	=	0x00e6
                     00E7   730 _ACC_7	=	0x00e7
                     00E8   731 _P2IF	=	0x00e8
                     00E9   732 _UTX0IF	=	0x00e9
                     00EA   733 _UTX1IF	=	0x00ea
                     00EB   734 _P1IF	=	0x00eb
                     00EC   735 _WDTIF	=	0x00ec
                     00F0   736 _B_0	=	0x00f0
                     00F1   737 _B_1	=	0x00f1
                     00F2   738 _B_2	=	0x00f2
                     00F3   739 _B_3	=	0x00f3
                     00F4   740 _B_4	=	0x00f4
                     00F5   741 _B_5	=	0x00f5
                     00F6   742 _B_6	=	0x00f6
                     00F7   743 _B_7	=	0x00f7
                     00F8   744 _ACTIVE	=	0x00f8
                     00F9   745 _TX_BYTE	=	0x00f9
                     00FA   746 _RX_BYTE	=	0x00fa
                     00FB   747 _ERR	=	0x00fb
                     00FC   748 _FE	=	0x00fc
                     00FD   749 _SLAVE	=	0x00fd
                     00FE   750 _RE	=	0x00fe
                     00FF   751 _MODE	=	0x00ff
                     00E8   752 _USBIF	=	0x00e8
                            753 ;--------------------------------------------------------
                            754 ; overlayable register banks
                            755 ;--------------------------------------------------------
                            756 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     757 	.ds 8
                            758 ;--------------------------------------------------------
                            759 ; overlayable bit register bank
                            760 ;--------------------------------------------------------
                            761 	.area BIT_BANK	(REL,OVR,DATA)
   0021                     762 bits:
   0021                     763 	.ds 1
                     8000   764 	b0 = bits[0]
                     8100   765 	b1 = bits[1]
                     8200   766 	b2 = bits[2]
                     8300   767 	b3 = bits[3]
                     8400   768 	b4 = bits[4]
                     8500   769 	b5 = bits[5]
                     8600   770 	b6 = bits[6]
                     8700   771 	b7 = bits[7]
                            772 ;--------------------------------------------------------
                            773 ; internal ram data
                            774 ;--------------------------------------------------------
                            775 	.area DSEG    (DATA)
   000F                     776 _rfif::
   000F                     777 	.ds 1
   0010                     778 _transmit_sloc1_1_0:
   0010                     779 	.ds 2
   0012                     780 _rfIntHandler_encoffset_1_136:
   0012                     781 	.ds 1
                            782 ;--------------------------------------------------------
                            783 ; overlayable items in internal ram 
                            784 ;--------------------------------------------------------
                            785 ;--------------------------------------------------------
                            786 ; indirectly addressable internal ram data
                            787 ;--------------------------------------------------------
                            788 	.area ISEG    (DATA)
                            789 ;--------------------------------------------------------
                            790 ; absolute internal ram data
                            791 ;--------------------------------------------------------
                            792 	.area IABS    (ABS,DATA)
                            793 	.area IABS    (ABS,DATA)
                            794 ;--------------------------------------------------------
                            795 ; bit data
                            796 ;--------------------------------------------------------
                            797 	.area BSEG    (BIT)
   0001                     798 _transmit_sloc0_1_0:
   0001                     799 	.ds 1
   0002                     800 _rfIntHandler_sloc0_1_0:
   0002                     801 	.ds 1
                            802 ;--------------------------------------------------------
                            803 ; paged external ram data
                            804 ;--------------------------------------------------------
                            805 	.area PSEG    (PAG,XDATA)
                            806 ;--------------------------------------------------------
                            807 ; external ram data
                            808 ;--------------------------------------------------------
                            809 	.area XSEG    (XDATA)
                     DF02   810 _MDMCTRL0H	=	0xdf02
                     DF00   811 _SYNC1	=	0xdf00
                     DF01   812 _SYNC0	=	0xdf01
                     DF02   813 _PKTLEN	=	0xdf02
                     DF03   814 _PKTCTRL1	=	0xdf03
                     DF04   815 _PKTCTRL0	=	0xdf04
                     DF05   816 _ADDR	=	0xdf05
                     DF06   817 _CHANNR	=	0xdf06
                     DF07   818 _FSCTRL1	=	0xdf07
                     DF08   819 _FSCTRL0	=	0xdf08
                     DF09   820 _FREQ2	=	0xdf09
                     DF0A   821 _FREQ1	=	0xdf0a
                     DF0B   822 _FREQ0	=	0xdf0b
                     DF0C   823 _MDMCFG4	=	0xdf0c
                     DF0D   824 _MDMCFG3	=	0xdf0d
                     DF0E   825 _MDMCFG2	=	0xdf0e
                     DF0F   826 _MDMCFG1	=	0xdf0f
                     DF10   827 _MDMCFG0	=	0xdf10
                     DF11   828 _DEVIATN	=	0xdf11
                     DF12   829 _MCSM2	=	0xdf12
                     DF13   830 _MCSM1	=	0xdf13
                     DF14   831 _MCSM0	=	0xdf14
                     DF15   832 _FOCCFG	=	0xdf15
                     DF16   833 _BSCFG	=	0xdf16
                     DF17   834 _AGCCTRL2	=	0xdf17
                     DF18   835 _AGCCTRL1	=	0xdf18
                     DF19   836 _AGCCTRL0	=	0xdf19
                     DF1A   837 _FREND1	=	0xdf1a
                     DF1B   838 _FREND0	=	0xdf1b
                     DF1C   839 _FSCAL3	=	0xdf1c
                     DF1D   840 _FSCAL2	=	0xdf1d
                     DF1E   841 _FSCAL1	=	0xdf1e
                     DF1F   842 _FSCAL0	=	0xdf1f
                     DF20   843 __XREGDF20	=	0xdf20
                     DF21   844 __XREGDF21	=	0xdf21
                     DF22   845 __XREGDF22	=	0xdf22
                     DF23   846 _TEST2	=	0xdf23
                     DF24   847 _TEST1	=	0xdf24
                     DF25   848 _TEST0	=	0xdf25
                     DF26   849 __XREGDF26	=	0xdf26
                     DF27   850 _PA_TABLE7	=	0xdf27
                     DF28   851 _PA_TABLE6	=	0xdf28
                     DF29   852 _PA_TABLE5	=	0xdf29
                     DF2A   853 _PA_TABLE4	=	0xdf2a
                     DF2B   854 _PA_TABLE3	=	0xdf2b
                     DF2C   855 _PA_TABLE2	=	0xdf2c
                     DF2D   856 _PA_TABLE1	=	0xdf2d
                     DF2E   857 _PA_TABLE0	=	0xdf2e
                     DF2F   858 _IOCFG2	=	0xdf2f
                     DF30   859 _IOCFG1	=	0xdf30
                     DF31   860 _IOCFG0	=	0xdf31
                     DF32   861 __XREGDF32	=	0xdf32
                     DF33   862 __XREGDF33	=	0xdf33
                     DF34   863 __XREGDF34	=	0xdf34
                     DF35   864 __XREGDF35	=	0xdf35
                     DF36   865 _PARTNUM	=	0xdf36
                     DF37   866 _VERSION	=	0xdf37
                     DF38   867 _FREQEST	=	0xdf38
                     DF39   868 _LQI	=	0xdf39
                     DF3A   869 _RSSI	=	0xdf3a
                     DF3B   870 _MARCSTATE	=	0xdf3b
                     DF3C   871 _PKTSTATUS	=	0xdf3c
                     DF3D   872 _VCO_VC_DAC	=	0xdf3d
                     DF40   873 _I2SCFG0	=	0xdf40
                     DF41   874 _I2SCFG1	=	0xdf41
                     DF42   875 _I2SDATL	=	0xdf42
                     DF43   876 _I2SDATH	=	0xdf43
                     DF44   877 _I2SWCNT	=	0xdf44
                     DF45   878 _I2SSTAT	=	0xdf45
                     DF46   879 _I2SCLKF0	=	0xdf46
                     DF47   880 _I2SCLKF1	=	0xdf47
                     DF48   881 _I2SCLKF2	=	0xdf48
                     DF80   882 __NA_P0	=	0xdf80
                     DF81   883 __NA_SP	=	0xdf81
                     DF82   884 __NA_DPL0	=	0xdf82
                     DF83   885 __NA_DPH0	=	0xdf83
                     DF84   886 __NA_DPL1	=	0xdf84
                     DF85   887 __NA_DPH1	=	0xdf85
                     DF86   888 _X_U0CSR	=	0xdf86
                     DF87   889 __NA_PCON	=	0xdf87
                     DF88   890 __NA_TCON	=	0xdf88
                     DF89   891 _X_P0IFG	=	0xdf89
                     DF8A   892 _X_P1IFG	=	0xdf8a
                     DF8B   893 _X_P2IFG	=	0xdf8b
                     DF8C   894 _X_PICTL	=	0xdf8c
                     DF8D   895 _X_P1IEN	=	0xdf8d
                     DF8E   896 __X_SFR8E	=	0xdf8e
                     DF8F   897 _X_P0INP	=	0xdf8f
                     DF90   898 __NA_P1	=	0xdf90
                     DF91   899 _X_RFIM	=	0xdf91
                     DF92   900 __NA_DPS	=	0xdf92
                     DF93   901 _X_MPAGE	=	0xdf93
                     DF94   902 __X_SFR94	=	0xdf94
                     DF95   903 __X_SFR95	=	0xdf95
                     DF96   904 __X_SFR96	=	0xdf96
                     DF97   905 __X_SFR97	=	0xdf97
                     DF98   906 __NA_S0CON	=	0xdf98
                     DF99   907 __X_SFR99	=	0xdf99
                     DF9A   908 __NA_IEN2	=	0xdf9a
                     DF9B   909 __NA_S1CON	=	0xdf9b
                     DF9C   910 _X_T2CT	=	0xdf9c
                     DF9D   911 _X_T2PR	=	0xdf9d
                     DF9E   912 _X_T2CTL	=	0xdf9e
                     DF9F   913 __X_SFR9F	=	0xdf9f
                     DFA0   914 __NA_P2	=	0xdfa0
                     DFA1   915 _X_WORIRQ	=	0xdfa1
                     DFA2   916 _X_WORCTRL	=	0xdfa2
                     DFA3   917 _X_WOREVT0	=	0xdfa3
                     DFA4   918 _X_WOREVT1	=	0xdfa4
                     DFA5   919 _X_WORTIME0	=	0xdfa5
                     DFA6   920 _X_WORTIME1	=	0xdfa6
                     DFA7   921 __X_SFRA7	=	0xdfa7
                     DFA8   922 __NA_IEN0	=	0xdfa8
                     DFA9   923 __NA_IP0	=	0xdfa9
                     DFAA   924 __X_SFRAA	=	0xdfaa
                     DFAB   925 _X_FWT	=	0xdfab
                     DFAC   926 _X_FADDRL	=	0xdfac
                     DFAD   927 _X_FADDRH	=	0xdfad
                     DFAE   928 _X_FCTL	=	0xdfae
                     DFAF   929 _X_FWDATA	=	0xdfaf
                     DFB0   930 __X_SFRB0	=	0xdfb0
                     DFB1   931 _X_ENCDI	=	0xdfb1
                     DFB2   932 _X_ENCDO	=	0xdfb2
                     DFB3   933 _X_ENCCS	=	0xdfb3
                     DFB4   934 _X_ADCCON1	=	0xdfb4
                     DFB5   935 _X_ADCCON2	=	0xdfb5
                     DFB6   936 _X_ADCCON3	=	0xdfb6
                     DFB7   937 __X_SFRB7	=	0xdfb7
                     DFB8   938 __NA_IEN1	=	0xdfb8
                     DFB9   939 __NA_IP1	=	0xdfb9
                     DFBA   940 _X_ADCL	=	0xdfba
                     DFBB   941 _X_ADCH	=	0xdfbb
                     DFBC   942 _X_RNDL	=	0xdfbc
                     DFBD   943 _X_RNDH	=	0xdfbd
                     DFBE   944 _X_SLEEP	=	0xdfbe
                     DFBF   945 __X_SFRBF	=	0xdfbf
                     DFC0   946 __NA_IRCON	=	0xdfc0
                     DFC1   947 _X_U0DBUF	=	0xdfc1
                     DFC2   948 _X_U0BAUD	=	0xdfc2
                     DFC3   949 __X_SFRC3	=	0xdfc3
                     DFC4   950 _X_U0UCR	=	0xdfc4
                     DFC5   951 _X_U0GCR	=	0xdfc5
                     DFC6   952 _X_CLKCON	=	0xdfc6
                     DFC7   953 _X_MEMCTR	=	0xdfc7
                     DFC8   954 __X_SFRC8	=	0xdfc8
                     DFC9   955 _X_WDCTL	=	0xdfc9
                     DFCA   956 _X_T3CNT	=	0xdfca
                     DFCB   957 _X_T3CTL	=	0xdfcb
                     DFCC   958 _X_T3CCTL0	=	0xdfcc
                     DFCD   959 _X_T3CC0	=	0xdfcd
                     DFCE   960 _X_T3CCTL1	=	0xdfce
                     DFCF   961 _X_T3CC1	=	0xdfcf
                     DFD0   962 __NA_PSW	=	0xdfd0
                     DFD1   963 _X_DMAIRQ	=	0xdfd1
                     DFD2   964 _X_DMA1CFGL	=	0xdfd2
                     DFD3   965 _X_DMA1CFGH	=	0xdfd3
                     DFD4   966 _X_DMA0CFGL	=	0xdfd4
                     DFD5   967 _X_DMA0CFGH	=	0xdfd5
                     DFD6   968 _X_DMAARM	=	0xdfd6
                     DFD7   969 _X_DMAREQ	=	0xdfd7
                     DFD8   970 _X_TIMIF	=	0xdfd8
                     DFD9   971 _X_RFD	=	0xdfd9
                     DFDA   972 _X_T1CC0L	=	0xdfda
                     DFDB   973 _X_T1CC0H	=	0xdfdb
                     DFDC   974 _X_T1CC1L	=	0xdfdc
                     DFDD   975 _X_T1CC1H	=	0xdfdd
                     DFDE   976 _X_T1CC2L	=	0xdfde
                     DFDF   977 _X_T1CC2H	=	0xdfdf
                     DFE0   978 __NA_ACC	=	0xdfe0
                     DFE1   979 _X_RFST	=	0xdfe1
                     DFE2   980 _X_T1CNTL	=	0xdfe2
                     DFE3   981 _X_T1CNTH	=	0xdfe3
                     DFE4   982 _X_T1CTL	=	0xdfe4
                     DFE5   983 _X_T1CCTL0	=	0xdfe5
                     DFE6   984 _X_T1CCTL1	=	0xdfe6
                     DFE7   985 _X_T1CCTL2	=	0xdfe7
                     DFE8   986 __NA_IRCON2	=	0xdfe8
                     DFE9   987 _X_RFIF	=	0xdfe9
                     DFEA   988 _X_T4CNT	=	0xdfea
                     DFEB   989 _X_T4CTL	=	0xdfeb
                     DFEC   990 _X_T4CCTL0	=	0xdfec
                     DFED   991 _X_T4CC0	=	0xdfed
                     DFEE   992 _X_T4CCTL1	=	0xdfee
                     DFEF   993 _X_T4CC1	=	0xdfef
                     DFF0   994 __NA_B	=	0xdff0
                     DFF1   995 _X_PERCFG	=	0xdff1
                     DFF2   996 _X_ADCCFG	=	0xdff2
                     DFF3   997 _X_P0SEL	=	0xdff3
                     DFF4   998 _X_P1SEL	=	0xdff4
                     DFF5   999 _X_P2SEL	=	0xdff5
                     DFF6  1000 _X_P1INP	=	0xdff6
                     DFF7  1001 _X_P2INP	=	0xdff7
                     DFF8  1002 _X_U1CSR	=	0xdff8
                     DFF9  1003 _X_U1DBUF	=	0xdff9
                     DFFA  1004 _X_U1BAUD	=	0xdffa
                     DFFB  1005 _X_U1UCR	=	0xdffb
                     DFFC  1006 _X_U1GCR	=	0xdffc
                     DFFD  1007 _X_P0DIR	=	0xdffd
                     DFFE  1008 _X_P1DIR	=	0xdffe
                     DFFF  1009 _X_P2DIR	=	0xdfff
                     DE00  1010 _USBADDR	=	0xde00
                     DE01  1011 _USBPOW	=	0xde01
                     DE02  1012 _USBIIF	=	0xde02
                     DE04  1013 _USBOIF	=	0xde04
                     DE06  1014 _USBCIF	=	0xde06
                     DE07  1015 _USBIIE	=	0xde07
                     DE09  1016 _USBOIE	=	0xde09
                     DE0B  1017 _USBCIE	=	0xde0b
                     DE0C  1018 _USBFRML	=	0xde0c
                     DE0D  1019 _USBFRMH	=	0xde0d
                     DE0E  1020 _USBINDEX	=	0xde0e
                     DE10  1021 _USBMAXI	=	0xde10
                     DE11  1022 _USBCS0	=	0xde11
                     DE11  1023 _USBCSIL	=	0xde11
                     DE12  1024 _USBCSIH	=	0xde12
                     DE13  1025 _USBMAXO	=	0xde13
                     DE14  1026 _USBCSOL	=	0xde14
                     DE15  1027 _USBCSOH	=	0xde15
                     DE16  1028 _USBCNT0	=	0xde16
                     DE16  1029 _USBCNTL	=	0xde16
                     DE17  1030 _USBCNTH	=	0xde17
                     DE20  1031 _USBF0	=	0xde20
                     DE22  1032 _USBF1	=	0xde22
                     DE24  1033 _USBF2	=	0xde24
                     DE26  1034 _USBF3	=	0xde26
                     DE28  1035 _USBF4	=	0xde28
                     DE2A  1036 _USBF5	=	0xde2a
   F981                    1037 _rfRxCurrentBuffer::
   F981                    1038 	.ds 1
   F982                    1039 _rfrxbuf::
   F982                    1040 	.ds 1024
   FD82                    1041 _rfRxCounter::
   FD82                    1042 	.ds 4
   FD86                    1043 _rfRxProcessed::
   FD86                    1044 	.ds 2
   FD88                    1045 _rftxbuf::
   FD88                    1046 	.ds 2
   FD8A                    1047 _txTotal::
   FD8A                    1048 	.ds 2
   FD8C                    1049 _rf_status::
   FD8C                    1050 	.ds 1
   FD8D                    1051 _rf_MAC_timer::
   FD8D                    1052 	.ds 2
   FD8F                    1053 _rf_tLastRecv::
   FD8F                    1054 	.ds 2
   FD91                    1055 _macdata::
   FD91                    1056 	.ds 21
   FDA6                    1057 _transmit_PARM_2:
   FDA6                    1058 	.ds 2
   FDA8                    1059 _transmit_PARM_3:
   FDA8                    1060 	.ds 2
   FDAA                    1061 _transmit_PARM_4:
   FDAA                    1062 	.ds 2
   FDAC                    1063 _transmit_buf_1_96:
   FDAC                    1064 	.ds 2
   FDAE                    1065 _transmit_encoffset_1_97:
   FDAE                    1066 	.ds 1
   FDAF                    1067 _byte_shuffle_PARM_2:
   FDAF                    1068 	.ds 2
   FDB1                    1069 _byte_shuffle_PARM_3:
   FDB1                    1070 	.ds 2
   FDB3                    1071 _byte_shuffle_buf_1_146:
   FDB3                    1072 	.ds 2
                           1073 ;--------------------------------------------------------
                           1074 ; absolute external ram data
                           1075 ;--------------------------------------------------------
                           1076 	.area XABS    (ABS,XDATA)
                           1077 ;--------------------------------------------------------
                           1078 ; external initialized ram data
                           1079 ;--------------------------------------------------------
                           1080 	.area XISEG   (XDATA)
   FDE7                    1081 _rfRxInfMode::
   FDE7                    1082 	.ds 1
   FDE8                    1083 _rfRxTotalRXLen::
   FDE8                    1084 	.ds 2
   FDEA                    1085 _rfRxLargeLen::
   FDEA                    1086 	.ds 2
   FDEC                    1087 _rfTxCurBufIdx::
   FDEC                    1088 	.ds 1
   FDED                    1089 _rfTxBufCount::
   FDED                    1090 	.ds 1
   FDEE                    1091 _rfTxCounter::
   FDEE                    1092 	.ds 2
   FDF0                    1093 _rfTxRepeatCounter::
   FDF0                    1094 	.ds 2
   FDF2                    1095 _rfTxBufferEnd::
   FDF2                    1096 	.ds 2
   FDF4                    1097 _rfTxRepeatLen::
   FDF4                    1098 	.ds 2
   FDF6                    1099 _rfTxRepeatOffset::
   FDF6                    1100 	.ds 2
   FDF8                    1101 _rfTxTotalTXLen::
   FDF8                    1102 	.ds 2
   FDFA                    1103 _rfTxInfMode::
   FDFA                    1104 	.ds 1
   FDFB                    1105 _rfAESMode::
   FDFB                    1106 	.ds 1
   FDFC                    1107 _rfAmpMode::
   FDFC                    1108 	.ds 1
   FDFD                    1109 _bRepeatMode::
   FDFD                    1110 	.ds 1
                           1111 	.area HOME    (CODE)
                           1112 	.area GSINIT0 (CODE)
                           1113 	.area GSINIT1 (CODE)
                           1114 	.area GSINIT2 (CODE)
                           1115 	.area GSINIT3 (CODE)
                           1116 	.area GSINIT4 (CODE)
                           1117 	.area GSINIT5 (CODE)
                           1118 	.area GSINIT  (CODE)
                           1119 	.area GSFINAL (CODE)
                           1120 	.area CSEG    (CODE)
                           1121 ;--------------------------------------------------------
                           1122 ; global & static initialisations
                           1123 ;--------------------------------------------------------
                           1124 	.area HOME    (CODE)
                           1125 	.area GSINIT  (CODE)
                           1126 	.area GSFINAL (CODE)
                           1127 	.area GSINIT  (CODE)
                           1128 ;--------------------------------------------------------
                           1129 ; Home
                           1130 ;--------------------------------------------------------
                           1131 	.area HOME    (CODE)
                           1132 	.area HOME    (CODE)
                           1133 ;--------------------------------------------------------
                           1134 ; code
                           1135 ;--------------------------------------------------------
                           1136 	.area CSEG    (CODE)
                           1137 ;------------------------------------------------------------
                           1138 ;Allocation info for local variables in function 'setFreq'
                           1139 ;------------------------------------------------------------
                           1140 ;freq                      Allocated to registers r4 r5 r6 r7 
                           1141 ;num                       Allocated to registers r4 r5 r6 r7 
                           1142 ;------------------------------------------------------------
                           1143 ;	cc1111rf.c:56: void setFreq(u32 freq)
                           1144 ;	-----------------------------------------
                           1145 ;	 function setFreq
                           1146 ;	-----------------------------------------
   2261                    1147 _setFreq:
                     0007  1148 	ar7 = 0x07
                     0006  1149 	ar6 = 0x06
                     0005  1150 	ar5 = 0x05
                     0004  1151 	ar4 = 0x04
                     0003  1152 	ar3 = 0x03
                     0002  1153 	ar2 = 0x02
                     0001  1154 	ar1 = 0x01
                     0000  1155 	ar0 = 0x00
                           1156 ;	cc1111rf.c:61: num = freq * (0x10000 / 1000000.0) / PLATFORM_CLOCK_FREQ;
   2261 12 33 88      [24] 1157 	lcall	___ulong2fs
   2264 AC 82         [24] 1158 	mov	r4,dpl
   2266 AD 83         [24] 1159 	mov	r5,dph
   2268 AE F0         [24] 1160 	mov	r6,b
   226A FF            [12] 1161 	mov	r7,a
   226B C0 04         [24] 1162 	push	ar4
   226D C0 05         [24] 1163 	push	ar5
   226F C0 06         [24] 1164 	push	ar6
   2271 C0 07         [24] 1165 	push	ar7
   2273 90 37 BD      [24] 1166 	mov	dptr,#0x37BD
   2276 75 F0 86      [24] 1167 	mov	b,#0x86
   2279 74 3D         [12] 1168 	mov	a,#0x3D
   227B 12 32 10      [24] 1169 	lcall	___fsmul
   227E AC 82         [24] 1170 	mov	r4,dpl
   2280 AD 83         [24] 1171 	mov	r5,dph
   2282 AE F0         [24] 1172 	mov	r6,b
   2284 FF            [12] 1173 	mov	r7,a
   2285 E5 81         [12] 1174 	mov	a,sp
   2287 24 FC         [12] 1175 	add	a,#0xfc
   2289 F5 81         [12] 1176 	mov	sp,a
   228B E4            [12] 1177 	clr	a
   228C C0 E0         [24] 1178 	push	acc
   228E C0 E0         [24] 1179 	push	acc
   2290 74 C0         [12] 1180 	mov	a,#0xC0
   2292 C0 E0         [24] 1181 	push	acc
   2294 74 41         [12] 1182 	mov	a,#0x41
   2296 C0 E0         [24] 1183 	push	acc
   2298 8C 82         [24] 1184 	mov	dpl,r4
   229A 8D 83         [24] 1185 	mov	dph,r5
   229C 8E F0         [24] 1186 	mov	b,r6
   229E EF            [12] 1187 	mov	a,r7
   229F 12 34 A8      [24] 1188 	lcall	___fsdiv
   22A2 AC 82         [24] 1189 	mov	r4,dpl
   22A4 AD 83         [24] 1190 	mov	r5,dph
   22A6 AE F0         [24] 1191 	mov	r6,b
   22A8 FF            [12] 1192 	mov	r7,a
   22A9 E5 81         [12] 1193 	mov	a,sp
   22AB 24 FC         [12] 1194 	add	a,#0xfc
   22AD F5 81         [12] 1195 	mov	sp,a
   22AF 8C 82         [24] 1196 	mov	dpl,r4
   22B1 8D 83         [24] 1197 	mov	dph,r5
   22B3 8E F0         [24] 1198 	mov	b,r6
   22B5 EF            [12] 1199 	mov	a,r7
   22B6 12 33 9B      [24] 1200 	lcall	___fs2ulong
   22B9 AC 82         [24] 1201 	mov	r4,dpl
   22BB AD 83         [24] 1202 	mov	r5,dph
   22BD AE F0         [24] 1203 	mov	r6,b
                           1204 ;	cc1111rf.c:62: FREQ2 = num >> 16;
   22BF 90 DF 09      [24] 1205 	mov	dptr,#_FREQ2
   22C2 EE            [12] 1206 	mov	a,r6
   22C3 F0            [24] 1207 	movx	@dptr,a
                           1208 ;	cc1111rf.c:63: FREQ1 = (num>>8) & 0xff;
   22C4 8D 03         [24] 1209 	mov	ar3,r5
   22C6 90 DF 0A      [24] 1210 	mov	dptr,#_FREQ1
   22C9 EB            [12] 1211 	mov	a,r3
   22CA F0            [24] 1212 	movx	@dptr,a
                           1213 ;	cc1111rf.c:64: FREQ0 = num & 0xff;
   22CB 90 DF 0B      [24] 1214 	mov	dptr,#_FREQ0
   22CE EC            [12] 1215 	mov	a,r4
   22CF F0            [24] 1216 	movx	@dptr,a
   22D0 22            [24] 1217 	ret
                           1218 ;------------------------------------------------------------
                           1219 ;Allocation info for local variables in function 'resetRFSTATE'
                           1220 ;------------------------------------------------------------
                           1221 ;	cc1111rf.c:67: void resetRFSTATE(void)
                           1222 ;	-----------------------------------------
                           1223 ;	 function resetRFSTATE
                           1224 ;	-----------------------------------------
   22D1                    1225 _resetRFSTATE:
                           1226 ;	cc1111rf.c:70: RFST = RFST_SIDLE; while ((MARCSTATE) != MARC_STATE_IDLE);
   22D1 75 E1 04      [24] 1227 	mov	_RFST,#0x04
   22D4                    1228 00101$:
   22D4 90 DF 3B      [24] 1229 	mov	dptr,#_MARCSTATE
   22D7 E0            [24] 1230 	movx	a,@dptr
   22D8 FF            [12] 1231 	mov	r7,a
   22D9 BF 01 F8      [24] 1232 	cjne	r7,#0x01,00101$
                           1233 ;	cc1111rf.c:72: RFST = rf_status;
   22DC 90 FD 8C      [24] 1234 	mov	dptr,#_rf_status
   22DF E0            [24] 1235 	movx	a,@dptr
   22E0 F5 E1         [12] 1236 	mov	_RFST,a
                           1237 ;	cc1111rf.c:73: while (rf_status != RFST_SIDLE && MARCSTATE == MARC_STATE_IDLE)
   22E2                    1238 00105$:
   22E2 90 FD 8C      [24] 1239 	mov	dptr,#_rf_status
   22E5 E0            [24] 1240 	movx	a,@dptr
   22E6 FF            [12] 1241 	mov	r7,a
   22E7 BF 04 01      [24] 1242 	cjne	r7,#0x04,00124$
   22EA 22            [24] 1243 	ret
   22EB                    1244 00124$:
   22EB 90 DF 3B      [24] 1245 	mov	dptr,#_MARCSTATE
   22EE E0            [24] 1246 	movx	a,@dptr
   22EF FF            [12] 1247 	mov	r7,a
   22F0 BF 01 02      [24] 1248 	cjne	r7,#0x01,00125$
   22F3 80 ED         [24] 1249 	sjmp	00105$
   22F5                    1250 00125$:
   22F5 22            [24] 1251 	ret
                           1252 ;------------------------------------------------------------
                           1253 ;Allocation info for local variables in function 'RxMode'
                           1254 ;------------------------------------------------------------
                           1255 ;	cc1111rf.c:78: void RxMode(void)
                           1256 ;	-----------------------------------------
                           1257 ;	 function RxMode
                           1258 ;	-----------------------------------------
   22F6                    1259 _RxMode:
                           1260 ;	cc1111rf.c:80: if (rf_status != RFST_SRX)
   22F6 90 FD 8C      [24] 1261 	mov	dptr,#_rf_status
   22F9 E0            [24] 1262 	movx	a,@dptr
   22FA FF            [12] 1263 	mov	r7,a
   22FB BF 02 01      [24] 1264 	cjne	r7,#0x02,00108$
   22FE 22            [24] 1265 	ret
   22FF                    1266 00108$:
                           1267 ;	cc1111rf.c:82: MCSM1 &= 0xf0;
                           1268 ;	cc1111rf.c:83: MCSM1 |= 0x0f;
   22FF 90 DF 13      [24] 1269 	mov	dptr,#_MCSM1
   2302 E0            [24] 1270 	movx	a,@dptr
   2303 54 F0         [12] 1271 	anl	a,#0xF0
   2305 F0            [24] 1272 	movx	@dptr,a
   2306 E0            [24] 1273 	movx	a,@dptr
   2307 44 0F         [12] 1274 	orl	a,#0x0F
   2309 F0            [24] 1275 	movx	@dptr,a
                           1276 ;	cc1111rf.c:84: rf_status = RFST_SRX;
   230A 90 FD 8C      [24] 1277 	mov	dptr,#_rf_status
   230D 74 02         [12] 1278 	mov	a,#0x02
   230F F0            [24] 1279 	movx	@dptr,a
                           1280 ;	cc1111rf.c:86: startRX();
   2310 02 27 24      [24] 1281 	ljmp	_startRX
                           1282 ;------------------------------------------------------------
                           1283 ;Allocation info for local variables in function 'TxMode'
                           1284 ;------------------------------------------------------------
                           1285 ;	cc1111rf.c:91: void TxMode(void)
                           1286 ;	-----------------------------------------
                           1287 ;	 function TxMode
                           1288 ;	-----------------------------------------
   2313                    1289 _TxMode:
                           1290 ;	cc1111rf.c:93: if (rf_status != RFST_STX)
   2313 90 FD 8C      [24] 1291 	mov	dptr,#_rf_status
   2316 E0            [24] 1292 	movx	a,@dptr
   2317 FF            [12] 1293 	mov	r7,a
   2318 BF 03 01      [24] 1294 	cjne	r7,#0x03,00117$
   231B 22            [24] 1295 	ret
   231C                    1296 00117$:
                           1297 ;	cc1111rf.c:95: MCSM1 &= 0xf0;
                           1298 ;	cc1111rf.c:96: MCSM1 |= 0x0a;
   231C 90 DF 13      [24] 1299 	mov	dptr,#_MCSM1
   231F E0            [24] 1300 	movx	a,@dptr
   2320 54 F0         [12] 1301 	anl	a,#0xF0
   2322 F0            [24] 1302 	movx	@dptr,a
   2323 E0            [24] 1303 	movx	a,@dptr
   2324 FF            [12] 1304 	mov	r7,a
   2325 44 0A         [12] 1305 	orl	a,#0x0A
   2327 F0            [24] 1306 	movx	@dptr,a
                           1307 ;	cc1111rf.c:98: rf_status = RFST_STX;
   2328 90 FD 8C      [24] 1308 	mov	dptr,#_rf_status
   232B 74 03         [12] 1309 	mov	a,#0x03
   232D F0            [24] 1310 	movx	@dptr,a
                           1311 ;	cc1111rf.c:99: RFTX;
   232E 75 E1 03      [24] 1312 	mov	_RFST,#0x03
   2331                    1313 00101$:
   2331 90 DF 3B      [24] 1314 	mov	dptr,#_MARCSTATE
   2334 E0            [24] 1315 	movx	a,@dptr
   2335 FF            [12] 1316 	mov	r7,a
   2336 BF 13 F8      [24] 1317 	cjne	r7,#0x13,00101$
   2339 22            [24] 1318 	ret
                           1319 ;------------------------------------------------------------
                           1320 ;Allocation info for local variables in function 'IdleMode'
                           1321 ;------------------------------------------------------------
                           1322 ;	cc1111rf.c:104: void IdleMode(void)
                           1323 ;	-----------------------------------------
                           1324 ;	 function IdleMode
                           1325 ;	-----------------------------------------
   233A                    1326 _IdleMode:
                           1327 ;	cc1111rf.c:106: if (rf_status != RFST_SIDLE)
   233A 90 FD 8C      [24] 1328 	mov	dptr,#_rf_status
   233D E0            [24] 1329 	movx	a,@dptr
   233E FF            [12] 1330 	mov	r7,a
   233F BF 04 01      [24] 1331 	cjne	r7,#0x04,00120$
   2342 22            [24] 1332 	ret
   2343                    1333 00120$:
                           1334 ;	cc1111rf.c:109: MCSM1 &= 0xf0;
   2343 90 DF 13      [24] 1335 	mov	dptr,#_MCSM1
   2346 E0            [24] 1336 	movx	a,@dptr
   2347 54 F0         [12] 1337 	anl	a,#0xF0
   2349 F0            [24] 1338 	movx	@dptr,a
                           1339 ;	cc1111rf.c:110: RFIM &= ~RFIF_IRQ_DONE;
   234A AF 91         [24] 1340 	mov	r7,_RFIM
   234C 74 EF         [12] 1341 	mov	a,#0xEF
   234E 5F            [12] 1342 	anl	a,r7
   234F F5 91         [12] 1343 	mov	_RFIM,a
                           1344 ;	cc1111rf.c:111: RFOFF;
   2351 75 E1 04      [24] 1345 	mov	_RFST,#0x04
   2354                    1346 00101$:
   2354 90 DF 3B      [24] 1347 	mov	dptr,#_MARCSTATE
   2357 E0            [24] 1348 	movx	a,@dptr
   2358 FF            [12] 1349 	mov	r7,a
   2359 BF 01 F8      [24] 1350 	cjne	r7,#0x01,00101$
                           1351 ;	cc1111rf.c:118: S1CON &= ~(S1CON_RFIF_0|S1CON_RFIF_1);  // clear RFIF interrupts
   235C AF 9B         [24] 1352 	mov	r7,_S1CON
   235E 74 FC         [12] 1353 	mov	a,#0xFC
   2360 5F            [12] 1354 	anl	a,r7
   2361 F5 9B         [12] 1355 	mov	_S1CON,a
                           1356 ;	cc1111rf.c:119: RFIF &= ~RFIF_IRQ_DONE;
   2363 AF E9         [24] 1357 	mov	r7,_RFIF
   2365 74 EF         [12] 1358 	mov	a,#0xEF
   2367 5F            [12] 1359 	anl	a,r7
   2368 F5 E9         [12] 1360 	mov	_RFIF,a
                           1361 ;	cc1111rf.c:121: rf_status = RFST_SIDLE;
   236A 90 FD 8C      [24] 1362 	mov	dptr,#_rf_status
   236D 74 04         [12] 1363 	mov	a,#0x04
   236F F0            [24] 1364 	movx	@dptr,a
   2370 22            [24] 1365 	ret
                           1366 ;------------------------------------------------------------
                           1367 ;Allocation info for local variables in function 'init_RF'
                           1368 ;------------------------------------------------------------
                           1369 ;	cc1111rf.c:130: void init_RF()
                           1370 ;	-----------------------------------------
                           1371 ;	 function init_RF
                           1372 ;	-----------------------------------------
   2371                    1373 _init_RF:
                           1374 ;	cc1111rf.c:133: rf_tLastRecv = 0;
   2371 90 FD 8F      [24] 1375 	mov	dptr,#_rf_tLastRecv
   2374 E4            [12] 1376 	clr	a
   2375 F0            [24] 1377 	movx	@dptr,a
   2376 E4            [12] 1378 	clr	a
   2377 A3            [24] 1379 	inc	dptr
   2378 F0            [24] 1380 	movx	@dptr,a
                           1381 ;	cc1111rf.c:136: rfRxCounter[FIRST_BUFFER] = 0;
   2379 90 FD 82      [24] 1382 	mov	dptr,#_rfRxCounter
   237C E4            [12] 1383 	clr	a
   237D F0            [24] 1384 	movx	@dptr,a
   237E E4            [12] 1385 	clr	a
   237F A3            [24] 1386 	inc	dptr
   2380 F0            [24] 1387 	movx	@dptr,a
                           1388 ;	cc1111rf.c:137: rfRxCounter[SECOND_BUFFER] = 0;
   2381 90 FD 84      [24] 1389 	mov	dptr,#(_rfRxCounter + 0x0002)
   2384 E4            [12] 1390 	clr	a
   2385 F0            [24] 1391 	movx	@dptr,a
   2386 E4            [12] 1392 	clr	a
   2387 A3            [24] 1393 	inc	dptr
   2388 F0            [24] 1394 	movx	@dptr,a
                           1395 ;	cc1111rf.c:150: CLKCON &= 0xc7;
   2389 53 C6 C7      [24] 1396 	anl	_CLKCON,#0xC7
                           1397 ;	cc1111rf.c:152: T2PR = 0;
   238C 75 9D 00      [24] 1398 	mov	_T2PR,#0x00
                           1399 ;	cc1111rf.c:153: T2CTL |= T2CTL_TIP_64;  // 64, 128, 256, 1024
   238F 85 9E 9E      [24] 1400 	mov	_T2CTL,_T2CTL
                           1401 ;	cc1111rf.c:154: T2CTL |= T2CTL_TIG;
   2392 43 9E 04      [24] 1402 	orl	_T2CTL,#0x04
                           1403 ;	cc1111rf.c:158: IP0 |= 0;       // grp0 is RF/RFTXRX/DMA
   2395 85 A9 A9      [24] 1404 	mov	_IP0,_IP0
                           1405 ;	cc1111rf.c:159: IP1 |= BIT0;
   2398 43 B9 01      [24] 1406 	orl	_IP1,#0x01
                           1407 ;	cc1111rf.c:162: rf_status = RFST_SIDLE;
   239B 90 FD 8C      [24] 1408 	mov	dptr,#_rf_status
   239E 74 04         [12] 1409 	mov	a,#0x04
   23A0 F0            [24] 1410 	movx	@dptr,a
                           1411 ;	cc1111rf.c:171: memset(rfrxbuf,0,(BUFFER_AMOUNT * BUFFER_SIZE));
   23A1 75 14 00      [24] 1412 	mov	_memset_PARM_2,#0x00
   23A4 75 15 00      [24] 1413 	mov	_memset_PARM_3,#0x00
   23A7 75 16 04      [24] 1414 	mov	(_memset_PARM_3 + 1),#0x04
   23AA 90 F9 82      [24] 1415 	mov	dptr,#_rfrxbuf
   23AD 75 F0 00      [24] 1416 	mov	b,#0x00
   23B0 12 33 14      [24] 1417 	lcall	_memset
                           1418 ;	cc1111rf.c:173: appInitRf();
   23B3 12 17 B9      [24] 1419 	lcall	_appInitRf
                           1420 ;	cc1111rf.c:176: RFTXRXIE = 1;                   // FIXME: should this be something that is enabled/disabled by usb?
   23B6 D2 A8         [12] 1421 	setb	_RFTXRXIE
                           1422 ;	cc1111rf.c:177: RFIM = 0xd1;    // TXUNF, RXOVF, DONE, SFD  (SFD to mark time of receipt)
   23B8 75 91 D1      [24] 1423 	mov	_RFIM,#0xD1
                           1424 ;	cc1111rf.c:178: RFIF = 0;
   23BB 75 E9 00      [24] 1425 	mov	_RFIF,#0x00
                           1426 ;	cc1111rf.c:179: rfif = 0;
   23BE 75 0F 00      [24] 1427 	mov	_rfif,#0x00
                           1428 ;	cc1111rf.c:180: IEN2 |= IEN2_RFIE;
   23C1 43 9A 01      [24] 1429 	orl	_IEN2,#0x01
                           1430 ;	cc1111rf.c:183: RFOFF;
   23C4 75 E1 04      [24] 1431 	mov	_RFST,#0x04
   23C7                    1432 00101$:
   23C7 90 DF 3B      [24] 1433 	mov	dptr,#_MARCSTATE
   23CA E0            [24] 1434 	movx	a,@dptr
   23CB FF            [12] 1435 	mov	r7,a
   23CC BF 01 F8      [24] 1436 	cjne	r7,#0x01,00101$
   23CF 22            [24] 1437 	ret
                           1438 ;------------------------------------------------------------
                           1439 ;Allocation info for local variables in function 'waitRSSI'
                           1440 ;------------------------------------------------------------
                           1441 ;u16WaitTime               Allocated to registers r6 r7 
                           1442 ;------------------------------------------------------------
                           1443 ;	cc1111rf.c:188: int waitRSSI()
                           1444 ;	-----------------------------------------
                           1445 ;	 function waitRSSI
                           1446 ;	-----------------------------------------
   23D0                    1447 _waitRSSI:
                           1448 ;	cc1111rf.c:191: while(u16WaitTime < RSSI_TIMEOUT_US)
   23D0 7E 00         [12] 1449 	mov	r6,#0x00
   23D2 7F 00         [12] 1450 	mov	r7,#0x00
   23D4                    1451 00104$:
   23D4 C3            [12] 1452 	clr	c
   23D5 EE            [12] 1453 	mov	a,r6
   23D6 94 DC         [12] 1454 	subb	a,#0xDC
   23D8 EF            [12] 1455 	mov	a,r7
   23D9 94 05         [12] 1456 	subb	a,#0x05
   23DB 50 24         [24] 1457 	jnc	00106$
                           1458 ;	cc1111rf.c:193: if(PKTSTATUS & (PKTSTATUS_CCA | PKTSTATUS_CS))
   23DD 90 DF 3C      [24] 1459 	mov	dptr,#_PKTSTATUS
   23E0 E0            [24] 1460 	movx	a,@dptr
   23E1 FD            [12] 1461 	mov	r5,a
   23E2 54 50         [12] 1462 	anl	a,#0x50
   23E4 60 04         [24] 1463 	jz	00102$
                           1464 ;	cc1111rf.c:195: return 1;
   23E6 90 00 01      [24] 1465 	mov	dptr,#0x0001
   23E9 22            [24] 1466 	ret
   23EA                    1467 00102$:
                           1468 ;	cc1111rf.c:199: sleepMicros(50);
   23EA 90 00 32      [24] 1469 	mov	dptr,#0x0032
   23ED C0 07         [24] 1470 	push	ar7
   23EF C0 06         [24] 1471 	push	ar6
   23F1 12 2D 73      [24] 1472 	lcall	_sleepMicros
   23F4 D0 06         [24] 1473 	pop	ar6
   23F6 D0 07         [24] 1474 	pop	ar7
                           1475 ;	cc1111rf.c:200: u16WaitTime += 50;
   23F8 74 32         [12] 1476 	mov	a,#0x32
   23FA 2E            [12] 1477 	add	a,r6
   23FB FE            [12] 1478 	mov	r6,a
   23FC E4            [12] 1479 	clr	a
   23FD 3F            [12] 1480 	addc	a,r7
   23FE FF            [12] 1481 	mov	r7,a
   23FF 80 D3         [24] 1482 	sjmp	00104$
   2401                    1483 00106$:
                           1484 ;	cc1111rf.c:203: return 0;
   2401 90 00 00      [24] 1485 	mov	dptr,#0x0000
   2404 22            [24] 1486 	ret
                           1487 ;------------------------------------------------------------
                           1488 ;Allocation info for local variables in function 'transmit'
                           1489 ;------------------------------------------------------------
                           1490 ;sloc1                     Allocated with name '_transmit_sloc1_1_0'
                           1491 ;len                       Allocated with name '_transmit_PARM_2'
                           1492 ;repeat                    Allocated with name '_transmit_PARM_3'
                           1493 ;offset                    Allocated with name '_transmit_PARM_4'
                           1494 ;buf                       Allocated with name '_transmit_buf_1_96'
                           1495 ;countdown                 Allocated with name '_transmit_countdown_1_97'
                           1496 ;encoffset                 Allocated with name '_transmit_encoffset_1_97'
                           1497 ;original_pktlen           Allocated with name '_transmit_original_pktlen_1_97'
                           1498 ;------------------------------------------------------------
                           1499 ;	cc1111rf.c:214: u8 transmit(__xdata u8* __xdata buf, __xdata u16 len, __xdata u16 repeat, __xdata u16 offset)
                           1500 ;	-----------------------------------------
                           1501 ;	 function transmit
                           1502 ;	-----------------------------------------
   2405                    1503 _transmit:
   2405 AF 83         [24] 1504 	mov	r7,dph
   2407 E5 82         [12] 1505 	mov	a,dpl
   2409 90 FD AC      [24] 1506 	mov	dptr,#_transmit_buf_1_96
   240C F0            [24] 1507 	movx	@dptr,a
   240D EF            [12] 1508 	mov	a,r7
   240E A3            [24] 1509 	inc	dptr
   240F F0            [24] 1510 	movx	@dptr,a
                           1511 ;	cc1111rf.c:217: __xdata u8 encoffset = 0;
   2410 90 FD AE      [24] 1512 	mov	dptr,#_transmit_encoffset_1_97
   2413 E4            [12] 1513 	clr	a
   2414 F0            [24] 1514 	movx	@dptr,a
                           1515 ;	cc1111rf.c:218: __xdata u8 original_pktlen = PKTLEN;
   2415 90 DF 02      [24] 1516 	mov	dptr,#_PKTLEN
   2418 E0            [24] 1517 	movx	a,@dptr
   2419 FF            [12] 1518 	mov	r7,a
                           1519 ;	cc1111rf.c:220: while (MARCSTATE == MARC_STATE_TX)
   241A                    1520 00101$:
   241A 90 DF 3B      [24] 1521 	mov	dptr,#_MARCSTATE
   241D E0            [24] 1522 	movx	a,@dptr
   241E FE            [12] 1523 	mov	r6,a
   241F BE 13 09      [24] 1524 	cjne	r6,#0x13,00103$
                           1525 ;	cc1111rf.c:222: LED = !LED;
   2422 A2 A4         [12] 1526 	mov	c,_P2_4
   2424 B3            [12] 1527 	cpl	c
   2425 92 01         [24] 1528 	mov  _transmit_sloc0_1_0,c
   2427 92 A4         [24] 1529 	mov	_P2_4,c
   2429 80 EF         [24] 1530 	sjmp	00101$
   242B                    1531 00103$:
                           1532 ;	cc1111rf.c:228: LED = 0;
   242B C2 A4         [12] 1533 	clr	_P2_4
                           1534 ;	cc1111rf.c:231: rfTxInfMode = 0;
   242D 90 FD FA      [24] 1535 	mov	dptr,#_rfTxInfMode
   2430 E4            [12] 1536 	clr	a
   2431 F0            [24] 1537 	movx	@dptr,a
                           1538 ;	cc1111rf.c:232: rfTxRepeatCounter = repeat;
   2432 90 FD A8      [24] 1539 	mov	dptr,#_transmit_PARM_3
   2435 E0            [24] 1540 	movx	a,@dptr
   2436 FD            [12] 1541 	mov	r5,a
   2437 A3            [24] 1542 	inc	dptr
   2438 E0            [24] 1543 	movx	a,@dptr
   2439 FE            [12] 1544 	mov	r6,a
   243A 90 FD F0      [24] 1545 	mov	dptr,#_rfTxRepeatCounter
   243D ED            [12] 1546 	mov	a,r5
   243E F0            [24] 1547 	movx	@dptr,a
   243F EE            [12] 1548 	mov	a,r6
   2440 A3            [24] 1549 	inc	dptr
   2441 F0            [24] 1550 	movx	@dptr,a
                           1551 ;	cc1111rf.c:233: rfTxRepeatOffset = offset;
   2442 90 FD AA      [24] 1552 	mov	dptr,#_transmit_PARM_4
   2445 E0            [24] 1553 	movx	a,@dptr
   2446 FB            [12] 1554 	mov	r3,a
   2447 A3            [24] 1555 	inc	dptr
   2448 E0            [24] 1556 	movx	a,@dptr
   2449 FC            [12] 1557 	mov	r4,a
   244A 90 FD F6      [24] 1558 	mov	dptr,#_rfTxRepeatOffset
   244D EB            [12] 1559 	mov	a,r3
   244E F0            [24] 1560 	movx	@dptr,a
   244F EC            [12] 1561 	mov	a,r4
   2450 A3            [24] 1562 	inc	dptr
   2451 F0            [24] 1563 	movx	@dptr,a
                           1564 ;	cc1111rf.c:234: rfTxBufferEnd = len;
   2452 90 FD A6      [24] 1565 	mov	dptr,#_transmit_PARM_2
   2455 E0            [24] 1566 	movx	a,@dptr
   2456 F9            [12] 1567 	mov	r1,a
   2457 A3            [24] 1568 	inc	dptr
   2458 E0            [24] 1569 	movx	a,@dptr
   2459 FA            [12] 1570 	mov	r2,a
   245A 90 FD F2      [24] 1571 	mov	dptr,#_rfTxBufferEnd
   245D E9            [12] 1572 	mov	a,r1
   245E F0            [24] 1573 	movx	@dptr,a
   245F EA            [12] 1574 	mov	a,r2
   2460 A3            [24] 1575 	inc	dptr
   2461 F0            [24] 1576 	movx	@dptr,a
                           1577 ;	cc1111rf.c:235: rfTxRepeatLen = len - offset;
   2462 90 FD F4      [24] 1578 	mov	dptr,#_rfTxRepeatLen
   2465 E9            [12] 1579 	mov	a,r1
   2466 C3            [12] 1580 	clr	c
   2467 9B            [12] 1581 	subb	a,r3
   2468 F0            [24] 1582 	movx	@dptr,a
   2469 EA            [12] 1583 	mov	a,r2
   246A 9C            [12] 1584 	subb	a,r4
   246B A3            [24] 1585 	inc	dptr
   246C F0            [24] 1586 	movx	@dptr,a
                           1587 ;	cc1111rf.c:237: rfTxTotalTXLen = len + (rfTxRepeatLen * repeat);
   246D 90 FD F4      [24] 1588 	mov	dptr,#_rfTxRepeatLen
   2470 E0            [24] 1589 	movx	a,@dptr
   2471 FB            [12] 1590 	mov	r3,a
   2472 A3            [24] 1591 	inc	dptr
   2473 E0            [24] 1592 	movx	a,@dptr
   2474 FC            [12] 1593 	mov	r4,a
   2475 8D 14         [24] 1594 	mov	__mulint_PARM_2,r5
   2477 8E 15         [24] 1595 	mov	(__mulint_PARM_2 + 1),r6
   2479 8B 82         [24] 1596 	mov	dpl,r3
   247B 8C 83         [24] 1597 	mov	dph,r4
   247D C0 07         [24] 1598 	push	ar7
   247F C0 06         [24] 1599 	push	ar6
   2481 C0 05         [24] 1600 	push	ar5
   2483 C0 02         [24] 1601 	push	ar2
   2485 C0 01         [24] 1602 	push	ar1
   2487 12 33 EF      [24] 1603 	lcall	__mulint
   248A AB 82         [24] 1604 	mov	r3,dpl
   248C AC 83         [24] 1605 	mov	r4,dph
   248E D0 01         [24] 1606 	pop	ar1
   2490 D0 02         [24] 1607 	pop	ar2
   2492 D0 05         [24] 1608 	pop	ar5
   2494 D0 06         [24] 1609 	pop	ar6
   2496 D0 07         [24] 1610 	pop	ar7
   2498 90 FD F8      [24] 1611 	mov	dptr,#_rfTxTotalTXLen
   249B EB            [12] 1612 	mov	a,r3
   249C 29            [12] 1613 	add	a,r1
   249D F0            [24] 1614 	movx	@dptr,a
   249E EC            [12] 1615 	mov	a,r4
   249F 3A            [12] 1616 	addc	a,r2
   24A0 A3            [24] 1617 	inc	dptr
   24A1 F0            [24] 1618 	movx	@dptr,a
                           1619 ;	cc1111rf.c:242: if(len == 0)
   24A2 E9            [12] 1620 	mov	a,r1
   24A3 4A            [12] 1621 	orl	a,r2
   24A4 70 5D         [24] 1622 	jnz	00118$
                           1623 ;	cc1111rf.c:244: len = buf[0];
   24A6 90 FD AC      [24] 1624 	mov	dptr,#_transmit_buf_1_96
   24A9 E0            [24] 1625 	movx	a,@dptr
   24AA FB            [12] 1626 	mov	r3,a
   24AB A3            [24] 1627 	inc	dptr
   24AC E0            [24] 1628 	movx	a,@dptr
   24AD FC            [12] 1629 	mov	r4,a
   24AE 8B 82         [24] 1630 	mov	dpl,r3
   24B0 8C 83         [24] 1631 	mov	dph,r4
   24B2 E0            [24] 1632 	movx	a,@dptr
   24B3 F8            [12] 1633 	mov	r0,a
   24B4 88 10         [24] 1634 	mov	_transmit_sloc1_1_0,r0
   24B6 75 11 00      [24] 1635 	mov	(_transmit_sloc1_1_0 + 1),#0x00
   24B9 90 FD A6      [24] 1636 	mov	dptr,#_transmit_PARM_2
   24BC E5 10         [12] 1637 	mov	a,_transmit_sloc1_1_0
   24BE F0            [24] 1638 	movx	@dptr,a
   24BF E5 11         [12] 1639 	mov	a,(_transmit_sloc1_1_0 + 1)
   24C1 A3            [24] 1640 	inc	dptr
   24C2 F0            [24] 1641 	movx	@dptr,a
                           1642 ;	cc1111rf.c:246: switch (PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG)
   24C3 90 DF 04      [24] 1643 	mov	dptr,#_PKTCTRL0
   24C6 E0            [24] 1644 	movx	a,@dptr
   24C7 F8            [12] 1645 	mov	r0,a
   24C8 53 00 03      [24] 1646 	anl	ar0,#0x03
   24CB B8 00 02      [24] 1647 	cjne	r0,#0x00,00214$
   24CE 80 18         [24] 1648 	sjmp	00105$
   24D0                    1649 00214$:
   24D0 B8 01 02      [24] 1650 	cjne	r0,#0x01,00215$
   24D3 80 03         [24] 1651 	sjmp	00216$
   24D5                    1652 00215$:
   24D5 02 25 8C      [24] 1653 	ljmp	00119$
   24D8                    1654 00216$:
                           1655 ;	cc1111rf.c:249: len++;  // we need to send the length byte too...
   24D8 90 FD A6      [24] 1656 	mov	dptr,#_transmit_PARM_2
   24DB 74 01         [12] 1657 	mov	a,#0x01
   24DD 25 10         [12] 1658 	add	a,_transmit_sloc1_1_0
   24DF F0            [24] 1659 	movx	@dptr,a
   24E0 E4            [12] 1660 	clr	a
   24E1 35 11         [12] 1661 	addc	a,(_transmit_sloc1_1_0 + 1)
   24E3 A3            [24] 1662 	inc	dptr
   24E4 F0            [24] 1663 	movx	@dptr,a
                           1664 ;	cc1111rf.c:250: break;
   24E5 02 25 8C      [24] 1665 	ljmp	00119$
                           1666 ;	cc1111rf.c:251: case PKTCTRL0_LENGTH_CONFIG_FIX:
   24E8                    1667 00105$:
                           1668 ;	cc1111rf.c:252: buf++;  // skip sending the length byte
   24E8 90 FD AC      [24] 1669 	mov	dptr,#_transmit_buf_1_96
   24EB 74 01         [12] 1670 	mov	a,#0x01
   24ED 2B            [12] 1671 	add	a,r3
   24EE F0            [24] 1672 	movx	@dptr,a
   24EF E4            [12] 1673 	clr	a
   24F0 3C            [12] 1674 	addc	a,r4
   24F1 A3            [24] 1675 	inc	dptr
   24F2 F0            [24] 1676 	movx	@dptr,a
                           1677 ;	cc1111rf.c:253: PKTLEN= len;
   24F3 90 FD A6      [24] 1678 	mov	dptr,#_transmit_PARM_2
   24F6 E0            [24] 1679 	movx	a,@dptr
   24F7 FB            [12] 1680 	mov	r3,a
   24F8 A3            [24] 1681 	inc	dptr
   24F9 E0            [24] 1682 	movx	a,@dptr
   24FA FC            [12] 1683 	mov	r4,a
   24FB 90 DF 02      [24] 1684 	mov	dptr,#_PKTLEN
   24FE EB            [12] 1685 	mov	a,r3
   24FF F0            [24] 1686 	movx	@dptr,a
                           1687 ;	cc1111rf.c:254: break;
   2500 02 25 8C      [24] 1688 	ljmp	00119$
                           1689 ;	cc1111rf.c:257: }
   2503                    1690 00118$:
                           1691 ;	cc1111rf.c:263: switch (PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG)
   2503 90 DF 04      [24] 1692 	mov	dptr,#_PKTCTRL0
   2506 E0            [24] 1693 	movx	a,@dptr
   2507 FC            [12] 1694 	mov	r4,a
   2508 53 04 03      [24] 1695 	anl	ar4,#0x03
   250B BC 00 02      [24] 1696 	cjne	r4,#0x00,00217$
   250E 80 46         [24] 1697 	sjmp	00109$
   2510                    1698 00217$:
   2510 BC 01 02      [24] 1699 	cjne	r4,#0x01,00218$
   2513 80 03         [24] 1700 	sjmp	00219$
   2515                    1701 00218$:
   2515 02 25 8C      [24] 1702 	ljmp	00119$
   2518                    1703 00219$:
                           1704 ;	cc1111rf.c:267: byte_shuffle(buf, len, 1);
   2518 90 FD AC      [24] 1705 	mov	dptr,#_transmit_buf_1_96
   251B E0            [24] 1706 	movx	a,@dptr
   251C FB            [12] 1707 	mov	r3,a
   251D A3            [24] 1708 	inc	dptr
   251E E0            [24] 1709 	movx	a,@dptr
   251F FC            [12] 1710 	mov	r4,a
   2520 90 FD AF      [24] 1711 	mov	dptr,#_byte_shuffle_PARM_2
   2523 E9            [12] 1712 	mov	a,r1
   2524 F0            [24] 1713 	movx	@dptr,a
   2525 EA            [12] 1714 	mov	a,r2
   2526 A3            [24] 1715 	inc	dptr
   2527 F0            [24] 1716 	movx	@dptr,a
   2528 90 FD B1      [24] 1717 	mov	dptr,#_byte_shuffle_PARM_3
   252B 74 01         [12] 1718 	mov	a,#0x01
   252D F0            [24] 1719 	movx	@dptr,a
   252E E4            [12] 1720 	clr	a
   252F A3            [24] 1721 	inc	dptr
   2530 F0            [24] 1722 	movx	@dptr,a
   2531 8B 82         [24] 1723 	mov	dpl,r3
   2533 8C 83         [24] 1724 	mov	dph,r4
   2535 C0 07         [24] 1725 	push	ar7
   2537 C0 02         [24] 1726 	push	ar2
   2539 C0 01         [24] 1727 	push	ar1
   253B 12 2C F6      [24] 1728 	lcall	_byte_shuffle
   253E D0 01         [24] 1729 	pop	ar1
   2540 D0 02         [24] 1730 	pop	ar2
   2542 D0 07         [24] 1731 	pop	ar7
                           1732 ;	cc1111rf.c:268: buf[0] = (u8) len;
   2544 90 FD AC      [24] 1733 	mov	dptr,#_transmit_buf_1_96
   2547 E0            [24] 1734 	movx	a,@dptr
   2548 FB            [12] 1735 	mov	r3,a
   2549 A3            [24] 1736 	inc	dptr
   254A E0            [24] 1737 	movx	a,@dptr
   254B FC            [12] 1738 	mov	r4,a
   254C 89 00         [24] 1739 	mov	ar0,r1
   254E 8B 82         [24] 1740 	mov	dpl,r3
   2550 8C 83         [24] 1741 	mov	dph,r4
   2552 E8            [12] 1742 	mov	a,r0
   2553 F0            [24] 1743 	movx	@dptr,a
                           1744 ;	cc1111rf.c:269: break;
                           1745 ;	cc1111rf.c:270: case PKTCTRL0_LENGTH_CONFIG_FIX:
   2554 80 36         [24] 1746 	sjmp	00119$
   2556                    1747 00109$:
                           1748 ;	cc1111rf.c:274: if(repeat)
   2556 ED            [12] 1749 	mov	a,r5
   2557 4E            [12] 1750 	orl	a,r6
   2558 60 2D         [24] 1751 	jz	00113$
                           1752 ;	cc1111rf.c:278: PKTLEN = (u8) (rfTxTotalTXLen % 256);
   255A 90 FD F8      [24] 1753 	mov	dptr,#_rfTxTotalTXLen
   255D E0            [24] 1754 	movx	a,@dptr
   255E FD            [12] 1755 	mov	r5,a
   255F A3            [24] 1756 	inc	dptr
   2560 E0            [24] 1757 	movx	a,@dptr
   2561 90 DF 02      [24] 1758 	mov	dptr,#_PKTLEN
   2564 ED            [12] 1759 	mov	a,r5
   2565 F0            [24] 1760 	movx	@dptr,a
                           1761 ;	cc1111rf.c:279: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
   2566 90 DF 04      [24] 1762 	mov	dptr,#_PKTCTRL0
   2569 E0            [24] 1763 	movx	a,@dptr
   256A 54 FC         [12] 1764 	anl	a,#0xFC
   256C F0            [24] 1765 	movx	@dptr,a
                           1766 ;	cc1111rf.c:281: if(rfTxTotalTXLen > RF_MAX_TX_BLOCK)
   256D 90 FD F8      [24] 1767 	mov	dptr,#_rfTxTotalTXLen
   2570 E0            [24] 1768 	movx	a,@dptr
   2571 FD            [12] 1769 	mov	r5,a
   2572 A3            [24] 1770 	inc	dptr
   2573 E0            [24] 1771 	movx	a,@dptr
   2574 FE            [12] 1772 	mov	r6,a
   2575 60 08         [24] 1773 	jz	00111$
                           1774 ;	cc1111rf.c:282: PKTCTRL0 |= PKTCTRL0_LENGTH_CONFIG_INF;
   2577 90 DF 04      [24] 1775 	mov	dptr,#_PKTCTRL0
   257A E0            [24] 1776 	movx	a,@dptr
   257B FE            [12] 1777 	mov	r6,a
   257C 44 02         [12] 1778 	orl	a,#0x02
   257E F0            [24] 1779 	movx	@dptr,a
   257F                    1780 00111$:
                           1781 ;	cc1111rf.c:284: rfTxInfMode = 1;
   257F 90 FD FA      [24] 1782 	mov	dptr,#_rfTxInfMode
   2582 74 01         [12] 1783 	mov	a,#0x01
   2584 F0            [24] 1784 	movx	@dptr,a
   2585 80 05         [24] 1785 	sjmp	00119$
   2587                    1786 00113$:
                           1787 ;	cc1111rf.c:287: PKTLEN = len;
   2587 90 DF 02      [24] 1788 	mov	dptr,#_PKTLEN
   258A E9            [12] 1789 	mov	a,r1
   258B F0            [24] 1790 	movx	@dptr,a
                           1791 ;	cc1111rf.c:291: }
   258C                    1792 00119$:
                           1793 ;	cc1111rf.c:296: RFTXRXIE = 1;
   258C D2 A8         [12] 1794 	setb	_RFTXRXIE
                           1795 ;	cc1111rf.c:302: if(rfAESMode & AES_CRYPTO_OUT_ENABLE)
   258E 90 FD FB      [24] 1796 	mov	dptr,#_rfAESMode
   2591 E0            [24] 1797 	movx	a,@dptr
   2592 FE            [12] 1798 	mov	r6,a
   2593 20 E3 03      [24] 1799 	jb	acc.3,00222$
   2596 02 26 BA      [24] 1800 	ljmp	00135$
   2599                    1801 00222$:
                           1802 ;	cc1111rf.c:304: if((PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG) == PKTCTRL0_LENGTH_CONFIG_VAR)
   2599 90 DF 04      [24] 1803 	mov	dptr,#_PKTCTRL0
   259C E0            [24] 1804 	movx	a,@dptr
   259D FE            [12] 1805 	mov	r6,a
   259E 53 06 03      [24] 1806 	anl	ar6,#0x03
   25A1 BE 01 06      [24] 1807 	cjne	r6,#0x01,00121$
                           1808 ;	cc1111rf.c:305: encoffset= 1;
   25A4 90 FD AE      [24] 1809 	mov	dptr,#_transmit_encoffset_1_97
   25A7 74 01         [12] 1810 	mov	a,#0x01
   25A9 F0            [24] 1811 	movx	@dptr,a
   25AA                    1812 00121$:
                           1813 ;	cc1111rf.c:307: len= padAES(buf + encoffset, len);
   25AA 90 FD AE      [24] 1814 	mov	dptr,#_transmit_encoffset_1_97
   25AD E0            [24] 1815 	movx	a,@dptr
   25AE FE            [12] 1816 	mov	r6,a
   25AF 90 FD AC      [24] 1817 	mov	dptr,#_transmit_buf_1_96
   25B2 E0            [24] 1818 	movx	a,@dptr
   25B3 FC            [12] 1819 	mov	r4,a
   25B4 A3            [24] 1820 	inc	dptr
   25B5 E0            [24] 1821 	movx	a,@dptr
   25B6 FD            [12] 1822 	mov	r5,a
   25B7 EE            [12] 1823 	mov	a,r6
   25B8 2C            [12] 1824 	add	a,r4
   25B9 FA            [12] 1825 	mov	r2,a
   25BA E4            [12] 1826 	clr	a
   25BB 3D            [12] 1827 	addc	a,r5
   25BC FB            [12] 1828 	mov	r3,a
   25BD 90 FD A6      [24] 1829 	mov	dptr,#_transmit_PARM_2
   25C0 E0            [24] 1830 	movx	a,@dptr
   25C1 F8            [12] 1831 	mov	r0,a
   25C2 A3            [24] 1832 	inc	dptr
   25C3 E0            [24] 1833 	movx	a,@dptr
   25C4 F9            [12] 1834 	mov	r1,a
   25C5 90 FD CD      [24] 1835 	mov	dptr,#_padAES_PARM_2
   25C8 E8            [12] 1836 	mov	a,r0
   25C9 F0            [24] 1837 	movx	@dptr,a
   25CA E9            [12] 1838 	mov	a,r1
   25CB A3            [24] 1839 	inc	dptr
   25CC F0            [24] 1840 	movx	@dptr,a
   25CD 8A 82         [24] 1841 	mov	dpl,r2
   25CF 8B 83         [24] 1842 	mov	dph,r3
   25D1 C0 07         [24] 1843 	push	ar7
   25D3 C0 06         [24] 1844 	push	ar6
   25D5 C0 05         [24] 1845 	push	ar5
   25D7 C0 04         [24] 1846 	push	ar4
   25D9 12 30 51      [24] 1847 	lcall	_padAES
   25DC AA 82         [24] 1848 	mov	r2,dpl
   25DE AB 83         [24] 1849 	mov	r3,dph
   25E0 D0 04         [24] 1850 	pop	ar4
   25E2 D0 05         [24] 1851 	pop	ar5
   25E4 D0 06         [24] 1852 	pop	ar6
   25E6 D0 07         [24] 1853 	pop	ar7
                           1854 ;	cc1111rf.c:309: if((rfAESMode & AES_CRYPTO_OUT_TYPE) == AES_CRYPTO_OUT_ENCRYPT)
   25E8 90 FD FB      [24] 1855 	mov	dptr,#_rfAESMode
   25EB E0            [24] 1856 	movx	a,@dptr
   25EC F9            [12] 1857 	mov	r1,a
   25ED 53 01 04      [24] 1858 	anl	ar1,#0x04
   25F0 B9 04 48      [24] 1859 	cjne	r1,#0x04,00123$
                           1860 ;	cc1111rf.c:310: encAES(buf + encoffset, buf + encoffset, len, (rfAESMode & AES_CRYPTO_MODE));
   25F3 C0 07         [24] 1861 	push	ar7
   25F5 EE            [12] 1862 	mov	a,r6
   25F6 2C            [12] 1863 	add	a,r4
   25F7 F8            [12] 1864 	mov	r0,a
   25F8 E4            [12] 1865 	clr	a
   25F9 3D            [12] 1866 	addc	a,r5
   25FA F9            [12] 1867 	mov	r1,a
   25FB 90 FD FB      [24] 1868 	mov	dptr,#_rfAESMode
   25FE E0            [24] 1869 	movx	a,@dptr
   25FF FF            [12] 1870 	mov	r7,a
   2600 53 07 F0      [24] 1871 	anl	ar7,#0xF0
   2603 90 FD D1      [24] 1872 	mov	dptr,#_encAES_PARM_2
   2606 E8            [12] 1873 	mov	a,r0
   2607 F0            [24] 1874 	movx	@dptr,a
   2608 E9            [12] 1875 	mov	a,r1
   2609 A3            [24] 1876 	inc	dptr
   260A F0            [24] 1877 	movx	@dptr,a
   260B 90 FD D3      [24] 1878 	mov	dptr,#_encAES_PARM_3
   260E EA            [12] 1879 	mov	a,r2
   260F F0            [24] 1880 	movx	@dptr,a
   2610 EB            [12] 1881 	mov	a,r3
   2611 A3            [24] 1882 	inc	dptr
   2612 F0            [24] 1883 	movx	@dptr,a
   2613 90 FD D5      [24] 1884 	mov	dptr,#_encAES_PARM_4
   2616 EF            [12] 1885 	mov	a,r7
   2617 F0            [24] 1886 	movx	@dptr,a
   2618 88 82         [24] 1887 	mov	dpl,r0
   261A 89 83         [24] 1888 	mov	dph,r1
   261C C0 07         [24] 1889 	push	ar7
   261E C0 06         [24] 1890 	push	ar6
   2620 C0 05         [24] 1891 	push	ar5
   2622 C0 04         [24] 1892 	push	ar4
   2624 C0 03         [24] 1893 	push	ar3
   2626 C0 02         [24] 1894 	push	ar2
   2628 12 30 8B      [24] 1895 	lcall	_encAES
   262B D0 02         [24] 1896 	pop	ar2
   262D D0 03         [24] 1897 	pop	ar3
   262F D0 04         [24] 1898 	pop	ar4
   2631 D0 05         [24] 1899 	pop	ar5
   2633 D0 06         [24] 1900 	pop	ar6
   2635 D0 07         [24] 1901 	pop	ar7
   2637 D0 07         [24] 1902 	pop	ar7
   2639 80 46         [24] 1903 	sjmp	00124$
   263B                    1904 00123$:
                           1905 ;	cc1111rf.c:312: decAES(buf + encoffset, buf + encoffset, len, (rfAESMode & AES_CRYPTO_MODE));
   263B C0 07         [24] 1906 	push	ar7
   263D EE            [12] 1907 	mov	a,r6
   263E 2C            [12] 1908 	add	a,r4
   263F F8            [12] 1909 	mov	r0,a
   2640 E4            [12] 1910 	clr	a
   2641 3D            [12] 1911 	addc	a,r5
   2642 F9            [12] 1912 	mov	r1,a
   2643 90 FD FB      [24] 1913 	mov	dptr,#_rfAESMode
   2646 E0            [24] 1914 	movx	a,@dptr
   2647 FF            [12] 1915 	mov	r7,a
   2648 53 07 F0      [24] 1916 	anl	ar7,#0xF0
   264B 90 FD D8      [24] 1917 	mov	dptr,#_decAES_PARM_2
   264E E8            [12] 1918 	mov	a,r0
   264F F0            [24] 1919 	movx	@dptr,a
   2650 E9            [12] 1920 	mov	a,r1
   2651 A3            [24] 1921 	inc	dptr
   2652 F0            [24] 1922 	movx	@dptr,a
   2653 90 FD DA      [24] 1923 	mov	dptr,#_decAES_PARM_3
   2656 EA            [12] 1924 	mov	a,r2
   2657 F0            [24] 1925 	movx	@dptr,a
   2658 EB            [12] 1926 	mov	a,r3
   2659 A3            [24] 1927 	inc	dptr
   265A F0            [24] 1928 	movx	@dptr,a
   265B 90 FD DC      [24] 1929 	mov	dptr,#_decAES_PARM_4
   265E EF            [12] 1930 	mov	a,r7
   265F F0            [24] 1931 	movx	@dptr,a
   2660 88 82         [24] 1932 	mov	dpl,r0
   2662 89 83         [24] 1933 	mov	dph,r1
   2664 C0 07         [24] 1934 	push	ar7
   2666 C0 06         [24] 1935 	push	ar6
   2668 C0 05         [24] 1936 	push	ar5
   266A C0 04         [24] 1937 	push	ar4
   266C C0 03         [24] 1938 	push	ar3
   266E C0 02         [24] 1939 	push	ar2
   2670 12 30 D4      [24] 1940 	lcall	_decAES
   2673 D0 02         [24] 1941 	pop	ar2
   2675 D0 03         [24] 1942 	pop	ar3
   2677 D0 04         [24] 1943 	pop	ar4
   2679 D0 05         [24] 1944 	pop	ar5
   267B D0 06         [24] 1945 	pop	ar6
   267D D0 07         [24] 1946 	pop	ar7
                           1947 ;	cc1111rf.c:426: return 1;
   267F D0 07         [24] 1948 	pop	ar7
                           1949 ;	cc1111rf.c:312: decAES(buf + encoffset, buf + encoffset, len, (rfAESMode & AES_CRYPTO_MODE));
   2681                    1950 00124$:
                           1951 ;	cc1111rf.c:314: if(encoffset)
   2681 EE            [12] 1952 	mov	a,r6
   2682 60 1E         [24] 1953 	jz	00132$
                           1954 ;	cc1111rf.c:318: if((rfAESMode & AES_CRYPTO_MODE) == ENCCS_MODE_CBCMAC)
   2684 90 FD FB      [24] 1955 	mov	dptr,#_rfAESMode
   2687 E0            [24] 1956 	movx	a,@dptr
   2688 FE            [12] 1957 	mov	r6,a
   2689 53 06 F0      [24] 1958 	anl	ar6,#0xF0
   268C BE 50 09      [24] 1959 	cjne	r6,#0x50,00126$
                           1960 ;	cc1111rf.c:319: buf[0] = 16;
   268F 8C 82         [24] 1961 	mov	dpl,r4
   2691 8D 83         [24] 1962 	mov	dph,r5
   2693 74 10         [12] 1963 	mov	a,#0x10
   2695 F0            [24] 1964 	movx	@dptr,a
   2696 80 22         [24] 1965 	sjmp	00135$
   2698                    1966 00126$:
                           1967 ;	cc1111rf.c:321: buf[0] = (u8) len;
   2698 8A 06         [24] 1968 	mov	ar6,r2
   269A 8C 82         [24] 1969 	mov	dpl,r4
   269C 8D 83         [24] 1970 	mov	dph,r5
   269E EE            [12] 1971 	mov	a,r6
   269F F0            [24] 1972 	movx	@dptr,a
   26A0 80 18         [24] 1973 	sjmp	00135$
   26A2                    1974 00132$:
                           1975 ;	cc1111rf.c:325: if((rfAESMode & AES_CRYPTO_MODE) == ENCCS_MODE_CBCMAC)
   26A2 90 FD FB      [24] 1976 	mov	dptr,#_rfAESMode
   26A5 E0            [24] 1977 	movx	a,@dptr
   26A6 FE            [12] 1978 	mov	r6,a
   26A7 53 06 F0      [24] 1979 	anl	ar6,#0xF0
   26AA BE 50 08      [24] 1980 	cjne	r6,#0x50,00129$
                           1981 ;	cc1111rf.c:326: PKTLEN = 16;
   26AD 90 DF 02      [24] 1982 	mov	dptr,#_PKTLEN
   26B0 74 10         [12] 1983 	mov	a,#0x10
   26B2 F0            [24] 1984 	movx	@dptr,a
   26B3 80 05         [24] 1985 	sjmp	00135$
   26B5                    1986 00129$:
                           1987 ;	cc1111rf.c:328: PKTLEN = (u8) len;
   26B5 90 DF 02      [24] 1988 	mov	dptr,#_PKTLEN
   26B8 EA            [12] 1989 	mov	a,r2
   26B9 F0            [24] 1990 	movx	@dptr,a
   26BA                    1991 00135$:
                           1992 ;	cc1111rf.c:333: rftxbuf = buf;
   26BA 90 FD AC      [24] 1993 	mov	dptr,#_transmit_buf_1_96
   26BD E0            [24] 1994 	movx	a,@dptr
   26BE FD            [12] 1995 	mov	r5,a
   26BF A3            [24] 1996 	inc	dptr
   26C0 E0            [24] 1997 	movx	a,@dptr
   26C1 FE            [12] 1998 	mov	r6,a
   26C2 90 FD 88      [24] 1999 	mov	dptr,#_rftxbuf
   26C5 ED            [12] 2000 	mov	a,r5
   26C6 F0            [24] 2001 	movx	@dptr,a
   26C7 EE            [12] 2002 	mov	a,r6
   26C8 A3            [24] 2003 	inc	dptr
   26C9 F0            [24] 2004 	movx	@dptr,a
                           2005 ;	cc1111rf.c:336: rfTxCounter = 0;
   26CA 90 FD EE      [24] 2006 	mov	dptr,#_rfTxCounter
   26CD E4            [12] 2007 	clr	a
   26CE F0            [24] 2008 	movx	@dptr,a
   26CF E4            [12] 2009 	clr	a
   26D0 A3            [24] 2010 	inc	dptr
   26D1 F0            [24] 2011 	movx	@dptr,a
                           2012 ;	cc1111rf.c:393: RFST = RFST_STX;
   26D2 75 E1 03      [24] 2013 	mov	_RFST,#0x03
                           2014 ;	cc1111rf.c:397: while (MARCSTATE != MARC_STATE_TX && --countdown)
   26D5 7D 60         [12] 2015 	mov	r5,#0x60
   26D7 7E EA         [12] 2016 	mov	r6,#0xEA
   26D9                    2017 00137$:
   26D9 90 DF 3B      [24] 2018 	mov	dptr,#_MARCSTATE
   26DC E0            [24] 2019 	movx	a,@dptr
   26DD FC            [12] 2020 	mov	r4,a
   26DE BC 13 02      [24] 2021 	cjne	r4,#0x13,00232$
   26E1 80 12         [24] 2022 	sjmp	00139$
   26E3                    2023 00232$:
   26E3 1D            [12] 2024 	dec	r5
   26E4 BD FF 01      [24] 2025 	cjne	r5,#0xFF,00233$
   26E7 1E            [12] 2026 	dec	r6
   26E8                    2027 00233$:
   26E8 ED            [12] 2028 	mov	a,r5
   26E9 4E            [12] 2029 	orl	a,r6
   26EA 60 09         [24] 2030 	jz	00139$
                           2031 ;	cc1111rf.c:400: LED = !LED;
   26EC A2 A4         [12] 2032 	mov	c,_P2_4
   26EE B3            [12] 2033 	cpl	c
   26EF 92 01         [24] 2034 	mov  _transmit_sloc0_1_0,c
   26F1 92 A4         [24] 2035 	mov	_P2_4,c
   26F3 80 E4         [24] 2036 	sjmp	00137$
   26F5                    2037 00139$:
                           2038 ;	cc1111rf.c:406: LED = 1;
   26F5 D2 A4         [12] 2039 	setb	_P2_4
                           2040 ;	cc1111rf.c:407: if (!countdown)
   26F7 ED            [12] 2041 	mov	a,r5
   26F8 4E            [12] 2042 	orl	a,r6
   26F9 70 06         [24] 2043 	jnz	00142$
                           2044 ;	cc1111rf.c:409: lastCode[1] = LCE_RFTX_NEVER_TX;
   26FB 90 FD B6      [24] 2045 	mov	dptr,#(_lastCode + 0x0001)
   26FE 74 13         [12] 2046 	mov	a,#0x13
   2700 F0            [24] 2047 	movx	@dptr,a
                           2048 ;	cc1111rf.c:412: while (MARCSTATE == MARC_STATE_TX)
   2701                    2049 00142$:
   2701 90 DF 3B      [24] 2050 	mov	dptr,#_MARCSTATE
   2704 E0            [24] 2051 	movx	a,@dptr
   2705 FE            [12] 2052 	mov	r6,a
   2706 BE 13 10      [24] 2053 	cjne	r6,#0x13,00144$
                           2054 ;	cc1111rf.c:414: LED = !LED;
   2709 A2 A4         [12] 2055 	mov	c,_P2_4
   270B B3            [12] 2056 	cpl	c
   270C 92 01         [24] 2057 	mov  _transmit_sloc0_1_0,c
   270E 92 A4         [24] 2058 	mov	_P2_4,c
                           2059 ;	cc1111rf.c:416: usbProcessEvents();
   2710 C0 07         [24] 2060 	push	ar7
   2712 12 1B 73      [24] 2061 	lcall	_usbProcessEvents
   2715 D0 07         [24] 2062 	pop	ar7
   2717 80 E8         [24] 2063 	sjmp	00142$
   2719                    2064 00144$:
                           2065 ;	cc1111rf.c:421: LED = 0;
   2719 C2 A4         [12] 2066 	clr	_P2_4
                           2067 ;	cc1111rf.c:424: PKTLEN = original_pktlen;
   271B 90 DF 02      [24] 2068 	mov	dptr,#_PKTLEN
   271E EF            [12] 2069 	mov	a,r7
   271F F0            [24] 2070 	movx	@dptr,a
                           2071 ;	cc1111rf.c:426: return 1;
   2720 75 82 01      [24] 2072 	mov	dpl,#0x01
   2723 22            [24] 2073 	ret
                           2074 ;------------------------------------------------------------
                           2075 ;Allocation info for local variables in function 'startRX'
                           2076 ;------------------------------------------------------------
                           2077 ;	cc1111rf.c:433: void startRX(void)
                           2078 ;	-----------------------------------------
                           2079 ;	 function startRX
                           2080 ;	-----------------------------------------
   2724                    2081 _startRX:
                           2082 ;	cc1111rf.c:439: RFTXRXIE = 1;
   2724 D2 A8         [12] 2083 	setb	_RFTXRXIE
                           2084 ;	cc1111rf.c:443: memset(rfrxbuf,0,BUFFER_SIZE);
   2726 75 14 00      [24] 2085 	mov	_memset_PARM_2,#0x00
   2729 75 15 00      [24] 2086 	mov	_memset_PARM_3,#0x00
   272C 75 16 02      [24] 2087 	mov	(_memset_PARM_3 + 1),#0x02
   272F 90 F9 82      [24] 2088 	mov	dptr,#_rfrxbuf
   2732 75 F0 00      [24] 2089 	mov	b,#0x00
   2735 12 33 14      [24] 2090 	lcall	_memset
                           2091 ;	cc1111rf.c:446: rfRxCounter[FIRST_BUFFER] = 0;
   2738 90 FD 82      [24] 2092 	mov	dptr,#_rfRxCounter
   273B E4            [12] 2093 	clr	a
   273C F0            [24] 2094 	movx	@dptr,a
   273D E4            [12] 2095 	clr	a
   273E A3            [24] 2096 	inc	dptr
   273F F0            [24] 2097 	movx	@dptr,a
                           2098 ;	cc1111rf.c:447: rfRxCounter[SECOND_BUFFER] = 0;
   2740 90 FD 84      [24] 2099 	mov	dptr,#(_rfRxCounter + 0x0002)
   2743 E4            [12] 2100 	clr	a
   2744 F0            [24] 2101 	movx	@dptr,a
   2745 E4            [12] 2102 	clr	a
   2746 A3            [24] 2103 	inc	dptr
   2747 F0            [24] 2104 	movx	@dptr,a
                           2105 ;	cc1111rf.c:453: rfRxProcessed[FIRST_BUFFER] = RX_UNPROCESSED;
   2748 90 FD 86      [24] 2106 	mov	dptr,#_rfRxProcessed
   274B E4            [12] 2107 	clr	a
   274C F0            [24] 2108 	movx	@dptr,a
                           2109 ;	cc1111rf.c:454: rfRxProcessed[SECOND_BUFFER] = RX_PROCESSED;
   274D 90 FD 87      [24] 2110 	mov	dptr,#(_rfRxProcessed + 0x0001)
   2750 74 01         [12] 2111 	mov	a,#0x01
   2752 F0            [24] 2112 	movx	@dptr,a
                           2113 ;	cc1111rf.c:457: rfRxCurrentBuffer = 0;
   2753 90 F9 81      [24] 2114 	mov	dptr,#_rfRxCurrentBuffer
   2756 E4            [12] 2115 	clr	a
   2757 F0            [24] 2116 	movx	@dptr,a
                           2117 ;	cc1111rf.c:459: S1CON &= ~(S1CON_RFIF_0|S1CON_RFIF_1);
   2758 AF 9B         [24] 2118 	mov	r7,_S1CON
   275A 74 FC         [12] 2119 	mov	a,#0xFC
   275C 5F            [12] 2120 	anl	a,r7
   275D F5 9B         [12] 2121 	mov	_S1CON,a
                           2122 ;	cc1111rf.c:460: RFIF &= ~RFIF_IRQ_DONE;
   275F AF E9         [24] 2123 	mov	r7,_RFIF
   2761 74 EF         [12] 2124 	mov	a,#0xEF
   2763 5F            [12] 2125 	anl	a,r7
   2764 F5 E9         [12] 2126 	mov	_RFIF,a
                           2127 ;	cc1111rf.c:493: RFRX;
   2766 75 E1 02      [24] 2128 	mov	_RFST,#0x02
   2769                    2129 00101$:
   2769 90 DF 3B      [24] 2130 	mov	dptr,#_MARCSTATE
   276C E0            [24] 2131 	movx	a,@dptr
   276D FF            [12] 2132 	mov	r7,a
   276E BF 0D F8      [24] 2133 	cjne	r7,#0x0D,00101$
                           2134 ;	cc1111rf.c:495: RFIM |= RFIF_IRQ_DONE;
   2771 43 91 10      [24] 2135 	orl	_RFIM,#0x10
   2774 22            [24] 2136 	ret
                           2137 ;------------------------------------------------------------
                           2138 ;Allocation info for local variables in function 'RepeaterStart'
                           2139 ;------------------------------------------------------------
                           2140 ;	cc1111rf.c:506: void RepeaterStart()
                           2141 ;	-----------------------------------------
                           2142 ;	 function RepeaterStart
                           2143 ;	-----------------------------------------
   2775                    2144 _RepeaterStart:
                           2145 ;	cc1111rf.c:508: bRepeatMode = 1;
   2775 90 FD FD      [24] 2146 	mov	dptr,#_bRepeatMode
   2778 74 01         [12] 2147 	mov	a,#0x01
   277A F0            [24] 2148 	movx	@dptr,a
   277B 22            [24] 2149 	ret
                           2150 ;------------------------------------------------------------
                           2151 ;Allocation info for local variables in function 'RepeaterStop'
                           2152 ;------------------------------------------------------------
                           2153 ;	cc1111rf.c:511: void RepeaterStop()
                           2154 ;	-----------------------------------------
                           2155 ;	 function RepeaterStop
                           2156 ;	-----------------------------------------
   277C                    2157 _RepeaterStop:
                           2158 ;	cc1111rf.c:513: bRepeatMode = 0;
   277C 90 FD FD      [24] 2159 	mov	dptr,#_bRepeatMode
   277F E4            [12] 2160 	clr	a
   2780 F0            [24] 2161 	movx	@dptr,a
   2781 22            [24] 2162 	ret
                           2163 ;------------------------------------------------------------
                           2164 ;Allocation info for local variables in function 'rfTxRxIntHandler'
                           2165 ;------------------------------------------------------------
                           2166 ;	cc1111rf.c:525: void rfTxRxIntHandler(void) __interrupt RFTXRX_VECTOR  // interrupt handler should transmit or receive the next byte
                           2167 ;	-----------------------------------------
                           2168 ;	 function rfTxRxIntHandler
                           2169 ;	-----------------------------------------
   2782                    2170 _rfTxRxIntHandler:
   2782 C0 21         [24] 2171 	push	bits
   2784 C0 E0         [24] 2172 	push	acc
   2786 C0 F0         [24] 2173 	push	b
   2788 C0 82         [24] 2174 	push	dpl
   278A C0 83         [24] 2175 	push	dph
   278C C0 07         [24] 2176 	push	(0+7)
   278E C0 06         [24] 2177 	push	(0+6)
   2790 C0 05         [24] 2178 	push	(0+5)
   2792 C0 04         [24] 2179 	push	(0+4)
   2794 C0 03         [24] 2180 	push	(0+3)
   2796 C0 02         [24] 2181 	push	(0+2)
   2798 C0 01         [24] 2182 	push	(0+1)
   279A C0 00         [24] 2183 	push	(0+0)
   279C C0 D0         [24] 2184 	push	psw
   279E 75 D0 00      [24] 2185 	mov	psw,#0x00
                           2186 ;	cc1111rf.c:527: lastCode[0] = LC_RFTXRX_VECTOR;
   27A1 90 FD B5      [24] 2187 	mov	dptr,#_lastCode
   27A4 74 11         [12] 2188 	mov	a,#0x11
   27A6 F0            [24] 2189 	movx	@dptr,a
                           2190 ;	cc1111rf.c:531: RFTXRXIF = 0;
   27A7 C2 89         [12] 2191 	clr	_RFTXRXIF
                           2192 ;	cc1111rf.c:533: if(MARCSTATE == MARC_STATE_RX)
   27A9 90 DF 3B      [24] 2193 	mov	dptr,#_MARCSTATE
   27AC E0            [24] 2194 	movx	a,@dptr
   27AD FF            [12] 2195 	mov	r7,a
   27AE BF 0D 02      [24] 2196 	cjne	r7,#0x0D,00176$
   27B1 80 03         [24] 2197 	sjmp	00177$
   27B3                    2198 00176$:
   27B3 02 28 C1      [24] 2199 	ljmp	00130$
   27B6                    2200 00177$:
                           2201 ;	cc1111rf.c:536: LED = 1;
   27B6 D2 A4         [12] 2202 	setb	_P2_4
                           2203 ;	cc1111rf.c:538: if(rfRxInfMode)
   27B8 90 FD E7      [24] 2204 	mov	dptr,#_rfRxInfMode
   27BB E0            [24] 2205 	movx	a,@dptr
   27BC FF            [12] 2206 	mov	r7,a
   27BD 60 27         [24] 2207 	jz	00104$
                           2208 ;	cc1111rf.c:539: if(rfRxTotalRXLen-- < 256)
   27BF 90 FD E8      [24] 2209 	mov	dptr,#_rfRxTotalRXLen
   27C2 E0            [24] 2210 	movx	a,@dptr
   27C3 FE            [12] 2211 	mov	r6,a
   27C4 A3            [24] 2212 	inc	dptr
   27C5 E0            [24] 2213 	movx	a,@dptr
   27C6 FF            [12] 2214 	mov	r7,a
   27C7 90 FD E8      [24] 2215 	mov	dptr,#_rfRxTotalRXLen
   27CA E0            [24] 2216 	movx	a,@dptr
   27CB 24 FF         [12] 2217 	add	a,#0xFF
   27CD FC            [12] 2218 	mov	r4,a
   27CE A3            [24] 2219 	inc	dptr
   27CF E0            [24] 2220 	movx	a,@dptr
   27D0 34 FF         [12] 2221 	addc	a,#0xFF
   27D2 FD            [12] 2222 	mov	r5,a
   27D3 90 FD E8      [24] 2223 	mov	dptr,#_rfRxTotalRXLen
   27D6 EC            [12] 2224 	mov	a,r4
   27D7 F0            [24] 2225 	movx	@dptr,a
   27D8 ED            [12] 2226 	mov	a,r5
   27D9 A3            [24] 2227 	inc	dptr
   27DA F0            [24] 2228 	movx	@dptr,a
   27DB EF            [12] 2229 	mov	a,r7
   27DC 70 08         [24] 2230 	jnz	00104$
                           2231 ;	cc1111rf.c:540: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
   27DE 90 DF 04      [24] 2232 	mov	dptr,#_PKTCTRL0
   27E1 E0            [24] 2233 	movx	a,@dptr
   27E2 FF            [12] 2234 	mov	r7,a
   27E3 54 FC         [12] 2235 	anl	a,#0xFC
   27E5 F0            [24] 2236 	movx	@dptr,a
   27E6                    2237 00104$:
                           2238 ;	cc1111rf.c:541: rf_status = RFST_SRX;
   27E6 90 FD 8C      [24] 2239 	mov	dptr,#_rf_status
   27E9 74 02         [12] 2240 	mov	a,#0x02
   27EB F0            [24] 2241 	movx	@dptr,a
                           2242 ;	cc1111rf.c:542: rfrxbuf[rfRxCurrentBuffer][rfRxCounter[rfRxCurrentBuffer]++] = RFD;
   27EC 90 F9 81      [24] 2243 	mov	dptr,#_rfRxCurrentBuffer
   27EF E0            [24] 2244 	movx	a,@dptr
   27F0 25 E0         [12] 2245 	add	a,acc
   27F2 FE            [12] 2246 	mov	r6,a
   27F3 E4            [12] 2247 	clr	a
   27F4 24 82         [12] 2248 	add	a,#_rfrxbuf
   27F6 FF            [12] 2249 	mov	r7,a
   27F7 EE            [12] 2250 	mov	a,r6
   27F8 34 F9         [12] 2251 	addc	a,#(_rfrxbuf >> 8)
   27FA FE            [12] 2252 	mov	r6,a
   27FB 90 F9 81      [24] 2253 	mov	dptr,#_rfRxCurrentBuffer
   27FE E0            [24] 2254 	movx	a,@dptr
   27FF 75 F0 02      [24] 2255 	mov	b,#0x02
   2802 A4            [48] 2256 	mul	ab
   2803 24 82         [12] 2257 	add	a,#_rfRxCounter
   2805 FC            [12] 2258 	mov	r4,a
   2806 74 FD         [12] 2259 	mov	a,#(_rfRxCounter >> 8)
   2808 35 F0         [12] 2260 	addc	a,b
   280A FD            [12] 2261 	mov	r5,a
   280B 8C 82         [24] 2262 	mov	dpl,r4
   280D 8D 83         [24] 2263 	mov	dph,r5
   280F E0            [24] 2264 	movx	a,@dptr
   2810 FA            [12] 2265 	mov	r2,a
   2811 A3            [24] 2266 	inc	dptr
   2812 E0            [24] 2267 	movx	a,@dptr
   2813 FB            [12] 2268 	mov	r3,a
   2814 74 01         [12] 2269 	mov	a,#0x01
   2816 2A            [12] 2270 	add	a,r2
   2817 F8            [12] 2271 	mov	r0,a
   2818 E4            [12] 2272 	clr	a
   2819 3B            [12] 2273 	addc	a,r3
   281A F9            [12] 2274 	mov	r1,a
   281B 8C 82         [24] 2275 	mov	dpl,r4
   281D 8D 83         [24] 2276 	mov	dph,r5
   281F E8            [12] 2277 	mov	a,r0
   2820 F0            [24] 2278 	movx	@dptr,a
   2821 E9            [12] 2279 	mov	a,r1
   2822 A3            [24] 2280 	inc	dptr
   2823 F0            [24] 2281 	movx	@dptr,a
   2824 EA            [12] 2282 	mov	a,r2
   2825 2F            [12] 2283 	add	a,r7
   2826 F5 82         [12] 2284 	mov	dpl,a
   2828 EB            [12] 2285 	mov	a,r3
   2829 3E            [12] 2286 	addc	a,r6
   282A F5 83         [12] 2287 	mov	dph,a
   282C E5 D9         [12] 2288 	mov	a,_RFD
   282E F0            [24] 2289 	movx	@dptr,a
                           2290 ;	cc1111rf.c:543: if(rfRxCounter[rfRxCurrentBuffer] >= BUFFER_SIZE || rfRxCounter[rfRxCurrentBuffer] == 0)
   282F 90 F9 81      [24] 2291 	mov	dptr,#_rfRxCurrentBuffer
   2832 E0            [24] 2292 	movx	a,@dptr
   2833 75 F0 02      [24] 2293 	mov	b,#0x02
   2836 A4            [48] 2294 	mul	ab
   2837 24 82         [12] 2295 	add	a,#_rfRxCounter
   2839 F5 82         [12] 2296 	mov	dpl,a
   283B 74 FD         [12] 2297 	mov	a,#(_rfRxCounter >> 8)
   283D 35 F0         [12] 2298 	addc	a,b
   283F F5 83         [12] 2299 	mov	dph,a
   2841 E0            [24] 2300 	movx	a,@dptr
   2842 FE            [12] 2301 	mov	r6,a
   2843 A3            [24] 2302 	inc	dptr
   2844 E0            [24] 2303 	movx	a,@dptr
   2845 FF            [12] 2304 	mov	r7,a
   2846 54 FE         [12] 2305 	anl	a,#0xFE
   2848 70 1A         [24] 2306 	jnz	00105$
   284A 90 F9 81      [24] 2307 	mov	dptr,#_rfRxCurrentBuffer
   284D E0            [24] 2308 	movx	a,@dptr
   284E 75 F0 02      [24] 2309 	mov	b,#0x02
   2851 A4            [48] 2310 	mul	ab
   2852 24 82         [12] 2311 	add	a,#_rfRxCounter
   2854 F5 82         [12] 2312 	mov	dpl,a
   2856 74 FD         [12] 2313 	mov	a,#(_rfRxCounter >> 8)
   2858 35 F0         [12] 2314 	addc	a,b
   285A F5 83         [12] 2315 	mov	dph,a
   285C E0            [24] 2316 	movx	a,@dptr
   285D FE            [12] 2317 	mov	r6,a
   285E A3            [24] 2318 	inc	dptr
   285F E0            [24] 2319 	movx	a,@dptr
   2860 FF            [12] 2320 	mov	r7,a
   2861 4E            [12] 2321 	orl	a,r6
   2862 70 1A         [24] 2322 	jnz	00106$
   2864                    2323 00105$:
                           2324 ;	cc1111rf.c:545: rfRxCounter[rfRxCurrentBuffer] = BUFFER_SIZE-1;
   2864 90 F9 81      [24] 2325 	mov	dptr,#_rfRxCurrentBuffer
   2867 E0            [24] 2326 	movx	a,@dptr
   2868 FF            [12] 2327 	mov	r7,a
   2869 75 F0 02      [24] 2328 	mov	b,#0x02
   286C A4            [48] 2329 	mul	ab
   286D 24 82         [12] 2330 	add	a,#_rfRxCounter
   286F F5 82         [12] 2331 	mov	dpl,a
   2871 74 FD         [12] 2332 	mov	a,#(_rfRxCounter >> 8)
   2873 35 F0         [12] 2333 	addc	a,b
   2875 F5 83         [12] 2334 	mov	dph,a
   2877 74 FF         [12] 2335 	mov	a,#0xFF
   2879 F0            [24] 2336 	movx	@dptr,a
   287A 74 01         [12] 2337 	mov	a,#0x01
   287C A3            [24] 2338 	inc	dptr
   287D F0            [24] 2339 	movx	@dptr,a
   287E                    2340 00106$:
                           2341 ;	cc1111rf.c:548: if(!rfRxTotalRXLen && rfRxInfMode)
   287E 90 FD E8      [24] 2342 	mov	dptr,#_rfRxTotalRXLen
   2881 E0            [24] 2343 	movx	a,@dptr
   2882 FE            [12] 2344 	mov	r6,a
   2883 A3            [24] 2345 	inc	dptr
   2884 E0            [24] 2346 	movx	a,@dptr
   2885 FF            [12] 2347 	mov	r7,a
   2886 4E            [12] 2348 	orl	a,r6
   2887 60 03         [24] 2349 	jz	00184$
   2889 02 2A 79      [24] 2350 	ljmp	00132$
   288C                    2351 00184$:
   288C 90 FD E7      [24] 2352 	mov	dptr,#_rfRxInfMode
   288F E0            [24] 2353 	movx	a,@dptr
   2890 FF            [12] 2354 	mov	r7,a
   2891 70 03         [24] 2355 	jnz	00185$
   2893 02 2A 79      [24] 2356 	ljmp	00132$
   2896                    2357 00185$:
                           2358 ;	cc1111rf.c:550: rfRxTotalRXLen = rfRxLargeLen;
   2896 90 FD EA      [24] 2359 	mov	dptr,#_rfRxLargeLen
   2899 E0            [24] 2360 	movx	a,@dptr
   289A FE            [12] 2361 	mov	r6,a
   289B A3            [24] 2362 	inc	dptr
   289C E0            [24] 2363 	movx	a,@dptr
   289D FF            [12] 2364 	mov	r7,a
   289E 90 FD E8      [24] 2365 	mov	dptr,#_rfRxTotalRXLen
   28A1 EE            [12] 2366 	mov	a,r6
   28A2 F0            [24] 2367 	movx	@dptr,a
   28A3 EF            [12] 2368 	mov	a,r7
   28A4 A3            [24] 2369 	inc	dptr
   28A5 F0            [24] 2370 	movx	@dptr,a
                           2371 ;	cc1111rf.c:551: PKTLEN = (u8) (rfRxTotalRXLen % 256);
   28A6 90 FD E8      [24] 2372 	mov	dptr,#_rfRxTotalRXLen
   28A9 E0            [24] 2373 	movx	a,@dptr
   28AA FE            [12] 2374 	mov	r6,a
   28AB A3            [24] 2375 	inc	dptr
   28AC E0            [24] 2376 	movx	a,@dptr
   28AD 90 DF 02      [24] 2377 	mov	dptr,#_PKTLEN
   28B0 EE            [12] 2378 	mov	a,r6
   28B1 F0            [24] 2379 	movx	@dptr,a
                           2380 ;	cc1111rf.c:552: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
                           2381 ;	cc1111rf.c:553: PKTCTRL0 |= PKTCTRL0_LENGTH_CONFIG_INF;
   28B2 90 DF 04      [24] 2382 	mov	dptr,#_PKTCTRL0
   28B5 E0            [24] 2383 	movx	a,@dptr
   28B6 54 FC         [12] 2384 	anl	a,#0xFC
   28B8 F0            [24] 2385 	movx	@dptr,a
   28B9 E0            [24] 2386 	movx	a,@dptr
   28BA FF            [12] 2387 	mov	r7,a
   28BB 44 02         [12] 2388 	orl	a,#0x02
   28BD F0            [24] 2389 	movx	@dptr,a
   28BE 02 2A 79      [24] 2390 	ljmp	00132$
   28C1                    2391 00130$:
                           2392 ;	cc1111rf.c:557: else if(MARCSTATE == MARC_STATE_TX)
   28C1 90 DF 3B      [24] 2393 	mov	dptr,#_MARCSTATE
   28C4 E0            [24] 2394 	movx	a,@dptr
   28C5 FF            [12] 2395 	mov	r7,a
   28C6 BF 13 02      [24] 2396 	cjne	r7,#0x13,00186$
   28C9 80 03         [24] 2397 	sjmp	00187$
   28CB                    2398 00186$:
   28CB 02 2A 79      [24] 2399 	ljmp	00132$
   28CE                    2400 00187$:
                           2401 ;	cc1111rf.c:560: if (rfTxInfMode)
   28CE 90 FD FA      [24] 2402 	mov	dptr,#_rfTxInfMode
   28D1 E0            [24] 2403 	movx	a,@dptr
   28D2 FF            [12] 2404 	mov	r7,a
   28D3 70 03         [24] 2405 	jnz	00188$
   28D5 02 2A 0A      [24] 2406 	ljmp	00125$
   28D8                    2407 00188$:
                           2408 ;	cc1111rf.c:567: macdata.tLastHop ++;
   28D8 90 FD 9E      [24] 2409 	mov	dptr,#(_macdata + 0x000d)
   28DB E0            [24] 2410 	movx	a,@dptr
   28DC FE            [12] 2411 	mov	r6,a
   28DD A3            [24] 2412 	inc	dptr
   28DE E0            [24] 2413 	movx	a,@dptr
   28DF FF            [12] 2414 	mov	r7,a
   28E0 0E            [12] 2415 	inc	r6
   28E1 BE 00 01      [24] 2416 	cjne	r6,#0x00,00189$
   28E4 0F            [12] 2417 	inc	r7
   28E5                    2418 00189$:
   28E5 90 FD 9E      [24] 2419 	mov	dptr,#(_macdata + 0x000d)
   28E8 EE            [12] 2420 	mov	a,r6
   28E9 F0            [24] 2421 	movx	@dptr,a
   28EA EF            [12] 2422 	mov	a,r7
   28EB A3            [24] 2423 	inc	dptr
   28EC F0            [24] 2424 	movx	@dptr,a
                           2425 ;	cc1111rf.c:569: if (rfTxCounter == rfTxBufferEnd)
   28ED 90 FD EE      [24] 2426 	mov	dptr,#_rfTxCounter
   28F0 E0            [24] 2427 	movx	a,@dptr
   28F1 FE            [12] 2428 	mov	r6,a
   28F2 A3            [24] 2429 	inc	dptr
   28F3 E0            [24] 2430 	movx	a,@dptr
   28F4 FF            [12] 2431 	mov	r7,a
   28F5 90 FD F2      [24] 2432 	mov	dptr,#_rfTxBufferEnd
   28F8 E0            [24] 2433 	movx	a,@dptr
   28F9 FC            [12] 2434 	mov	r4,a
   28FA A3            [24] 2435 	inc	dptr
   28FB E0            [24] 2436 	movx	a,@dptr
   28FC FD            [12] 2437 	mov	r5,a
   28FD EE            [12] 2438 	mov	a,r6
   28FE B5 04 06      [24] 2439 	cjne	a,ar4,00190$
   2901 EF            [12] 2440 	mov	a,r7
   2902 B5 05 02      [24] 2441 	cjne	a,ar5,00190$
   2905 80 03         [24] 2442 	sjmp	00191$
   2907                    2443 00190$:
   2907 02 29 DE      [24] 2444 	ljmp	00121$
   290A                    2445 00191$:
                           2446 ;	cc1111rf.c:571: if (rfTxRepeatCounter)
   290A 90 FD F0      [24] 2447 	mov	dptr,#_rfTxRepeatCounter
   290D E0            [24] 2448 	movx	a,@dptr
   290E FE            [12] 2449 	mov	r6,a
   290F A3            [24] 2450 	inc	dptr
   2910 E0            [24] 2451 	movx	a,@dptr
   2911 FF            [12] 2452 	mov	r7,a
   2912 4E            [12] 2453 	orl	a,r6
   2913 60 37         [24] 2454 	jz	00118$
                           2455 ;	cc1111rf.c:573: if(rfTxRepeatCounter != 0xff)
   2915 90 FD F0      [24] 2456 	mov	dptr,#_rfTxRepeatCounter
   2918 E0            [24] 2457 	movx	a,@dptr
   2919 FE            [12] 2458 	mov	r6,a
   291A A3            [24] 2459 	inc	dptr
   291B E0            [24] 2460 	movx	a,@dptr
   291C FF            [12] 2461 	mov	r7,a
   291D BE FF 05      [24] 2462 	cjne	r6,#0xFF,00193$
   2920 BF 00 02      [24] 2463 	cjne	r7,#0x00,00193$
   2923 80 14         [24] 2464 	sjmp	00112$
   2925                    2465 00193$:
                           2466 ;	cc1111rf.c:574: rfTxRepeatCounter--;
   2925 90 FD F0      [24] 2467 	mov	dptr,#_rfTxRepeatCounter
   2928 E0            [24] 2468 	movx	a,@dptr
   2929 24 FF         [12] 2469 	add	a,#0xFF
   292B FE            [12] 2470 	mov	r6,a
   292C A3            [24] 2471 	inc	dptr
   292D E0            [24] 2472 	movx	a,@dptr
   292E 34 FF         [12] 2473 	addc	a,#0xFF
   2930 FF            [12] 2474 	mov	r7,a
   2931 90 FD F0      [24] 2475 	mov	dptr,#_rfTxRepeatCounter
   2934 EE            [12] 2476 	mov	a,r6
   2935 F0            [24] 2477 	movx	@dptr,a
   2936 EF            [12] 2478 	mov	a,r7
   2937 A3            [24] 2479 	inc	dptr
   2938 F0            [24] 2480 	movx	@dptr,a
   2939                    2481 00112$:
                           2482 ;	cc1111rf.c:575: rfTxCounter = rfTxRepeatOffset;
   2939 90 FD F6      [24] 2483 	mov	dptr,#_rfTxRepeatOffset
   293C E0            [24] 2484 	movx	a,@dptr
   293D FE            [12] 2485 	mov	r6,a
   293E A3            [24] 2486 	inc	dptr
   293F E0            [24] 2487 	movx	a,@dptr
   2940 FF            [12] 2488 	mov	r7,a
   2941 90 FD EE      [24] 2489 	mov	dptr,#_rfTxCounter
   2944 EE            [12] 2490 	mov	a,r6
   2945 F0            [24] 2491 	movx	@dptr,a
   2946 EF            [12] 2492 	mov	a,r7
   2947 A3            [24] 2493 	inc	dptr
   2948 F0            [24] 2494 	movx	@dptr,a
   2949 02 29 DE      [24] 2495 	ljmp	00121$
   294C                    2496 00118$:
                           2497 ;	cc1111rf.c:581: rftxbuf[(rfTxCurBufIdx * rfTxBufferEnd)] = BUFFER_AVAILABLE;
   294C 90 FD F2      [24] 2498 	mov	dptr,#_rfTxBufferEnd
   294F E0            [24] 2499 	movx	a,@dptr
   2950 F5 14         [12] 2500 	mov	__mulint_PARM_2,a
   2952 A3            [24] 2501 	inc	dptr
   2953 E0            [24] 2502 	movx	a,@dptr
   2954 F5 15         [12] 2503 	mov	(__mulint_PARM_2 + 1),a
   2956 90 FD EC      [24] 2504 	mov	dptr,#_rfTxCurBufIdx
   2959 E0            [24] 2505 	movx	a,@dptr
   295A FF            [12] 2506 	mov	r7,a
   295B 7E 00         [12] 2507 	mov	r6,#0x00
   295D 8F 82         [24] 2508 	mov	dpl,r7
   295F 8E 83         [24] 2509 	mov	dph,r6
   2961 12 33 EF      [24] 2510 	lcall	__mulint
   2964 AE 82         [24] 2511 	mov	r6,dpl
   2966 AF 83         [24] 2512 	mov	r7,dph
   2968 90 FD 88      [24] 2513 	mov	dptr,#_rftxbuf
   296B E0            [24] 2514 	movx	a,@dptr
   296C FC            [12] 2515 	mov	r4,a
   296D A3            [24] 2516 	inc	dptr
   296E E0            [24] 2517 	movx	a,@dptr
   296F FD            [12] 2518 	mov	r5,a
   2970 EE            [12] 2519 	mov	a,r6
   2971 2C            [12] 2520 	add	a,r4
   2972 F5 82         [12] 2521 	mov	dpl,a
   2974 EF            [12] 2522 	mov	a,r7
   2975 3D            [12] 2523 	addc	a,r5
   2976 F5 83         [12] 2524 	mov	dph,a
   2978 E4            [12] 2525 	clr	a
   2979 F0            [24] 2526 	movx	@dptr,a
                           2527 ;	cc1111rf.c:583: if (++rfTxCurBufIdx == rfTxBufCount)
   297A 90 FD EC      [24] 2528 	mov	dptr,#_rfTxCurBufIdx
   297D E0            [24] 2529 	movx	a,@dptr
   297E 24 01         [12] 2530 	add	a,#0x01
   2980 F0            [24] 2531 	movx	@dptr,a
   2981 90 FD EC      [24] 2532 	mov	dptr,#_rfTxCurBufIdx
   2984 E0            [24] 2533 	movx	a,@dptr
   2985 FF            [12] 2534 	mov	r7,a
   2986 90 FD ED      [24] 2535 	mov	dptr,#_rfTxBufCount
   2989 E0            [24] 2536 	movx	a,@dptr
   298A FE            [12] 2537 	mov	r6,a
   298B EF            [12] 2538 	mov	a,r7
   298C B5 06 05      [24] 2539 	cjne	a,ar6,00114$
                           2540 ;	cc1111rf.c:585: rfTxCurBufIdx = 0;
   298F 90 FD EC      [24] 2541 	mov	dptr,#_rfTxCurBufIdx
   2992 E4            [12] 2542 	clr	a
   2993 F0            [24] 2543 	movx	@dptr,a
   2994                    2544 00114$:
                           2545 ;	cc1111rf.c:588: if (rftxbuf[(rfTxCurBufIdx * rfTxBufferEnd)] == BUFFER_AVAILABLE)
   2994 90 FD F2      [24] 2546 	mov	dptr,#_rfTxBufferEnd
   2997 E0            [24] 2547 	movx	a,@dptr
   2998 F5 14         [12] 2548 	mov	__mulint_PARM_2,a
   299A A3            [24] 2549 	inc	dptr
   299B E0            [24] 2550 	movx	a,@dptr
   299C F5 15         [12] 2551 	mov	(__mulint_PARM_2 + 1),a
   299E 90 FD EC      [24] 2552 	mov	dptr,#_rfTxCurBufIdx
   29A1 E0            [24] 2553 	movx	a,@dptr
   29A2 FF            [12] 2554 	mov	r7,a
   29A3 7E 00         [12] 2555 	mov	r6,#0x00
   29A5 8F 82         [24] 2556 	mov	dpl,r7
   29A7 8E 83         [24] 2557 	mov	dph,r6
   29A9 12 33 EF      [24] 2558 	lcall	__mulint
   29AC AE 82         [24] 2559 	mov	r6,dpl
   29AE AF 83         [24] 2560 	mov	r7,dph
   29B0 90 FD 88      [24] 2561 	mov	dptr,#_rftxbuf
   29B3 E0            [24] 2562 	movx	a,@dptr
   29B4 FC            [12] 2563 	mov	r4,a
   29B5 A3            [24] 2564 	inc	dptr
   29B6 E0            [24] 2565 	movx	a,@dptr
   29B7 FD            [12] 2566 	mov	r5,a
   29B8 EE            [12] 2567 	mov	a,r6
   29B9 2C            [12] 2568 	add	a,r4
   29BA FE            [12] 2569 	mov	r6,a
   29BB EF            [12] 2570 	mov	a,r7
   29BC 3D            [12] 2571 	addc	a,r5
   29BD FF            [12] 2572 	mov	r7,a
   29BE 8E 82         [24] 2573 	mov	dpl,r6
   29C0 8F 83         [24] 2574 	mov	dph,r7
   29C2 E0            [24] 2575 	movx	a,@dptr
   29C3 70 10         [24] 2576 	jnz	00116$
                           2577 ;	cc1111rf.c:591: macdata.mac_state = MAC_STATE_NONHOPPING;
   29C5 90 FD 91      [24] 2578 	mov	dptr,#_macdata
   29C8 E4            [12] 2579 	clr	a
   29C9 F0            [24] 2580 	movx	@dptr,a
                           2581 ;	cc1111rf.c:592: lastCode[1] = LCE_DROPPED_PACKET;
   29CA 90 FD B6      [24] 2582 	mov	dptr,#(_lastCode + 0x0001)
   29CD 74 12         [12] 2583 	mov	a,#0x12
   29CF F0            [24] 2584 	movx	@dptr,a
                           2585 ;	cc1111rf.c:593: resetRFSTATE();
   29D0 12 22 D1      [24] 2586 	lcall	_resetRFSTATE
                           2587 ;	cc1111rf.c:594: LED = 0;
   29D3 C2 A4         [12] 2588 	clr	_P2_4
   29D5                    2589 00116$:
                           2590 ;	cc1111rf.c:598: rfTxCounter = 1;
   29D5 90 FD EE      [24] 2591 	mov	dptr,#_rfTxCounter
   29D8 74 01         [12] 2592 	mov	a,#0x01
   29DA F0            [24] 2593 	movx	@dptr,a
   29DB E4            [12] 2594 	clr	a
   29DC A3            [24] 2595 	inc	dptr
   29DD F0            [24] 2596 	movx	@dptr,a
   29DE                    2597 00121$:
                           2598 ;	cc1111rf.c:602: if(rfTxTotalTXLen-- == 255)
   29DE 90 FD F8      [24] 2599 	mov	dptr,#_rfTxTotalTXLen
   29E1 E0            [24] 2600 	movx	a,@dptr
   29E2 FE            [12] 2601 	mov	r6,a
   29E3 A3            [24] 2602 	inc	dptr
   29E4 E0            [24] 2603 	movx	a,@dptr
   29E5 FF            [12] 2604 	mov	r7,a
   29E6 90 FD F8      [24] 2605 	mov	dptr,#_rfTxTotalTXLen
   29E9 E0            [24] 2606 	movx	a,@dptr
   29EA 24 FF         [12] 2607 	add	a,#0xFF
   29EC FC            [12] 2608 	mov	r4,a
   29ED A3            [24] 2609 	inc	dptr
   29EE E0            [24] 2610 	movx	a,@dptr
   29EF 34 FF         [12] 2611 	addc	a,#0xFF
   29F1 FD            [12] 2612 	mov	r5,a
   29F2 90 FD F8      [24] 2613 	mov	dptr,#_rfTxTotalTXLen
   29F5 EC            [12] 2614 	mov	a,r4
   29F6 F0            [24] 2615 	movx	@dptr,a
   29F7 ED            [12] 2616 	mov	a,r5
   29F8 A3            [24] 2617 	inc	dptr
   29F9 F0            [24] 2618 	movx	@dptr,a
   29FA BE FF 21      [24] 2619 	cjne	r6,#0xFF,00126$
   29FD BF 00 1E      [24] 2620 	cjne	r7,#0x00,00126$
                           2621 ;	cc1111rf.c:604: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
   2A00 90 DF 04      [24] 2622 	mov	dptr,#_PKTCTRL0
   2A03 E0            [24] 2623 	movx	a,@dptr
   2A04 FF            [12] 2624 	mov	r7,a
   2A05 54 FC         [12] 2625 	anl	a,#0xFC
   2A07 F0            [24] 2626 	movx	@dptr,a
   2A08 80 14         [24] 2627 	sjmp	00126$
   2A0A                    2628 00125$:
                           2629 ;	cc1111rf.c:611: rfTxTotalTXLen--;
   2A0A 90 FD F8      [24] 2630 	mov	dptr,#_rfTxTotalTXLen
   2A0D E0            [24] 2631 	movx	a,@dptr
   2A0E 24 FF         [12] 2632 	add	a,#0xFF
   2A10 FE            [12] 2633 	mov	r6,a
   2A11 A3            [24] 2634 	inc	dptr
   2A12 E0            [24] 2635 	movx	a,@dptr
   2A13 34 FF         [12] 2636 	addc	a,#0xFF
   2A15 FF            [12] 2637 	mov	r7,a
   2A16 90 FD F8      [24] 2638 	mov	dptr,#_rfTxTotalTXLen
   2A19 EE            [12] 2639 	mov	a,r6
   2A1A F0            [24] 2640 	movx	@dptr,a
   2A1B EF            [12] 2641 	mov	a,r7
   2A1C A3            [24] 2642 	inc	dptr
   2A1D F0            [24] 2643 	movx	@dptr,a
   2A1E                    2644 00126$:
                           2645 ;	cc1111rf.c:612: rf_status = RFST_STX;
   2A1E 90 FD 8C      [24] 2646 	mov	dptr,#_rf_status
   2A21 74 03         [12] 2647 	mov	a,#0x03
   2A23 F0            [24] 2648 	movx	@dptr,a
                           2649 ;	cc1111rf.c:614: RFD = rftxbuf[(rfTxCurBufIdx * rfTxBufferEnd) + rfTxCounter++];
   2A24 90 FD F2      [24] 2650 	mov	dptr,#_rfTxBufferEnd
   2A27 E0            [24] 2651 	movx	a,@dptr
   2A28 F5 14         [12] 2652 	mov	__mulint_PARM_2,a
   2A2A A3            [24] 2653 	inc	dptr
   2A2B E0            [24] 2654 	movx	a,@dptr
   2A2C F5 15         [12] 2655 	mov	(__mulint_PARM_2 + 1),a
   2A2E 90 FD EC      [24] 2656 	mov	dptr,#_rfTxCurBufIdx
   2A31 E0            [24] 2657 	movx	a,@dptr
   2A32 FF            [12] 2658 	mov	r7,a
   2A33 7E 00         [12] 2659 	mov	r6,#0x00
   2A35 8F 82         [24] 2660 	mov	dpl,r7
   2A37 8E 83         [24] 2661 	mov	dph,r6
   2A39 12 33 EF      [24] 2662 	lcall	__mulint
   2A3C AE 82         [24] 2663 	mov	r6,dpl
   2A3E AF 83         [24] 2664 	mov	r7,dph
   2A40 90 FD EE      [24] 2665 	mov	dptr,#_rfTxCounter
   2A43 E0            [24] 2666 	movx	a,@dptr
   2A44 FC            [12] 2667 	mov	r4,a
   2A45 A3            [24] 2668 	inc	dptr
   2A46 E0            [24] 2669 	movx	a,@dptr
   2A47 FD            [12] 2670 	mov	r5,a
   2A48 90 FD EE      [24] 2671 	mov	dptr,#_rfTxCounter
   2A4B E0            [24] 2672 	movx	a,@dptr
   2A4C 24 01         [12] 2673 	add	a,#0x01
   2A4E F0            [24] 2674 	movx	@dptr,a
   2A4F A3            [24] 2675 	inc	dptr
   2A50 E0            [24] 2676 	movx	a,@dptr
   2A51 34 00         [12] 2677 	addc	a,#0x00
   2A53 F0            [24] 2678 	movx	@dptr,a
   2A54 EC            [12] 2679 	mov	a,r4
   2A55 2E            [12] 2680 	add	a,r6
   2A56 FE            [12] 2681 	mov	r6,a
   2A57 ED            [12] 2682 	mov	a,r5
   2A58 3F            [12] 2683 	addc	a,r7
   2A59 FF            [12] 2684 	mov	r7,a
   2A5A 90 FD 88      [24] 2685 	mov	dptr,#_rftxbuf
   2A5D E0            [24] 2686 	movx	a,@dptr
   2A5E FC            [12] 2687 	mov	r4,a
   2A5F A3            [24] 2688 	inc	dptr
   2A60 E0            [24] 2689 	movx	a,@dptr
   2A61 FD            [12] 2690 	mov	r5,a
   2A62 EE            [12] 2691 	mov	a,r6
   2A63 2C            [12] 2692 	add	a,r4
   2A64 F5 82         [12] 2693 	mov	dpl,a
   2A66 EF            [12] 2694 	mov	a,r7
   2A67 3D            [12] 2695 	addc	a,r5
   2A68 F5 83         [12] 2696 	mov	dph,a
   2A6A E0            [24] 2697 	movx	a,@dptr
   2A6B F5 D9         [12] 2698 	mov	_RFD,a
                           2699 ;	cc1111rf.c:615: txTotal++;
   2A6D 90 FD 8A      [24] 2700 	mov	dptr,#_txTotal
   2A70 E0            [24] 2701 	movx	a,@dptr
   2A71 24 01         [12] 2702 	add	a,#0x01
   2A73 F0            [24] 2703 	movx	@dptr,a
   2A74 A3            [24] 2704 	inc	dptr
   2A75 E0            [24] 2705 	movx	a,@dptr
   2A76 34 00         [12] 2706 	addc	a,#0x00
   2A78 F0            [24] 2707 	movx	@dptr,a
   2A79                    2708 00132$:
   2A79 D0 D0         [24] 2709 	pop	psw
   2A7B D0 00         [24] 2710 	pop	(0+0)
   2A7D D0 01         [24] 2711 	pop	(0+1)
   2A7F D0 02         [24] 2712 	pop	(0+2)
   2A81 D0 03         [24] 2713 	pop	(0+3)
   2A83 D0 04         [24] 2714 	pop	(0+4)
   2A85 D0 05         [24] 2715 	pop	(0+5)
   2A87 D0 06         [24] 2716 	pop	(0+6)
   2A89 D0 07         [24] 2717 	pop	(0+7)
   2A8B D0 83         [24] 2718 	pop	dph
   2A8D D0 82         [24] 2719 	pop	dpl
   2A8F D0 F0         [24] 2720 	pop	b
   2A91 D0 E0         [24] 2721 	pop	acc
   2A93 D0 21         [24] 2722 	pop	bits
   2A95 32            [24] 2723 	reti
                           2724 ;------------------------------------------------------------
                           2725 ;Allocation info for local variables in function 'rfIntHandler'
                           2726 ;------------------------------------------------------------
                           2727 ;encoffset                 Allocated with name '_rfIntHandler_encoffset_1_136'
                           2728 ;------------------------------------------------------------
                           2729 ;	cc1111rf.c:619: void rfIntHandler(void) __interrupt RF_VECTOR  // interrupt handler should trigger on rf events
                           2730 ;	-----------------------------------------
                           2731 ;	 function rfIntHandler
                           2732 ;	-----------------------------------------
   2A96                    2733 _rfIntHandler:
   2A96 C0 21         [24] 2734 	push	bits
   2A98 C0 E0         [24] 2735 	push	acc
   2A9A C0 F0         [24] 2736 	push	b
   2A9C C0 82         [24] 2737 	push	dpl
   2A9E C0 83         [24] 2738 	push	dph
   2AA0 C0 07         [24] 2739 	push	(0+7)
   2AA2 C0 06         [24] 2740 	push	(0+6)
   2AA4 C0 05         [24] 2741 	push	(0+5)
   2AA6 C0 04         [24] 2742 	push	(0+4)
   2AA8 C0 03         [24] 2743 	push	(0+3)
   2AAA C0 02         [24] 2744 	push	(0+2)
   2AAC C0 01         [24] 2745 	push	(0+1)
   2AAE C0 00         [24] 2746 	push	(0+0)
   2AB0 C0 D0         [24] 2747 	push	psw
   2AB2 75 D0 00      [24] 2748 	mov	psw,#0x00
                           2749 ;	cc1111rf.c:621: u8 encoffset= 0;
   2AB5 75 12 00      [24] 2750 	mov	_rfIntHandler_encoffset_1_136,#0x00
                           2751 ;	cc1111rf.c:624: lastCode[0] = LC_RF_VECTOR;
   2AB8 90 FD B5      [24] 2752 	mov	dptr,#_lastCode
   2ABB 74 10         [12] 2753 	mov	a,#0x10
   2ABD F0            [24] 2754 	movx	@dptr,a
                           2755 ;	cc1111rf.c:625: S1CON &= ~(S1CON_RFIF_0 | S1CON_RFIF_1);
   2ABE AE 9B         [24] 2756 	mov	r6,_S1CON
   2AC0 74 FC         [12] 2757 	mov	a,#0xFC
   2AC2 5E            [12] 2758 	anl	a,r6
   2AC3 F5 9B         [12] 2759 	mov	_S1CON,a
                           2760 ;	cc1111rf.c:628: rfif |= RFIF;
   2AC5 E5 E9         [12] 2761 	mov	a,_RFIF
   2AC7 42 0F         [12] 2762 	orl	_rfif,a
                           2763 ;	cc1111rf.c:630: if (RFIF & RFIF_IRQ_SFD)
   2AC9 E5 E9         [12] 2764 	mov	a,_RFIF
   2ACB 30 E0 20      [24] 2765 	jnb	acc.0,00102$
                           2766 ;	cc1111rf.c:634: rf_tLastRecv = T2CT | (rf_MAC_timer << 8);
   2ACE 90 FD 8D      [24] 2767 	mov	dptr,#_rf_MAC_timer
   2AD1 E0            [24] 2768 	movx	a,@dptr
   2AD2 FD            [12] 2769 	mov	r5,a
   2AD3 A3            [24] 2770 	inc	dptr
   2AD4 E0            [24] 2771 	movx	a,@dptr
   2AD5 8D 06         [24] 2772 	mov	ar6,r5
   2AD7 7D 00         [12] 2773 	mov	r5,#0x00
   2AD9 AB 9C         [24] 2774 	mov	r3,_T2CT
   2ADB 7C 00         [12] 2775 	mov	r4,#0x00
   2ADD 90 FD 8F      [24] 2776 	mov	dptr,#_rf_tLastRecv
   2AE0 ED            [12] 2777 	mov	a,r5
   2AE1 4B            [12] 2778 	orl	a,r3
   2AE2 F0            [24] 2779 	movx	@dptr,a
   2AE3 EE            [12] 2780 	mov	a,r6
   2AE4 4C            [12] 2781 	orl	a,r4
   2AE5 A3            [24] 2782 	inc	dptr
   2AE6 F0            [24] 2783 	movx	@dptr,a
                           2784 ;	cc1111rf.c:635: RFIF &= ~RFIF_IRQ_SFD;
   2AE7 AE E9         [24] 2785 	mov	r6,_RFIF
   2AE9 74 FE         [12] 2786 	mov	a,#0xFE
   2AEB 5E            [12] 2787 	anl	a,r6
   2AEC F5 E9         [12] 2788 	mov	_RFIF,a
   2AEE                    2789 00102$:
                           2790 ;	cc1111rf.c:640: if (RFIF & ( RFIF_IRQ_DONE | RFIF_IRQ_RXOVF | RFIF_IRQ_TIMEOUT ))
   2AEE E5 E9         [12] 2791 	mov	a,_RFIF
   2AF0 54 70         [12] 2792 	anl	a,#0x70
   2AF2 70 03         [24] 2793 	jnz	00152$
   2AF4 02 2C 93      [24] 2794 	ljmp	00117$
   2AF7                    2795 00152$:
                           2796 ;	cc1111rf.c:643: if(rf_status == RFST_STX)
   2AF7 90 FD 8C      [24] 2797 	mov	dptr,#_rf_status
   2AFA E0            [24] 2798 	movx	a,@dptr
   2AFB FE            [12] 2799 	mov	r6,a
   2AFC BE 03 0A      [24] 2800 	cjne	r6,#0x03,00114$
                           2801 ;	cc1111rf.c:649: rfif &= ~( RFIF_IRQ_DONE | RFIF_IRQ_RXOVF | RFIF_IRQ_TIMEOUT );
   2AFF AE 0F         [24] 2802 	mov	r6,_rfif
   2B01 74 8F         [12] 2803 	mov	a,#0x8F
   2B03 5E            [12] 2804 	anl	a,r6
   2B04 F5 0F         [12] 2805 	mov	_rfif,a
   2B06 02 2C 8C      [24] 2806 	ljmp	00115$
   2B09                    2807 00114$:
                           2808 ;	cc1111rf.c:655: if(rfRxProcessed[!rfRxCurrentBuffer] == RX_PROCESSED)
   2B09 90 F9 81      [24] 2809 	mov	dptr,#_rfRxCurrentBuffer
   2B0C E0            [24] 2810 	movx	a,@dptr
   2B0D FE            [12] 2811 	mov	r6,a
   2B0E B4 01 00      [24] 2812 	cjne	a,#0x01,00155$
   2B11                    2813 00155$:
   2B11 E4            [12] 2814 	clr	a
   2B12 33            [12] 2815 	rlc	a
   2B13 24 86         [12] 2816 	add	a,#_rfRxProcessed
   2B15 F5 82         [12] 2817 	mov	dpl,a
   2B17 E4            [12] 2818 	clr	a
   2B18 34 FD         [12] 2819 	addc	a,#(_rfRxProcessed >> 8)
   2B1A F5 83         [12] 2820 	mov	dph,a
   2B1C E0            [24] 2821 	movx	a,@dptr
   2B1D FE            [12] 2822 	mov	r6,a
   2B1E BE 01 02      [24] 2823 	cjne	r6,#0x01,00156$
   2B21 80 03         [24] 2824 	sjmp	00157$
   2B23                    2825 00156$:
   2B23 02 2C 5E      [24] 2826 	ljmp	00111$
   2B26                    2827 00157$:
                           2828 ;	cc1111rf.c:660: if(rfAESMode & AES_CRYPTO_IN_ENABLE)
   2B26 90 FD FB      [24] 2829 	mov	dptr,#_rfAESMode
   2B29 E0            [24] 2830 	movx	a,@dptr
   2B2A FE            [12] 2831 	mov	r6,a
   2B2B 20 E1 03      [24] 2832 	jb	acc.1,00158$
   2B2E 02 2C 34      [24] 2833 	ljmp	00109$
   2B31                    2834 00158$:
                           2835 ;	cc1111rf.c:662: if((PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG) == PKTCTRL0_LENGTH_CONFIG_VAR)
   2B31 90 DF 04      [24] 2836 	mov	dptr,#_PKTCTRL0
   2B34 E0            [24] 2837 	movx	a,@dptr
   2B35 FE            [12] 2838 	mov	r6,a
   2B36 53 06 03      [24] 2839 	anl	ar6,#0x03
   2B39 BE 01 03      [24] 2840 	cjne	r6,#0x01,00104$
                           2841 ;	cc1111rf.c:663: encoffset= 1;
   2B3C 75 12 01      [24] 2842 	mov	_rfIntHandler_encoffset_1_136,#0x01
   2B3F                    2843 00104$:
                           2844 ;	cc1111rf.c:664: if((rfAESMode & AES_CRYPTO_IN_TYPE) == AES_CRYPTO_IN_ENCRYPT)
   2B3F 90 FD FB      [24] 2845 	mov	dptr,#_rfAESMode
   2B42 E0            [24] 2846 	movx	a,@dptr
   2B43 FE            [12] 2847 	mov	r6,a
   2B44 53 06 01      [24] 2848 	anl	ar6,#0x01
   2B47 BE 01 76      [24] 2849 	cjne	r6,#0x01,00106$
                           2850 ;	cc1111rf.c:665: encAES(&rfrxbuf[rfRxCurrentBuffer][encoffset], &rfrxbuf[rfRxCurrentBuffer][encoffset], rfRxCounter[rfRxCurrentBuffer] - encoffset, (rfAESMode & AES_CRYPTO_MODE));
   2B4A 90 F9 81      [24] 2851 	mov	dptr,#_rfRxCurrentBuffer
   2B4D E0            [24] 2852 	movx	a,@dptr
   2B4E 25 E0         [12] 2853 	add	a,acc
   2B50 FD            [12] 2854 	mov	r5,a
   2B51 E4            [12] 2855 	clr	a
   2B52 24 82         [12] 2856 	add	a,#_rfrxbuf
   2B54 FE            [12] 2857 	mov	r6,a
   2B55 ED            [12] 2858 	mov	a,r5
   2B56 34 F9         [12] 2859 	addc	a,#(_rfrxbuf >> 8)
   2B58 FD            [12] 2860 	mov	r5,a
   2B59 AB 12         [24] 2861 	mov	r3,_rfIntHandler_encoffset_1_136
   2B5B 7C 00         [12] 2862 	mov	r4,#0x00
   2B5D EB            [12] 2863 	mov	a,r3
   2B5E 2E            [12] 2864 	add	a,r6
   2B5F FE            [12] 2865 	mov	r6,a
   2B60 EC            [12] 2866 	mov	a,r4
   2B61 3D            [12] 2867 	addc	a,r5
   2B62 FD            [12] 2868 	mov	r5,a
   2B63 90 F9 81      [24] 2869 	mov	dptr,#_rfRxCurrentBuffer
   2B66 E0            [24] 2870 	movx	a,@dptr
   2B67 F9            [12] 2871 	mov	r1,a
   2B68 29            [12] 2872 	add	a,r1
   2B69 FA            [12] 2873 	mov	r2,a
   2B6A E4            [12] 2874 	clr	a
   2B6B 24 82         [12] 2875 	add	a,#_rfrxbuf
   2B6D F9            [12] 2876 	mov	r1,a
   2B6E EA            [12] 2877 	mov	a,r2
   2B6F 34 F9         [12] 2878 	addc	a,#(_rfrxbuf >> 8)
   2B71 FA            [12] 2879 	mov	r2,a
   2B72 EB            [12] 2880 	mov	a,r3
   2B73 29            [12] 2881 	add	a,r1
   2B74 FB            [12] 2882 	mov	r3,a
   2B75 EC            [12] 2883 	mov	a,r4
   2B76 3A            [12] 2884 	addc	a,r2
   2B77 FC            [12] 2885 	mov	r4,a
   2B78 90 F9 81      [24] 2886 	mov	dptr,#_rfRxCurrentBuffer
   2B7B E0            [24] 2887 	movx	a,@dptr
   2B7C 75 F0 02      [24] 2888 	mov	b,#0x02
   2B7F A4            [48] 2889 	mul	ab
   2B80 24 82         [12] 2890 	add	a,#_rfRxCounter
   2B82 F5 82         [12] 2891 	mov	dpl,a
   2B84 74 FD         [12] 2892 	mov	a,#(_rfRxCounter >> 8)
   2B86 35 F0         [12] 2893 	addc	a,b
   2B88 F5 83         [12] 2894 	mov	dph,a
   2B8A E0            [24] 2895 	movx	a,@dptr
   2B8B F9            [12] 2896 	mov	r1,a
   2B8C A3            [24] 2897 	inc	dptr
   2B8D E0            [24] 2898 	movx	a,@dptr
   2B8E FA            [12] 2899 	mov	r2,a
   2B8F A8 12         [24] 2900 	mov	r0,_rfIntHandler_encoffset_1_136
   2B91 7F 00         [12] 2901 	mov	r7,#0x00
   2B93 E9            [12] 2902 	mov	a,r1
   2B94 C3            [12] 2903 	clr	c
   2B95 98            [12] 2904 	subb	a,r0
   2B96 F9            [12] 2905 	mov	r1,a
   2B97 EA            [12] 2906 	mov	a,r2
   2B98 9F            [12] 2907 	subb	a,r7
   2B99 FA            [12] 2908 	mov	r2,a
   2B9A 90 FD FB      [24] 2909 	mov	dptr,#_rfAESMode
   2B9D E0            [24] 2910 	movx	a,@dptr
   2B9E FF            [12] 2911 	mov	r7,a
   2B9F 53 07 F0      [24] 2912 	anl	ar7,#0xF0
   2BA2 90 FD D1      [24] 2913 	mov	dptr,#_encAES_PARM_2
   2BA5 EB            [12] 2914 	mov	a,r3
   2BA6 F0            [24] 2915 	movx	@dptr,a
   2BA7 EC            [12] 2916 	mov	a,r4
   2BA8 A3            [24] 2917 	inc	dptr
   2BA9 F0            [24] 2918 	movx	@dptr,a
   2BAA 90 FD D3      [24] 2919 	mov	dptr,#_encAES_PARM_3
   2BAD E9            [12] 2920 	mov	a,r1
   2BAE F0            [24] 2921 	movx	@dptr,a
   2BAF EA            [12] 2922 	mov	a,r2
   2BB0 A3            [24] 2923 	inc	dptr
   2BB1 F0            [24] 2924 	movx	@dptr,a
   2BB2 90 FD D5      [24] 2925 	mov	dptr,#_encAES_PARM_4
   2BB5 EF            [12] 2926 	mov	a,r7
   2BB6 F0            [24] 2927 	movx	@dptr,a
   2BB7 8E 82         [24] 2928 	mov	dpl,r6
   2BB9 8D 83         [24] 2929 	mov	dph,r5
   2BBB 12 30 8B      [24] 2930 	lcall	_encAES
   2BBE 80 74         [24] 2931 	sjmp	00109$
   2BC0                    2932 00106$:
                           2933 ;	cc1111rf.c:667: decAES(&rfrxbuf[rfRxCurrentBuffer][encoffset], &rfrxbuf[rfRxCurrentBuffer][encoffset], rfRxCounter[rfRxCurrentBuffer] - encoffset, (rfAESMode & AES_CRYPTO_MODE));
   2BC0 90 F9 81      [24] 2934 	mov	dptr,#_rfRxCurrentBuffer
   2BC3 E0            [24] 2935 	movx	a,@dptr
   2BC4 25 E0         [12] 2936 	add	a,acc
   2BC6 FE            [12] 2937 	mov	r6,a
   2BC7 E4            [12] 2938 	clr	a
   2BC8 24 82         [12] 2939 	add	a,#_rfrxbuf
   2BCA FF            [12] 2940 	mov	r7,a
   2BCB EE            [12] 2941 	mov	a,r6
   2BCC 34 F9         [12] 2942 	addc	a,#(_rfrxbuf >> 8)
   2BCE FE            [12] 2943 	mov	r6,a
   2BCF AC 12         [24] 2944 	mov	r4,_rfIntHandler_encoffset_1_136
   2BD1 7D 00         [12] 2945 	mov	r5,#0x00
   2BD3 EC            [12] 2946 	mov	a,r4
   2BD4 2F            [12] 2947 	add	a,r7
   2BD5 FF            [12] 2948 	mov	r7,a
   2BD6 ED            [12] 2949 	mov	a,r5
   2BD7 3E            [12] 2950 	addc	a,r6
   2BD8 FE            [12] 2951 	mov	r6,a
   2BD9 90 F9 81      [24] 2952 	mov	dptr,#_rfRxCurrentBuffer
   2BDC E0            [24] 2953 	movx	a,@dptr
   2BDD 25 E0         [12] 2954 	add	a,acc
   2BDF FA            [12] 2955 	mov	r2,a
   2BE0 E4            [12] 2956 	clr	a
   2BE1 24 82         [12] 2957 	add	a,#_rfrxbuf
   2BE3 FB            [12] 2958 	mov	r3,a
   2BE4 EA            [12] 2959 	mov	a,r2
   2BE5 34 F9         [12] 2960 	addc	a,#(_rfrxbuf >> 8)
   2BE7 FA            [12] 2961 	mov	r2,a
   2BE8 EC            [12] 2962 	mov	a,r4
   2BE9 2B            [12] 2963 	add	a,r3
   2BEA FC            [12] 2964 	mov	r4,a
   2BEB ED            [12] 2965 	mov	a,r5
   2BEC 3A            [12] 2966 	addc	a,r2
   2BED FD            [12] 2967 	mov	r5,a
   2BEE 90 F9 81      [24] 2968 	mov	dptr,#_rfRxCurrentBuffer
   2BF1 E0            [24] 2969 	movx	a,@dptr
   2BF2 75 F0 02      [24] 2970 	mov	b,#0x02
   2BF5 A4            [48] 2971 	mul	ab
   2BF6 24 82         [12] 2972 	add	a,#_rfRxCounter
   2BF8 F5 82         [12] 2973 	mov	dpl,a
   2BFA 74 FD         [12] 2974 	mov	a,#(_rfRxCounter >> 8)
   2BFC 35 F0         [12] 2975 	addc	a,b
   2BFE F5 83         [12] 2976 	mov	dph,a
   2C00 E0            [24] 2977 	movx	a,@dptr
   2C01 FA            [12] 2978 	mov	r2,a
   2C02 A3            [24] 2979 	inc	dptr
   2C03 E0            [24] 2980 	movx	a,@dptr
   2C04 FB            [12] 2981 	mov	r3,a
   2C05 A8 12         [24] 2982 	mov	r0,_rfIntHandler_encoffset_1_136
   2C07 79 00         [12] 2983 	mov	r1,#0x00
   2C09 EA            [12] 2984 	mov	a,r2
   2C0A C3            [12] 2985 	clr	c
   2C0B 98            [12] 2986 	subb	a,r0
   2C0C FA            [12] 2987 	mov	r2,a
   2C0D EB            [12] 2988 	mov	a,r3
   2C0E 99            [12] 2989 	subb	a,r1
   2C0F FB            [12] 2990 	mov	r3,a
   2C10 90 FD FB      [24] 2991 	mov	dptr,#_rfAESMode
   2C13 E0            [24] 2992 	movx	a,@dptr
   2C14 F9            [12] 2993 	mov	r1,a
   2C15 53 01 F0      [24] 2994 	anl	ar1,#0xF0
   2C18 90 FD D8      [24] 2995 	mov	dptr,#_decAES_PARM_2
   2C1B EC            [12] 2996 	mov	a,r4
   2C1C F0            [24] 2997 	movx	@dptr,a
   2C1D ED            [12] 2998 	mov	a,r5
   2C1E A3            [24] 2999 	inc	dptr
   2C1F F0            [24] 3000 	movx	@dptr,a
   2C20 90 FD DA      [24] 3001 	mov	dptr,#_decAES_PARM_3
   2C23 EA            [12] 3002 	mov	a,r2
   2C24 F0            [24] 3003 	movx	@dptr,a
   2C25 EB            [12] 3004 	mov	a,r3
   2C26 A3            [24] 3005 	inc	dptr
   2C27 F0            [24] 3006 	movx	@dptr,a
   2C28 90 FD DC      [24] 3007 	mov	dptr,#_decAES_PARM_4
   2C2B E9            [12] 3008 	mov	a,r1
   2C2C F0            [24] 3009 	movx	@dptr,a
   2C2D 8F 82         [24] 3010 	mov	dpl,r7
   2C2F 8E 83         [24] 3011 	mov	dph,r6
   2C31 12 30 D4      [24] 3012 	lcall	_decAES
   2C34                    3013 00109$:
                           3014 ;	cc1111rf.c:671: rfRxCurrentBuffer ^= 1;
   2C34 90 F9 81      [24] 3015 	mov	dptr,#_rfRxCurrentBuffer
   2C37 E0            [24] 3016 	movx	a,@dptr
   2C38 64 01         [12] 3017 	xrl	a,#0x01
   2C3A F0            [24] 3018 	movx	@dptr,a
                           3019 ;	cc1111rf.c:672: rfRxCounter[rfRxCurrentBuffer] = 0;
   2C3B 90 F9 81      [24] 3020 	mov	dptr,#_rfRxCurrentBuffer
   2C3E E0            [24] 3021 	movx	a,@dptr
   2C3F FF            [12] 3022 	mov	r7,a
   2C40 75 F0 02      [24] 3023 	mov	b,#0x02
   2C43 A4            [48] 3024 	mul	ab
   2C44 24 82         [12] 3025 	add	a,#_rfRxCounter
   2C46 F5 82         [12] 3026 	mov	dpl,a
   2C48 74 FD         [12] 3027 	mov	a,#(_rfRxCounter >> 8)
   2C4A 35 F0         [12] 3028 	addc	a,b
   2C4C F5 83         [12] 3029 	mov	dph,a
   2C4E E4            [12] 3030 	clr	a
   2C4F F0            [24] 3031 	movx	@dptr,a
   2C50 E4            [12] 3032 	clr	a
   2C51 A3            [24] 3033 	inc	dptr
   2C52 F0            [24] 3034 	movx	@dptr,a
                           3035 ;	cc1111rf.c:674: rfRxProcessed[FIRST_BUFFER] = RX_UNPROCESSED;
   2C53 90 FD 86      [24] 3036 	mov	dptr,#_rfRxProcessed
                           3037 ;	cc1111rf.c:675: rfRxProcessed[SECOND_BUFFER] = RX_UNPROCESSED;
   2C56 E4            [12] 3038 	clr	a
   2C57 F0            [24] 3039 	movx	@dptr,a
   2C58 90 FD 87      [24] 3040 	mov	dptr,#(_rfRxProcessed + 0x0001)
   2C5B F0            [24] 3041 	movx	@dptr,a
   2C5C 80 2C         [24] 3042 	sjmp	00112$
   2C5E                    3043 00111$:
                           3044 ;	cc1111rf.c:692: lastCode[1] = LCE_DROPPED_PACKET;
   2C5E 90 FD B6      [24] 3045 	mov	dptr,#(_lastCode + 0x0001)
   2C61 74 12         [12] 3046 	mov	a,#0x12
   2C63 F0            [24] 3047 	movx	@dptr,a
                           3048 ;	cc1111rf.c:693: LED = !LED;
   2C64 A2 A4         [12] 3049 	mov	c,_P2_4
   2C66 B3            [12] 3050 	cpl	c
   2C67 92 02         [24] 3051 	mov  _rfIntHandler_sloc0_1_0,c
   2C69 92 A4         [24] 3052 	mov	_P2_4,c
                           3053 ;	cc1111rf.c:694: rfRxCounter[rfRxCurrentBuffer] = 0;
   2C6B 90 F9 81      [24] 3054 	mov	dptr,#_rfRxCurrentBuffer
   2C6E E0            [24] 3055 	movx	a,@dptr
   2C6F FF            [12] 3056 	mov	r7,a
   2C70 75 F0 02      [24] 3057 	mov	b,#0x02
   2C73 A4            [48] 3058 	mul	ab
   2C74 24 82         [12] 3059 	add	a,#_rfRxCounter
   2C76 F5 82         [12] 3060 	mov	dpl,a
   2C78 74 FD         [12] 3061 	mov	a,#(_rfRxCounter >> 8)
   2C7A 35 F0         [12] 3062 	addc	a,b
   2C7C F5 83         [12] 3063 	mov	dph,a
   2C7E E4            [12] 3064 	clr	a
   2C7F F0            [24] 3065 	movx	@dptr,a
   2C80 E4            [12] 3066 	clr	a
   2C81 A3            [24] 3067 	inc	dptr
   2C82 F0            [24] 3068 	movx	@dptr,a
                           3069 ;	cc1111rf.c:695: LED = !LED;
   2C83 A2 A4         [12] 3070 	mov	c,_P2_4
   2C85 B3            [12] 3071 	cpl	c
   2C86 92 02         [24] 3072 	mov  _rfIntHandler_sloc0_1_0,c
   2C88 92 A4         [24] 3073 	mov	_P2_4,c
   2C8A                    3074 00112$:
                           3075 ;	cc1111rf.c:698: LED = 0;
   2C8A C2 A4         [12] 3076 	clr	_P2_4
   2C8C                    3077 00115$:
                           3078 ;	cc1111rf.c:700: RFIF &= ~(RFIF_IRQ_DONE | RFIF_IRQ_TIMEOUT);        // OVF needs to be handled next...
   2C8C AF E9         [24] 3079 	mov	r7,_RFIF
   2C8E 74 CF         [12] 3080 	mov	a,#0xCF
   2C90 5F            [12] 3081 	anl	a,r7
   2C91 F5 E9         [12] 3082 	mov	_RFIF,a
   2C93                    3083 00117$:
                           3084 ;	cc1111rf.c:704: if(RFIF & RFIF_IRQ_RXOVF)
   2C93 E5 E9         [12] 3085 	mov	a,_RFIF
   2C95 30 E6 1E      [24] 3086 	jnb	acc.6,00119$
                           3087 ;	cc1111rf.c:709: lastCode[1] = LCE_RF_RXOVF;
   2C98 90 FD B6      [24] 3088 	mov	dptr,#(_lastCode + 0x0001)
   2C9B 74 10         [12] 3089 	mov	a,#0x10
   2C9D F0            [24] 3090 	movx	@dptr,a
                           3091 ;	cc1111rf.c:710: LED = !LED;
   2C9E A2 A4         [12] 3092 	mov	c,_P2_4
   2CA0 B3            [12] 3093 	cpl	c
   2CA1 92 02         [24] 3094 	mov  _rfIntHandler_sloc0_1_0,c
   2CA3 92 A4         [24] 3095 	mov	_P2_4,c
                           3096 ;	cc1111rf.c:712: resetRFSTATE();
   2CA5 12 22 D1      [24] 3097 	lcall	_resetRFSTATE
                           3098 ;	cc1111rf.c:714: LED = !LED;
   2CA8 A2 A4         [12] 3099 	mov	c,_P2_4
   2CAA B3            [12] 3100 	cpl	c
   2CAB 92 02         [24] 3101 	mov  _rfIntHandler_sloc0_1_0,c
   2CAD 92 A4         [24] 3102 	mov	_P2_4,c
                           3103 ;	cc1111rf.c:715: RFIF &= ~RFIF_IRQ_RXOVF;
   2CAF AF E9         [24] 3104 	mov	r7,_RFIF
   2CB1 74 BF         [12] 3105 	mov	a,#0xBF
   2CB3 5F            [12] 3106 	anl	a,r7
   2CB4 F5 E9         [12] 3107 	mov	_RFIF,a
   2CB6                    3108 00119$:
                           3109 ;	cc1111rf.c:718: if(RFIF & RFIF_IRQ_TXUNF)
   2CB6 E5 E9         [12] 3110 	mov	a,_RFIF
   2CB8 30 E7 1E      [24] 3111 	jnb	acc.7,00122$
                           3112 ;	cc1111rf.c:721: lastCode[1] = LCE_RF_TXUNF;
   2CBB 90 FD B6      [24] 3113 	mov	dptr,#(_lastCode + 0x0001)
   2CBE 74 11         [12] 3114 	mov	a,#0x11
   2CC0 F0            [24] 3115 	movx	@dptr,a
                           3116 ;	cc1111rf.c:722: LED = !LED;
   2CC1 A2 A4         [12] 3117 	mov	c,_P2_4
   2CC3 B3            [12] 3118 	cpl	c
   2CC4 92 02         [24] 3119 	mov  _rfIntHandler_sloc0_1_0,c
   2CC6 92 A4         [24] 3120 	mov	_P2_4,c
                           3121 ;	cc1111rf.c:724: resetRFSTATE();
   2CC8 12 22 D1      [24] 3122 	lcall	_resetRFSTATE
                           3123 ;	cc1111rf.c:726: LED = !LED;
   2CCB A2 A4         [12] 3124 	mov	c,_P2_4
   2CCD B3            [12] 3125 	cpl	c
   2CCE 92 02         [24] 3126 	mov  _rfIntHandler_sloc0_1_0,c
   2CD0 92 A4         [24] 3127 	mov	_P2_4,c
                           3128 ;	cc1111rf.c:728: RFIF &= ~RFIF_IRQ_TXUNF;
   2CD2 AF E9         [24] 3129 	mov	r7,_RFIF
   2CD4 74 7F         [12] 3130 	mov	a,#0x7F
   2CD6 5F            [12] 3131 	anl	a,r7
   2CD7 F5 E9         [12] 3132 	mov	_RFIF,a
   2CD9                    3133 00122$:
   2CD9 D0 D0         [24] 3134 	pop	psw
   2CDB D0 00         [24] 3135 	pop	(0+0)
   2CDD D0 01         [24] 3136 	pop	(0+1)
   2CDF D0 02         [24] 3137 	pop	(0+2)
   2CE1 D0 03         [24] 3138 	pop	(0+3)
   2CE3 D0 04         [24] 3139 	pop	(0+4)
   2CE5 D0 05         [24] 3140 	pop	(0+5)
   2CE7 D0 06         [24] 3141 	pop	(0+6)
   2CE9 D0 07         [24] 3142 	pop	(0+7)
   2CEB D0 83         [24] 3143 	pop	dph
   2CED D0 82         [24] 3144 	pop	dpl
   2CEF D0 F0         [24] 3145 	pop	b
   2CF1 D0 E0         [24] 3146 	pop	acc
   2CF3 D0 21         [24] 3147 	pop	bits
   2CF5 32            [24] 3148 	reti
                           3149 ;------------------------------------------------------------
                           3150 ;Allocation info for local variables in function 'byte_shuffle'
                           3151 ;------------------------------------------------------------
                           3152 ;len                       Allocated with name '_byte_shuffle_PARM_2'
                           3153 ;offset                    Allocated with name '_byte_shuffle_PARM_3'
                           3154 ;buf                       Allocated with name '_byte_shuffle_buf_1_146'
                           3155 ;------------------------------------------------------------
                           3156 ;	cc1111rf.c:733: void byte_shuffle(__xdata u8* __xdata buf, __xdata u16 len, __xdata u16 offset)
                           3157 ;	-----------------------------------------
                           3158 ;	 function byte_shuffle
                           3159 ;	-----------------------------------------
   2CF6                    3160 _byte_shuffle:
   2CF6 AF 83         [24] 3161 	mov	r7,dph
   2CF8 E5 82         [12] 3162 	mov	a,dpl
   2CFA 90 FD B3      [24] 3163 	mov	dptr,#_byte_shuffle_buf_1_146
   2CFD F0            [24] 3164 	movx	@dptr,a
   2CFE EF            [12] 3165 	mov	a,r7
   2CFF A3            [24] 3166 	inc	dptr
   2D00 F0            [24] 3167 	movx	@dptr,a
                           3168 ;	cc1111rf.c:735: while(len--)
   2D01 90 FD B1      [24] 3169 	mov	dptr,#_byte_shuffle_PARM_3
   2D04 E0            [24] 3170 	movx	a,@dptr
   2D05 FE            [12] 3171 	mov	r6,a
   2D06 A3            [24] 3172 	inc	dptr
   2D07 E0            [24] 3173 	movx	a,@dptr
   2D08 FF            [12] 3174 	mov	r7,a
   2D09 90 FD B3      [24] 3175 	mov	dptr,#_byte_shuffle_buf_1_146
   2D0C E0            [24] 3176 	movx	a,@dptr
   2D0D FC            [12] 3177 	mov	r4,a
   2D0E A3            [24] 3178 	inc	dptr
   2D0F E0            [24] 3179 	movx	a,@dptr
   2D10 FD            [12] 3180 	mov	r5,a
   2D11 90 FD AF      [24] 3181 	mov	dptr,#_byte_shuffle_PARM_2
   2D14 E0            [24] 3182 	movx	a,@dptr
   2D15 FA            [12] 3183 	mov	r2,a
   2D16 A3            [24] 3184 	inc	dptr
   2D17 E0            [24] 3185 	movx	a,@dptr
   2D18 FB            [12] 3186 	mov	r3,a
   2D19                    3187 00101$:
   2D19 8A 00         [24] 3188 	mov	ar0,r2
   2D1B 8B 01         [24] 3189 	mov	ar1,r3
   2D1D 1A            [12] 3190 	dec	r2
   2D1E BA FF 01      [24] 3191 	cjne	r2,#0xFF,00113$
   2D21 1B            [12] 3192 	dec	r3
   2D22                    3193 00113$:
   2D22 E8            [12] 3194 	mov	a,r0
   2D23 49            [12] 3195 	orl	a,r1
   2D24 60 24         [24] 3196 	jz	00104$
                           3197 ;	cc1111rf.c:736: buf[len + offset] = buf[len];
   2D26 EE            [12] 3198 	mov	a,r6
   2D27 2A            [12] 3199 	add	a,r2
   2D28 F8            [12] 3200 	mov	r0,a
   2D29 EF            [12] 3201 	mov	a,r7
   2D2A 3B            [12] 3202 	addc	a,r3
   2D2B F9            [12] 3203 	mov	r1,a
   2D2C E8            [12] 3204 	mov	a,r0
   2D2D 2C            [12] 3205 	add	a,r4
   2D2E F8            [12] 3206 	mov	r0,a
   2D2F E9            [12] 3207 	mov	a,r1
   2D30 3D            [12] 3208 	addc	a,r5
   2D31 F9            [12] 3209 	mov	r1,a
   2D32 EA            [12] 3210 	mov	a,r2
   2D33 2C            [12] 3211 	add	a,r4
   2D34 F5 82         [12] 3212 	mov	dpl,a
   2D36 EB            [12] 3213 	mov	a,r3
   2D37 3D            [12] 3214 	addc	a,r5
   2D38 F5 83         [12] 3215 	mov	dph,a
   2D3A C0 06         [24] 3216 	push	ar6
   2D3C C0 07         [24] 3217 	push	ar7
   2D3E E0            [24] 3218 	movx	a,@dptr
   2D3F 88 82         [24] 3219 	mov	dpl,r0
   2D41 89 83         [24] 3220 	mov	dph,r1
   2D43 F0            [24] 3221 	movx	@dptr,a
   2D44 D0 07         [24] 3222 	pop	ar7
   2D46 D0 06         [24] 3223 	pop	ar6
   2D48 80 CF         [24] 3224 	sjmp	00101$
   2D4A                    3225 00104$:
   2D4A 22            [24] 3226 	ret
                           3227 	.area CSEG    (CODE)
                           3228 	.area CONST   (CODE)
                           3229 	.area XINIT   (CODE)
   37A4                    3230 __xinit__rfRxInfMode:
   37A4 00                 3231 	.db #0x00	; 0
   37A5                    3232 __xinit__rfRxTotalRXLen:
   37A5 00 00              3233 	.byte #0x00,#0x00	; 0
   37A7                    3234 __xinit__rfRxLargeLen:
   37A7 00 00              3235 	.byte #0x00,#0x00	; 0
   37A9                    3236 __xinit__rfTxCurBufIdx:
   37A9 00                 3237 	.db #0x00	; 0
   37AA                    3238 __xinit__rfTxBufCount:
   37AA 01                 3239 	.db #0x01	; 1
   37AB                    3240 __xinit__rfTxCounter:
   37AB 00 00              3241 	.byte #0x00,#0x00	; 0
   37AD                    3242 __xinit__rfTxRepeatCounter:
   37AD 00 00              3243 	.byte #0x00,#0x00	; 0
   37AF                    3244 __xinit__rfTxBufferEnd:
   37AF 00 00              3245 	.byte #0x00,#0x00	; 0
   37B1                    3246 __xinit__rfTxRepeatLen:
   37B1 00 00              3247 	.byte #0x00,#0x00	; 0
   37B3                    3248 __xinit__rfTxRepeatOffset:
   37B3 00 00              3249 	.byte #0x00,#0x00	; 0
   37B5                    3250 __xinit__rfTxTotalTXLen:
   37B5 00 00              3251 	.byte #0x00,#0x00	; 0
   37B7                    3252 __xinit__rfTxInfMode:
   37B7 00                 3253 	.db #0x00	; 0
   37B8                    3254 __xinit__rfAESMode:
   37B8 00                 3255 	.db #0x00	; 0
   37B9                    3256 __xinit__rfAmpMode:
   37B9 00                 3257 	.db #0x00	; 0
   37BA                    3258 __xinit__bRepeatMode:
   37BA 00                 3259 	.db #0x00	; 0
                           3260 	.area CABS    (ABS,CODE)

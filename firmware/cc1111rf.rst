                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.5.0 #9253 (Jun 20 2015) (MINGW32)
                                      4 ; This file was generated Wed Nov 30 16:38:11 2016
                                      5 ;--------------------------------------------------------
                                      6 	.module cc1111rf
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _RepeaterStop
                                     13 	.globl _RepeaterStart
                                     14 	.globl _setFreq
                                     15 	.globl _memset
                                     16 	.globl _decAES
                                     17 	.globl _encAES
                                     18 	.globl _padAES
                                     19 	.globl _appInitRf
                                     20 	.globl _usbProcessEvents
                                     21 	.globl _sleepMicros
                                     22 	.globl _USBIF
                                     23 	.globl _MODE
                                     24 	.globl _RE
                                     25 	.globl _SLAVE
                                     26 	.globl _FE
                                     27 	.globl _ERR
                                     28 	.globl _RX_BYTE
                                     29 	.globl _TX_BYTE
                                     30 	.globl _ACTIVE
                                     31 	.globl _B_7
                                     32 	.globl _B_6
                                     33 	.globl _B_5
                                     34 	.globl _B_4
                                     35 	.globl _B_3
                                     36 	.globl _B_2
                                     37 	.globl _B_1
                                     38 	.globl _B_0
                                     39 	.globl _WDTIF
                                     40 	.globl _P1IF
                                     41 	.globl _UTX1IF
                                     42 	.globl _UTX0IF
                                     43 	.globl _P2IF
                                     44 	.globl _ACC_7
                                     45 	.globl _ACC_6
                                     46 	.globl _ACC_5
                                     47 	.globl _ACC_4
                                     48 	.globl _ACC_3
                                     49 	.globl _ACC_2
                                     50 	.globl _ACC_1
                                     51 	.globl _ACC_0
                                     52 	.globl _OVFIM
                                     53 	.globl _T4CH1IF
                                     54 	.globl _T4CH0IF
                                     55 	.globl _T4OVFIF
                                     56 	.globl _T3CH1IF
                                     57 	.globl _T3CH0IF
                                     58 	.globl _T3OVFIF
                                     59 	.globl _CY
                                     60 	.globl _AC
                                     61 	.globl _F0
                                     62 	.globl _RS1
                                     63 	.globl _RS0
                                     64 	.globl _OV
                                     65 	.globl _F1
                                     66 	.globl _P
                                     67 	.globl _STIF
                                     68 	.globl _P0IF
                                     69 	.globl _T4IF
                                     70 	.globl _T3IF
                                     71 	.globl _T2IF
                                     72 	.globl _T1IF
                                     73 	.globl _DMAIF
                                     74 	.globl _P0IE
                                     75 	.globl _T4IE
                                     76 	.globl _T3IE
                                     77 	.globl _T2IE
                                     78 	.globl _T1IE
                                     79 	.globl _DMAIE
                                     80 	.globl _EA
                                     81 	.globl _STIE
                                     82 	.globl _ENCIE
                                     83 	.globl _URX1IE
                                     84 	.globl _URX0IE
                                     85 	.globl _ADCIE
                                     86 	.globl _RFTXRXIE
                                     87 	.globl _P2_7
                                     88 	.globl _P2_6
                                     89 	.globl _P2_5
                                     90 	.globl _P2_4
                                     91 	.globl _P2_3
                                     92 	.globl _P2_2
                                     93 	.globl _P2_1
                                     94 	.globl _P2_0
                                     95 	.globl _ENCIF_1
                                     96 	.globl _ENCIF_0
                                     97 	.globl _P1_7
                                     98 	.globl _P1_6
                                     99 	.globl _P1_5
                                    100 	.globl _P1_4
                                    101 	.globl _P1_3
                                    102 	.globl _P1_2
                                    103 	.globl _P1_1
                                    104 	.globl _P1_0
                                    105 	.globl _URX1IF
                                    106 	.globl _ADCIF
                                    107 	.globl _URX0IF
                                    108 	.globl _IT1
                                    109 	.globl _RFTXRXIF
                                    110 	.globl _IT0
                                    111 	.globl _P0_7
                                    112 	.globl _P0_6
                                    113 	.globl _P0_5
                                    114 	.globl _P0_4
                                    115 	.globl _P0_3
                                    116 	.globl _P0_2
                                    117 	.globl _P0_1
                                    118 	.globl _P0_0
                                    119 	.globl _P2DIR
                                    120 	.globl _P1DIR
                                    121 	.globl _P0DIR
                                    122 	.globl _U1GCR
                                    123 	.globl _U1UCR
                                    124 	.globl _U1BAUD
                                    125 	.globl _U1DBUF
                                    126 	.globl _U1CSR
                                    127 	.globl _P2INP
                                    128 	.globl _P1INP
                                    129 	.globl _P2SEL
                                    130 	.globl _P1SEL
                                    131 	.globl _P0SEL
                                    132 	.globl _ADCCFG
                                    133 	.globl _PERCFG
                                    134 	.globl _B
                                    135 	.globl _T4CC1
                                    136 	.globl _T4CCTL1
                                    137 	.globl _T4CC0
                                    138 	.globl _T4CCTL0
                                    139 	.globl _T4CTL
                                    140 	.globl _T4CNT
                                    141 	.globl _RFIF
                                    142 	.globl _IRCON2
                                    143 	.globl _T1CCTL2
                                    144 	.globl _T1CCTL1
                                    145 	.globl _T1CCTL0
                                    146 	.globl _T1CTL
                                    147 	.globl _T1CNTH
                                    148 	.globl _T1CNTL
                                    149 	.globl _RFST
                                    150 	.globl _ACC
                                    151 	.globl _T1CC2H
                                    152 	.globl _T1CC2L
                                    153 	.globl _T1CC1H
                                    154 	.globl _T1CC1L
                                    155 	.globl _T1CC0H
                                    156 	.globl _T1CC0L
                                    157 	.globl _RFD
                                    158 	.globl _TIMIF
                                    159 	.globl _DMAREQ
                                    160 	.globl _DMAARM
                                    161 	.globl _DMA0CFGH
                                    162 	.globl _DMA0CFGL
                                    163 	.globl _DMA1CFGH
                                    164 	.globl _DMA1CFGL
                                    165 	.globl _DMAIRQ
                                    166 	.globl _PSW
                                    167 	.globl _T3CC1
                                    168 	.globl _T3CCTL1
                                    169 	.globl _T3CC0
                                    170 	.globl _T3CCTL0
                                    171 	.globl _T3CTL
                                    172 	.globl _T3CNT
                                    173 	.globl _WDCTL
                                    174 	.globl __SFRC8
                                    175 	.globl _MEMCTR
                                    176 	.globl _CLKCON
                                    177 	.globl _U0GCR
                                    178 	.globl _U0UCR
                                    179 	.globl __SFRC3
                                    180 	.globl _U0BAUD
                                    181 	.globl _U0DBUF
                                    182 	.globl _IRCON
                                    183 	.globl __SFRBF
                                    184 	.globl _SLEEP
                                    185 	.globl _RNDH
                                    186 	.globl _RNDL
                                    187 	.globl _ADCH
                                    188 	.globl _ADCL
                                    189 	.globl _IP1
                                    190 	.globl _IEN1
                                    191 	.globl __SFRB7
                                    192 	.globl _ADCCON3
                                    193 	.globl _ADCCON2
                                    194 	.globl _ADCCON1
                                    195 	.globl _ENCCS
                                    196 	.globl _ENCDO
                                    197 	.globl _ENCDI
                                    198 	.globl __SFRB0
                                    199 	.globl _FWDATA
                                    200 	.globl _FCTL
                                    201 	.globl _FADDRH
                                    202 	.globl _FADDRL
                                    203 	.globl _FWT
                                    204 	.globl __SFRAA
                                    205 	.globl _IP0
                                    206 	.globl _IEN0
                                    207 	.globl __SFRA7
                                    208 	.globl _WORTIME1
                                    209 	.globl _WORTIME0
                                    210 	.globl _WOREVT1
                                    211 	.globl _WOREVT0
                                    212 	.globl _WORCTRL
                                    213 	.globl _WORIRQ
                                    214 	.globl _P2
                                    215 	.globl __SFR9F
                                    216 	.globl _T2CTL
                                    217 	.globl _T2PR
                                    218 	.globl _T2CT
                                    219 	.globl _S1CON
                                    220 	.globl _IEN2
                                    221 	.globl __SFR99
                                    222 	.globl _S0CON
                                    223 	.globl __SFR97
                                    224 	.globl __SFR96
                                    225 	.globl __SFR95
                                    226 	.globl __SFR94
                                    227 	.globl __XPAGE
                                    228 	.globl _MPAGE
                                    229 	.globl _DPS
                                    230 	.globl _RFIM
                                    231 	.globl _P1
                                    232 	.globl _P0INP
                                    233 	.globl __SFR8E
                                    234 	.globl _P1IEN
                                    235 	.globl _PICTL
                                    236 	.globl _P2IFG
                                    237 	.globl _P1IFG
                                    238 	.globl _P0IFG
                                    239 	.globl _TCON
                                    240 	.globl _PCON
                                    241 	.globl _U0CSR
                                    242 	.globl _DPH1
                                    243 	.globl _DPL1
                                    244 	.globl _DPH0
                                    245 	.globl _DPL0
                                    246 	.globl _SP
                                    247 	.globl _P0
                                    248 	.globl _bRepeatMode
                                    249 	.globl _rfAmpMode
                                    250 	.globl _rfAESMode
                                    251 	.globl _rfTxInfMode
                                    252 	.globl _rfTxTotalTXLen
                                    253 	.globl _rfTxRepeatOffset
                                    254 	.globl _rfTxRepeatLen
                                    255 	.globl _rfTxBufferEnd
                                    256 	.globl _rfTxRepeatCounter
                                    257 	.globl _rfTxCounter
                                    258 	.globl _rfTxBufCount
                                    259 	.globl _rfTxCurBufIdx
                                    260 	.globl _rfRxLargeLen
                                    261 	.globl _rfRxTotalRXLen
                                    262 	.globl _rfRxInfMode
                                    263 	.globl _byte_shuffle_PARM_3
                                    264 	.globl _byte_shuffle_PARM_2
                                    265 	.globl _transmit_PARM_4
                                    266 	.globl _transmit_PARM_3
                                    267 	.globl _transmit_PARM_2
                                    268 	.globl _macdata
                                    269 	.globl _rf_tLastRecv
                                    270 	.globl _rf_MAC_timer
                                    271 	.globl _rf_status
                                    272 	.globl _txTotal
                                    273 	.globl _rftxbuf
                                    274 	.globl _rfRxProcessed
                                    275 	.globl _rfRxCounter
                                    276 	.globl _rfrxbuf
                                    277 	.globl _rfRxCurrentBuffer
                                    278 	.globl _USBF5
                                    279 	.globl _USBF4
                                    280 	.globl _USBF3
                                    281 	.globl _USBF2
                                    282 	.globl _USBF1
                                    283 	.globl _USBF0
                                    284 	.globl _USBCNTH
                                    285 	.globl _USBCNTL
                                    286 	.globl _USBCNT0
                                    287 	.globl _USBCSOH
                                    288 	.globl _USBCSOL
                                    289 	.globl _USBMAXO
                                    290 	.globl _USBCSIH
                                    291 	.globl _USBCSIL
                                    292 	.globl _USBCS0
                                    293 	.globl _USBMAXI
                                    294 	.globl _USBINDEX
                                    295 	.globl _USBFRMH
                                    296 	.globl _USBFRML
                                    297 	.globl _USBCIE
                                    298 	.globl _USBOIE
                                    299 	.globl _USBIIE
                                    300 	.globl _USBCIF
                                    301 	.globl _USBOIF
                                    302 	.globl _USBIIF
                                    303 	.globl _USBPOW
                                    304 	.globl _USBADDR
                                    305 	.globl _X_P2DIR
                                    306 	.globl _X_P1DIR
                                    307 	.globl _X_P0DIR
                                    308 	.globl _X_U1GCR
                                    309 	.globl _X_U1UCR
                                    310 	.globl _X_U1BAUD
                                    311 	.globl _X_U1DBUF
                                    312 	.globl _X_U1CSR
                                    313 	.globl _X_P2INP
                                    314 	.globl _X_P1INP
                                    315 	.globl _X_P2SEL
                                    316 	.globl _X_P1SEL
                                    317 	.globl _X_P0SEL
                                    318 	.globl _X_ADCCFG
                                    319 	.globl _X_PERCFG
                                    320 	.globl __NA_B
                                    321 	.globl _X_T4CC1
                                    322 	.globl _X_T4CCTL1
                                    323 	.globl _X_T4CC0
                                    324 	.globl _X_T4CCTL0
                                    325 	.globl _X_T4CTL
                                    326 	.globl _X_T4CNT
                                    327 	.globl _X_RFIF
                                    328 	.globl __NA_IRCON2
                                    329 	.globl _X_T1CCTL2
                                    330 	.globl _X_T1CCTL1
                                    331 	.globl _X_T1CCTL0
                                    332 	.globl _X_T1CTL
                                    333 	.globl _X_T1CNTH
                                    334 	.globl _X_T1CNTL
                                    335 	.globl _X_RFST
                                    336 	.globl __NA_ACC
                                    337 	.globl _X_T1CC2H
                                    338 	.globl _X_T1CC2L
                                    339 	.globl _X_T1CC1H
                                    340 	.globl _X_T1CC1L
                                    341 	.globl _X_T1CC0H
                                    342 	.globl _X_T1CC0L
                                    343 	.globl _X_RFD
                                    344 	.globl _X_TIMIF
                                    345 	.globl _X_DMAREQ
                                    346 	.globl _X_DMAARM
                                    347 	.globl _X_DMA0CFGH
                                    348 	.globl _X_DMA0CFGL
                                    349 	.globl _X_DMA1CFGH
                                    350 	.globl _X_DMA1CFGL
                                    351 	.globl _X_DMAIRQ
                                    352 	.globl __NA_PSW
                                    353 	.globl _X_T3CC1
                                    354 	.globl _X_T3CCTL1
                                    355 	.globl _X_T3CC0
                                    356 	.globl _X_T3CCTL0
                                    357 	.globl _X_T3CTL
                                    358 	.globl _X_T3CNT
                                    359 	.globl _X_WDCTL
                                    360 	.globl __X_SFRC8
                                    361 	.globl _X_MEMCTR
                                    362 	.globl _X_CLKCON
                                    363 	.globl _X_U0GCR
                                    364 	.globl _X_U0UCR
                                    365 	.globl __X_SFRC3
                                    366 	.globl _X_U0BAUD
                                    367 	.globl _X_U0DBUF
                                    368 	.globl __NA_IRCON
                                    369 	.globl __X_SFRBF
                                    370 	.globl _X_SLEEP
                                    371 	.globl _X_RNDH
                                    372 	.globl _X_RNDL
                                    373 	.globl _X_ADCH
                                    374 	.globl _X_ADCL
                                    375 	.globl __NA_IP1
                                    376 	.globl __NA_IEN1
                                    377 	.globl __X_SFRB7
                                    378 	.globl _X_ADCCON3
                                    379 	.globl _X_ADCCON2
                                    380 	.globl _X_ADCCON1
                                    381 	.globl _X_ENCCS
                                    382 	.globl _X_ENCDO
                                    383 	.globl _X_ENCDI
                                    384 	.globl __X_SFRB0
                                    385 	.globl _X_FWDATA
                                    386 	.globl _X_FCTL
                                    387 	.globl _X_FADDRH
                                    388 	.globl _X_FADDRL
                                    389 	.globl _X_FWT
                                    390 	.globl __X_SFRAA
                                    391 	.globl __NA_IP0
                                    392 	.globl __NA_IEN0
                                    393 	.globl __X_SFRA7
                                    394 	.globl _X_WORTIME1
                                    395 	.globl _X_WORTIME0
                                    396 	.globl _X_WOREVT1
                                    397 	.globl _X_WOREVT0
                                    398 	.globl _X_WORCTRL
                                    399 	.globl _X_WORIRQ
                                    400 	.globl __NA_P2
                                    401 	.globl __X_SFR9F
                                    402 	.globl _X_T2CTL
                                    403 	.globl _X_T2PR
                                    404 	.globl _X_T2CT
                                    405 	.globl __NA_S1CON
                                    406 	.globl __NA_IEN2
                                    407 	.globl __X_SFR99
                                    408 	.globl __NA_S0CON
                                    409 	.globl __X_SFR97
                                    410 	.globl __X_SFR96
                                    411 	.globl __X_SFR95
                                    412 	.globl __X_SFR94
                                    413 	.globl _X_MPAGE
                                    414 	.globl __NA_DPS
                                    415 	.globl _X_RFIM
                                    416 	.globl __NA_P1
                                    417 	.globl _X_P0INP
                                    418 	.globl __X_SFR8E
                                    419 	.globl _X_P1IEN
                                    420 	.globl _X_PICTL
                                    421 	.globl _X_P2IFG
                                    422 	.globl _X_P1IFG
                                    423 	.globl _X_P0IFG
                                    424 	.globl __NA_TCON
                                    425 	.globl __NA_PCON
                                    426 	.globl _X_U0CSR
                                    427 	.globl __NA_DPH1
                                    428 	.globl __NA_DPL1
                                    429 	.globl __NA_DPH0
                                    430 	.globl __NA_DPL0
                                    431 	.globl __NA_SP
                                    432 	.globl __NA_P0
                                    433 	.globl _I2SCLKF2
                                    434 	.globl _I2SCLKF1
                                    435 	.globl _I2SCLKF0
                                    436 	.globl _I2SSTAT
                                    437 	.globl _I2SWCNT
                                    438 	.globl _I2SDATH
                                    439 	.globl _I2SDATL
                                    440 	.globl _I2SCFG1
                                    441 	.globl _I2SCFG0
                                    442 	.globl _VCO_VC_DAC
                                    443 	.globl _PKTSTATUS
                                    444 	.globl _MARCSTATE
                                    445 	.globl _RSSI
                                    446 	.globl _LQI
                                    447 	.globl _FREQEST
                                    448 	.globl _VERSION
                                    449 	.globl _PARTNUM
                                    450 	.globl __XREGDF35
                                    451 	.globl __XREGDF34
                                    452 	.globl __XREGDF33
                                    453 	.globl __XREGDF32
                                    454 	.globl _IOCFG0
                                    455 	.globl _IOCFG1
                                    456 	.globl _IOCFG2
                                    457 	.globl _PA_TABLE0
                                    458 	.globl _PA_TABLE1
                                    459 	.globl _PA_TABLE2
                                    460 	.globl _PA_TABLE3
                                    461 	.globl _PA_TABLE4
                                    462 	.globl _PA_TABLE5
                                    463 	.globl _PA_TABLE6
                                    464 	.globl _PA_TABLE7
                                    465 	.globl __XREGDF26
                                    466 	.globl _TEST0
                                    467 	.globl _TEST1
                                    468 	.globl _TEST2
                                    469 	.globl __XREGDF22
                                    470 	.globl __XREGDF21
                                    471 	.globl __XREGDF20
                                    472 	.globl _FSCAL0
                                    473 	.globl _FSCAL1
                                    474 	.globl _FSCAL2
                                    475 	.globl _FSCAL3
                                    476 	.globl _FREND0
                                    477 	.globl _FREND1
                                    478 	.globl _AGCCTRL0
                                    479 	.globl _AGCCTRL1
                                    480 	.globl _AGCCTRL2
                                    481 	.globl _BSCFG
                                    482 	.globl _FOCCFG
                                    483 	.globl _MCSM0
                                    484 	.globl _MCSM1
                                    485 	.globl _MCSM2
                                    486 	.globl _DEVIATN
                                    487 	.globl _MDMCFG0
                                    488 	.globl _MDMCFG1
                                    489 	.globl _MDMCFG2
                                    490 	.globl _MDMCFG3
                                    491 	.globl _MDMCFG4
                                    492 	.globl _FREQ0
                                    493 	.globl _FREQ1
                                    494 	.globl _FREQ2
                                    495 	.globl _FSCTRL0
                                    496 	.globl _FSCTRL1
                                    497 	.globl _CHANNR
                                    498 	.globl _ADDR
                                    499 	.globl _PKTCTRL0
                                    500 	.globl _PKTCTRL1
                                    501 	.globl _PKTLEN
                                    502 	.globl _SYNC0
                                    503 	.globl _SYNC1
                                    504 	.globl _MDMCTRL0H
                                    505 	.globl _rfif
                                    506 	.globl _resetRFSTATE
                                    507 	.globl _RxMode
                                    508 	.globl _TxMode
                                    509 	.globl _IdleMode
                                    510 	.globl _init_RF
                                    511 	.globl _waitRSSI
                                    512 	.globl _transmit
                                    513 	.globl _startRX
                                    514 	.globl _rfTxRxIntHandler
                                    515 	.globl _rfIntHandler
                                    516 	.globl _byte_shuffle
                                    517 ;--------------------------------------------------------
                                    518 ; special function registers
                                    519 ;--------------------------------------------------------
                                    520 	.area RSEG    (ABS,DATA)
      000000                        521 	.org 0x0000
                           000080   522 _P0	=	0x0080
                           000081   523 _SP	=	0x0081
                           000082   524 _DPL0	=	0x0082
                           000083   525 _DPH0	=	0x0083
                           000084   526 _DPL1	=	0x0084
                           000085   527 _DPH1	=	0x0085
                           000086   528 _U0CSR	=	0x0086
                           000087   529 _PCON	=	0x0087
                           000088   530 _TCON	=	0x0088
                           000089   531 _P0IFG	=	0x0089
                           00008A   532 _P1IFG	=	0x008a
                           00008B   533 _P2IFG	=	0x008b
                           00008C   534 _PICTL	=	0x008c
                           00008D   535 _P1IEN	=	0x008d
                           00008E   536 __SFR8E	=	0x008e
                           00008F   537 _P0INP	=	0x008f
                           000090   538 _P1	=	0x0090
                           000091   539 _RFIM	=	0x0091
                           000092   540 _DPS	=	0x0092
                           000093   541 _MPAGE	=	0x0093
                           000093   542 __XPAGE	=	0x0093
                           000094   543 __SFR94	=	0x0094
                           000095   544 __SFR95	=	0x0095
                           000096   545 __SFR96	=	0x0096
                           000097   546 __SFR97	=	0x0097
                           000098   547 _S0CON	=	0x0098
                           000099   548 __SFR99	=	0x0099
                           00009A   549 _IEN2	=	0x009a
                           00009B   550 _S1CON	=	0x009b
                           00009C   551 _T2CT	=	0x009c
                           00009D   552 _T2PR	=	0x009d
                           00009E   553 _T2CTL	=	0x009e
                           00009F   554 __SFR9F	=	0x009f
                           0000A0   555 _P2	=	0x00a0
                           0000A1   556 _WORIRQ	=	0x00a1
                           0000A2   557 _WORCTRL	=	0x00a2
                           0000A3   558 _WOREVT0	=	0x00a3
                           0000A4   559 _WOREVT1	=	0x00a4
                           0000A5   560 _WORTIME0	=	0x00a5
                           0000A6   561 _WORTIME1	=	0x00a6
                           0000A7   562 __SFRA7	=	0x00a7
                           0000A8   563 _IEN0	=	0x00a8
                           0000A9   564 _IP0	=	0x00a9
                           0000AA   565 __SFRAA	=	0x00aa
                           0000AB   566 _FWT	=	0x00ab
                           0000AC   567 _FADDRL	=	0x00ac
                           0000AD   568 _FADDRH	=	0x00ad
                           0000AE   569 _FCTL	=	0x00ae
                           0000AF   570 _FWDATA	=	0x00af
                           0000B0   571 __SFRB0	=	0x00b0
                           0000B1   572 _ENCDI	=	0x00b1
                           0000B2   573 _ENCDO	=	0x00b2
                           0000B3   574 _ENCCS	=	0x00b3
                           0000B4   575 _ADCCON1	=	0x00b4
                           0000B5   576 _ADCCON2	=	0x00b5
                           0000B6   577 _ADCCON3	=	0x00b6
                           0000B7   578 __SFRB7	=	0x00b7
                           0000B8   579 _IEN1	=	0x00b8
                           0000B9   580 _IP1	=	0x00b9
                           0000BA   581 _ADCL	=	0x00ba
                           0000BB   582 _ADCH	=	0x00bb
                           0000BC   583 _RNDL	=	0x00bc
                           0000BD   584 _RNDH	=	0x00bd
                           0000BE   585 _SLEEP	=	0x00be
                           0000BF   586 __SFRBF	=	0x00bf
                           0000C0   587 _IRCON	=	0x00c0
                           0000C1   588 _U0DBUF	=	0x00c1
                           0000C2   589 _U0BAUD	=	0x00c2
                           0000C3   590 __SFRC3	=	0x00c3
                           0000C4   591 _U0UCR	=	0x00c4
                           0000C5   592 _U0GCR	=	0x00c5
                           0000C6   593 _CLKCON	=	0x00c6
                           0000C7   594 _MEMCTR	=	0x00c7
                           0000C8   595 __SFRC8	=	0x00c8
                           0000C9   596 _WDCTL	=	0x00c9
                           0000CA   597 _T3CNT	=	0x00ca
                           0000CB   598 _T3CTL	=	0x00cb
                           0000CC   599 _T3CCTL0	=	0x00cc
                           0000CD   600 _T3CC0	=	0x00cd
                           0000CE   601 _T3CCTL1	=	0x00ce
                           0000CF   602 _T3CC1	=	0x00cf
                           0000D0   603 _PSW	=	0x00d0
                           0000D1   604 _DMAIRQ	=	0x00d1
                           0000D2   605 _DMA1CFGL	=	0x00d2
                           0000D3   606 _DMA1CFGH	=	0x00d3
                           0000D4   607 _DMA0CFGL	=	0x00d4
                           0000D5   608 _DMA0CFGH	=	0x00d5
                           0000D6   609 _DMAARM	=	0x00d6
                           0000D7   610 _DMAREQ	=	0x00d7
                           0000D8   611 _TIMIF	=	0x00d8
                           0000D9   612 _RFD	=	0x00d9
                           0000DA   613 _T1CC0L	=	0x00da
                           0000DB   614 _T1CC0H	=	0x00db
                           0000DC   615 _T1CC1L	=	0x00dc
                           0000DD   616 _T1CC1H	=	0x00dd
                           0000DE   617 _T1CC2L	=	0x00de
                           0000DF   618 _T1CC2H	=	0x00df
                           0000E0   619 _ACC	=	0x00e0
                           0000E1   620 _RFST	=	0x00e1
                           0000E2   621 _T1CNTL	=	0x00e2
                           0000E3   622 _T1CNTH	=	0x00e3
                           0000E4   623 _T1CTL	=	0x00e4
                           0000E5   624 _T1CCTL0	=	0x00e5
                           0000E6   625 _T1CCTL1	=	0x00e6
                           0000E7   626 _T1CCTL2	=	0x00e7
                           0000E8   627 _IRCON2	=	0x00e8
                           0000E9   628 _RFIF	=	0x00e9
                           0000EA   629 _T4CNT	=	0x00ea
                           0000EB   630 _T4CTL	=	0x00eb
                           0000EC   631 _T4CCTL0	=	0x00ec
                           0000ED   632 _T4CC0	=	0x00ed
                           0000EE   633 _T4CCTL1	=	0x00ee
                           0000EF   634 _T4CC1	=	0x00ef
                           0000F0   635 _B	=	0x00f0
                           0000F1   636 _PERCFG	=	0x00f1
                           0000F2   637 _ADCCFG	=	0x00f2
                           0000F3   638 _P0SEL	=	0x00f3
                           0000F4   639 _P1SEL	=	0x00f4
                           0000F5   640 _P2SEL	=	0x00f5
                           0000F6   641 _P1INP	=	0x00f6
                           0000F7   642 _P2INP	=	0x00f7
                           0000F8   643 _U1CSR	=	0x00f8
                           0000F9   644 _U1DBUF	=	0x00f9
                           0000FA   645 _U1BAUD	=	0x00fa
                           0000FB   646 _U1UCR	=	0x00fb
                           0000FC   647 _U1GCR	=	0x00fc
                           0000FD   648 _P0DIR	=	0x00fd
                           0000FE   649 _P1DIR	=	0x00fe
                           0000FF   650 _P2DIR	=	0x00ff
                                    651 ;--------------------------------------------------------
                                    652 ; special function bits
                                    653 ;--------------------------------------------------------
                                    654 	.area RSEG    (ABS,DATA)
      000000                        655 	.org 0x0000
                           000080   656 _P0_0	=	0x0080
                           000081   657 _P0_1	=	0x0081
                           000082   658 _P0_2	=	0x0082
                           000083   659 _P0_3	=	0x0083
                           000084   660 _P0_4	=	0x0084
                           000085   661 _P0_5	=	0x0085
                           000086   662 _P0_6	=	0x0086
                           000087   663 _P0_7	=	0x0087
                           000088   664 _IT0	=	0x0088
                           000089   665 _RFTXRXIF	=	0x0089
                           00008A   666 _IT1	=	0x008a
                           00008B   667 _URX0IF	=	0x008b
                           00008D   668 _ADCIF	=	0x008d
                           00008F   669 _URX1IF	=	0x008f
                           000090   670 _P1_0	=	0x0090
                           000091   671 _P1_1	=	0x0091
                           000092   672 _P1_2	=	0x0092
                           000093   673 _P1_3	=	0x0093
                           000094   674 _P1_4	=	0x0094
                           000095   675 _P1_5	=	0x0095
                           000096   676 _P1_6	=	0x0096
                           000097   677 _P1_7	=	0x0097
                           000098   678 _ENCIF_0	=	0x0098
                           000099   679 _ENCIF_1	=	0x0099
                           0000A0   680 _P2_0	=	0x00a0
                           0000A1   681 _P2_1	=	0x00a1
                           0000A2   682 _P2_2	=	0x00a2
                           0000A3   683 _P2_3	=	0x00a3
                           0000A4   684 _P2_4	=	0x00a4
                           0000A5   685 _P2_5	=	0x00a5
                           0000A6   686 _P2_6	=	0x00a6
                           0000A7   687 _P2_7	=	0x00a7
                           0000A8   688 _RFTXRXIE	=	0x00a8
                           0000A9   689 _ADCIE	=	0x00a9
                           0000AA   690 _URX0IE	=	0x00aa
                           0000AB   691 _URX1IE	=	0x00ab
                           0000AC   692 _ENCIE	=	0x00ac
                           0000AD   693 _STIE	=	0x00ad
                           0000AF   694 _EA	=	0x00af
                           0000B8   695 _DMAIE	=	0x00b8
                           0000B9   696 _T1IE	=	0x00b9
                           0000BA   697 _T2IE	=	0x00ba
                           0000BB   698 _T3IE	=	0x00bb
                           0000BC   699 _T4IE	=	0x00bc
                           0000BD   700 _P0IE	=	0x00bd
                           0000C0   701 _DMAIF	=	0x00c0
                           0000C1   702 _T1IF	=	0x00c1
                           0000C2   703 _T2IF	=	0x00c2
                           0000C3   704 _T3IF	=	0x00c3
                           0000C4   705 _T4IF	=	0x00c4
                           0000C5   706 _P0IF	=	0x00c5
                           0000C7   707 _STIF	=	0x00c7
                           0000D0   708 _P	=	0x00d0
                           0000D1   709 _F1	=	0x00d1
                           0000D2   710 _OV	=	0x00d2
                           0000D3   711 _RS0	=	0x00d3
                           0000D4   712 _RS1	=	0x00d4
                           0000D5   713 _F0	=	0x00d5
                           0000D6   714 _AC	=	0x00d6
                           0000D7   715 _CY	=	0x00d7
                           0000D8   716 _T3OVFIF	=	0x00d8
                           0000D9   717 _T3CH0IF	=	0x00d9
                           0000DA   718 _T3CH1IF	=	0x00da
                           0000DB   719 _T4OVFIF	=	0x00db
                           0000DC   720 _T4CH0IF	=	0x00dc
                           0000DD   721 _T4CH1IF	=	0x00dd
                           0000DE   722 _OVFIM	=	0x00de
                           0000E0   723 _ACC_0	=	0x00e0
                           0000E1   724 _ACC_1	=	0x00e1
                           0000E2   725 _ACC_2	=	0x00e2
                           0000E3   726 _ACC_3	=	0x00e3
                           0000E4   727 _ACC_4	=	0x00e4
                           0000E5   728 _ACC_5	=	0x00e5
                           0000E6   729 _ACC_6	=	0x00e6
                           0000E7   730 _ACC_7	=	0x00e7
                           0000E8   731 _P2IF	=	0x00e8
                           0000E9   732 _UTX0IF	=	0x00e9
                           0000EA   733 _UTX1IF	=	0x00ea
                           0000EB   734 _P1IF	=	0x00eb
                           0000EC   735 _WDTIF	=	0x00ec
                           0000F0   736 _B_0	=	0x00f0
                           0000F1   737 _B_1	=	0x00f1
                           0000F2   738 _B_2	=	0x00f2
                           0000F3   739 _B_3	=	0x00f3
                           0000F4   740 _B_4	=	0x00f4
                           0000F5   741 _B_5	=	0x00f5
                           0000F6   742 _B_6	=	0x00f6
                           0000F7   743 _B_7	=	0x00f7
                           0000F8   744 _ACTIVE	=	0x00f8
                           0000F9   745 _TX_BYTE	=	0x00f9
                           0000FA   746 _RX_BYTE	=	0x00fa
                           0000FB   747 _ERR	=	0x00fb
                           0000FC   748 _FE	=	0x00fc
                           0000FD   749 _SLAVE	=	0x00fd
                           0000FE   750 _RE	=	0x00fe
                           0000FF   751 _MODE	=	0x00ff
                           0000E8   752 _USBIF	=	0x00e8
                                    753 ;--------------------------------------------------------
                                    754 ; overlayable register banks
                                    755 ;--------------------------------------------------------
                                    756 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        757 	.ds 8
                                    758 ;--------------------------------------------------------
                                    759 ; overlayable bit register bank
                                    760 ;--------------------------------------------------------
                                    761 	.area BIT_BANK	(REL,OVR,DATA)
      000021                        762 bits:
      000021                        763 	.ds 1
                           008000   764 	b0 = bits[0]
                           008100   765 	b1 = bits[1]
                           008200   766 	b2 = bits[2]
                           008300   767 	b3 = bits[3]
                           008400   768 	b4 = bits[4]
                           008500   769 	b5 = bits[5]
                           008600   770 	b6 = bits[6]
                           008700   771 	b7 = bits[7]
                                    772 ;--------------------------------------------------------
                                    773 ; internal ram data
                                    774 ;--------------------------------------------------------
                                    775 	.area DSEG    (DATA)
      000022                        776 _rfif::
      000022                        777 	.ds 1
      000023                        778 _transmit_sloc0_1_0:
      000023                        779 	.ds 2
      000025                        780 _rfIntHandler_encoffset_1_136:
      000025                        781 	.ds 1
                                    782 ;--------------------------------------------------------
                                    783 ; overlayable items in internal ram 
                                    784 ;--------------------------------------------------------
                                    785 ;--------------------------------------------------------
                                    786 ; indirectly addressable internal ram data
                                    787 ;--------------------------------------------------------
                                    788 	.area ISEG    (DATA)
                                    789 ;--------------------------------------------------------
                                    790 ; absolute internal ram data
                                    791 ;--------------------------------------------------------
                                    792 	.area IABS    (ABS,DATA)
                                    793 	.area IABS    (ABS,DATA)
                                    794 ;--------------------------------------------------------
                                    795 ; bit data
                                    796 ;--------------------------------------------------------
                                    797 	.area BSEG    (BIT)
                                    798 ;--------------------------------------------------------
                                    799 ; paged external ram data
                                    800 ;--------------------------------------------------------
                                    801 	.area PSEG    (PAG,XDATA)
                                    802 ;--------------------------------------------------------
                                    803 ; external ram data
                                    804 ;--------------------------------------------------------
                                    805 	.area XSEG    (XDATA)
                           00DF02   806 _MDMCTRL0H	=	0xdf02
                           00DF00   807 _SYNC1	=	0xdf00
                           00DF01   808 _SYNC0	=	0xdf01
                           00DF02   809 _PKTLEN	=	0xdf02
                           00DF03   810 _PKTCTRL1	=	0xdf03
                           00DF04   811 _PKTCTRL0	=	0xdf04
                           00DF05   812 _ADDR	=	0xdf05
                           00DF06   813 _CHANNR	=	0xdf06
                           00DF07   814 _FSCTRL1	=	0xdf07
                           00DF08   815 _FSCTRL0	=	0xdf08
                           00DF09   816 _FREQ2	=	0xdf09
                           00DF0A   817 _FREQ1	=	0xdf0a
                           00DF0B   818 _FREQ0	=	0xdf0b
                           00DF0C   819 _MDMCFG4	=	0xdf0c
                           00DF0D   820 _MDMCFG3	=	0xdf0d
                           00DF0E   821 _MDMCFG2	=	0xdf0e
                           00DF0F   822 _MDMCFG1	=	0xdf0f
                           00DF10   823 _MDMCFG0	=	0xdf10
                           00DF11   824 _DEVIATN	=	0xdf11
                           00DF12   825 _MCSM2	=	0xdf12
                           00DF13   826 _MCSM1	=	0xdf13
                           00DF14   827 _MCSM0	=	0xdf14
                           00DF15   828 _FOCCFG	=	0xdf15
                           00DF16   829 _BSCFG	=	0xdf16
                           00DF17   830 _AGCCTRL2	=	0xdf17
                           00DF18   831 _AGCCTRL1	=	0xdf18
                           00DF19   832 _AGCCTRL0	=	0xdf19
                           00DF1A   833 _FREND1	=	0xdf1a
                           00DF1B   834 _FREND0	=	0xdf1b
                           00DF1C   835 _FSCAL3	=	0xdf1c
                           00DF1D   836 _FSCAL2	=	0xdf1d
                           00DF1E   837 _FSCAL1	=	0xdf1e
                           00DF1F   838 _FSCAL0	=	0xdf1f
                           00DF20   839 __XREGDF20	=	0xdf20
                           00DF21   840 __XREGDF21	=	0xdf21
                           00DF22   841 __XREGDF22	=	0xdf22
                           00DF23   842 _TEST2	=	0xdf23
                           00DF24   843 _TEST1	=	0xdf24
                           00DF25   844 _TEST0	=	0xdf25
                           00DF26   845 __XREGDF26	=	0xdf26
                           00DF27   846 _PA_TABLE7	=	0xdf27
                           00DF28   847 _PA_TABLE6	=	0xdf28
                           00DF29   848 _PA_TABLE5	=	0xdf29
                           00DF2A   849 _PA_TABLE4	=	0xdf2a
                           00DF2B   850 _PA_TABLE3	=	0xdf2b
                           00DF2C   851 _PA_TABLE2	=	0xdf2c
                           00DF2D   852 _PA_TABLE1	=	0xdf2d
                           00DF2E   853 _PA_TABLE0	=	0xdf2e
                           00DF2F   854 _IOCFG2	=	0xdf2f
                           00DF30   855 _IOCFG1	=	0xdf30
                           00DF31   856 _IOCFG0	=	0xdf31
                           00DF32   857 __XREGDF32	=	0xdf32
                           00DF33   858 __XREGDF33	=	0xdf33
                           00DF34   859 __XREGDF34	=	0xdf34
                           00DF35   860 __XREGDF35	=	0xdf35
                           00DF36   861 _PARTNUM	=	0xdf36
                           00DF37   862 _VERSION	=	0xdf37
                           00DF38   863 _FREQEST	=	0xdf38
                           00DF39   864 _LQI	=	0xdf39
                           00DF3A   865 _RSSI	=	0xdf3a
                           00DF3B   866 _MARCSTATE	=	0xdf3b
                           00DF3C   867 _PKTSTATUS	=	0xdf3c
                           00DF3D   868 _VCO_VC_DAC	=	0xdf3d
                           00DF40   869 _I2SCFG0	=	0xdf40
                           00DF41   870 _I2SCFG1	=	0xdf41
                           00DF42   871 _I2SDATL	=	0xdf42
                           00DF43   872 _I2SDATH	=	0xdf43
                           00DF44   873 _I2SWCNT	=	0xdf44
                           00DF45   874 _I2SSTAT	=	0xdf45
                           00DF46   875 _I2SCLKF0	=	0xdf46
                           00DF47   876 _I2SCLKF1	=	0xdf47
                           00DF48   877 _I2SCLKF2	=	0xdf48
                           00DF80   878 __NA_P0	=	0xdf80
                           00DF81   879 __NA_SP	=	0xdf81
                           00DF82   880 __NA_DPL0	=	0xdf82
                           00DF83   881 __NA_DPH0	=	0xdf83
                           00DF84   882 __NA_DPL1	=	0xdf84
                           00DF85   883 __NA_DPH1	=	0xdf85
                           00DF86   884 _X_U0CSR	=	0xdf86
                           00DF87   885 __NA_PCON	=	0xdf87
                           00DF88   886 __NA_TCON	=	0xdf88
                           00DF89   887 _X_P0IFG	=	0xdf89
                           00DF8A   888 _X_P1IFG	=	0xdf8a
                           00DF8B   889 _X_P2IFG	=	0xdf8b
                           00DF8C   890 _X_PICTL	=	0xdf8c
                           00DF8D   891 _X_P1IEN	=	0xdf8d
                           00DF8E   892 __X_SFR8E	=	0xdf8e
                           00DF8F   893 _X_P0INP	=	0xdf8f
                           00DF90   894 __NA_P1	=	0xdf90
                           00DF91   895 _X_RFIM	=	0xdf91
                           00DF92   896 __NA_DPS	=	0xdf92
                           00DF93   897 _X_MPAGE	=	0xdf93
                           00DF94   898 __X_SFR94	=	0xdf94
                           00DF95   899 __X_SFR95	=	0xdf95
                           00DF96   900 __X_SFR96	=	0xdf96
                           00DF97   901 __X_SFR97	=	0xdf97
                           00DF98   902 __NA_S0CON	=	0xdf98
                           00DF99   903 __X_SFR99	=	0xdf99
                           00DF9A   904 __NA_IEN2	=	0xdf9a
                           00DF9B   905 __NA_S1CON	=	0xdf9b
                           00DF9C   906 _X_T2CT	=	0xdf9c
                           00DF9D   907 _X_T2PR	=	0xdf9d
                           00DF9E   908 _X_T2CTL	=	0xdf9e
                           00DF9F   909 __X_SFR9F	=	0xdf9f
                           00DFA0   910 __NA_P2	=	0xdfa0
                           00DFA1   911 _X_WORIRQ	=	0xdfa1
                           00DFA2   912 _X_WORCTRL	=	0xdfa2
                           00DFA3   913 _X_WOREVT0	=	0xdfa3
                           00DFA4   914 _X_WOREVT1	=	0xdfa4
                           00DFA5   915 _X_WORTIME0	=	0xdfa5
                           00DFA6   916 _X_WORTIME1	=	0xdfa6
                           00DFA7   917 __X_SFRA7	=	0xdfa7
                           00DFA8   918 __NA_IEN0	=	0xdfa8
                           00DFA9   919 __NA_IP0	=	0xdfa9
                           00DFAA   920 __X_SFRAA	=	0xdfaa
                           00DFAB   921 _X_FWT	=	0xdfab
                           00DFAC   922 _X_FADDRL	=	0xdfac
                           00DFAD   923 _X_FADDRH	=	0xdfad
                           00DFAE   924 _X_FCTL	=	0xdfae
                           00DFAF   925 _X_FWDATA	=	0xdfaf
                           00DFB0   926 __X_SFRB0	=	0xdfb0
                           00DFB1   927 _X_ENCDI	=	0xdfb1
                           00DFB2   928 _X_ENCDO	=	0xdfb2
                           00DFB3   929 _X_ENCCS	=	0xdfb3
                           00DFB4   930 _X_ADCCON1	=	0xdfb4
                           00DFB5   931 _X_ADCCON2	=	0xdfb5
                           00DFB6   932 _X_ADCCON3	=	0xdfb6
                           00DFB7   933 __X_SFRB7	=	0xdfb7
                           00DFB8   934 __NA_IEN1	=	0xdfb8
                           00DFB9   935 __NA_IP1	=	0xdfb9
                           00DFBA   936 _X_ADCL	=	0xdfba
                           00DFBB   937 _X_ADCH	=	0xdfbb
                           00DFBC   938 _X_RNDL	=	0xdfbc
                           00DFBD   939 _X_RNDH	=	0xdfbd
                           00DFBE   940 _X_SLEEP	=	0xdfbe
                           00DFBF   941 __X_SFRBF	=	0xdfbf
                           00DFC0   942 __NA_IRCON	=	0xdfc0
                           00DFC1   943 _X_U0DBUF	=	0xdfc1
                           00DFC2   944 _X_U0BAUD	=	0xdfc2
                           00DFC3   945 __X_SFRC3	=	0xdfc3
                           00DFC4   946 _X_U0UCR	=	0xdfc4
                           00DFC5   947 _X_U0GCR	=	0xdfc5
                           00DFC6   948 _X_CLKCON	=	0xdfc6
                           00DFC7   949 _X_MEMCTR	=	0xdfc7
                           00DFC8   950 __X_SFRC8	=	0xdfc8
                           00DFC9   951 _X_WDCTL	=	0xdfc9
                           00DFCA   952 _X_T3CNT	=	0xdfca
                           00DFCB   953 _X_T3CTL	=	0xdfcb
                           00DFCC   954 _X_T3CCTL0	=	0xdfcc
                           00DFCD   955 _X_T3CC0	=	0xdfcd
                           00DFCE   956 _X_T3CCTL1	=	0xdfce
                           00DFCF   957 _X_T3CC1	=	0xdfcf
                           00DFD0   958 __NA_PSW	=	0xdfd0
                           00DFD1   959 _X_DMAIRQ	=	0xdfd1
                           00DFD2   960 _X_DMA1CFGL	=	0xdfd2
                           00DFD3   961 _X_DMA1CFGH	=	0xdfd3
                           00DFD4   962 _X_DMA0CFGL	=	0xdfd4
                           00DFD5   963 _X_DMA0CFGH	=	0xdfd5
                           00DFD6   964 _X_DMAARM	=	0xdfd6
                           00DFD7   965 _X_DMAREQ	=	0xdfd7
                           00DFD8   966 _X_TIMIF	=	0xdfd8
                           00DFD9   967 _X_RFD	=	0xdfd9
                           00DFDA   968 _X_T1CC0L	=	0xdfda
                           00DFDB   969 _X_T1CC0H	=	0xdfdb
                           00DFDC   970 _X_T1CC1L	=	0xdfdc
                           00DFDD   971 _X_T1CC1H	=	0xdfdd
                           00DFDE   972 _X_T1CC2L	=	0xdfde
                           00DFDF   973 _X_T1CC2H	=	0xdfdf
                           00DFE0   974 __NA_ACC	=	0xdfe0
                           00DFE1   975 _X_RFST	=	0xdfe1
                           00DFE2   976 _X_T1CNTL	=	0xdfe2
                           00DFE3   977 _X_T1CNTH	=	0xdfe3
                           00DFE4   978 _X_T1CTL	=	0xdfe4
                           00DFE5   979 _X_T1CCTL0	=	0xdfe5
                           00DFE6   980 _X_T1CCTL1	=	0xdfe6
                           00DFE7   981 _X_T1CCTL2	=	0xdfe7
                           00DFE8   982 __NA_IRCON2	=	0xdfe8
                           00DFE9   983 _X_RFIF	=	0xdfe9
                           00DFEA   984 _X_T4CNT	=	0xdfea
                           00DFEB   985 _X_T4CTL	=	0xdfeb
                           00DFEC   986 _X_T4CCTL0	=	0xdfec
                           00DFED   987 _X_T4CC0	=	0xdfed
                           00DFEE   988 _X_T4CCTL1	=	0xdfee
                           00DFEF   989 _X_T4CC1	=	0xdfef
                           00DFF0   990 __NA_B	=	0xdff0
                           00DFF1   991 _X_PERCFG	=	0xdff1
                           00DFF2   992 _X_ADCCFG	=	0xdff2
                           00DFF3   993 _X_P0SEL	=	0xdff3
                           00DFF4   994 _X_P1SEL	=	0xdff4
                           00DFF5   995 _X_P2SEL	=	0xdff5
                           00DFF6   996 _X_P1INP	=	0xdff6
                           00DFF7   997 _X_P2INP	=	0xdff7
                           00DFF8   998 _X_U1CSR	=	0xdff8
                           00DFF9   999 _X_U1DBUF	=	0xdff9
                           00DFFA  1000 _X_U1BAUD	=	0xdffa
                           00DFFB  1001 _X_U1UCR	=	0xdffb
                           00DFFC  1002 _X_U1GCR	=	0xdffc
                           00DFFD  1003 _X_P0DIR	=	0xdffd
                           00DFFE  1004 _X_P1DIR	=	0xdffe
                           00DFFF  1005 _X_P2DIR	=	0xdfff
                           00DE00  1006 _USBADDR	=	0xde00
                           00DE01  1007 _USBPOW	=	0xde01
                           00DE02  1008 _USBIIF	=	0xde02
                           00DE04  1009 _USBOIF	=	0xde04
                           00DE06  1010 _USBCIF	=	0xde06
                           00DE07  1011 _USBIIE	=	0xde07
                           00DE09  1012 _USBOIE	=	0xde09
                           00DE0B  1013 _USBCIE	=	0xde0b
                           00DE0C  1014 _USBFRML	=	0xde0c
                           00DE0D  1015 _USBFRMH	=	0xde0d
                           00DE0E  1016 _USBINDEX	=	0xde0e
                           00DE10  1017 _USBMAXI	=	0xde10
                           00DE11  1018 _USBCS0	=	0xde11
                           00DE11  1019 _USBCSIL	=	0xde11
                           00DE12  1020 _USBCSIH	=	0xde12
                           00DE13  1021 _USBMAXO	=	0xde13
                           00DE14  1022 _USBCSOL	=	0xde14
                           00DE15  1023 _USBCSOH	=	0xde15
                           00DE16  1024 _USBCNT0	=	0xde16
                           00DE16  1025 _USBCNTL	=	0xde16
                           00DE17  1026 _USBCNTH	=	0xde17
                           00DE20  1027 _USBF0	=	0xde20
                           00DE22  1028 _USBF1	=	0xde22
                           00DE24  1029 _USBF2	=	0xde24
                           00DE26  1030 _USBF3	=	0xde26
                           00DE28  1031 _USBF4	=	0xde28
                           00DE2A  1032 _USBF5	=	0xde2a
      00F97F                       1033 _rfRxCurrentBuffer::
      00F97F                       1034 	.ds 1
      00F980                       1035 _rfrxbuf::
      00F980                       1036 	.ds 1024
      00FD80                       1037 _rfRxCounter::
      00FD80                       1038 	.ds 4
      00FD84                       1039 _rfRxProcessed::
      00FD84                       1040 	.ds 2
      00FD86                       1041 _rftxbuf::
      00FD86                       1042 	.ds 2
      00FD88                       1043 _txTotal::
      00FD88                       1044 	.ds 2
      00FD8A                       1045 _rf_status::
      00FD8A                       1046 	.ds 1
      00FD8B                       1047 _rf_MAC_timer::
      00FD8B                       1048 	.ds 2
      00FD8D                       1049 _rf_tLastRecv::
      00FD8D                       1050 	.ds 2
      00FD8F                       1051 _macdata::
      00FD8F                       1052 	.ds 21
      00FDA4                       1053 _transmit_PARM_2:
      00FDA4                       1054 	.ds 2
      00FDA6                       1055 _transmit_PARM_3:
      00FDA6                       1056 	.ds 2
      00FDA8                       1057 _transmit_PARM_4:
      00FDA8                       1058 	.ds 2
      00FDAA                       1059 _transmit_buf_1_96:
      00FDAA                       1060 	.ds 2
      00FDAC                       1061 _transmit_encoffset_1_97:
      00FDAC                       1062 	.ds 1
      00FDAD                       1063 _byte_shuffle_PARM_2:
      00FDAD                       1064 	.ds 2
      00FDAF                       1065 _byte_shuffle_PARM_3:
      00FDAF                       1066 	.ds 2
      00FDB1                       1067 _byte_shuffle_buf_1_146:
      00FDB1                       1068 	.ds 2
                                   1069 ;--------------------------------------------------------
                                   1070 ; absolute external ram data
                                   1071 ;--------------------------------------------------------
                                   1072 	.area XABS    (ABS,XDATA)
                                   1073 ;--------------------------------------------------------
                                   1074 ; external initialized ram data
                                   1075 ;--------------------------------------------------------
                                   1076 	.area XISEG   (XDATA)
      00FDE5                       1077 _rfRxInfMode::
      00FDE5                       1078 	.ds 1
      00FDE6                       1079 _rfRxTotalRXLen::
      00FDE6                       1080 	.ds 2
      00FDE8                       1081 _rfRxLargeLen::
      00FDE8                       1082 	.ds 2
      00FDEA                       1083 _rfTxCurBufIdx::
      00FDEA                       1084 	.ds 1
      00FDEB                       1085 _rfTxBufCount::
      00FDEB                       1086 	.ds 1
      00FDEC                       1087 _rfTxCounter::
      00FDEC                       1088 	.ds 2
      00FDEE                       1089 _rfTxRepeatCounter::
      00FDEE                       1090 	.ds 2
      00FDF0                       1091 _rfTxBufferEnd::
      00FDF0                       1092 	.ds 2
      00FDF2                       1093 _rfTxRepeatLen::
      00FDF2                       1094 	.ds 2
      00FDF4                       1095 _rfTxRepeatOffset::
      00FDF4                       1096 	.ds 2
      00FDF6                       1097 _rfTxTotalTXLen::
      00FDF6                       1098 	.ds 2
      00FDF8                       1099 _rfTxInfMode::
      00FDF8                       1100 	.ds 1
      00FDF9                       1101 _rfAESMode::
      00FDF9                       1102 	.ds 1
      00FDFA                       1103 _rfAmpMode::
      00FDFA                       1104 	.ds 1
      00FDFB                       1105 _bRepeatMode::
      00FDFB                       1106 	.ds 1
                                   1107 	.area HOME    (CODE)
                                   1108 	.area GSINIT0 (CODE)
                                   1109 	.area GSINIT1 (CODE)
                                   1110 	.area GSINIT2 (CODE)
                                   1111 	.area GSINIT3 (CODE)
                                   1112 	.area GSINIT4 (CODE)
                                   1113 	.area GSINIT5 (CODE)
                                   1114 	.area GSINIT  (CODE)
                                   1115 	.area GSFINAL (CODE)
                                   1116 	.area CSEG    (CODE)
                                   1117 ;--------------------------------------------------------
                                   1118 ; global & static initialisations
                                   1119 ;--------------------------------------------------------
                                   1120 	.area HOME    (CODE)
                                   1121 	.area GSINIT  (CODE)
                                   1122 	.area GSFINAL (CODE)
                                   1123 	.area GSINIT  (CODE)
                                   1124 ;--------------------------------------------------------
                                   1125 ; Home
                                   1126 ;--------------------------------------------------------
                                   1127 	.area HOME    (CODE)
                                   1128 	.area HOME    (CODE)
                                   1129 ;--------------------------------------------------------
                                   1130 ; code
                                   1131 ;--------------------------------------------------------
                                   1132 	.area CSEG    (CODE)
                                   1133 ;------------------------------------------------------------
                                   1134 ;Allocation info for local variables in function 'setFreq'
                                   1135 ;------------------------------------------------------------
                                   1136 ;freq                      Allocated to registers r4 r5 r6 r7 
                                   1137 ;num                       Allocated to registers r4 r5 r6 r7 
                                   1138 ;------------------------------------------------------------
                                   1139 ;	cc1111rf.c:56: void setFreq(u32 freq)
                                   1140 ;	-----------------------------------------
                                   1141 ;	 function setFreq
                                   1142 ;	-----------------------------------------
      001DA3                       1143 _setFreq:
                           000007  1144 	ar7 = 0x07
                           000006  1145 	ar6 = 0x06
                           000005  1146 	ar5 = 0x05
                           000004  1147 	ar4 = 0x04
                           000003  1148 	ar3 = 0x03
                           000002  1149 	ar2 = 0x02
                           000001  1150 	ar1 = 0x01
                           000000  1151 	ar0 = 0x00
                                   1152 ;	cc1111rf.c:61: num = freq * (0x10000 / 1000000.0) / PLATFORM_CLOCK_FREQ;
      001DA3 12 2E 96         [24] 1153 	lcall	___ulong2fs
      001DA6 AC 82            [24] 1154 	mov	r4,dpl
      001DA8 AD 83            [24] 1155 	mov	r5,dph
      001DAA AE F0            [24] 1156 	mov	r6,b
      001DAC FF               [12] 1157 	mov	r7,a
      001DAD C0 04            [24] 1158 	push	ar4
      001DAF C0 05            [24] 1159 	push	ar5
      001DB1 C0 06            [24] 1160 	push	ar6
      001DB3 C0 07            [24] 1161 	push	ar7
      001DB5 90 37 BD         [24] 1162 	mov	dptr,#0x37BD
      001DB8 75 F0 86         [24] 1163 	mov	b,#0x86
      001DBB 74 3D            [12] 1164 	mov	a,#0x3D
      001DBD 12 2D 1E         [24] 1165 	lcall	___fsmul
      001DC0 AC 82            [24] 1166 	mov	r4,dpl
      001DC2 AD 83            [24] 1167 	mov	r5,dph
      001DC4 AE F0            [24] 1168 	mov	r6,b
      001DC6 FF               [12] 1169 	mov	r7,a
      001DC7 E5 81            [12] 1170 	mov	a,sp
      001DC9 24 FC            [12] 1171 	add	a,#0xfc
      001DCB F5 81            [12] 1172 	mov	sp,a
      001DCD E4               [12] 1173 	clr	a
      001DCE C0 E0            [24] 1174 	push	acc
      001DD0 C0 E0            [24] 1175 	push	acc
      001DD2 74 C0            [12] 1176 	mov	a,#0xC0
      001DD4 C0 E0            [24] 1177 	push	acc
      001DD6 74 41            [12] 1178 	mov	a,#0x41
      001DD8 C0 E0            [24] 1179 	push	acc
      001DDA 8C 82            [24] 1180 	mov	dpl,r4
      001DDC 8D 83            [24] 1181 	mov	dph,r5
      001DDE 8E F0            [24] 1182 	mov	b,r6
      001DE0 EF               [12] 1183 	mov	a,r7
      001DE1 12 2F B6         [24] 1184 	lcall	___fsdiv
      001DE4 AC 82            [24] 1185 	mov	r4,dpl
      001DE6 AD 83            [24] 1186 	mov	r5,dph
      001DE8 AE F0            [24] 1187 	mov	r6,b
      001DEA FF               [12] 1188 	mov	r7,a
      001DEB E5 81            [12] 1189 	mov	a,sp
      001DED 24 FC            [12] 1190 	add	a,#0xfc
      001DEF F5 81            [12] 1191 	mov	sp,a
      001DF1 8C 82            [24] 1192 	mov	dpl,r4
      001DF3 8D 83            [24] 1193 	mov	dph,r5
      001DF5 8E F0            [24] 1194 	mov	b,r6
      001DF7 EF               [12] 1195 	mov	a,r7
      001DF8 12 2E A9         [24] 1196 	lcall	___fs2ulong
      001DFB AC 82            [24] 1197 	mov	r4,dpl
      001DFD AD 83            [24] 1198 	mov	r5,dph
      001DFF AE F0            [24] 1199 	mov	r6,b
                                   1200 ;	cc1111rf.c:62: FREQ2 = num >> 16;
      001E01 90 DF 09         [24] 1201 	mov	dptr,#_FREQ2
      001E04 EE               [12] 1202 	mov	a,r6
      001E05 F0               [24] 1203 	movx	@dptr,a
                                   1204 ;	cc1111rf.c:63: FREQ1 = (num>>8) & 0xff;
      001E06 8D 03            [24] 1205 	mov	ar3,r5
      001E08 90 DF 0A         [24] 1206 	mov	dptr,#_FREQ1
      001E0B EB               [12] 1207 	mov	a,r3
      001E0C F0               [24] 1208 	movx	@dptr,a
                                   1209 ;	cc1111rf.c:64: FREQ0 = num & 0xff;
      001E0D 90 DF 0B         [24] 1210 	mov	dptr,#_FREQ0
      001E10 EC               [12] 1211 	mov	a,r4
      001E11 F0               [24] 1212 	movx	@dptr,a
      001E12 22               [24] 1213 	ret
                                   1214 ;------------------------------------------------------------
                                   1215 ;Allocation info for local variables in function 'resetRFSTATE'
                                   1216 ;------------------------------------------------------------
                                   1217 ;	cc1111rf.c:67: void resetRFSTATE(void)
                                   1218 ;	-----------------------------------------
                                   1219 ;	 function resetRFSTATE
                                   1220 ;	-----------------------------------------
      001E13                       1221 _resetRFSTATE:
                                   1222 ;	cc1111rf.c:70: RFST = RFST_SIDLE; while ((MARCSTATE) != MARC_STATE_IDLE);
      001E13 75 E1 04         [24] 1223 	mov	_RFST,#0x04
      001E16                       1224 00101$:
      001E16 90 DF 3B         [24] 1225 	mov	dptr,#_MARCSTATE
      001E19 E0               [24] 1226 	movx	a,@dptr
      001E1A FF               [12] 1227 	mov	r7,a
      001E1B BF 01 F8         [24] 1228 	cjne	r7,#0x01,00101$
                                   1229 ;	cc1111rf.c:72: RFST = rf_status;
      001E1E 90 FD 8A         [24] 1230 	mov	dptr,#_rf_status
      001E21 E0               [24] 1231 	movx	a,@dptr
      001E22 F5 E1            [12] 1232 	mov	_RFST,a
                                   1233 ;	cc1111rf.c:73: while (rf_status != RFST_SIDLE && MARCSTATE == MARC_STATE_IDLE)
      001E24                       1234 00105$:
      001E24 90 FD 8A         [24] 1235 	mov	dptr,#_rf_status
      001E27 E0               [24] 1236 	movx	a,@dptr
      001E28 FF               [12] 1237 	mov	r7,a
      001E29 BF 04 01         [24] 1238 	cjne	r7,#0x04,00124$
      001E2C 22               [24] 1239 	ret
      001E2D                       1240 00124$:
      001E2D 90 DF 3B         [24] 1241 	mov	dptr,#_MARCSTATE
      001E30 E0               [24] 1242 	movx	a,@dptr
      001E31 FF               [12] 1243 	mov	r7,a
      001E32 BF 01 02         [24] 1244 	cjne	r7,#0x01,00125$
      001E35 80 ED            [24] 1245 	sjmp	00105$
      001E37                       1246 00125$:
      001E37 22               [24] 1247 	ret
                                   1248 ;------------------------------------------------------------
                                   1249 ;Allocation info for local variables in function 'RxMode'
                                   1250 ;------------------------------------------------------------
                                   1251 ;	cc1111rf.c:78: void RxMode(void)
                                   1252 ;	-----------------------------------------
                                   1253 ;	 function RxMode
                                   1254 ;	-----------------------------------------
      001E38                       1255 _RxMode:
                                   1256 ;	cc1111rf.c:80: if (rf_status != RFST_SRX)
      001E38 90 FD 8A         [24] 1257 	mov	dptr,#_rf_status
      001E3B E0               [24] 1258 	movx	a,@dptr
      001E3C FF               [12] 1259 	mov	r7,a
      001E3D BF 02 01         [24] 1260 	cjne	r7,#0x02,00108$
      001E40 22               [24] 1261 	ret
      001E41                       1262 00108$:
                                   1263 ;	cc1111rf.c:82: MCSM1 &= 0xf0;
      001E41 90 DF 13         [24] 1264 	mov	dptr,#_MCSM1
      001E44 E0               [24] 1265 	movx	a,@dptr
      001E45 FF               [12] 1266 	mov	r7,a
      001E46 74 F0            [12] 1267 	mov	a,#0xF0
      001E48 5F               [12] 1268 	anl	a,r7
      001E49 F0               [24] 1269 	movx	@dptr,a
                                   1270 ;	cc1111rf.c:83: MCSM1 |= 0x0f;
      001E4A E0               [24] 1271 	movx	a,@dptr
      001E4B FF               [12] 1272 	mov	r7,a
      001E4C 74 0F            [12] 1273 	mov	a,#0x0F
      001E4E 4F               [12] 1274 	orl	a,r7
      001E4F F0               [24] 1275 	movx	@dptr,a
                                   1276 ;	cc1111rf.c:84: rf_status = RFST_SRX;
      001E50 90 FD 8A         [24] 1277 	mov	dptr,#_rf_status
      001E53 74 02            [12] 1278 	mov	a,#0x02
      001E55 F0               [24] 1279 	movx	@dptr,a
                                   1280 ;	cc1111rf.c:86: startRX();
      001E56 02 22 61         [24] 1281 	ljmp	_startRX
                                   1282 ;------------------------------------------------------------
                                   1283 ;Allocation info for local variables in function 'TxMode'
                                   1284 ;------------------------------------------------------------
                                   1285 ;	cc1111rf.c:91: void TxMode(void)
                                   1286 ;	-----------------------------------------
                                   1287 ;	 function TxMode
                                   1288 ;	-----------------------------------------
      001E59                       1289 _TxMode:
                                   1290 ;	cc1111rf.c:93: if (rf_status != RFST_STX)
      001E59 90 FD 8A         [24] 1291 	mov	dptr,#_rf_status
      001E5C E0               [24] 1292 	movx	a,@dptr
      001E5D FF               [12] 1293 	mov	r7,a
      001E5E BF 03 01         [24] 1294 	cjne	r7,#0x03,00117$
      001E61 22               [24] 1295 	ret
      001E62                       1296 00117$:
                                   1297 ;	cc1111rf.c:95: MCSM1 &= 0xf0;
      001E62 90 DF 13         [24] 1298 	mov	dptr,#_MCSM1
      001E65 E0               [24] 1299 	movx	a,@dptr
      001E66 FF               [12] 1300 	mov	r7,a
      001E67 74 F0            [12] 1301 	mov	a,#0xF0
      001E69 5F               [12] 1302 	anl	a,r7
      001E6A F0               [24] 1303 	movx	@dptr,a
                                   1304 ;	cc1111rf.c:96: MCSM1 |= 0x0a;
      001E6B E0               [24] 1305 	movx	a,@dptr
      001E6C FF               [12] 1306 	mov	r7,a
      001E6D 74 0A            [12] 1307 	mov	a,#0x0A
      001E6F 4F               [12] 1308 	orl	a,r7
      001E70 F0               [24] 1309 	movx	@dptr,a
                                   1310 ;	cc1111rf.c:98: rf_status = RFST_STX;
      001E71 90 FD 8A         [24] 1311 	mov	dptr,#_rf_status
      001E74 74 03            [12] 1312 	mov	a,#0x03
      001E76 F0               [24] 1313 	movx	@dptr,a
                                   1314 ;	cc1111rf.c:99: RFTX;
                                   1315 ;	1-genFromRTrack replaced	mov	_RFST,#0x03
      001E77 F5 E1            [12] 1316 	mov	_RFST,a
      001E79                       1317 00101$:
      001E79 90 DF 3B         [24] 1318 	mov	dptr,#_MARCSTATE
      001E7C E0               [24] 1319 	movx	a,@dptr
      001E7D FF               [12] 1320 	mov	r7,a
      001E7E BF 13 F8         [24] 1321 	cjne	r7,#0x13,00101$
      001E81 22               [24] 1322 	ret
                                   1323 ;------------------------------------------------------------
                                   1324 ;Allocation info for local variables in function 'IdleMode'
                                   1325 ;------------------------------------------------------------
                                   1326 ;	cc1111rf.c:104: void IdleMode(void)
                                   1327 ;	-----------------------------------------
                                   1328 ;	 function IdleMode
                                   1329 ;	-----------------------------------------
      001E82                       1330 _IdleMode:
                                   1331 ;	cc1111rf.c:106: if (rf_status != RFST_SIDLE)
      001E82 90 FD 8A         [24] 1332 	mov	dptr,#_rf_status
      001E85 E0               [24] 1333 	movx	a,@dptr
      001E86 FF               [12] 1334 	mov	r7,a
      001E87 BF 04 01         [24] 1335 	cjne	r7,#0x04,00120$
      001E8A 22               [24] 1336 	ret
      001E8B                       1337 00120$:
                                   1338 ;	cc1111rf.c:109: MCSM1 &= 0xf0;
      001E8B 90 DF 13         [24] 1339 	mov	dptr,#_MCSM1
      001E8E E0               [24] 1340 	movx	a,@dptr
      001E8F FF               [12] 1341 	mov	r7,a
      001E90 74 F0            [12] 1342 	mov	a,#0xF0
      001E92 5F               [12] 1343 	anl	a,r7
      001E93 F0               [24] 1344 	movx	@dptr,a
                                   1345 ;	cc1111rf.c:110: RFIM &= ~RFIF_IRQ_DONE;
      001E94 AF 91            [24] 1346 	mov	r7,_RFIM
      001E96 74 EF            [12] 1347 	mov	a,#0xEF
      001E98 5F               [12] 1348 	anl	a,r7
      001E99 F5 91            [12] 1349 	mov	_RFIM,a
                                   1350 ;	cc1111rf.c:111: RFOFF;
      001E9B 75 E1 04         [24] 1351 	mov	_RFST,#0x04
      001E9E                       1352 00101$:
      001E9E 90 DF 3B         [24] 1353 	mov	dptr,#_MARCSTATE
      001EA1 E0               [24] 1354 	movx	a,@dptr
      001EA2 FF               [12] 1355 	mov	r7,a
      001EA3 BF 01 F8         [24] 1356 	cjne	r7,#0x01,00101$
                                   1357 ;	cc1111rf.c:118: S1CON &= ~(S1CON_RFIF_0|S1CON_RFIF_1);  // clear RFIF interrupts
      001EA6 AF 9B            [24] 1358 	mov	r7,_S1CON
      001EA8 74 FC            [12] 1359 	mov	a,#0xFC
      001EAA 5F               [12] 1360 	anl	a,r7
      001EAB F5 9B            [12] 1361 	mov	_S1CON,a
                                   1362 ;	cc1111rf.c:119: RFIF &= ~RFIF_IRQ_DONE;
      001EAD AF E9            [24] 1363 	mov	r7,_RFIF
      001EAF 74 EF            [12] 1364 	mov	a,#0xEF
      001EB1 5F               [12] 1365 	anl	a,r7
      001EB2 F5 E9            [12] 1366 	mov	_RFIF,a
                                   1367 ;	cc1111rf.c:121: rf_status = RFST_SIDLE;
      001EB4 90 FD 8A         [24] 1368 	mov	dptr,#_rf_status
      001EB7 74 04            [12] 1369 	mov	a,#0x04
      001EB9 F0               [24] 1370 	movx	@dptr,a
      001EBA 22               [24] 1371 	ret
                                   1372 ;------------------------------------------------------------
                                   1373 ;Allocation info for local variables in function 'init_RF'
                                   1374 ;------------------------------------------------------------
                                   1375 ;	cc1111rf.c:130: void init_RF()
                                   1376 ;	-----------------------------------------
                                   1377 ;	 function init_RF
                                   1378 ;	-----------------------------------------
      001EBB                       1379 _init_RF:
                                   1380 ;	cc1111rf.c:133: rf_tLastRecv = 0;
      001EBB 90 FD 8D         [24] 1381 	mov	dptr,#_rf_tLastRecv
      001EBE E4               [12] 1382 	clr	a
      001EBF F0               [24] 1383 	movx	@dptr,a
      001EC0 A3               [24] 1384 	inc	dptr
      001EC1 F0               [24] 1385 	movx	@dptr,a
                                   1386 ;	cc1111rf.c:136: rfRxCounter[FIRST_BUFFER] = 0;
      001EC2 90 FD 80         [24] 1387 	mov	dptr,#_rfRxCounter
      001EC5 F0               [24] 1388 	movx	@dptr,a
      001EC6 A3               [24] 1389 	inc	dptr
      001EC7 F0               [24] 1390 	movx	@dptr,a
                                   1391 ;	cc1111rf.c:137: rfRxCounter[SECOND_BUFFER] = 0;
      001EC8 90 FD 82         [24] 1392 	mov	dptr,#(_rfRxCounter + 0x0002)
      001ECB F0               [24] 1393 	movx	@dptr,a
      001ECC A3               [24] 1394 	inc	dptr
      001ECD F0               [24] 1395 	movx	@dptr,a
                                   1396 ;	cc1111rf.c:150: CLKCON &= 0xc7;
      001ECE 53 C6 C7         [24] 1397 	anl	_CLKCON,#0xC7
                                   1398 ;	cc1111rf.c:152: T2PR = 0;
      001ED1 75 9D 00         [24] 1399 	mov	_T2PR,#0x00
                                   1400 ;	cc1111rf.c:153: T2CTL |= T2CTL_TIP_64;  // 64, 128, 256, 1024
      001ED4 85 9E 9E         [24] 1401 	mov	_T2CTL,_T2CTL
                                   1402 ;	cc1111rf.c:154: T2CTL |= T2CTL_TIG;
      001ED7 43 9E 04         [24] 1403 	orl	_T2CTL,#0x04
                                   1404 ;	cc1111rf.c:158: IP0 |= 0;       // grp0 is RF/RFTXRX/DMA
      001EDA 85 A9 A9         [24] 1405 	mov	_IP0,_IP0
                                   1406 ;	cc1111rf.c:159: IP1 |= BIT0;
      001EDD 43 B9 01         [24] 1407 	orl	_IP1,#0x01
                                   1408 ;	cc1111rf.c:162: rf_status = RFST_SIDLE;
      001EE0 90 FD 8A         [24] 1409 	mov	dptr,#_rf_status
      001EE3 74 04            [12] 1410 	mov	a,#0x04
      001EE5 F0               [24] 1411 	movx	@dptr,a
                                   1412 ;	cc1111rf.c:171: memset(rfrxbuf,0,(BUFFER_AMOUNT * BUFFER_SIZE));
      001EE6 75 27 00         [24] 1413 	mov	_memset_PARM_2,#0x00
      001EE9 75 28 00         [24] 1414 	mov	_memset_PARM_3,#0x00
                                   1415 ;	1-genFromRTrack replaced	mov	(_memset_PARM_3 + 1),#0x04
      001EEC F5 29            [12] 1416 	mov	(_memset_PARM_3 + 1),a
      001EEE 90 F9 80         [24] 1417 	mov	dptr,#_rfrxbuf
      001EF1 75 F0 00         [24] 1418 	mov	b,#0x00
      001EF4 12 2E 22         [24] 1419 	lcall	_memset
                                   1420 ;	cc1111rf.c:173: appInitRf();
      001EF7 12 17 B5         [24] 1421 	lcall	_appInitRf
                                   1422 ;	cc1111rf.c:176: RFTXRXIE = 1;                   // FIXME: should this be something that is enabled/disabled by usb?
      001EFA D2 A8            [12] 1423 	setb	_RFTXRXIE
                                   1424 ;	cc1111rf.c:177: RFIM = 0xd1;    // TXUNF, RXOVF, DONE, SFD  (SFD to mark time of receipt)
      001EFC 75 91 D1         [24] 1425 	mov	_RFIM,#0xD1
                                   1426 ;	cc1111rf.c:178: RFIF = 0;
      001EFF 75 E9 00         [24] 1427 	mov	_RFIF,#0x00
                                   1428 ;	cc1111rf.c:179: rfif = 0;
      001F02 75 22 00         [24] 1429 	mov	_rfif,#0x00
                                   1430 ;	cc1111rf.c:180: IEN2 |= IEN2_RFIE;
      001F05 43 9A 01         [24] 1431 	orl	_IEN2,#0x01
                                   1432 ;	cc1111rf.c:183: RFOFF;
      001F08 75 E1 04         [24] 1433 	mov	_RFST,#0x04
      001F0B                       1434 00101$:
      001F0B 90 DF 3B         [24] 1435 	mov	dptr,#_MARCSTATE
      001F0E E0               [24] 1436 	movx	a,@dptr
      001F0F FF               [12] 1437 	mov	r7,a
      001F10 BF 01 F8         [24] 1438 	cjne	r7,#0x01,00101$
      001F13 22               [24] 1439 	ret
                                   1440 ;------------------------------------------------------------
                                   1441 ;Allocation info for local variables in function 'waitRSSI'
                                   1442 ;------------------------------------------------------------
                                   1443 ;u16WaitTime               Allocated to registers r6 r7 
                                   1444 ;------------------------------------------------------------
                                   1445 ;	cc1111rf.c:188: int waitRSSI()
                                   1446 ;	-----------------------------------------
                                   1447 ;	 function waitRSSI
                                   1448 ;	-----------------------------------------
      001F14                       1449 _waitRSSI:
                                   1450 ;	cc1111rf.c:191: while(u16WaitTime < RSSI_TIMEOUT_US)
      001F14 7E 00            [12] 1451 	mov	r6,#0x00
      001F16 7F 00            [12] 1452 	mov	r7,#0x00
      001F18                       1453 00104$:
      001F18 C3               [12] 1454 	clr	c
      001F19 EE               [12] 1455 	mov	a,r6
      001F1A 94 DC            [12] 1456 	subb	a,#0xDC
      001F1C EF               [12] 1457 	mov	a,r7
      001F1D 94 05            [12] 1458 	subb	a,#0x05
      001F1F 50 24            [24] 1459 	jnc	00106$
                                   1460 ;	cc1111rf.c:193: if(PKTSTATUS & (PKTSTATUS_CCA | PKTSTATUS_CS))
      001F21 90 DF 3C         [24] 1461 	mov	dptr,#_PKTSTATUS
      001F24 E0               [24] 1462 	movx	a,@dptr
      001F25 FD               [12] 1463 	mov	r5,a
      001F26 54 50            [12] 1464 	anl	a,#0x50
      001F28 60 04            [24] 1465 	jz	00102$
                                   1466 ;	cc1111rf.c:195: return 1;
      001F2A 90 00 01         [24] 1467 	mov	dptr,#0x0001
      001F2D 22               [24] 1468 	ret
      001F2E                       1469 00102$:
                                   1470 ;	cc1111rf.c:199: sleepMicros(50);
      001F2E 90 00 32         [24] 1471 	mov	dptr,#0x0032
      001F31 C0 07            [24] 1472 	push	ar7
      001F33 C0 06            [24] 1473 	push	ar6
      001F35 12 28 93         [24] 1474 	lcall	_sleepMicros
      001F38 D0 06            [24] 1475 	pop	ar6
      001F3A D0 07            [24] 1476 	pop	ar7
                                   1477 ;	cc1111rf.c:200: u16WaitTime += 50;
      001F3C 74 32            [12] 1478 	mov	a,#0x32
      001F3E 2E               [12] 1479 	add	a,r6
      001F3F FE               [12] 1480 	mov	r6,a
      001F40 E4               [12] 1481 	clr	a
      001F41 3F               [12] 1482 	addc	a,r7
      001F42 FF               [12] 1483 	mov	r7,a
      001F43 80 D3            [24] 1484 	sjmp	00104$
      001F45                       1485 00106$:
                                   1486 ;	cc1111rf.c:203: return 0;
      001F45 90 00 00         [24] 1487 	mov	dptr,#0x0000
      001F48 22               [24] 1488 	ret
                                   1489 ;------------------------------------------------------------
                                   1490 ;Allocation info for local variables in function 'transmit'
                                   1491 ;------------------------------------------------------------
                                   1492 ;sloc0                     Allocated with name '_transmit_sloc0_1_0'
                                   1493 ;len                       Allocated with name '_transmit_PARM_2'
                                   1494 ;repeat                    Allocated with name '_transmit_PARM_3'
                                   1495 ;offset                    Allocated with name '_transmit_PARM_4'
                                   1496 ;buf                       Allocated with name '_transmit_buf_1_96'
                                   1497 ;countdown                 Allocated with name '_transmit_countdown_1_97'
                                   1498 ;encoffset                 Allocated with name '_transmit_encoffset_1_97'
                                   1499 ;original_pktlen           Allocated with name '_transmit_original_pktlen_1_97'
                                   1500 ;------------------------------------------------------------
                                   1501 ;	cc1111rf.c:214: u8 transmit(__xdata u8* __xdata buf, __xdata u16 len, __xdata u16 repeat, __xdata u16 offset)
                                   1502 ;	-----------------------------------------
                                   1503 ;	 function transmit
                                   1504 ;	-----------------------------------------
      001F49                       1505 _transmit:
      001F49 AF 83            [24] 1506 	mov	r7,dph
      001F4B E5 82            [12] 1507 	mov	a,dpl
      001F4D 90 FD AA         [24] 1508 	mov	dptr,#_transmit_buf_1_96
      001F50 F0               [24] 1509 	movx	@dptr,a
      001F51 EF               [12] 1510 	mov	a,r7
      001F52 A3               [24] 1511 	inc	dptr
      001F53 F0               [24] 1512 	movx	@dptr,a
                                   1513 ;	cc1111rf.c:217: __xdata u8 encoffset = 0;
      001F54 90 FD AC         [24] 1514 	mov	dptr,#_transmit_encoffset_1_97
      001F57 E4               [12] 1515 	clr	a
      001F58 F0               [24] 1516 	movx	@dptr,a
                                   1517 ;	cc1111rf.c:218: __xdata u8 original_pktlen = PKTLEN;
      001F59 90 DF 02         [24] 1518 	mov	dptr,#_PKTLEN
      001F5C E0               [24] 1519 	movx	a,@dptr
      001F5D FF               [12] 1520 	mov	r7,a
                                   1521 ;	cc1111rf.c:220: while (MARCSTATE == MARC_STATE_TX)
      001F5E                       1522 00101$:
      001F5E 90 DF 3B         [24] 1523 	mov	dptr,#_MARCSTATE
      001F61 E0               [24] 1524 	movx	a,@dptr
      001F62 FE               [12] 1525 	mov	r6,a
      001F63 BE 13 04         [24] 1526 	cjne	r6,#0x13,00103$
                                   1527 ;	cc1111rf.c:222: LED = !LED;
      001F66 B2 A4            [12] 1528 	cpl	_P2_4
      001F68 80 F4            [24] 1529 	sjmp	00101$
      001F6A                       1530 00103$:
                                   1531 ;	cc1111rf.c:228: LED = 0;
      001F6A C2 A4            [12] 1532 	clr	_P2_4
                                   1533 ;	cc1111rf.c:231: rfTxInfMode = 0;
      001F6C 90 FD F8         [24] 1534 	mov	dptr,#_rfTxInfMode
      001F6F E4               [12] 1535 	clr	a
      001F70 F0               [24] 1536 	movx	@dptr,a
                                   1537 ;	cc1111rf.c:232: rfTxRepeatCounter = repeat;
      001F71 90 FD A6         [24] 1538 	mov	dptr,#_transmit_PARM_3
      001F74 E0               [24] 1539 	movx	a,@dptr
      001F75 FD               [12] 1540 	mov	r5,a
      001F76 A3               [24] 1541 	inc	dptr
      001F77 E0               [24] 1542 	movx	a,@dptr
      001F78 FE               [12] 1543 	mov	r6,a
      001F79 90 FD EE         [24] 1544 	mov	dptr,#_rfTxRepeatCounter
      001F7C ED               [12] 1545 	mov	a,r5
      001F7D F0               [24] 1546 	movx	@dptr,a
      001F7E EE               [12] 1547 	mov	a,r6
      001F7F A3               [24] 1548 	inc	dptr
      001F80 F0               [24] 1549 	movx	@dptr,a
                                   1550 ;	cc1111rf.c:233: rfTxRepeatOffset = offset;
      001F81 90 FD A8         [24] 1551 	mov	dptr,#_transmit_PARM_4
      001F84 E0               [24] 1552 	movx	a,@dptr
      001F85 FB               [12] 1553 	mov	r3,a
      001F86 A3               [24] 1554 	inc	dptr
      001F87 E0               [24] 1555 	movx	a,@dptr
      001F88 FC               [12] 1556 	mov	r4,a
      001F89 90 FD F4         [24] 1557 	mov	dptr,#_rfTxRepeatOffset
      001F8C EB               [12] 1558 	mov	a,r3
      001F8D F0               [24] 1559 	movx	@dptr,a
      001F8E EC               [12] 1560 	mov	a,r4
      001F8F A3               [24] 1561 	inc	dptr
      001F90 F0               [24] 1562 	movx	@dptr,a
                                   1563 ;	cc1111rf.c:234: rfTxBufferEnd = len;
      001F91 90 FD A4         [24] 1564 	mov	dptr,#_transmit_PARM_2
      001F94 E0               [24] 1565 	movx	a,@dptr
      001F95 F9               [12] 1566 	mov	r1,a
      001F96 A3               [24] 1567 	inc	dptr
      001F97 E0               [24] 1568 	movx	a,@dptr
      001F98 FA               [12] 1569 	mov	r2,a
      001F99 90 FD F0         [24] 1570 	mov	dptr,#_rfTxBufferEnd
      001F9C E9               [12] 1571 	mov	a,r1
      001F9D F0               [24] 1572 	movx	@dptr,a
      001F9E EA               [12] 1573 	mov	a,r2
      001F9F A3               [24] 1574 	inc	dptr
      001FA0 F0               [24] 1575 	movx	@dptr,a
                                   1576 ;	cc1111rf.c:235: rfTxRepeatLen = len - offset;
      001FA1 90 FD F2         [24] 1577 	mov	dptr,#_rfTxRepeatLen
      001FA4 E9               [12] 1578 	mov	a,r1
      001FA5 C3               [12] 1579 	clr	c
      001FA6 9B               [12] 1580 	subb	a,r3
      001FA7 F0               [24] 1581 	movx	@dptr,a
      001FA8 EA               [12] 1582 	mov	a,r2
      001FA9 9C               [12] 1583 	subb	a,r4
      001FAA A3               [24] 1584 	inc	dptr
      001FAB F0               [24] 1585 	movx	@dptr,a
                                   1586 ;	cc1111rf.c:237: rfTxTotalTXLen = len + (rfTxRepeatLen * repeat);
      001FAC 90 FD F2         [24] 1587 	mov	dptr,#_rfTxRepeatLen
      001FAF E0               [24] 1588 	movx	a,@dptr
      001FB0 FB               [12] 1589 	mov	r3,a
      001FB1 A3               [24] 1590 	inc	dptr
      001FB2 E0               [24] 1591 	movx	a,@dptr
      001FB3 FC               [12] 1592 	mov	r4,a
      001FB4 8D 27            [24] 1593 	mov	__mulint_PARM_2,r5
      001FB6 8E 28            [24] 1594 	mov	(__mulint_PARM_2 + 1),r6
      001FB8 8B 82            [24] 1595 	mov	dpl,r3
      001FBA 8C 83            [24] 1596 	mov	dph,r4
      001FBC C0 07            [24] 1597 	push	ar7
      001FBE C0 06            [24] 1598 	push	ar6
      001FC0 C0 05            [24] 1599 	push	ar5
      001FC2 C0 02            [24] 1600 	push	ar2
      001FC4 C0 01            [24] 1601 	push	ar1
      001FC6 12 2E FD         [24] 1602 	lcall	__mulint
      001FC9 AB 82            [24] 1603 	mov	r3,dpl
      001FCB AC 83            [24] 1604 	mov	r4,dph
      001FCD D0 01            [24] 1605 	pop	ar1
      001FCF D0 02            [24] 1606 	pop	ar2
      001FD1 D0 05            [24] 1607 	pop	ar5
      001FD3 D0 06            [24] 1608 	pop	ar6
      001FD5 D0 07            [24] 1609 	pop	ar7
      001FD7 90 FD F6         [24] 1610 	mov	dptr,#_rfTxTotalTXLen
      001FDA EB               [12] 1611 	mov	a,r3
      001FDB 29               [12] 1612 	add	a,r1
      001FDC F0               [24] 1613 	movx	@dptr,a
      001FDD EC               [12] 1614 	mov	a,r4
      001FDE 3A               [12] 1615 	addc	a,r2
      001FDF A3               [24] 1616 	inc	dptr
      001FE0 F0               [24] 1617 	movx	@dptr,a
                                   1618 ;	cc1111rf.c:242: if(len == 0)
      001FE1 E9               [12] 1619 	mov	a,r1
      001FE2 4A               [12] 1620 	orl	a,r2
      001FE3 70 5D            [24] 1621 	jnz	00118$
                                   1622 ;	cc1111rf.c:244: len = buf[0];
      001FE5 90 FD AA         [24] 1623 	mov	dptr,#_transmit_buf_1_96
      001FE8 E0               [24] 1624 	movx	a,@dptr
      001FE9 FB               [12] 1625 	mov	r3,a
      001FEA A3               [24] 1626 	inc	dptr
      001FEB E0               [24] 1627 	movx	a,@dptr
      001FEC FC               [12] 1628 	mov	r4,a
      001FED 8B 82            [24] 1629 	mov	dpl,r3
      001FEF 8C 83            [24] 1630 	mov	dph,r4
      001FF1 E0               [24] 1631 	movx	a,@dptr
      001FF2 F8               [12] 1632 	mov	r0,a
      001FF3 88 23            [24] 1633 	mov	_transmit_sloc0_1_0,r0
      001FF5 75 24 00         [24] 1634 	mov	(_transmit_sloc0_1_0 + 1),#0x00
      001FF8 90 FD A4         [24] 1635 	mov	dptr,#_transmit_PARM_2
      001FFB E5 23            [12] 1636 	mov	a,_transmit_sloc0_1_0
      001FFD F0               [24] 1637 	movx	@dptr,a
      001FFE E5 24            [12] 1638 	mov	a,(_transmit_sloc0_1_0 + 1)
      002000 A3               [24] 1639 	inc	dptr
      002001 F0               [24] 1640 	movx	@dptr,a
                                   1641 ;	cc1111rf.c:246: switch (PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG)
      002002 90 DF 04         [24] 1642 	mov	dptr,#_PKTCTRL0
      002005 E0               [24] 1643 	movx	a,@dptr
      002006 F8               [12] 1644 	mov	r0,a
      002007 53 00 03         [24] 1645 	anl	ar0,#0x03
      00200A B8 00 02         [24] 1646 	cjne	r0,#0x00,00214$
      00200D 80 18            [24] 1647 	sjmp	00105$
      00200F                       1648 00214$:
      00200F B8 01 02         [24] 1649 	cjne	r0,#0x01,00215$
      002012 80 03            [24] 1650 	sjmp	00216$
      002014                       1651 00215$:
      002014 02 20 D4         [24] 1652 	ljmp	00119$
      002017                       1653 00216$:
                                   1654 ;	cc1111rf.c:249: len++;  // we need to send the length byte too...
      002017 90 FD A4         [24] 1655 	mov	dptr,#_transmit_PARM_2
      00201A 74 01            [12] 1656 	mov	a,#0x01
      00201C 25 23            [12] 1657 	add	a,_transmit_sloc0_1_0
      00201E F0               [24] 1658 	movx	@dptr,a
      00201F E4               [12] 1659 	clr	a
      002020 35 24            [12] 1660 	addc	a,(_transmit_sloc0_1_0 + 1)
      002022 A3               [24] 1661 	inc	dptr
      002023 F0               [24] 1662 	movx	@dptr,a
                                   1663 ;	cc1111rf.c:250: break;
      002024 02 20 D4         [24] 1664 	ljmp	00119$
                                   1665 ;	cc1111rf.c:251: case PKTCTRL0_LENGTH_CONFIG_FIX:
      002027                       1666 00105$:
                                   1667 ;	cc1111rf.c:252: buf++;  // skip sending the length byte
      002027 90 FD AA         [24] 1668 	mov	dptr,#_transmit_buf_1_96
      00202A 74 01            [12] 1669 	mov	a,#0x01
      00202C 2B               [12] 1670 	add	a,r3
      00202D F0               [24] 1671 	movx	@dptr,a
      00202E E4               [12] 1672 	clr	a
      00202F 3C               [12] 1673 	addc	a,r4
      002030 A3               [24] 1674 	inc	dptr
      002031 F0               [24] 1675 	movx	@dptr,a
                                   1676 ;	cc1111rf.c:253: PKTLEN= len;
      002032 90 FD A4         [24] 1677 	mov	dptr,#_transmit_PARM_2
      002035 E0               [24] 1678 	movx	a,@dptr
      002036 FB               [12] 1679 	mov	r3,a
      002037 A3               [24] 1680 	inc	dptr
      002038 E0               [24] 1681 	movx	a,@dptr
      002039 FC               [12] 1682 	mov	r4,a
      00203A 90 DF 02         [24] 1683 	mov	dptr,#_PKTLEN
      00203D EB               [12] 1684 	mov	a,r3
      00203E F0               [24] 1685 	movx	@dptr,a
                                   1686 ;	cc1111rf.c:254: break;
      00203F 02 20 D4         [24] 1687 	ljmp	00119$
                                   1688 ;	cc1111rf.c:257: }
      002042                       1689 00118$:
                                   1690 ;	cc1111rf.c:263: switch (PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG)
      002042 90 DF 04         [24] 1691 	mov	dptr,#_PKTCTRL0
      002045 E0               [24] 1692 	movx	a,@dptr
      002046 FC               [12] 1693 	mov	r4,a
      002047 53 04 03         [24] 1694 	anl	ar4,#0x03
      00204A BC 00 02         [24] 1695 	cjne	r4,#0x00,00217$
      00204D 80 46            [24] 1696 	sjmp	00109$
      00204F                       1697 00217$:
      00204F BC 01 02         [24] 1698 	cjne	r4,#0x01,00218$
      002052 80 03            [24] 1699 	sjmp	00219$
      002054                       1700 00218$:
      002054 02 20 D4         [24] 1701 	ljmp	00119$
      002057                       1702 00219$:
                                   1703 ;	cc1111rf.c:267: byte_shuffle(buf, len, 1);
      002057 90 FD AA         [24] 1704 	mov	dptr,#_transmit_buf_1_96
      00205A E0               [24] 1705 	movx	a,@dptr
      00205B FB               [12] 1706 	mov	r3,a
      00205C A3               [24] 1707 	inc	dptr
      00205D E0               [24] 1708 	movx	a,@dptr
      00205E FC               [12] 1709 	mov	r4,a
      00205F 90 FD AD         [24] 1710 	mov	dptr,#_byte_shuffle_PARM_2
      002062 E9               [12] 1711 	mov	a,r1
      002063 F0               [24] 1712 	movx	@dptr,a
      002064 EA               [12] 1713 	mov	a,r2
      002065 A3               [24] 1714 	inc	dptr
      002066 F0               [24] 1715 	movx	@dptr,a
      002067 90 FD AF         [24] 1716 	mov	dptr,#_byte_shuffle_PARM_3
      00206A 74 01            [12] 1717 	mov	a,#0x01
      00206C F0               [24] 1718 	movx	@dptr,a
      00206D E4               [12] 1719 	clr	a
      00206E A3               [24] 1720 	inc	dptr
      00206F F0               [24] 1721 	movx	@dptr,a
      002070 8B 82            [24] 1722 	mov	dpl,r3
      002072 8C 83            [24] 1723 	mov	dph,r4
      002074 C0 07            [24] 1724 	push	ar7
      002076 C0 02            [24] 1725 	push	ar2
      002078 C0 01            [24] 1726 	push	ar1
      00207A 12 28 10         [24] 1727 	lcall	_byte_shuffle
      00207D D0 01            [24] 1728 	pop	ar1
      00207F D0 02            [24] 1729 	pop	ar2
      002081 D0 07            [24] 1730 	pop	ar7
                                   1731 ;	cc1111rf.c:268: buf[0] = (u8) len;
      002083 90 FD AA         [24] 1732 	mov	dptr,#_transmit_buf_1_96
      002086 E0               [24] 1733 	movx	a,@dptr
      002087 FB               [12] 1734 	mov	r3,a
      002088 A3               [24] 1735 	inc	dptr
      002089 E0               [24] 1736 	movx	a,@dptr
      00208A FC               [12] 1737 	mov	r4,a
      00208B 89 00            [24] 1738 	mov	ar0,r1
      00208D 8B 82            [24] 1739 	mov	dpl,r3
      00208F 8C 83            [24] 1740 	mov	dph,r4
      002091 E8               [12] 1741 	mov	a,r0
      002092 F0               [24] 1742 	movx	@dptr,a
                                   1743 ;	cc1111rf.c:269: break;
                                   1744 ;	cc1111rf.c:270: case PKTCTRL0_LENGTH_CONFIG_FIX:
      002093 80 3F            [24] 1745 	sjmp	00119$
      002095                       1746 00109$:
                                   1747 ;	cc1111rf.c:274: if(repeat)
      002095 ED               [12] 1748 	mov	a,r5
      002096 4E               [12] 1749 	orl	a,r6
      002097 60 36            [24] 1750 	jz	00113$
                                   1751 ;	cc1111rf.c:278: PKTLEN = (u8) (rfTxTotalTXLen % 256);
      002099 90 FD F6         [24] 1752 	mov	dptr,#_rfTxTotalTXLen
      00209C E0               [24] 1753 	movx	a,@dptr
      00209D FD               [12] 1754 	mov	r5,a
      00209E A3               [24] 1755 	inc	dptr
      00209F E0               [24] 1756 	movx	a,@dptr
      0020A0 90 DF 02         [24] 1757 	mov	dptr,#_PKTLEN
      0020A3 ED               [12] 1758 	mov	a,r5
      0020A4 F0               [24] 1759 	movx	@dptr,a
                                   1760 ;	cc1111rf.c:279: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
      0020A5 90 DF 04         [24] 1761 	mov	dptr,#_PKTCTRL0
      0020A8 E0               [24] 1762 	movx	a,@dptr
      0020A9 FE               [12] 1763 	mov	r6,a
      0020AA 74 FC            [12] 1764 	mov	a,#0xFC
      0020AC 5E               [12] 1765 	anl	a,r6
      0020AD F0               [24] 1766 	movx	@dptr,a
                                   1767 ;	cc1111rf.c:281: if(rfTxTotalTXLen > RF_MAX_TX_BLOCK)
      0020AE 90 FD F6         [24] 1768 	mov	dptr,#_rfTxTotalTXLen
      0020B1 E0               [24] 1769 	movx	a,@dptr
      0020B2 FD               [12] 1770 	mov	r5,a
      0020B3 A3               [24] 1771 	inc	dptr
      0020B4 E0               [24] 1772 	movx	a,@dptr
      0020B5 FE               [12] 1773 	mov	r6,a
      0020B6 C3               [12] 1774 	clr	c
      0020B7 74 FF            [12] 1775 	mov	a,#0xFF
      0020B9 9D               [12] 1776 	subb	a,r5
      0020BA E4               [12] 1777 	clr	a
      0020BB 9E               [12] 1778 	subb	a,r6
      0020BC 50 09            [24] 1779 	jnc	00111$
                                   1780 ;	cc1111rf.c:282: PKTCTRL0 |= PKTCTRL0_LENGTH_CONFIG_INF;
      0020BE 90 DF 04         [24] 1781 	mov	dptr,#_PKTCTRL0
      0020C1 E0               [24] 1782 	movx	a,@dptr
      0020C2 FE               [12] 1783 	mov	r6,a
      0020C3 74 02            [12] 1784 	mov	a,#0x02
      0020C5 4E               [12] 1785 	orl	a,r6
      0020C6 F0               [24] 1786 	movx	@dptr,a
      0020C7                       1787 00111$:
                                   1788 ;	cc1111rf.c:284: rfTxInfMode = 1;
      0020C7 90 FD F8         [24] 1789 	mov	dptr,#_rfTxInfMode
      0020CA 74 01            [12] 1790 	mov	a,#0x01
      0020CC F0               [24] 1791 	movx	@dptr,a
      0020CD 80 05            [24] 1792 	sjmp	00119$
      0020CF                       1793 00113$:
                                   1794 ;	cc1111rf.c:287: PKTLEN = len;
      0020CF 90 DF 02         [24] 1795 	mov	dptr,#_PKTLEN
      0020D2 E9               [12] 1796 	mov	a,r1
      0020D3 F0               [24] 1797 	movx	@dptr,a
                                   1798 ;	cc1111rf.c:291: }
      0020D4                       1799 00119$:
                                   1800 ;	cc1111rf.c:296: RFTXRXIE = 1;
      0020D4 D2 A8            [12] 1801 	setb	_RFTXRXIE
                                   1802 ;	cc1111rf.c:302: if(rfAESMode & AES_CRYPTO_OUT_ENABLE)
      0020D6 90 FD F9         [24] 1803 	mov	dptr,#_rfAESMode
      0020D9 E0               [24] 1804 	movx	a,@dptr
      0020DA FE               [12] 1805 	mov	r6,a
      0020DB 20 E3 03         [24] 1806 	jb	acc.3,00222$
      0020DE 02 22 02         [24] 1807 	ljmp	00135$
      0020E1                       1808 00222$:
                                   1809 ;	cc1111rf.c:304: if((PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG) == PKTCTRL0_LENGTH_CONFIG_VAR)
      0020E1 90 DF 04         [24] 1810 	mov	dptr,#_PKTCTRL0
      0020E4 E0               [24] 1811 	movx	a,@dptr
      0020E5 FE               [12] 1812 	mov	r6,a
      0020E6 53 06 03         [24] 1813 	anl	ar6,#0x03
      0020E9 BE 01 06         [24] 1814 	cjne	r6,#0x01,00121$
                                   1815 ;	cc1111rf.c:305: encoffset= 1;
      0020EC 90 FD AC         [24] 1816 	mov	dptr,#_transmit_encoffset_1_97
      0020EF 74 01            [12] 1817 	mov	a,#0x01
      0020F1 F0               [24] 1818 	movx	@dptr,a
      0020F2                       1819 00121$:
                                   1820 ;	cc1111rf.c:307: len= padAES(buf + encoffset, len);
      0020F2 90 FD AC         [24] 1821 	mov	dptr,#_transmit_encoffset_1_97
      0020F5 E0               [24] 1822 	movx	a,@dptr
      0020F6 FE               [12] 1823 	mov	r6,a
      0020F7 90 FD AA         [24] 1824 	mov	dptr,#_transmit_buf_1_96
      0020FA E0               [24] 1825 	movx	a,@dptr
      0020FB FC               [12] 1826 	mov	r4,a
      0020FC A3               [24] 1827 	inc	dptr
      0020FD E0               [24] 1828 	movx	a,@dptr
      0020FE FD               [12] 1829 	mov	r5,a
      0020FF EE               [12] 1830 	mov	a,r6
      002100 2C               [12] 1831 	add	a,r4
      002101 FA               [12] 1832 	mov	r2,a
      002102 E4               [12] 1833 	clr	a
      002103 3D               [12] 1834 	addc	a,r5
      002104 FB               [12] 1835 	mov	r3,a
      002105 90 FD A4         [24] 1836 	mov	dptr,#_transmit_PARM_2
      002108 E0               [24] 1837 	movx	a,@dptr
      002109 F8               [12] 1838 	mov	r0,a
      00210A A3               [24] 1839 	inc	dptr
      00210B E0               [24] 1840 	movx	a,@dptr
      00210C F9               [12] 1841 	mov	r1,a
      00210D 90 FD CB         [24] 1842 	mov	dptr,#_padAES_PARM_2
      002110 E8               [12] 1843 	mov	a,r0
      002111 F0               [24] 1844 	movx	@dptr,a
      002112 E9               [12] 1845 	mov	a,r1
      002113 A3               [24] 1846 	inc	dptr
      002114 F0               [24] 1847 	movx	@dptr,a
      002115 8A 82            [24] 1848 	mov	dpl,r2
      002117 8B 83            [24] 1849 	mov	dph,r3
      002119 C0 07            [24] 1850 	push	ar7
      00211B C0 06            [24] 1851 	push	ar6
      00211D C0 05            [24] 1852 	push	ar5
      00211F C0 04            [24] 1853 	push	ar4
      002121 12 2B 5F         [24] 1854 	lcall	_padAES
      002124 AA 82            [24] 1855 	mov	r2,dpl
      002126 AB 83            [24] 1856 	mov	r3,dph
      002128 D0 04            [24] 1857 	pop	ar4
      00212A D0 05            [24] 1858 	pop	ar5
      00212C D0 06            [24] 1859 	pop	ar6
      00212E D0 07            [24] 1860 	pop	ar7
                                   1861 ;	cc1111rf.c:309: if((rfAESMode & AES_CRYPTO_OUT_TYPE) == AES_CRYPTO_OUT_ENCRYPT)
      002130 90 FD F9         [24] 1862 	mov	dptr,#_rfAESMode
      002133 E0               [24] 1863 	movx	a,@dptr
      002134 F9               [12] 1864 	mov	r1,a
      002135 53 01 04         [24] 1865 	anl	ar1,#0x04
      002138 B9 04 48         [24] 1866 	cjne	r1,#0x04,00123$
                                   1867 ;	cc1111rf.c:310: encAES(buf + encoffset, buf + encoffset, len, (rfAESMode & AES_CRYPTO_MODE));
      00213B C0 07            [24] 1868 	push	ar7
      00213D EE               [12] 1869 	mov	a,r6
      00213E 2C               [12] 1870 	add	a,r4
      00213F F8               [12] 1871 	mov	r0,a
      002140 E4               [12] 1872 	clr	a
      002141 3D               [12] 1873 	addc	a,r5
      002142 F9               [12] 1874 	mov	r1,a
      002143 90 FD F9         [24] 1875 	mov	dptr,#_rfAESMode
      002146 E0               [24] 1876 	movx	a,@dptr
      002147 FF               [12] 1877 	mov	r7,a
      002148 53 07 F0         [24] 1878 	anl	ar7,#0xF0
      00214B 90 FD CF         [24] 1879 	mov	dptr,#_encAES_PARM_2
      00214E E8               [12] 1880 	mov	a,r0
      00214F F0               [24] 1881 	movx	@dptr,a
      002150 E9               [12] 1882 	mov	a,r1
      002151 A3               [24] 1883 	inc	dptr
      002152 F0               [24] 1884 	movx	@dptr,a
      002153 90 FD D1         [24] 1885 	mov	dptr,#_encAES_PARM_3
      002156 EA               [12] 1886 	mov	a,r2
      002157 F0               [24] 1887 	movx	@dptr,a
      002158 EB               [12] 1888 	mov	a,r3
      002159 A3               [24] 1889 	inc	dptr
      00215A F0               [24] 1890 	movx	@dptr,a
      00215B 90 FD D3         [24] 1891 	mov	dptr,#_encAES_PARM_4
      00215E EF               [12] 1892 	mov	a,r7
      00215F F0               [24] 1893 	movx	@dptr,a
      002160 88 82            [24] 1894 	mov	dpl,r0
      002162 89 83            [24] 1895 	mov	dph,r1
      002164 C0 07            [24] 1896 	push	ar7
      002166 C0 06            [24] 1897 	push	ar6
      002168 C0 05            [24] 1898 	push	ar5
      00216A C0 04            [24] 1899 	push	ar4
      00216C C0 03            [24] 1900 	push	ar3
      00216E C0 02            [24] 1901 	push	ar2
      002170 12 2B 99         [24] 1902 	lcall	_encAES
      002173 D0 02            [24] 1903 	pop	ar2
      002175 D0 03            [24] 1904 	pop	ar3
      002177 D0 04            [24] 1905 	pop	ar4
      002179 D0 05            [24] 1906 	pop	ar5
      00217B D0 06            [24] 1907 	pop	ar6
      00217D D0 07            [24] 1908 	pop	ar7
      00217F D0 07            [24] 1909 	pop	ar7
      002181 80 46            [24] 1910 	sjmp	00124$
      002183                       1911 00123$:
                                   1912 ;	cc1111rf.c:312: decAES(buf + encoffset, buf + encoffset, len, (rfAESMode & AES_CRYPTO_MODE));
      002183 C0 07            [24] 1913 	push	ar7
      002185 EE               [12] 1914 	mov	a,r6
      002186 2C               [12] 1915 	add	a,r4
      002187 F8               [12] 1916 	mov	r0,a
      002188 E4               [12] 1917 	clr	a
      002189 3D               [12] 1918 	addc	a,r5
      00218A F9               [12] 1919 	mov	r1,a
      00218B 90 FD F9         [24] 1920 	mov	dptr,#_rfAESMode
      00218E E0               [24] 1921 	movx	a,@dptr
      00218F FF               [12] 1922 	mov	r7,a
      002190 53 07 F0         [24] 1923 	anl	ar7,#0xF0
      002193 90 FD D6         [24] 1924 	mov	dptr,#_decAES_PARM_2
      002196 E8               [12] 1925 	mov	a,r0
      002197 F0               [24] 1926 	movx	@dptr,a
      002198 E9               [12] 1927 	mov	a,r1
      002199 A3               [24] 1928 	inc	dptr
      00219A F0               [24] 1929 	movx	@dptr,a
      00219B 90 FD D8         [24] 1930 	mov	dptr,#_decAES_PARM_3
      00219E EA               [12] 1931 	mov	a,r2
      00219F F0               [24] 1932 	movx	@dptr,a
      0021A0 EB               [12] 1933 	mov	a,r3
      0021A1 A3               [24] 1934 	inc	dptr
      0021A2 F0               [24] 1935 	movx	@dptr,a
      0021A3 90 FD DA         [24] 1936 	mov	dptr,#_decAES_PARM_4
      0021A6 EF               [12] 1937 	mov	a,r7
      0021A7 F0               [24] 1938 	movx	@dptr,a
      0021A8 88 82            [24] 1939 	mov	dpl,r0
      0021AA 89 83            [24] 1940 	mov	dph,r1
      0021AC C0 07            [24] 1941 	push	ar7
      0021AE C0 06            [24] 1942 	push	ar6
      0021B0 C0 05            [24] 1943 	push	ar5
      0021B2 C0 04            [24] 1944 	push	ar4
      0021B4 C0 03            [24] 1945 	push	ar3
      0021B6 C0 02            [24] 1946 	push	ar2
      0021B8 12 2B E2         [24] 1947 	lcall	_decAES
      0021BB D0 02            [24] 1948 	pop	ar2
      0021BD D0 03            [24] 1949 	pop	ar3
      0021BF D0 04            [24] 1950 	pop	ar4
      0021C1 D0 05            [24] 1951 	pop	ar5
      0021C3 D0 06            [24] 1952 	pop	ar6
      0021C5 D0 07            [24] 1953 	pop	ar7
                                   1954 ;	cc1111rf.c:426: return 1;
      0021C7 D0 07            [24] 1955 	pop	ar7
                                   1956 ;	cc1111rf.c:312: decAES(buf + encoffset, buf + encoffset, len, (rfAESMode & AES_CRYPTO_MODE));
      0021C9                       1957 00124$:
                                   1958 ;	cc1111rf.c:314: if(encoffset)
      0021C9 EE               [12] 1959 	mov	a,r6
      0021CA 60 1E            [24] 1960 	jz	00132$
                                   1961 ;	cc1111rf.c:318: if((rfAESMode & AES_CRYPTO_MODE) == ENCCS_MODE_CBCMAC)
      0021CC 90 FD F9         [24] 1962 	mov	dptr,#_rfAESMode
      0021CF E0               [24] 1963 	movx	a,@dptr
      0021D0 FE               [12] 1964 	mov	r6,a
      0021D1 53 06 F0         [24] 1965 	anl	ar6,#0xF0
      0021D4 BE 50 09         [24] 1966 	cjne	r6,#0x50,00126$
                                   1967 ;	cc1111rf.c:319: buf[0] = 16;
      0021D7 8C 82            [24] 1968 	mov	dpl,r4
      0021D9 8D 83            [24] 1969 	mov	dph,r5
      0021DB 74 10            [12] 1970 	mov	a,#0x10
      0021DD F0               [24] 1971 	movx	@dptr,a
      0021DE 80 22            [24] 1972 	sjmp	00135$
      0021E0                       1973 00126$:
                                   1974 ;	cc1111rf.c:321: buf[0] = (u8) len;
      0021E0 8A 06            [24] 1975 	mov	ar6,r2
      0021E2 8C 82            [24] 1976 	mov	dpl,r4
      0021E4 8D 83            [24] 1977 	mov	dph,r5
      0021E6 EE               [12] 1978 	mov	a,r6
      0021E7 F0               [24] 1979 	movx	@dptr,a
      0021E8 80 18            [24] 1980 	sjmp	00135$
      0021EA                       1981 00132$:
                                   1982 ;	cc1111rf.c:325: if((rfAESMode & AES_CRYPTO_MODE) == ENCCS_MODE_CBCMAC)
      0021EA 90 FD F9         [24] 1983 	mov	dptr,#_rfAESMode
      0021ED E0               [24] 1984 	movx	a,@dptr
      0021EE FE               [12] 1985 	mov	r6,a
      0021EF 53 06 F0         [24] 1986 	anl	ar6,#0xF0
      0021F2 BE 50 08         [24] 1987 	cjne	r6,#0x50,00129$
                                   1988 ;	cc1111rf.c:326: PKTLEN = 16;
      0021F5 90 DF 02         [24] 1989 	mov	dptr,#_PKTLEN
      0021F8 74 10            [12] 1990 	mov	a,#0x10
      0021FA F0               [24] 1991 	movx	@dptr,a
      0021FB 80 05            [24] 1992 	sjmp	00135$
      0021FD                       1993 00129$:
                                   1994 ;	cc1111rf.c:328: PKTLEN = (u8) len;
      0021FD 90 DF 02         [24] 1995 	mov	dptr,#_PKTLEN
      002200 EA               [12] 1996 	mov	a,r2
      002201 F0               [24] 1997 	movx	@dptr,a
      002202                       1998 00135$:
                                   1999 ;	cc1111rf.c:333: rftxbuf = buf;
      002202 90 FD AA         [24] 2000 	mov	dptr,#_transmit_buf_1_96
      002205 E0               [24] 2001 	movx	a,@dptr
      002206 FD               [12] 2002 	mov	r5,a
      002207 A3               [24] 2003 	inc	dptr
      002208 E0               [24] 2004 	movx	a,@dptr
      002209 FE               [12] 2005 	mov	r6,a
      00220A 90 FD 86         [24] 2006 	mov	dptr,#_rftxbuf
      00220D ED               [12] 2007 	mov	a,r5
      00220E F0               [24] 2008 	movx	@dptr,a
      00220F EE               [12] 2009 	mov	a,r6
      002210 A3               [24] 2010 	inc	dptr
      002211 F0               [24] 2011 	movx	@dptr,a
                                   2012 ;	cc1111rf.c:336: rfTxCounter = 0;
      002212 90 FD EC         [24] 2013 	mov	dptr,#_rfTxCounter
      002215 E4               [12] 2014 	clr	a
      002216 F0               [24] 2015 	movx	@dptr,a
      002217 A3               [24] 2016 	inc	dptr
      002218 F0               [24] 2017 	movx	@dptr,a
                                   2018 ;	cc1111rf.c:393: RFST = RFST_STX;
      002219 75 E1 03         [24] 2019 	mov	_RFST,#0x03
                                   2020 ;	cc1111rf.c:397: while (MARCSTATE != MARC_STATE_TX && --countdown)
      00221C 7D 60            [12] 2021 	mov	r5,#0x60
      00221E 7E EA            [12] 2022 	mov	r6,#0xEA
      002220                       2023 00137$:
      002220 90 DF 3B         [24] 2024 	mov	dptr,#_MARCSTATE
      002223 E0               [24] 2025 	movx	a,@dptr
      002224 FC               [12] 2026 	mov	r4,a
      002225 BC 13 02         [24] 2027 	cjne	r4,#0x13,00232$
      002228 80 0D            [24] 2028 	sjmp	00139$
      00222A                       2029 00232$:
      00222A 1D               [12] 2030 	dec	r5
      00222B BD FF 01         [24] 2031 	cjne	r5,#0xFF,00233$
      00222E 1E               [12] 2032 	dec	r6
      00222F                       2033 00233$:
      00222F ED               [12] 2034 	mov	a,r5
      002230 4E               [12] 2035 	orl	a,r6
      002231 60 04            [24] 2036 	jz	00139$
                                   2037 ;	cc1111rf.c:400: LED = !LED;
      002233 B2 A4            [12] 2038 	cpl	_P2_4
      002235 80 E9            [24] 2039 	sjmp	00137$
      002237                       2040 00139$:
                                   2041 ;	cc1111rf.c:406: LED = 1;
      002237 D2 A4            [12] 2042 	setb	_P2_4
                                   2043 ;	cc1111rf.c:407: if (!countdown)
      002239 ED               [12] 2044 	mov	a,r5
      00223A 4E               [12] 2045 	orl	a,r6
      00223B 70 06            [24] 2046 	jnz	00142$
                                   2047 ;	cc1111rf.c:409: lastCode[1] = LCE_RFTX_NEVER_TX;
      00223D 90 FD B4         [24] 2048 	mov	dptr,#(_lastCode + 0x0001)
      002240 74 13            [12] 2049 	mov	a,#0x13
      002242 F0               [24] 2050 	movx	@dptr,a
                                   2051 ;	cc1111rf.c:412: while (MARCSTATE == MARC_STATE_TX)
      002243                       2052 00142$:
      002243 90 DF 3B         [24] 2053 	mov	dptr,#_MARCSTATE
      002246 E0               [24] 2054 	movx	a,@dptr
      002247 FE               [12] 2055 	mov	r6,a
      002248 BE 13 0B         [24] 2056 	cjne	r6,#0x13,00144$
                                   2057 ;	cc1111rf.c:414: LED = !LED;
      00224B B2 A4            [12] 2058 	cpl	_P2_4
                                   2059 ;	cc1111rf.c:416: usbProcessEvents();
      00224D C0 07            [24] 2060 	push	ar7
      00224F 12 1B 68         [24] 2061 	lcall	_usbProcessEvents
      002252 D0 07            [24] 2062 	pop	ar7
      002254 80 ED            [24] 2063 	sjmp	00142$
      002256                       2064 00144$:
                                   2065 ;	cc1111rf.c:421: LED = 0;
      002256 C2 A4            [12] 2066 	clr	_P2_4
                                   2067 ;	cc1111rf.c:424: PKTLEN = original_pktlen;
      002258 90 DF 02         [24] 2068 	mov	dptr,#_PKTLEN
      00225B EF               [12] 2069 	mov	a,r7
      00225C F0               [24] 2070 	movx	@dptr,a
                                   2071 ;	cc1111rf.c:426: return 1;
      00225D 75 82 01         [24] 2072 	mov	dpl,#0x01
      002260 22               [24] 2073 	ret
                                   2074 ;------------------------------------------------------------
                                   2075 ;Allocation info for local variables in function 'startRX'
                                   2076 ;------------------------------------------------------------
                                   2077 ;	cc1111rf.c:433: void startRX(void)
                                   2078 ;	-----------------------------------------
                                   2079 ;	 function startRX
                                   2080 ;	-----------------------------------------
      002261                       2081 _startRX:
                                   2082 ;	cc1111rf.c:439: RFTXRXIE = 1;
      002261 D2 A8            [12] 2083 	setb	_RFTXRXIE
                                   2084 ;	cc1111rf.c:443: memset(rfrxbuf,0,BUFFER_SIZE);
      002263 75 27 00         [24] 2085 	mov	_memset_PARM_2,#0x00
      002266 75 28 00         [24] 2086 	mov	_memset_PARM_3,#0x00
      002269 75 29 02         [24] 2087 	mov	(_memset_PARM_3 + 1),#0x02
      00226C 90 F9 80         [24] 2088 	mov	dptr,#_rfrxbuf
      00226F 75 F0 00         [24] 2089 	mov	b,#0x00
      002272 12 2E 22         [24] 2090 	lcall	_memset
                                   2091 ;	cc1111rf.c:446: rfRxCounter[FIRST_BUFFER] = 0;
      002275 90 FD 80         [24] 2092 	mov	dptr,#_rfRxCounter
      002278 E4               [12] 2093 	clr	a
      002279 F0               [24] 2094 	movx	@dptr,a
      00227A A3               [24] 2095 	inc	dptr
      00227B F0               [24] 2096 	movx	@dptr,a
                                   2097 ;	cc1111rf.c:447: rfRxCounter[SECOND_BUFFER] = 0;
      00227C 90 FD 82         [24] 2098 	mov	dptr,#(_rfRxCounter + 0x0002)
      00227F F0               [24] 2099 	movx	@dptr,a
      002280 A3               [24] 2100 	inc	dptr
      002281 F0               [24] 2101 	movx	@dptr,a
                                   2102 ;	cc1111rf.c:453: rfRxProcessed[FIRST_BUFFER] = RX_UNPROCESSED;
      002282 90 FD 84         [24] 2103 	mov	dptr,#_rfRxProcessed
      002285 F0               [24] 2104 	movx	@dptr,a
                                   2105 ;	cc1111rf.c:454: rfRxProcessed[SECOND_BUFFER] = RX_PROCESSED;
      002286 90 FD 85         [24] 2106 	mov	dptr,#(_rfRxProcessed + 0x0001)
      002289 04               [12] 2107 	inc	a
      00228A F0               [24] 2108 	movx	@dptr,a
                                   2109 ;	cc1111rf.c:457: rfRxCurrentBuffer = 0;
      00228B 90 F9 7F         [24] 2110 	mov	dptr,#_rfRxCurrentBuffer
      00228E E4               [12] 2111 	clr	a
      00228F F0               [24] 2112 	movx	@dptr,a
                                   2113 ;	cc1111rf.c:459: S1CON &= ~(S1CON_RFIF_0|S1CON_RFIF_1);
      002290 AF 9B            [24] 2114 	mov	r7,_S1CON
      002292 74 FC            [12] 2115 	mov	a,#0xFC
      002294 5F               [12] 2116 	anl	a,r7
      002295 F5 9B            [12] 2117 	mov	_S1CON,a
                                   2118 ;	cc1111rf.c:460: RFIF &= ~RFIF_IRQ_DONE;
      002297 AF E9            [24] 2119 	mov	r7,_RFIF
      002299 74 EF            [12] 2120 	mov	a,#0xEF
      00229B 5F               [12] 2121 	anl	a,r7
      00229C F5 E9            [12] 2122 	mov	_RFIF,a
                                   2123 ;	cc1111rf.c:493: RFRX;
      00229E 75 E1 02         [24] 2124 	mov	_RFST,#0x02
      0022A1                       2125 00101$:
      0022A1 90 DF 3B         [24] 2126 	mov	dptr,#_MARCSTATE
      0022A4 E0               [24] 2127 	movx	a,@dptr
      0022A5 FF               [12] 2128 	mov	r7,a
      0022A6 BF 0D F8         [24] 2129 	cjne	r7,#0x0D,00101$
                                   2130 ;	cc1111rf.c:495: RFIM |= RFIF_IRQ_DONE;
      0022A9 43 91 10         [24] 2131 	orl	_RFIM,#0x10
      0022AC 22               [24] 2132 	ret
                                   2133 ;------------------------------------------------------------
                                   2134 ;Allocation info for local variables in function 'RepeaterStart'
                                   2135 ;------------------------------------------------------------
                                   2136 ;	cc1111rf.c:506: void RepeaterStart()
                                   2137 ;	-----------------------------------------
                                   2138 ;	 function RepeaterStart
                                   2139 ;	-----------------------------------------
      0022AD                       2140 _RepeaterStart:
                                   2141 ;	cc1111rf.c:508: bRepeatMode = 1;
      0022AD 90 FD FB         [24] 2142 	mov	dptr,#_bRepeatMode
      0022B0 74 01            [12] 2143 	mov	a,#0x01
      0022B2 F0               [24] 2144 	movx	@dptr,a
      0022B3 22               [24] 2145 	ret
                                   2146 ;------------------------------------------------------------
                                   2147 ;Allocation info for local variables in function 'RepeaterStop'
                                   2148 ;------------------------------------------------------------
                                   2149 ;	cc1111rf.c:511: void RepeaterStop()
                                   2150 ;	-----------------------------------------
                                   2151 ;	 function RepeaterStop
                                   2152 ;	-----------------------------------------
      0022B4                       2153 _RepeaterStop:
                                   2154 ;	cc1111rf.c:513: bRepeatMode = 0;
      0022B4 90 FD FB         [24] 2155 	mov	dptr,#_bRepeatMode
      0022B7 E4               [12] 2156 	clr	a
      0022B8 F0               [24] 2157 	movx	@dptr,a
      0022B9 22               [24] 2158 	ret
                                   2159 ;------------------------------------------------------------
                                   2160 ;Allocation info for local variables in function 'rfTxRxIntHandler'
                                   2161 ;------------------------------------------------------------
                                   2162 ;	cc1111rf.c:525: void rfTxRxIntHandler(void) __interrupt RFTXRX_VECTOR  // interrupt handler should transmit or receive the next byte
                                   2163 ;	-----------------------------------------
                                   2164 ;	 function rfTxRxIntHandler
                                   2165 ;	-----------------------------------------
      0022BA                       2166 _rfTxRxIntHandler:
      0022BA C0 21            [24] 2167 	push	bits
      0022BC C0 E0            [24] 2168 	push	acc
      0022BE C0 F0            [24] 2169 	push	b
      0022C0 C0 82            [24] 2170 	push	dpl
      0022C2 C0 83            [24] 2171 	push	dph
      0022C4 C0 07            [24] 2172 	push	(0+7)
      0022C6 C0 06            [24] 2173 	push	(0+6)
      0022C8 C0 05            [24] 2174 	push	(0+5)
      0022CA C0 04            [24] 2175 	push	(0+4)
      0022CC C0 03            [24] 2176 	push	(0+3)
      0022CE C0 02            [24] 2177 	push	(0+2)
      0022D0 C0 01            [24] 2178 	push	(0+1)
      0022D2 C0 00            [24] 2179 	push	(0+0)
      0022D4 C0 D0            [24] 2180 	push	psw
      0022D6 75 D0 00         [24] 2181 	mov	psw,#0x00
                                   2182 ;	cc1111rf.c:527: lastCode[0] = LC_RFTXRX_VECTOR;
      0022D9 90 FD B3         [24] 2183 	mov	dptr,#_lastCode
      0022DC 74 11            [12] 2184 	mov	a,#0x11
      0022DE F0               [24] 2185 	movx	@dptr,a
                                   2186 ;	cc1111rf.c:531: RFTXRXIF = 0;
      0022DF C2 89            [12] 2187 	clr	_RFTXRXIF
                                   2188 ;	cc1111rf.c:533: if(MARCSTATE == MARC_STATE_RX)
      0022E1 90 DF 3B         [24] 2189 	mov	dptr,#_MARCSTATE
      0022E4 E0               [24] 2190 	movx	a,@dptr
      0022E5 FF               [12] 2191 	mov	r7,a
      0022E6 BF 0D 02         [24] 2192 	cjne	r7,#0x0D,00176$
      0022E9 80 03            [24] 2193 	sjmp	00177$
      0022EB                       2194 00176$:
      0022EB 02 24 04         [24] 2195 	ljmp	00130$
      0022EE                       2196 00177$:
                                   2197 ;	cc1111rf.c:536: LED = 1;
      0022EE D2 A4            [12] 2198 	setb	_P2_4
                                   2199 ;	cc1111rf.c:538: if(rfRxInfMode)
      0022F0 90 FD E5         [24] 2200 	mov	dptr,#_rfRxInfMode
      0022F3 E0               [24] 2201 	movx	a,@dptr
      0022F4 E0               [24] 2202 	movx	a,@dptr
      0022F5 60 2A            [24] 2203 	jz	00104$
                                   2204 ;	cc1111rf.c:539: if(rfRxTotalRXLen-- < 256)
      0022F7 90 FD E6         [24] 2205 	mov	dptr,#_rfRxTotalRXLen
      0022FA E0               [24] 2206 	movx	a,@dptr
      0022FB FE               [12] 2207 	mov	r6,a
      0022FC A3               [24] 2208 	inc	dptr
      0022FD E0               [24] 2209 	movx	a,@dptr
      0022FE FF               [12] 2210 	mov	r7,a
      0022FF 90 FD E6         [24] 2211 	mov	dptr,#_rfRxTotalRXLen
      002302 E0               [24] 2212 	movx	a,@dptr
      002303 24 FF            [12] 2213 	add	a,#0xFF
      002305 FC               [12] 2214 	mov	r4,a
      002306 A3               [24] 2215 	inc	dptr
      002307 E0               [24] 2216 	movx	a,@dptr
      002308 34 FF            [12] 2217 	addc	a,#0xFF
      00230A FD               [12] 2218 	mov	r5,a
      00230B 90 FD E6         [24] 2219 	mov	dptr,#_rfRxTotalRXLen
      00230E EC               [12] 2220 	mov	a,r4
      00230F F0               [24] 2221 	movx	@dptr,a
      002310 ED               [12] 2222 	mov	a,r5
      002311 A3               [24] 2223 	inc	dptr
      002312 F0               [24] 2224 	movx	@dptr,a
      002313 74 FF            [12] 2225 	mov	a,#0x100 - 0x01
      002315 2F               [12] 2226 	add	a,r7
      002316 40 09            [24] 2227 	jc	00104$
                                   2228 ;	cc1111rf.c:540: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
      002318 90 DF 04         [24] 2229 	mov	dptr,#_PKTCTRL0
      00231B E0               [24] 2230 	movx	a,@dptr
      00231C FF               [12] 2231 	mov	r7,a
      00231D 74 FC            [12] 2232 	mov	a,#0xFC
      00231F 5F               [12] 2233 	anl	a,r7
      002320 F0               [24] 2234 	movx	@dptr,a
      002321                       2235 00104$:
                                   2236 ;	cc1111rf.c:541: rf_status = RFST_SRX;
      002321 90 FD 8A         [24] 2237 	mov	dptr,#_rf_status
      002324 74 02            [12] 2238 	mov	a,#0x02
      002326 F0               [24] 2239 	movx	@dptr,a
                                   2240 ;	cc1111rf.c:542: rfrxbuf[rfRxCurrentBuffer][rfRxCounter[rfRxCurrentBuffer]++] = RFD;
      002327 90 F9 7F         [24] 2241 	mov	dptr,#_rfRxCurrentBuffer
      00232A E0               [24] 2242 	movx	a,@dptr
      00232B 25 E0            [12] 2243 	add	a,acc
      00232D FE               [12] 2244 	mov	r6,a
      00232E E4               [12] 2245 	clr	a
      00232F 24 80            [12] 2246 	add	a,#_rfrxbuf
      002331 FF               [12] 2247 	mov	r7,a
      002332 EE               [12] 2248 	mov	a,r6
      002333 34 F9            [12] 2249 	addc	a,#(_rfrxbuf >> 8)
      002335 FE               [12] 2250 	mov	r6,a
      002336 E0               [24] 2251 	movx	a,@dptr
      002337 75 F0 02         [24] 2252 	mov	b,#0x02
      00233A A4               [48] 2253 	mul	ab
      00233B 24 80            [12] 2254 	add	a,#_rfRxCounter
      00233D FC               [12] 2255 	mov	r4,a
      00233E 74 FD            [12] 2256 	mov	a,#(_rfRxCounter >> 8)
      002340 35 F0            [12] 2257 	addc	a,b
      002342 FD               [12] 2258 	mov	r5,a
      002343 8C 82            [24] 2259 	mov	dpl,r4
      002345 8D 83            [24] 2260 	mov	dph,r5
      002347 E0               [24] 2261 	movx	a,@dptr
      002348 FA               [12] 2262 	mov	r2,a
      002349 A3               [24] 2263 	inc	dptr
      00234A E0               [24] 2264 	movx	a,@dptr
      00234B FB               [12] 2265 	mov	r3,a
      00234C 74 01            [12] 2266 	mov	a,#0x01
      00234E 2A               [12] 2267 	add	a,r2
      00234F F8               [12] 2268 	mov	r0,a
      002350 E4               [12] 2269 	clr	a
      002351 3B               [12] 2270 	addc	a,r3
      002352 F9               [12] 2271 	mov	r1,a
      002353 8C 82            [24] 2272 	mov	dpl,r4
      002355 8D 83            [24] 2273 	mov	dph,r5
      002357 E8               [12] 2274 	mov	a,r0
      002358 F0               [24] 2275 	movx	@dptr,a
      002359 E9               [12] 2276 	mov	a,r1
      00235A A3               [24] 2277 	inc	dptr
      00235B F0               [24] 2278 	movx	@dptr,a
      00235C EA               [12] 2279 	mov	a,r2
      00235D 2F               [12] 2280 	add	a,r7
      00235E F5 82            [12] 2281 	mov	dpl,a
      002360 EB               [12] 2282 	mov	a,r3
      002361 3E               [12] 2283 	addc	a,r6
      002362 F5 83            [12] 2284 	mov	dph,a
      002364 E5 D9            [12] 2285 	mov	a,_RFD
      002366 F0               [24] 2286 	movx	@dptr,a
                                   2287 ;	cc1111rf.c:543: if(rfRxCounter[rfRxCurrentBuffer] >= BUFFER_SIZE || rfRxCounter[rfRxCurrentBuffer] == 0)
      002367 90 F9 7F         [24] 2288 	mov	dptr,#_rfRxCurrentBuffer
      00236A E0               [24] 2289 	movx	a,@dptr
      00236B 75 F0 02         [24] 2290 	mov	b,#0x02
      00236E A4               [48] 2291 	mul	ab
      00236F 24 80            [12] 2292 	add	a,#_rfRxCounter
      002371 F5 82            [12] 2293 	mov	dpl,a
      002373 74 FD            [12] 2294 	mov	a,#(_rfRxCounter >> 8)
      002375 35 F0            [12] 2295 	addc	a,b
      002377 F5 83            [12] 2296 	mov	dph,a
      002379 E0               [24] 2297 	movx	a,@dptr
      00237A FE               [12] 2298 	mov	r6,a
      00237B A3               [24] 2299 	inc	dptr
      00237C E0               [24] 2300 	movx	a,@dptr
      00237D FF               [12] 2301 	mov	r7,a
      00237E C3               [12] 2302 	clr	c
      00237F 94 02            [12] 2303 	subb	a,#0x02
      002381 50 1A            [24] 2304 	jnc	00105$
      002383 90 F9 7F         [24] 2305 	mov	dptr,#_rfRxCurrentBuffer
      002386 E0               [24] 2306 	movx	a,@dptr
      002387 75 F0 02         [24] 2307 	mov	b,#0x02
      00238A A4               [48] 2308 	mul	ab
      00238B 24 80            [12] 2309 	add	a,#_rfRxCounter
      00238D F5 82            [12] 2310 	mov	dpl,a
      00238F 74 FD            [12] 2311 	mov	a,#(_rfRxCounter >> 8)
      002391 35 F0            [12] 2312 	addc	a,b
      002393 F5 83            [12] 2313 	mov	dph,a
      002395 E0               [24] 2314 	movx	a,@dptr
      002396 FE               [12] 2315 	mov	r6,a
      002397 A3               [24] 2316 	inc	dptr
      002398 E0               [24] 2317 	movx	a,@dptr
      002399 FF               [12] 2318 	mov	r7,a
      00239A 4E               [12] 2319 	orl	a,r6
      00239B 70 1A            [24] 2320 	jnz	00106$
      00239D                       2321 00105$:
                                   2322 ;	cc1111rf.c:545: rfRxCounter[rfRxCurrentBuffer] = BUFFER_SIZE-1;
      00239D 90 F9 7F         [24] 2323 	mov	dptr,#_rfRxCurrentBuffer
      0023A0 E0               [24] 2324 	movx	a,@dptr
      0023A1 FF               [12] 2325 	mov	r7,a
      0023A2 75 F0 02         [24] 2326 	mov	b,#0x02
      0023A5 A4               [48] 2327 	mul	ab
      0023A6 24 80            [12] 2328 	add	a,#_rfRxCounter
      0023A8 F5 82            [12] 2329 	mov	dpl,a
      0023AA 74 FD            [12] 2330 	mov	a,#(_rfRxCounter >> 8)
      0023AC 35 F0            [12] 2331 	addc	a,b
      0023AE F5 83            [12] 2332 	mov	dph,a
      0023B0 74 FF            [12] 2333 	mov	a,#0xFF
      0023B2 F0               [24] 2334 	movx	@dptr,a
      0023B3 74 01            [12] 2335 	mov	a,#0x01
      0023B5 A3               [24] 2336 	inc	dptr
      0023B6 F0               [24] 2337 	movx	@dptr,a
      0023B7                       2338 00106$:
                                   2339 ;	cc1111rf.c:548: if(!rfRxTotalRXLen && rfRxInfMode)
      0023B7 90 FD E6         [24] 2340 	mov	dptr,#_rfRxTotalRXLen
      0023BA E0               [24] 2341 	movx	a,@dptr
      0023BB A3               [24] 2342 	inc	dptr
      0023BC E0               [24] 2343 	movx	a,@dptr
      0023BD 90 FD E6         [24] 2344 	mov	dptr,#_rfRxTotalRXLen
      0023C0 E0               [24] 2345 	movx	a,@dptr
      0023C1 F5 F0            [12] 2346 	mov	b,a
      0023C3 A3               [24] 2347 	inc	dptr
      0023C4 E0               [24] 2348 	movx	a,@dptr
      0023C5 45 F0            [12] 2349 	orl	a,b
      0023C7 60 03            [24] 2350 	jz	00182$
      0023C9 02 25 C1         [24] 2351 	ljmp	00132$
      0023CC                       2352 00182$:
      0023CC 90 FD E5         [24] 2353 	mov	dptr,#_rfRxInfMode
      0023CF E0               [24] 2354 	movx	a,@dptr
      0023D0 E0               [24] 2355 	movx	a,@dptr
      0023D1 70 03            [24] 2356 	jnz	00183$
      0023D3 02 25 C1         [24] 2357 	ljmp	00132$
      0023D6                       2358 00183$:
                                   2359 ;	cc1111rf.c:550: rfRxTotalRXLen = rfRxLargeLen;
      0023D6 90 FD E8         [24] 2360 	mov	dptr,#_rfRxLargeLen
      0023D9 E0               [24] 2361 	movx	a,@dptr
      0023DA FE               [12] 2362 	mov	r6,a
      0023DB A3               [24] 2363 	inc	dptr
      0023DC E0               [24] 2364 	movx	a,@dptr
      0023DD FF               [12] 2365 	mov	r7,a
      0023DE 90 FD E6         [24] 2366 	mov	dptr,#_rfRxTotalRXLen
      0023E1 EE               [12] 2367 	mov	a,r6
      0023E2 F0               [24] 2368 	movx	@dptr,a
      0023E3 EF               [12] 2369 	mov	a,r7
      0023E4 A3               [24] 2370 	inc	dptr
      0023E5 F0               [24] 2371 	movx	@dptr,a
                                   2372 ;	cc1111rf.c:551: PKTLEN = (u8) (rfRxTotalRXLen % 256);
      0023E6 90 FD E6         [24] 2373 	mov	dptr,#_rfRxTotalRXLen
      0023E9 E0               [24] 2374 	movx	a,@dptr
      0023EA FE               [12] 2375 	mov	r6,a
      0023EB A3               [24] 2376 	inc	dptr
      0023EC E0               [24] 2377 	movx	a,@dptr
      0023ED 90 DF 02         [24] 2378 	mov	dptr,#_PKTLEN
      0023F0 EE               [12] 2379 	mov	a,r6
      0023F1 F0               [24] 2380 	movx	@dptr,a
                                   2381 ;	cc1111rf.c:552: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
      0023F2 90 DF 04         [24] 2382 	mov	dptr,#_PKTCTRL0
      0023F5 E0               [24] 2383 	movx	a,@dptr
      0023F6 FF               [12] 2384 	mov	r7,a
      0023F7 74 FC            [12] 2385 	mov	a,#0xFC
      0023F9 5F               [12] 2386 	anl	a,r7
      0023FA F0               [24] 2387 	movx	@dptr,a
                                   2388 ;	cc1111rf.c:553: PKTCTRL0 |= PKTCTRL0_LENGTH_CONFIG_INF;
      0023FB E0               [24] 2389 	movx	a,@dptr
      0023FC FF               [12] 2390 	mov	r7,a
      0023FD 74 02            [12] 2391 	mov	a,#0x02
      0023FF 4F               [12] 2392 	orl	a,r7
      002400 F0               [24] 2393 	movx	@dptr,a
      002401 02 25 C1         [24] 2394 	ljmp	00132$
      002404                       2395 00130$:
                                   2396 ;	cc1111rf.c:557: else if(MARCSTATE == MARC_STATE_TX)
      002404 90 DF 3B         [24] 2397 	mov	dptr,#_MARCSTATE
      002407 E0               [24] 2398 	movx	a,@dptr
      002408 FF               [12] 2399 	mov	r7,a
      002409 BF 13 02         [24] 2400 	cjne	r7,#0x13,00184$
      00240C 80 03            [24] 2401 	sjmp	00185$
      00240E                       2402 00184$:
      00240E 02 25 C1         [24] 2403 	ljmp	00132$
      002411                       2404 00185$:
                                   2405 ;	cc1111rf.c:560: if (rfTxInfMode)
      002411 90 FD F8         [24] 2406 	mov	dptr,#_rfTxInfMode
      002414 E0               [24] 2407 	movx	a,@dptr
      002415 E0               [24] 2408 	movx	a,@dptr
      002416 70 03            [24] 2409 	jnz	00186$
      002418 02 25 52         [24] 2410 	ljmp	00125$
      00241B                       2411 00186$:
                                   2412 ;	cc1111rf.c:567: macdata.tLastHop ++;
      00241B 90 FD 9C         [24] 2413 	mov	dptr,#(_macdata + 0x000d)
      00241E E0               [24] 2414 	movx	a,@dptr
      00241F FE               [12] 2415 	mov	r6,a
      002420 A3               [24] 2416 	inc	dptr
      002421 E0               [24] 2417 	movx	a,@dptr
      002422 FF               [12] 2418 	mov	r7,a
      002423 0E               [12] 2419 	inc	r6
      002424 BE 00 01         [24] 2420 	cjne	r6,#0x00,00187$
      002427 0F               [12] 2421 	inc	r7
      002428                       2422 00187$:
      002428 90 FD 9C         [24] 2423 	mov	dptr,#(_macdata + 0x000d)
      00242B EE               [12] 2424 	mov	a,r6
      00242C F0               [24] 2425 	movx	@dptr,a
      00242D EF               [12] 2426 	mov	a,r7
      00242E A3               [24] 2427 	inc	dptr
      00242F F0               [24] 2428 	movx	@dptr,a
                                   2429 ;	cc1111rf.c:569: if (rfTxCounter == rfTxBufferEnd)
      002430 90 FD EC         [24] 2430 	mov	dptr,#_rfTxCounter
      002433 E0               [24] 2431 	movx	a,@dptr
      002434 FE               [12] 2432 	mov	r6,a
      002435 A3               [24] 2433 	inc	dptr
      002436 E0               [24] 2434 	movx	a,@dptr
      002437 FF               [12] 2435 	mov	r7,a
      002438 90 FD F0         [24] 2436 	mov	dptr,#_rfTxBufferEnd
      00243B E0               [24] 2437 	movx	a,@dptr
      00243C FC               [12] 2438 	mov	r4,a
      00243D A3               [24] 2439 	inc	dptr
      00243E E0               [24] 2440 	movx	a,@dptr
      00243F FD               [12] 2441 	mov	r5,a
      002440 EE               [12] 2442 	mov	a,r6
      002441 B5 04 06         [24] 2443 	cjne	a,ar4,00188$
      002444 EF               [12] 2444 	mov	a,r7
      002445 B5 05 02         [24] 2445 	cjne	a,ar5,00188$
      002448 80 03            [24] 2446 	sjmp	00189$
      00244A                       2447 00188$:
      00244A 02 25 25         [24] 2448 	ljmp	00121$
      00244D                       2449 00189$:
                                   2450 ;	cc1111rf.c:571: if (rfTxRepeatCounter)
      00244D 90 FD EE         [24] 2451 	mov	dptr,#_rfTxRepeatCounter
      002450 E0               [24] 2452 	movx	a,@dptr
      002451 A3               [24] 2453 	inc	dptr
      002452 E0               [24] 2454 	movx	a,@dptr
      002453 90 FD EE         [24] 2455 	mov	dptr,#_rfTxRepeatCounter
      002456 E0               [24] 2456 	movx	a,@dptr
      002457 F5 F0            [12] 2457 	mov	b,a
      002459 A3               [24] 2458 	inc	dptr
      00245A E0               [24] 2459 	movx	a,@dptr
      00245B 45 F0            [12] 2460 	orl	a,b
      00245D 60 37            [24] 2461 	jz	00118$
                                   2462 ;	cc1111rf.c:573: if(rfTxRepeatCounter != 0xff)
      00245F 90 FD EE         [24] 2463 	mov	dptr,#_rfTxRepeatCounter
      002462 E0               [24] 2464 	movx	a,@dptr
      002463 FE               [12] 2465 	mov	r6,a
      002464 A3               [24] 2466 	inc	dptr
      002465 E0               [24] 2467 	movx	a,@dptr
      002466 FF               [12] 2468 	mov	r7,a
      002467 BE FF 05         [24] 2469 	cjne	r6,#0xFF,00191$
      00246A BF 00 02         [24] 2470 	cjne	r7,#0x00,00191$
      00246D 80 14            [24] 2471 	sjmp	00112$
      00246F                       2472 00191$:
                                   2473 ;	cc1111rf.c:574: rfTxRepeatCounter--;
      00246F 90 FD EE         [24] 2474 	mov	dptr,#_rfTxRepeatCounter
      002472 E0               [24] 2475 	movx	a,@dptr
      002473 24 FF            [12] 2476 	add	a,#0xFF
      002475 FE               [12] 2477 	mov	r6,a
      002476 A3               [24] 2478 	inc	dptr
      002477 E0               [24] 2479 	movx	a,@dptr
      002478 34 FF            [12] 2480 	addc	a,#0xFF
      00247A FF               [12] 2481 	mov	r7,a
      00247B 90 FD EE         [24] 2482 	mov	dptr,#_rfTxRepeatCounter
      00247E EE               [12] 2483 	mov	a,r6
      00247F F0               [24] 2484 	movx	@dptr,a
      002480 EF               [12] 2485 	mov	a,r7
      002481 A3               [24] 2486 	inc	dptr
      002482 F0               [24] 2487 	movx	@dptr,a
      002483                       2488 00112$:
                                   2489 ;	cc1111rf.c:575: rfTxCounter = rfTxRepeatOffset;
      002483 90 FD F4         [24] 2490 	mov	dptr,#_rfTxRepeatOffset
      002486 E0               [24] 2491 	movx	a,@dptr
      002487 FE               [12] 2492 	mov	r6,a
      002488 A3               [24] 2493 	inc	dptr
      002489 E0               [24] 2494 	movx	a,@dptr
      00248A FF               [12] 2495 	mov	r7,a
      00248B 90 FD EC         [24] 2496 	mov	dptr,#_rfTxCounter
      00248E EE               [12] 2497 	mov	a,r6
      00248F F0               [24] 2498 	movx	@dptr,a
      002490 EF               [12] 2499 	mov	a,r7
      002491 A3               [24] 2500 	inc	dptr
      002492 F0               [24] 2501 	movx	@dptr,a
      002493 02 25 25         [24] 2502 	ljmp	00121$
      002496                       2503 00118$:
                                   2504 ;	cc1111rf.c:581: rftxbuf[(rfTxCurBufIdx * rfTxBufferEnd)] = BUFFER_AVAILABLE;
      002496 90 FD F0         [24] 2505 	mov	dptr,#_rfTxBufferEnd
      002499 E0               [24] 2506 	movx	a,@dptr
      00249A F5 27            [12] 2507 	mov	__mulint_PARM_2,a
      00249C A3               [24] 2508 	inc	dptr
      00249D E0               [24] 2509 	movx	a,@dptr
      00249E F5 28            [12] 2510 	mov	(__mulint_PARM_2 + 1),a
      0024A0 90 FD EA         [24] 2511 	mov	dptr,#_rfTxCurBufIdx
      0024A3 E0               [24] 2512 	movx	a,@dptr
      0024A4 FF               [12] 2513 	mov	r7,a
      0024A5 7E 00            [12] 2514 	mov	r6,#0x00
      0024A7 8F 82            [24] 2515 	mov	dpl,r7
      0024A9 8E 83            [24] 2516 	mov	dph,r6
      0024AB 12 2E FD         [24] 2517 	lcall	__mulint
      0024AE AE 82            [24] 2518 	mov	r6,dpl
      0024B0 AF 83            [24] 2519 	mov	r7,dph
      0024B2 90 FD 86         [24] 2520 	mov	dptr,#_rftxbuf
      0024B5 E0               [24] 2521 	movx	a,@dptr
      0024B6 FC               [12] 2522 	mov	r4,a
      0024B7 A3               [24] 2523 	inc	dptr
      0024B8 E0               [24] 2524 	movx	a,@dptr
      0024B9 FD               [12] 2525 	mov	r5,a
      0024BA EE               [12] 2526 	mov	a,r6
      0024BB 2C               [12] 2527 	add	a,r4
      0024BC F5 82            [12] 2528 	mov	dpl,a
      0024BE EF               [12] 2529 	mov	a,r7
      0024BF 3D               [12] 2530 	addc	a,r5
      0024C0 F5 83            [12] 2531 	mov	dph,a
      0024C2 E4               [12] 2532 	clr	a
      0024C3 F0               [24] 2533 	movx	@dptr,a
                                   2534 ;	cc1111rf.c:583: if (++rfTxCurBufIdx == rfTxBufCount)
      0024C4 90 FD EA         [24] 2535 	mov	dptr,#_rfTxCurBufIdx
      0024C7 E0               [24] 2536 	movx	a,@dptr
      0024C8 24 01            [12] 2537 	add	a,#0x01
      0024CA F0               [24] 2538 	movx	@dptr,a
      0024CB E0               [24] 2539 	movx	a,@dptr
      0024CC FF               [12] 2540 	mov	r7,a
      0024CD 90 FD EB         [24] 2541 	mov	dptr,#_rfTxBufCount
      0024D0 E0               [24] 2542 	movx	a,@dptr
      0024D1 FE               [12] 2543 	mov	r6,a
      0024D2 EF               [12] 2544 	mov	a,r7
      0024D3 B5 06 05         [24] 2545 	cjne	a,ar6,00114$
                                   2546 ;	cc1111rf.c:585: rfTxCurBufIdx = 0;
      0024D6 90 FD EA         [24] 2547 	mov	dptr,#_rfTxCurBufIdx
      0024D9 E4               [12] 2548 	clr	a
      0024DA F0               [24] 2549 	movx	@dptr,a
      0024DB                       2550 00114$:
                                   2551 ;	cc1111rf.c:588: if (rftxbuf[(rfTxCurBufIdx * rfTxBufferEnd)] == BUFFER_AVAILABLE)
      0024DB 90 FD F0         [24] 2552 	mov	dptr,#_rfTxBufferEnd
      0024DE E0               [24] 2553 	movx	a,@dptr
      0024DF F5 27            [12] 2554 	mov	__mulint_PARM_2,a
      0024E1 A3               [24] 2555 	inc	dptr
      0024E2 E0               [24] 2556 	movx	a,@dptr
      0024E3 F5 28            [12] 2557 	mov	(__mulint_PARM_2 + 1),a
      0024E5 90 FD EA         [24] 2558 	mov	dptr,#_rfTxCurBufIdx
      0024E8 E0               [24] 2559 	movx	a,@dptr
      0024E9 FF               [12] 2560 	mov	r7,a
      0024EA 7E 00            [12] 2561 	mov	r6,#0x00
      0024EC 8F 82            [24] 2562 	mov	dpl,r7
      0024EE 8E 83            [24] 2563 	mov	dph,r6
      0024F0 12 2E FD         [24] 2564 	lcall	__mulint
      0024F3 AE 82            [24] 2565 	mov	r6,dpl
      0024F5 AF 83            [24] 2566 	mov	r7,dph
      0024F7 90 FD 86         [24] 2567 	mov	dptr,#_rftxbuf
      0024FA E0               [24] 2568 	movx	a,@dptr
      0024FB FC               [12] 2569 	mov	r4,a
      0024FC A3               [24] 2570 	inc	dptr
      0024FD E0               [24] 2571 	movx	a,@dptr
      0024FE FD               [12] 2572 	mov	r5,a
      0024FF EE               [12] 2573 	mov	a,r6
      002500 2C               [12] 2574 	add	a,r4
      002501 FE               [12] 2575 	mov	r6,a
      002502 EF               [12] 2576 	mov	a,r7
      002503 3D               [12] 2577 	addc	a,r5
      002504 FF               [12] 2578 	mov	r7,a
      002505 8E 82            [24] 2579 	mov	dpl,r6
      002507 8F 83            [24] 2580 	mov	dph,r7
      002509 E0               [24] 2581 	movx	a,@dptr
      00250A 70 10            [24] 2582 	jnz	00116$
                                   2583 ;	cc1111rf.c:591: macdata.mac_state = MAC_STATE_NONHOPPING;
      00250C 90 FD 8F         [24] 2584 	mov	dptr,#_macdata
      00250F E4               [12] 2585 	clr	a
      002510 F0               [24] 2586 	movx	@dptr,a
                                   2587 ;	cc1111rf.c:592: lastCode[1] = LCE_DROPPED_PACKET;
      002511 90 FD B4         [24] 2588 	mov	dptr,#(_lastCode + 0x0001)
      002514 74 12            [12] 2589 	mov	a,#0x12
      002516 F0               [24] 2590 	movx	@dptr,a
                                   2591 ;	cc1111rf.c:593: resetRFSTATE();
      002517 12 1E 13         [24] 2592 	lcall	_resetRFSTATE
                                   2593 ;	cc1111rf.c:594: LED = 0;
      00251A C2 A4            [12] 2594 	clr	_P2_4
      00251C                       2595 00116$:
                                   2596 ;	cc1111rf.c:598: rfTxCounter = 1;
      00251C 90 FD EC         [24] 2597 	mov	dptr,#_rfTxCounter
      00251F 74 01            [12] 2598 	mov	a,#0x01
      002521 F0               [24] 2599 	movx	@dptr,a
      002522 E4               [12] 2600 	clr	a
      002523 A3               [24] 2601 	inc	dptr
      002524 F0               [24] 2602 	movx	@dptr,a
      002525                       2603 00121$:
                                   2604 ;	cc1111rf.c:602: if(rfTxTotalTXLen-- == 255)
      002525 90 FD F6         [24] 2605 	mov	dptr,#_rfTxTotalTXLen
      002528 E0               [24] 2606 	movx	a,@dptr
      002529 FE               [12] 2607 	mov	r6,a
      00252A A3               [24] 2608 	inc	dptr
      00252B E0               [24] 2609 	movx	a,@dptr
      00252C FF               [12] 2610 	mov	r7,a
      00252D 90 FD F6         [24] 2611 	mov	dptr,#_rfTxTotalTXLen
      002530 E0               [24] 2612 	movx	a,@dptr
      002531 24 FF            [12] 2613 	add	a,#0xFF
      002533 FC               [12] 2614 	mov	r4,a
      002534 A3               [24] 2615 	inc	dptr
      002535 E0               [24] 2616 	movx	a,@dptr
      002536 34 FF            [12] 2617 	addc	a,#0xFF
      002538 FD               [12] 2618 	mov	r5,a
      002539 90 FD F6         [24] 2619 	mov	dptr,#_rfTxTotalTXLen
      00253C EC               [12] 2620 	mov	a,r4
      00253D F0               [24] 2621 	movx	@dptr,a
      00253E ED               [12] 2622 	mov	a,r5
      00253F A3               [24] 2623 	inc	dptr
      002540 F0               [24] 2624 	movx	@dptr,a
      002541 BE FF 22         [24] 2625 	cjne	r6,#0xFF,00126$
      002544 BF 00 1F         [24] 2626 	cjne	r7,#0x00,00126$
                                   2627 ;	cc1111rf.c:604: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
      002547 90 DF 04         [24] 2628 	mov	dptr,#_PKTCTRL0
      00254A E0               [24] 2629 	movx	a,@dptr
      00254B FF               [12] 2630 	mov	r7,a
      00254C 74 FC            [12] 2631 	mov	a,#0xFC
      00254E 5F               [12] 2632 	anl	a,r7
      00254F F0               [24] 2633 	movx	@dptr,a
      002550 80 14            [24] 2634 	sjmp	00126$
      002552                       2635 00125$:
                                   2636 ;	cc1111rf.c:611: rfTxTotalTXLen--;
      002552 90 FD F6         [24] 2637 	mov	dptr,#_rfTxTotalTXLen
      002555 E0               [24] 2638 	movx	a,@dptr
      002556 24 FF            [12] 2639 	add	a,#0xFF
      002558 FE               [12] 2640 	mov	r6,a
      002559 A3               [24] 2641 	inc	dptr
      00255A E0               [24] 2642 	movx	a,@dptr
      00255B 34 FF            [12] 2643 	addc	a,#0xFF
      00255D FF               [12] 2644 	mov	r7,a
      00255E 90 FD F6         [24] 2645 	mov	dptr,#_rfTxTotalTXLen
      002561 EE               [12] 2646 	mov	a,r6
      002562 F0               [24] 2647 	movx	@dptr,a
      002563 EF               [12] 2648 	mov	a,r7
      002564 A3               [24] 2649 	inc	dptr
      002565 F0               [24] 2650 	movx	@dptr,a
      002566                       2651 00126$:
                                   2652 ;	cc1111rf.c:612: rf_status = RFST_STX;
      002566 90 FD 8A         [24] 2653 	mov	dptr,#_rf_status
      002569 74 03            [12] 2654 	mov	a,#0x03
      00256B F0               [24] 2655 	movx	@dptr,a
                                   2656 ;	cc1111rf.c:614: RFD = rftxbuf[(rfTxCurBufIdx * rfTxBufferEnd) + rfTxCounter++];
      00256C 90 FD F0         [24] 2657 	mov	dptr,#_rfTxBufferEnd
      00256F E0               [24] 2658 	movx	a,@dptr
      002570 F5 27            [12] 2659 	mov	__mulint_PARM_2,a
      002572 A3               [24] 2660 	inc	dptr
      002573 E0               [24] 2661 	movx	a,@dptr
      002574 F5 28            [12] 2662 	mov	(__mulint_PARM_2 + 1),a
      002576 90 FD EA         [24] 2663 	mov	dptr,#_rfTxCurBufIdx
      002579 E0               [24] 2664 	movx	a,@dptr
      00257A FF               [12] 2665 	mov	r7,a
      00257B 7E 00            [12] 2666 	mov	r6,#0x00
      00257D 8F 82            [24] 2667 	mov	dpl,r7
      00257F 8E 83            [24] 2668 	mov	dph,r6
      002581 12 2E FD         [24] 2669 	lcall	__mulint
      002584 AE 82            [24] 2670 	mov	r6,dpl
      002586 AF 83            [24] 2671 	mov	r7,dph
      002588 90 FD EC         [24] 2672 	mov	dptr,#_rfTxCounter
      00258B E0               [24] 2673 	movx	a,@dptr
      00258C FC               [12] 2674 	mov	r4,a
      00258D A3               [24] 2675 	inc	dptr
      00258E E0               [24] 2676 	movx	a,@dptr
      00258F FD               [12] 2677 	mov	r5,a
      002590 90 FD EC         [24] 2678 	mov	dptr,#_rfTxCounter
      002593 E0               [24] 2679 	movx	a,@dptr
      002594 24 01            [12] 2680 	add	a,#0x01
      002596 F0               [24] 2681 	movx	@dptr,a
      002597 A3               [24] 2682 	inc	dptr
      002598 E0               [24] 2683 	movx	a,@dptr
      002599 34 00            [12] 2684 	addc	a,#0x00
      00259B F0               [24] 2685 	movx	@dptr,a
      00259C EC               [12] 2686 	mov	a,r4
      00259D 2E               [12] 2687 	add	a,r6
      00259E FE               [12] 2688 	mov	r6,a
      00259F ED               [12] 2689 	mov	a,r5
      0025A0 3F               [12] 2690 	addc	a,r7
      0025A1 FF               [12] 2691 	mov	r7,a
      0025A2 90 FD 86         [24] 2692 	mov	dptr,#_rftxbuf
      0025A5 E0               [24] 2693 	movx	a,@dptr
      0025A6 FC               [12] 2694 	mov	r4,a
      0025A7 A3               [24] 2695 	inc	dptr
      0025A8 E0               [24] 2696 	movx	a,@dptr
      0025A9 FD               [12] 2697 	mov	r5,a
      0025AA EE               [12] 2698 	mov	a,r6
      0025AB 2C               [12] 2699 	add	a,r4
      0025AC F5 82            [12] 2700 	mov	dpl,a
      0025AE EF               [12] 2701 	mov	a,r7
      0025AF 3D               [12] 2702 	addc	a,r5
      0025B0 F5 83            [12] 2703 	mov	dph,a
      0025B2 E0               [24] 2704 	movx	a,@dptr
      0025B3 F5 D9            [12] 2705 	mov	_RFD,a
                                   2706 ;	cc1111rf.c:615: txTotal++;
      0025B5 90 FD 88         [24] 2707 	mov	dptr,#_txTotal
      0025B8 E0               [24] 2708 	movx	a,@dptr
      0025B9 24 01            [12] 2709 	add	a,#0x01
      0025BB F0               [24] 2710 	movx	@dptr,a
      0025BC A3               [24] 2711 	inc	dptr
      0025BD E0               [24] 2712 	movx	a,@dptr
      0025BE 34 00            [12] 2713 	addc	a,#0x00
      0025C0 F0               [24] 2714 	movx	@dptr,a
      0025C1                       2715 00132$:
      0025C1 D0 D0            [24] 2716 	pop	psw
      0025C3 D0 00            [24] 2717 	pop	(0+0)
      0025C5 D0 01            [24] 2718 	pop	(0+1)
      0025C7 D0 02            [24] 2719 	pop	(0+2)
      0025C9 D0 03            [24] 2720 	pop	(0+3)
      0025CB D0 04            [24] 2721 	pop	(0+4)
      0025CD D0 05            [24] 2722 	pop	(0+5)
      0025CF D0 06            [24] 2723 	pop	(0+6)
      0025D1 D0 07            [24] 2724 	pop	(0+7)
      0025D3 D0 83            [24] 2725 	pop	dph
      0025D5 D0 82            [24] 2726 	pop	dpl
      0025D7 D0 F0            [24] 2727 	pop	b
      0025D9 D0 E0            [24] 2728 	pop	acc
      0025DB D0 21            [24] 2729 	pop	bits
      0025DD 32               [24] 2730 	reti
                                   2731 ;------------------------------------------------------------
                                   2732 ;Allocation info for local variables in function 'rfIntHandler'
                                   2733 ;------------------------------------------------------------
                                   2734 ;encoffset                 Allocated with name '_rfIntHandler_encoffset_1_136'
                                   2735 ;------------------------------------------------------------
                                   2736 ;	cc1111rf.c:619: void rfIntHandler(void) __interrupt RF_VECTOR  // interrupt handler should trigger on rf events
                                   2737 ;	-----------------------------------------
                                   2738 ;	 function rfIntHandler
                                   2739 ;	-----------------------------------------
      0025DE                       2740 _rfIntHandler:
      0025DE C0 21            [24] 2741 	push	bits
      0025E0 C0 E0            [24] 2742 	push	acc
      0025E2 C0 F0            [24] 2743 	push	b
      0025E4 C0 82            [24] 2744 	push	dpl
      0025E6 C0 83            [24] 2745 	push	dph
      0025E8 C0 07            [24] 2746 	push	(0+7)
      0025EA C0 06            [24] 2747 	push	(0+6)
      0025EC C0 05            [24] 2748 	push	(0+5)
      0025EE C0 04            [24] 2749 	push	(0+4)
      0025F0 C0 03            [24] 2750 	push	(0+3)
      0025F2 C0 02            [24] 2751 	push	(0+2)
      0025F4 C0 01            [24] 2752 	push	(0+1)
      0025F6 C0 00            [24] 2753 	push	(0+0)
      0025F8 C0 D0            [24] 2754 	push	psw
      0025FA 75 D0 00         [24] 2755 	mov	psw,#0x00
                                   2756 ;	cc1111rf.c:621: u8 encoffset= 0;
      0025FD 75 25 00         [24] 2757 	mov	_rfIntHandler_encoffset_1_136,#0x00
                                   2758 ;	cc1111rf.c:624: lastCode[0] = LC_RF_VECTOR;
      002600 90 FD B3         [24] 2759 	mov	dptr,#_lastCode
      002603 74 10            [12] 2760 	mov	a,#0x10
      002605 F0               [24] 2761 	movx	@dptr,a
                                   2762 ;	cc1111rf.c:625: S1CON &= ~(S1CON_RFIF_0 | S1CON_RFIF_1);
      002606 AE 9B            [24] 2763 	mov	r6,_S1CON
      002608 74 FC            [12] 2764 	mov	a,#0xFC
      00260A 5E               [12] 2765 	anl	a,r6
      00260B F5 9B            [12] 2766 	mov	_S1CON,a
                                   2767 ;	cc1111rf.c:628: rfif |= RFIF;
      00260D E5 E9            [12] 2768 	mov	a,_RFIF
      00260F 42 22            [12] 2769 	orl	_rfif,a
                                   2770 ;	cc1111rf.c:630: if (RFIF & RFIF_IRQ_SFD)
      002611 E5 E9            [12] 2771 	mov	a,_RFIF
      002613 30 E0 20         [24] 2772 	jnb	acc.0,00102$
                                   2773 ;	cc1111rf.c:634: rf_tLastRecv = T2CT | (rf_MAC_timer << 8);
      002616 90 FD 8B         [24] 2774 	mov	dptr,#_rf_MAC_timer
      002619 E0               [24] 2775 	movx	a,@dptr
      00261A FD               [12] 2776 	mov	r5,a
      00261B A3               [24] 2777 	inc	dptr
      00261C E0               [24] 2778 	movx	a,@dptr
      00261D 8D 06            [24] 2779 	mov	ar6,r5
      00261F 7D 00            [12] 2780 	mov	r5,#0x00
      002621 AB 9C            [24] 2781 	mov	r3,_T2CT
      002623 7C 00            [12] 2782 	mov	r4,#0x00
      002625 90 FD 8D         [24] 2783 	mov	dptr,#_rf_tLastRecv
      002628 ED               [12] 2784 	mov	a,r5
      002629 4B               [12] 2785 	orl	a,r3
      00262A F0               [24] 2786 	movx	@dptr,a
      00262B EE               [12] 2787 	mov	a,r6
      00262C 4C               [12] 2788 	orl	a,r4
      00262D A3               [24] 2789 	inc	dptr
      00262E F0               [24] 2790 	movx	@dptr,a
                                   2791 ;	cc1111rf.c:635: RFIF &= ~RFIF_IRQ_SFD;
      00262F AE E9            [24] 2792 	mov	r6,_RFIF
      002631 74 FE            [12] 2793 	mov	a,#0xFE
      002633 5E               [12] 2794 	anl	a,r6
      002634 F5 E9            [12] 2795 	mov	_RFIF,a
      002636                       2796 00102$:
                                   2797 ;	cc1111rf.c:640: if (RFIF & ( RFIF_IRQ_DONE | RFIF_IRQ_RXOVF | RFIF_IRQ_TIMEOUT ))
      002636 E5 E9            [12] 2798 	mov	a,_RFIF
      002638 54 70            [12] 2799 	anl	a,#0x70
      00263A 70 03            [24] 2800 	jnz	00152$
      00263C 02 27 C1         [24] 2801 	ljmp	00117$
      00263F                       2802 00152$:
                                   2803 ;	cc1111rf.c:643: if(rf_status == RFST_STX)
      00263F 90 FD 8A         [24] 2804 	mov	dptr,#_rf_status
      002642 E0               [24] 2805 	movx	a,@dptr
      002643 FE               [12] 2806 	mov	r6,a
      002644 BE 03 0A         [24] 2807 	cjne	r6,#0x03,00114$
                                   2808 ;	cc1111rf.c:649: rfif &= ~( RFIF_IRQ_DONE | RFIF_IRQ_RXOVF | RFIF_IRQ_TIMEOUT );
      002647 AE 22            [24] 2809 	mov	r6,_rfif
      002649 74 8F            [12] 2810 	mov	a,#0x8F
      00264B 5E               [12] 2811 	anl	a,r6
      00264C F5 22            [12] 2812 	mov	_rfif,a
      00264E 02 27 BA         [24] 2813 	ljmp	00115$
      002651                       2814 00114$:
                                   2815 ;	cc1111rf.c:655: if(rfRxProcessed[!rfRxCurrentBuffer] == RX_PROCESSED)
      002651 90 F9 7F         [24] 2816 	mov	dptr,#_rfRxCurrentBuffer
      002654 E0               [24] 2817 	movx	a,@dptr
      002655 FE               [12] 2818 	mov	r6,a
      002656 B4 01 00         [24] 2819 	cjne	a,#0x01,00155$
      002659                       2820 00155$:
      002659 E4               [12] 2821 	clr	a
      00265A 33               [12] 2822 	rlc	a
      00265B 24 84            [12] 2823 	add	a,#_rfRxProcessed
      00265D F5 82            [12] 2824 	mov	dpl,a
      00265F E4               [12] 2825 	clr	a
      002660 34 FD            [12] 2826 	addc	a,#(_rfRxProcessed >> 8)
      002662 F5 83            [12] 2827 	mov	dph,a
      002664 E0               [24] 2828 	movx	a,@dptr
      002665 FE               [12] 2829 	mov	r6,a
      002666 BE 01 02         [24] 2830 	cjne	r6,#0x01,00156$
      002669 80 03            [24] 2831 	sjmp	00157$
      00266B                       2832 00156$:
      00266B 02 27 97         [24] 2833 	ljmp	00111$
      00266E                       2834 00157$:
                                   2835 ;	cc1111rf.c:660: if(rfAESMode & AES_CRYPTO_IN_ENABLE)
      00266E 90 FD F9         [24] 2836 	mov	dptr,#_rfAESMode
      002671 E0               [24] 2837 	movx	a,@dptr
      002672 FE               [12] 2838 	mov	r6,a
      002673 20 E1 03         [24] 2839 	jb	acc.1,00158$
      002676 02 27 70         [24] 2840 	ljmp	00109$
      002679                       2841 00158$:
                                   2842 ;	cc1111rf.c:662: if((PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG) == PKTCTRL0_LENGTH_CONFIG_VAR)
      002679 90 DF 04         [24] 2843 	mov	dptr,#_PKTCTRL0
      00267C E0               [24] 2844 	movx	a,@dptr
      00267D FE               [12] 2845 	mov	r6,a
      00267E 53 06 03         [24] 2846 	anl	ar6,#0x03
      002681 BE 01 03         [24] 2847 	cjne	r6,#0x01,00104$
                                   2848 ;	cc1111rf.c:663: encoffset= 1;
      002684 75 25 01         [24] 2849 	mov	_rfIntHandler_encoffset_1_136,#0x01
      002687                       2850 00104$:
                                   2851 ;	cc1111rf.c:664: if((rfAESMode & AES_CRYPTO_IN_TYPE) == AES_CRYPTO_IN_ENCRYPT)
      002687 90 FD F9         [24] 2852 	mov	dptr,#_rfAESMode
      00268A E0               [24] 2853 	movx	a,@dptr
      00268B FE               [12] 2854 	mov	r6,a
      00268C 53 06 01         [24] 2855 	anl	ar6,#0x01
      00268F BE 01 70         [24] 2856 	cjne	r6,#0x01,00106$
                                   2857 ;	cc1111rf.c:665: encAES(&rfrxbuf[rfRxCurrentBuffer][encoffset], &rfrxbuf[rfRxCurrentBuffer][encoffset], rfRxCounter[rfRxCurrentBuffer] - encoffset, (rfAESMode & AES_CRYPTO_MODE));
      002692 90 F9 7F         [24] 2858 	mov	dptr,#_rfRxCurrentBuffer
      002695 E0               [24] 2859 	movx	a,@dptr
      002696 25 E0            [12] 2860 	add	a,acc
      002698 FD               [12] 2861 	mov	r5,a
      002699 E4               [12] 2862 	clr	a
      00269A 24 80            [12] 2863 	add	a,#_rfrxbuf
      00269C FE               [12] 2864 	mov	r6,a
      00269D ED               [12] 2865 	mov	a,r5
      00269E 34 F9            [12] 2866 	addc	a,#(_rfrxbuf >> 8)
      0026A0 FD               [12] 2867 	mov	r5,a
      0026A1 AB 25            [24] 2868 	mov	r3,_rfIntHandler_encoffset_1_136
      0026A3 7C 00            [12] 2869 	mov	r4,#0x00
      0026A5 EB               [12] 2870 	mov	a,r3
      0026A6 2E               [12] 2871 	add	a,r6
      0026A7 FE               [12] 2872 	mov	r6,a
      0026A8 EC               [12] 2873 	mov	a,r4
      0026A9 3D               [12] 2874 	addc	a,r5
      0026AA FD               [12] 2875 	mov	r5,a
      0026AB E0               [24] 2876 	movx	a,@dptr
      0026AC F9               [12] 2877 	mov	r1,a
      0026AD 29               [12] 2878 	add	a,r1
      0026AE FA               [12] 2879 	mov	r2,a
      0026AF E4               [12] 2880 	clr	a
      0026B0 24 80            [12] 2881 	add	a,#_rfrxbuf
      0026B2 F9               [12] 2882 	mov	r1,a
      0026B3 EA               [12] 2883 	mov	a,r2
      0026B4 34 F9            [12] 2884 	addc	a,#(_rfrxbuf >> 8)
      0026B6 FA               [12] 2885 	mov	r2,a
      0026B7 EB               [12] 2886 	mov	a,r3
      0026B8 29               [12] 2887 	add	a,r1
      0026B9 FB               [12] 2888 	mov	r3,a
      0026BA EC               [12] 2889 	mov	a,r4
      0026BB 3A               [12] 2890 	addc	a,r2
      0026BC FC               [12] 2891 	mov	r4,a
      0026BD E0               [24] 2892 	movx	a,@dptr
      0026BE 75 F0 02         [24] 2893 	mov	b,#0x02
      0026C1 A4               [48] 2894 	mul	ab
      0026C2 24 80            [12] 2895 	add	a,#_rfRxCounter
      0026C4 F5 82            [12] 2896 	mov	dpl,a
      0026C6 74 FD            [12] 2897 	mov	a,#(_rfRxCounter >> 8)
      0026C8 35 F0            [12] 2898 	addc	a,b
      0026CA F5 83            [12] 2899 	mov	dph,a
      0026CC E0               [24] 2900 	movx	a,@dptr
      0026CD F9               [12] 2901 	mov	r1,a
      0026CE A3               [24] 2902 	inc	dptr
      0026CF E0               [24] 2903 	movx	a,@dptr
      0026D0 FA               [12] 2904 	mov	r2,a
      0026D1 A8 25            [24] 2905 	mov	r0,_rfIntHandler_encoffset_1_136
      0026D3 7F 00            [12] 2906 	mov	r7,#0x00
      0026D5 E9               [12] 2907 	mov	a,r1
      0026D6 C3               [12] 2908 	clr	c
      0026D7 98               [12] 2909 	subb	a,r0
      0026D8 F9               [12] 2910 	mov	r1,a
      0026D9 EA               [12] 2911 	mov	a,r2
      0026DA 9F               [12] 2912 	subb	a,r7
      0026DB FA               [12] 2913 	mov	r2,a
      0026DC 90 FD F9         [24] 2914 	mov	dptr,#_rfAESMode
      0026DF E0               [24] 2915 	movx	a,@dptr
      0026E0 FF               [12] 2916 	mov	r7,a
      0026E1 53 07 F0         [24] 2917 	anl	ar7,#0xF0
      0026E4 90 FD CF         [24] 2918 	mov	dptr,#_encAES_PARM_2
      0026E7 EB               [12] 2919 	mov	a,r3
      0026E8 F0               [24] 2920 	movx	@dptr,a
      0026E9 EC               [12] 2921 	mov	a,r4
      0026EA A3               [24] 2922 	inc	dptr
      0026EB F0               [24] 2923 	movx	@dptr,a
      0026EC 90 FD D1         [24] 2924 	mov	dptr,#_encAES_PARM_3
      0026EF E9               [12] 2925 	mov	a,r1
      0026F0 F0               [24] 2926 	movx	@dptr,a
      0026F1 EA               [12] 2927 	mov	a,r2
      0026F2 A3               [24] 2928 	inc	dptr
      0026F3 F0               [24] 2929 	movx	@dptr,a
      0026F4 90 FD D3         [24] 2930 	mov	dptr,#_encAES_PARM_4
      0026F7 EF               [12] 2931 	mov	a,r7
      0026F8 F0               [24] 2932 	movx	@dptr,a
      0026F9 8E 82            [24] 2933 	mov	dpl,r6
      0026FB 8D 83            [24] 2934 	mov	dph,r5
      0026FD 12 2B 99         [24] 2935 	lcall	_encAES
      002700 80 6E            [24] 2936 	sjmp	00109$
      002702                       2937 00106$:
                                   2938 ;	cc1111rf.c:667: decAES(&rfrxbuf[rfRxCurrentBuffer][encoffset], &rfrxbuf[rfRxCurrentBuffer][encoffset], rfRxCounter[rfRxCurrentBuffer] - encoffset, (rfAESMode & AES_CRYPTO_MODE));
      002702 90 F9 7F         [24] 2939 	mov	dptr,#_rfRxCurrentBuffer
      002705 E0               [24] 2940 	movx	a,@dptr
      002706 25 E0            [12] 2941 	add	a,acc
      002708 FE               [12] 2942 	mov	r6,a
      002709 E4               [12] 2943 	clr	a
      00270A 24 80            [12] 2944 	add	a,#_rfrxbuf
      00270C FF               [12] 2945 	mov	r7,a
      00270D EE               [12] 2946 	mov	a,r6
      00270E 34 F9            [12] 2947 	addc	a,#(_rfrxbuf >> 8)
      002710 FE               [12] 2948 	mov	r6,a
      002711 AC 25            [24] 2949 	mov	r4,_rfIntHandler_encoffset_1_136
      002713 7D 00            [12] 2950 	mov	r5,#0x00
      002715 EC               [12] 2951 	mov	a,r4
      002716 2F               [12] 2952 	add	a,r7
      002717 FF               [12] 2953 	mov	r7,a
      002718 ED               [12] 2954 	mov	a,r5
      002719 3E               [12] 2955 	addc	a,r6
      00271A FE               [12] 2956 	mov	r6,a
      00271B E0               [24] 2957 	movx	a,@dptr
      00271C 25 E0            [12] 2958 	add	a,acc
      00271E FA               [12] 2959 	mov	r2,a
      00271F E4               [12] 2960 	clr	a
      002720 24 80            [12] 2961 	add	a,#_rfrxbuf
      002722 FB               [12] 2962 	mov	r3,a
      002723 EA               [12] 2963 	mov	a,r2
      002724 34 F9            [12] 2964 	addc	a,#(_rfrxbuf >> 8)
      002726 FA               [12] 2965 	mov	r2,a
      002727 EC               [12] 2966 	mov	a,r4
      002728 2B               [12] 2967 	add	a,r3
      002729 FC               [12] 2968 	mov	r4,a
      00272A ED               [12] 2969 	mov	a,r5
      00272B 3A               [12] 2970 	addc	a,r2
      00272C FD               [12] 2971 	mov	r5,a
      00272D E0               [24] 2972 	movx	a,@dptr
      00272E 75 F0 02         [24] 2973 	mov	b,#0x02
      002731 A4               [48] 2974 	mul	ab
      002732 24 80            [12] 2975 	add	a,#_rfRxCounter
      002734 F5 82            [12] 2976 	mov	dpl,a
      002736 74 FD            [12] 2977 	mov	a,#(_rfRxCounter >> 8)
      002738 35 F0            [12] 2978 	addc	a,b
      00273A F5 83            [12] 2979 	mov	dph,a
      00273C E0               [24] 2980 	movx	a,@dptr
      00273D FA               [12] 2981 	mov	r2,a
      00273E A3               [24] 2982 	inc	dptr
      00273F E0               [24] 2983 	movx	a,@dptr
      002740 FB               [12] 2984 	mov	r3,a
      002741 A8 25            [24] 2985 	mov	r0,_rfIntHandler_encoffset_1_136
      002743 79 00            [12] 2986 	mov	r1,#0x00
      002745 EA               [12] 2987 	mov	a,r2
      002746 C3               [12] 2988 	clr	c
      002747 98               [12] 2989 	subb	a,r0
      002748 FA               [12] 2990 	mov	r2,a
      002749 EB               [12] 2991 	mov	a,r3
      00274A 99               [12] 2992 	subb	a,r1
      00274B FB               [12] 2993 	mov	r3,a
      00274C 90 FD F9         [24] 2994 	mov	dptr,#_rfAESMode
      00274F E0               [24] 2995 	movx	a,@dptr
      002750 F9               [12] 2996 	mov	r1,a
      002751 53 01 F0         [24] 2997 	anl	ar1,#0xF0
      002754 90 FD D6         [24] 2998 	mov	dptr,#_decAES_PARM_2
      002757 EC               [12] 2999 	mov	a,r4
      002758 F0               [24] 3000 	movx	@dptr,a
      002759 ED               [12] 3001 	mov	a,r5
      00275A A3               [24] 3002 	inc	dptr
      00275B F0               [24] 3003 	movx	@dptr,a
      00275C 90 FD D8         [24] 3004 	mov	dptr,#_decAES_PARM_3
      00275F EA               [12] 3005 	mov	a,r2
      002760 F0               [24] 3006 	movx	@dptr,a
      002761 EB               [12] 3007 	mov	a,r3
      002762 A3               [24] 3008 	inc	dptr
      002763 F0               [24] 3009 	movx	@dptr,a
      002764 90 FD DA         [24] 3010 	mov	dptr,#_decAES_PARM_4
      002767 E9               [12] 3011 	mov	a,r1
      002768 F0               [24] 3012 	movx	@dptr,a
      002769 8F 82            [24] 3013 	mov	dpl,r7
      00276B 8E 83            [24] 3014 	mov	dph,r6
      00276D 12 2B E2         [24] 3015 	lcall	_decAES
      002770                       3016 00109$:
                                   3017 ;	cc1111rf.c:671: rfRxCurrentBuffer ^= 1;
      002770 90 F9 7F         [24] 3018 	mov	dptr,#_rfRxCurrentBuffer
      002773 E0               [24] 3019 	movx	a,@dptr
      002774 FF               [12] 3020 	mov	r7,a
      002775 74 01            [12] 3021 	mov	a,#0x01
      002777 6F               [12] 3022 	xrl	a,r7
      002778 F0               [24] 3023 	movx	@dptr,a
                                   3024 ;	cc1111rf.c:672: rfRxCounter[rfRxCurrentBuffer] = 0;
      002779 E0               [24] 3025 	movx	a,@dptr
      00277A FF               [12] 3026 	mov	r7,a
      00277B 75 F0 02         [24] 3027 	mov	b,#0x02
      00277E A4               [48] 3028 	mul	ab
      00277F 24 80            [12] 3029 	add	a,#_rfRxCounter
      002781 F5 82            [12] 3030 	mov	dpl,a
      002783 74 FD            [12] 3031 	mov	a,#(_rfRxCounter >> 8)
      002785 35 F0            [12] 3032 	addc	a,b
      002787 F5 83            [12] 3033 	mov	dph,a
      002789 E4               [12] 3034 	clr	a
      00278A F0               [24] 3035 	movx	@dptr,a
      00278B A3               [24] 3036 	inc	dptr
      00278C F0               [24] 3037 	movx	@dptr,a
                                   3038 ;	cc1111rf.c:674: rfRxProcessed[FIRST_BUFFER] = RX_UNPROCESSED;
      00278D 90 FD 84         [24] 3039 	mov	dptr,#_rfRxProcessed
      002790 F0               [24] 3040 	movx	@dptr,a
                                   3041 ;	cc1111rf.c:675: rfRxProcessed[SECOND_BUFFER] = RX_UNPROCESSED;
      002791 90 FD 85         [24] 3042 	mov	dptr,#(_rfRxProcessed + 0x0001)
      002794 F0               [24] 3043 	movx	@dptr,a
      002795 80 21            [24] 3044 	sjmp	00112$
      002797                       3045 00111$:
                                   3046 ;	cc1111rf.c:692: lastCode[1] = LCE_DROPPED_PACKET;
      002797 90 FD B4         [24] 3047 	mov	dptr,#(_lastCode + 0x0001)
      00279A 74 12            [12] 3048 	mov	a,#0x12
      00279C F0               [24] 3049 	movx	@dptr,a
                                   3050 ;	cc1111rf.c:693: LED = !LED;
      00279D B2 A4            [12] 3051 	cpl	_P2_4
                                   3052 ;	cc1111rf.c:694: rfRxCounter[rfRxCurrentBuffer] = 0;
      00279F 90 F9 7F         [24] 3053 	mov	dptr,#_rfRxCurrentBuffer
      0027A2 E0               [24] 3054 	movx	a,@dptr
      0027A3 FF               [12] 3055 	mov	r7,a
      0027A4 75 F0 02         [24] 3056 	mov	b,#0x02
      0027A7 A4               [48] 3057 	mul	ab
      0027A8 24 80            [12] 3058 	add	a,#_rfRxCounter
      0027AA F5 82            [12] 3059 	mov	dpl,a
      0027AC 74 FD            [12] 3060 	mov	a,#(_rfRxCounter >> 8)
      0027AE 35 F0            [12] 3061 	addc	a,b
      0027B0 F5 83            [12] 3062 	mov	dph,a
      0027B2 E4               [12] 3063 	clr	a
      0027B3 F0               [24] 3064 	movx	@dptr,a
      0027B4 A3               [24] 3065 	inc	dptr
      0027B5 F0               [24] 3066 	movx	@dptr,a
                                   3067 ;	cc1111rf.c:695: LED = !LED;
      0027B6 B2 A4            [12] 3068 	cpl	_P2_4
      0027B8                       3069 00112$:
                                   3070 ;	cc1111rf.c:698: LED = 0;
      0027B8 C2 A4            [12] 3071 	clr	_P2_4
      0027BA                       3072 00115$:
                                   3073 ;	cc1111rf.c:700: RFIF &= ~(RFIF_IRQ_DONE | RFIF_IRQ_TIMEOUT);        // OVF needs to be handled next...
      0027BA AF E9            [24] 3074 	mov	r7,_RFIF
      0027BC 74 CF            [12] 3075 	mov	a,#0xCF
      0027BE 5F               [12] 3076 	anl	a,r7
      0027BF F5 E9            [12] 3077 	mov	_RFIF,a
      0027C1                       3078 00117$:
                                   3079 ;	cc1111rf.c:704: if(RFIF & RFIF_IRQ_RXOVF)
      0027C1 E5 E9            [12] 3080 	mov	a,_RFIF
      0027C3 30 E6 14         [24] 3081 	jnb	acc.6,00119$
                                   3082 ;	cc1111rf.c:709: lastCode[1] = LCE_RF_RXOVF;
      0027C6 90 FD B4         [24] 3083 	mov	dptr,#(_lastCode + 0x0001)
      0027C9 74 10            [12] 3084 	mov	a,#0x10
      0027CB F0               [24] 3085 	movx	@dptr,a
                                   3086 ;	cc1111rf.c:710: LED = !LED;
      0027CC B2 A4            [12] 3087 	cpl	_P2_4
                                   3088 ;	cc1111rf.c:712: resetRFSTATE();
      0027CE 12 1E 13         [24] 3089 	lcall	_resetRFSTATE
                                   3090 ;	cc1111rf.c:714: LED = !LED;
      0027D1 B2 A4            [12] 3091 	cpl	_P2_4
                                   3092 ;	cc1111rf.c:715: RFIF &= ~RFIF_IRQ_RXOVF;
      0027D3 AF E9            [24] 3093 	mov	r7,_RFIF
      0027D5 74 BF            [12] 3094 	mov	a,#0xBF
      0027D7 5F               [12] 3095 	anl	a,r7
      0027D8 F5 E9            [12] 3096 	mov	_RFIF,a
      0027DA                       3097 00119$:
                                   3098 ;	cc1111rf.c:718: if(RFIF & RFIF_IRQ_TXUNF)
      0027DA E5 E9            [12] 3099 	mov	a,_RFIF
      0027DC 30 E7 14         [24] 3100 	jnb	acc.7,00122$
                                   3101 ;	cc1111rf.c:721: lastCode[1] = LCE_RF_TXUNF;
      0027DF 90 FD B4         [24] 3102 	mov	dptr,#(_lastCode + 0x0001)
      0027E2 74 11            [12] 3103 	mov	a,#0x11
      0027E4 F0               [24] 3104 	movx	@dptr,a
                                   3105 ;	cc1111rf.c:722: LED = !LED;
      0027E5 B2 A4            [12] 3106 	cpl	_P2_4
                                   3107 ;	cc1111rf.c:724: resetRFSTATE();
      0027E7 12 1E 13         [24] 3108 	lcall	_resetRFSTATE
                                   3109 ;	cc1111rf.c:726: LED = !LED;
      0027EA B2 A4            [12] 3110 	cpl	_P2_4
                                   3111 ;	cc1111rf.c:728: RFIF &= ~RFIF_IRQ_TXUNF;
      0027EC AF E9            [24] 3112 	mov	r7,_RFIF
      0027EE 74 7F            [12] 3113 	mov	a,#0x7F
      0027F0 5F               [12] 3114 	anl	a,r7
      0027F1 F5 E9            [12] 3115 	mov	_RFIF,a
      0027F3                       3116 00122$:
      0027F3 D0 D0            [24] 3117 	pop	psw
      0027F5 D0 00            [24] 3118 	pop	(0+0)
      0027F7 D0 01            [24] 3119 	pop	(0+1)
      0027F9 D0 02            [24] 3120 	pop	(0+2)
      0027FB D0 03            [24] 3121 	pop	(0+3)
      0027FD D0 04            [24] 3122 	pop	(0+4)
      0027FF D0 05            [24] 3123 	pop	(0+5)
      002801 D0 06            [24] 3124 	pop	(0+6)
      002803 D0 07            [24] 3125 	pop	(0+7)
      002805 D0 83            [24] 3126 	pop	dph
      002807 D0 82            [24] 3127 	pop	dpl
      002809 D0 F0            [24] 3128 	pop	b
      00280B D0 E0            [24] 3129 	pop	acc
      00280D D0 21            [24] 3130 	pop	bits
      00280F 32               [24] 3131 	reti
                                   3132 ;------------------------------------------------------------
                                   3133 ;Allocation info for local variables in function 'byte_shuffle'
                                   3134 ;------------------------------------------------------------
                                   3135 ;len                       Allocated with name '_byte_shuffle_PARM_2'
                                   3136 ;offset                    Allocated with name '_byte_shuffle_PARM_3'
                                   3137 ;buf                       Allocated with name '_byte_shuffle_buf_1_146'
                                   3138 ;------------------------------------------------------------
                                   3139 ;	cc1111rf.c:733: void byte_shuffle(__xdata u8* __xdata buf, __xdata u16 len, __xdata u16 offset)
                                   3140 ;	-----------------------------------------
                                   3141 ;	 function byte_shuffle
                                   3142 ;	-----------------------------------------
      002810                       3143 _byte_shuffle:
      002810 AF 83            [24] 3144 	mov	r7,dph
      002812 E5 82            [12] 3145 	mov	a,dpl
      002814 90 FD B1         [24] 3146 	mov	dptr,#_byte_shuffle_buf_1_146
      002817 F0               [24] 3147 	movx	@dptr,a
      002818 EF               [12] 3148 	mov	a,r7
      002819 A3               [24] 3149 	inc	dptr
      00281A F0               [24] 3150 	movx	@dptr,a
                                   3151 ;	cc1111rf.c:735: while(len--)
      00281B 90 FD AF         [24] 3152 	mov	dptr,#_byte_shuffle_PARM_3
      00281E E0               [24] 3153 	movx	a,@dptr
      00281F FE               [12] 3154 	mov	r6,a
      002820 A3               [24] 3155 	inc	dptr
      002821 E0               [24] 3156 	movx	a,@dptr
      002822 FF               [12] 3157 	mov	r7,a
      002823 90 FD B1         [24] 3158 	mov	dptr,#_byte_shuffle_buf_1_146
      002826 E0               [24] 3159 	movx	a,@dptr
      002827 FC               [12] 3160 	mov	r4,a
      002828 A3               [24] 3161 	inc	dptr
      002829 E0               [24] 3162 	movx	a,@dptr
      00282A FD               [12] 3163 	mov	r5,a
      00282B 90 FD AD         [24] 3164 	mov	dptr,#_byte_shuffle_PARM_2
      00282E E0               [24] 3165 	movx	a,@dptr
      00282F FA               [12] 3166 	mov	r2,a
      002830 A3               [24] 3167 	inc	dptr
      002831 E0               [24] 3168 	movx	a,@dptr
      002832 FB               [12] 3169 	mov	r3,a
      002833                       3170 00101$:
      002833 8A 00            [24] 3171 	mov	ar0,r2
      002835 8B 01            [24] 3172 	mov	ar1,r3
      002837 1A               [12] 3173 	dec	r2
      002838 BA FF 01         [24] 3174 	cjne	r2,#0xFF,00113$
      00283B 1B               [12] 3175 	dec	r3
      00283C                       3176 00113$:
      00283C E8               [12] 3177 	mov	a,r0
      00283D 49               [12] 3178 	orl	a,r1
      00283E 60 24            [24] 3179 	jz	00104$
                                   3180 ;	cc1111rf.c:736: buf[len + offset] = buf[len];
      002840 EE               [12] 3181 	mov	a,r6
      002841 2A               [12] 3182 	add	a,r2
      002842 F8               [12] 3183 	mov	r0,a
      002843 EF               [12] 3184 	mov	a,r7
      002844 3B               [12] 3185 	addc	a,r3
      002845 F9               [12] 3186 	mov	r1,a
      002846 E8               [12] 3187 	mov	a,r0
      002847 2C               [12] 3188 	add	a,r4
      002848 F8               [12] 3189 	mov	r0,a
      002849 E9               [12] 3190 	mov	a,r1
      00284A 3D               [12] 3191 	addc	a,r5
      00284B F9               [12] 3192 	mov	r1,a
      00284C EA               [12] 3193 	mov	a,r2
      00284D 2C               [12] 3194 	add	a,r4
      00284E F5 82            [12] 3195 	mov	dpl,a
      002850 EB               [12] 3196 	mov	a,r3
      002851 3D               [12] 3197 	addc	a,r5
      002852 F5 83            [12] 3198 	mov	dph,a
      002854 C0 06            [24] 3199 	push	ar6
      002856 C0 07            [24] 3200 	push	ar7
      002858 E0               [24] 3201 	movx	a,@dptr
      002859 88 82            [24] 3202 	mov	dpl,r0
      00285B 89 83            [24] 3203 	mov	dph,r1
      00285D F0               [24] 3204 	movx	@dptr,a
      00285E D0 07            [24] 3205 	pop	ar7
      002860 D0 06            [24] 3206 	pop	ar6
      002862 80 CF            [24] 3207 	sjmp	00101$
      002864                       3208 00104$:
      002864 22               [24] 3209 	ret
                                   3210 	.area CSEG    (CODE)
                                   3211 	.area CONST   (CODE)
                                   3212 	.area XINIT   (CODE)
      003282                       3213 __xinit__rfRxInfMode:
      003282 00                    3214 	.db #0x00	; 0
      003283                       3215 __xinit__rfRxTotalRXLen:
      003283 00 00                 3216 	.byte #0x00,#0x00	; 0
      003285                       3217 __xinit__rfRxLargeLen:
      003285 00 00                 3218 	.byte #0x00,#0x00	; 0
      003287                       3219 __xinit__rfTxCurBufIdx:
      003287 00                    3220 	.db #0x00	; 0
      003288                       3221 __xinit__rfTxBufCount:
      003288 01                    3222 	.db #0x01	; 1
      003289                       3223 __xinit__rfTxCounter:
      003289 00 00                 3224 	.byte #0x00,#0x00	; 0
      00328B                       3225 __xinit__rfTxRepeatCounter:
      00328B 00 00                 3226 	.byte #0x00,#0x00	; 0
      00328D                       3227 __xinit__rfTxBufferEnd:
      00328D 00 00                 3228 	.byte #0x00,#0x00	; 0
      00328F                       3229 __xinit__rfTxRepeatLen:
      00328F 00 00                 3230 	.byte #0x00,#0x00	; 0
      003291                       3231 __xinit__rfTxRepeatOffset:
      003291 00 00                 3232 	.byte #0x00,#0x00	; 0
      003293                       3233 __xinit__rfTxTotalTXLen:
      003293 00 00                 3234 	.byte #0x00,#0x00	; 0
      003295                       3235 __xinit__rfTxInfMode:
      003295 00                    3236 	.db #0x00	; 0
      003296                       3237 __xinit__rfAESMode:
      003296 00                    3238 	.db #0x00	; 0
      003297                       3239 __xinit__rfAmpMode:
      003297 00                    3240 	.db #0x00	; 0
      003298                       3241 __xinit__bRepeatMode:
      003298 00                    3242 	.db #0x00	; 0
                                   3243 	.area CABS    (ABS,CODE)

                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.3.0 #8604 (Dec 30 2013) (Linux)
                              4 ; This file was generated Fri Dec 16 14:41:37 2016
                              5 ;--------------------------------------------------------
                              6 	.module cc1111rf
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _RepeaterStop
                             13 	.globl _RepeaterStart
                             14 	.globl _setFreq
                             15 	.globl _memset
                             16 	.globl _decAES
                             17 	.globl _encAES
                             18 	.globl _padAES
                             19 	.globl _appInitRf
                             20 	.globl _sleepMicros
                             21 	.globl _usbProcessEvents
                             22 	.globl _USBIF
                             23 	.globl _MODE
                             24 	.globl _RE
                             25 	.globl _SLAVE
                             26 	.globl _FE
                             27 	.globl _ERR
                             28 	.globl _RX_BYTE
                             29 	.globl _TX_BYTE
                             30 	.globl _ACTIVE
                             31 	.globl _B_7
                             32 	.globl _B_6
                             33 	.globl _B_5
                             34 	.globl _B_4
                             35 	.globl _B_3
                             36 	.globl _B_2
                             37 	.globl _B_1
                             38 	.globl _B_0
                             39 	.globl _WDTIF
                             40 	.globl _P1IF
                             41 	.globl _UTX1IF
                             42 	.globl _UTX0IF
                             43 	.globl _P2IF
                             44 	.globl _ACC_7
                             45 	.globl _ACC_6
                             46 	.globl _ACC_5
                             47 	.globl _ACC_4
                             48 	.globl _ACC_3
                             49 	.globl _ACC_2
                             50 	.globl _ACC_1
                             51 	.globl _ACC_0
                             52 	.globl _OVFIM
                             53 	.globl _T4CH1IF
                             54 	.globl _T4CH0IF
                             55 	.globl _T4OVFIF
                             56 	.globl _T3CH1IF
                             57 	.globl _T3CH0IF
                             58 	.globl _T3OVFIF
                             59 	.globl _CY
                             60 	.globl _AC
                             61 	.globl _F0
                             62 	.globl _RS1
                             63 	.globl _RS0
                             64 	.globl _OV
                             65 	.globl _F1
                             66 	.globl _P
                             67 	.globl _STIF
                             68 	.globl _P0IF
                             69 	.globl _T4IF
                             70 	.globl _T3IF
                             71 	.globl _T2IF
                             72 	.globl _T1IF
                             73 	.globl _DMAIF
                             74 	.globl _P0IE
                             75 	.globl _T4IE
                             76 	.globl _T3IE
                             77 	.globl _T2IE
                             78 	.globl _T1IE
                             79 	.globl _DMAIE
                             80 	.globl _EA
                             81 	.globl _STIE
                             82 	.globl _ENCIE
                             83 	.globl _URX1IE
                             84 	.globl _URX0IE
                             85 	.globl _ADCIE
                             86 	.globl _RFTXRXIE
                             87 	.globl _P2_7
                             88 	.globl _P2_6
                             89 	.globl _P2_5
                             90 	.globl _P2_4
                             91 	.globl _P2_3
                             92 	.globl _P2_2
                             93 	.globl _P2_1
                             94 	.globl _P2_0
                             95 	.globl _ENCIF_1
                             96 	.globl _ENCIF_0
                             97 	.globl _P1_7
                             98 	.globl _P1_6
                             99 	.globl _P1_5
                            100 	.globl _P1_4
                            101 	.globl _P1_3
                            102 	.globl _P1_2
                            103 	.globl _P1_1
                            104 	.globl _P1_0
                            105 	.globl _URX1IF
                            106 	.globl _ADCIF
                            107 	.globl _URX0IF
                            108 	.globl _IT1
                            109 	.globl _RFTXRXIF
                            110 	.globl _IT0
                            111 	.globl _P0_7
                            112 	.globl _P0_6
                            113 	.globl _P0_5
                            114 	.globl _P0_4
                            115 	.globl _P0_3
                            116 	.globl _P0_2
                            117 	.globl _P0_1
                            118 	.globl _P0_0
                            119 	.globl _P2DIR
                            120 	.globl _P1DIR
                            121 	.globl _P0DIR
                            122 	.globl _U1GCR
                            123 	.globl _U1UCR
                            124 	.globl _U1BAUD
                            125 	.globl _U1DBUF
                            126 	.globl _U1CSR
                            127 	.globl _P2INP
                            128 	.globl _P1INP
                            129 	.globl _P2SEL
                            130 	.globl _P1SEL
                            131 	.globl _P0SEL
                            132 	.globl _ADCCFG
                            133 	.globl _PERCFG
                            134 	.globl _B
                            135 	.globl _T4CC1
                            136 	.globl _T4CCTL1
                            137 	.globl _T4CC0
                            138 	.globl _T4CCTL0
                            139 	.globl _T4CTL
                            140 	.globl _T4CNT
                            141 	.globl _RFIF
                            142 	.globl _IRCON2
                            143 	.globl _T1CCTL2
                            144 	.globl _T1CCTL1
                            145 	.globl _T1CCTL0
                            146 	.globl _T1CTL
                            147 	.globl _T1CNTH
                            148 	.globl _T1CNTL
                            149 	.globl _RFST
                            150 	.globl _ACC
                            151 	.globl _T1CC2H
                            152 	.globl _T1CC2L
                            153 	.globl _T1CC1H
                            154 	.globl _T1CC1L
                            155 	.globl _T1CC0H
                            156 	.globl _T1CC0L
                            157 	.globl _RFD
                            158 	.globl _TIMIF
                            159 	.globl _DMAREQ
                            160 	.globl _DMAARM
                            161 	.globl _DMA0CFGH
                            162 	.globl _DMA0CFGL
                            163 	.globl _DMA1CFGH
                            164 	.globl _DMA1CFGL
                            165 	.globl _DMAIRQ
                            166 	.globl _PSW
                            167 	.globl _T3CC1
                            168 	.globl _T3CCTL1
                            169 	.globl _T3CC0
                            170 	.globl _T3CCTL0
                            171 	.globl _T3CTL
                            172 	.globl _T3CNT
                            173 	.globl _WDCTL
                            174 	.globl __SFRC8
                            175 	.globl _MEMCTR
                            176 	.globl _CLKCON
                            177 	.globl _U0GCR
                            178 	.globl _U0UCR
                            179 	.globl __SFRC3
                            180 	.globl _U0BAUD
                            181 	.globl _U0DBUF
                            182 	.globl _IRCON
                            183 	.globl __SFRBF
                            184 	.globl _SLEEP
                            185 	.globl _RNDH
                            186 	.globl _RNDL
                            187 	.globl _ADCH
                            188 	.globl _ADCL
                            189 	.globl _IP1
                            190 	.globl _IEN1
                            191 	.globl __SFRB7
                            192 	.globl _ADCCON3
                            193 	.globl _ADCCON2
                            194 	.globl _ADCCON1
                            195 	.globl _ENCCS
                            196 	.globl _ENCDO
                            197 	.globl _ENCDI
                            198 	.globl __SFRB0
                            199 	.globl _FWDATA
                            200 	.globl _FCTL
                            201 	.globl _FADDRH
                            202 	.globl _FADDRL
                            203 	.globl _FWT
                            204 	.globl __SFRAA
                            205 	.globl _IP0
                            206 	.globl _IEN0
                            207 	.globl __SFRA7
                            208 	.globl _WORTIME1
                            209 	.globl _WORTIME0
                            210 	.globl _WOREVT1
                            211 	.globl _WOREVT0
                            212 	.globl _WORCTRL
                            213 	.globl _WORIRQ
                            214 	.globl _P2
                            215 	.globl __SFR9F
                            216 	.globl _T2CTL
                            217 	.globl _T2PR
                            218 	.globl _T2CT
                            219 	.globl _S1CON
                            220 	.globl _IEN2
                            221 	.globl __SFR99
                            222 	.globl _S0CON
                            223 	.globl __SFR97
                            224 	.globl __SFR96
                            225 	.globl __SFR95
                            226 	.globl __SFR94
                            227 	.globl __XPAGE
                            228 	.globl _MPAGE
                            229 	.globl _DPS
                            230 	.globl _RFIM
                            231 	.globl _P1
                            232 	.globl _P0INP
                            233 	.globl __SFR8E
                            234 	.globl _P1IEN
                            235 	.globl _PICTL
                            236 	.globl _P2IFG
                            237 	.globl _P1IFG
                            238 	.globl _P0IFG
                            239 	.globl _TCON
                            240 	.globl _PCON
                            241 	.globl _U0CSR
                            242 	.globl _DPH1
                            243 	.globl _DPL1
                            244 	.globl _DPH0
                            245 	.globl _DPL0
                            246 	.globl _SP
                            247 	.globl _P0
                            248 	.globl _bRepeatMode
                            249 	.globl _rfAmpMode
                            250 	.globl _rfAESMode
                            251 	.globl _rfTxInfMode
                            252 	.globl _rfTxTotalTXLen
                            253 	.globl _rfTxRepeatOffset
                            254 	.globl _rfTxRepeatLen
                            255 	.globl _rfTxBufferEnd
                            256 	.globl _rfTxRepeatCounter
                            257 	.globl _rfTxCounter
                            258 	.globl _rfTxBufCount
                            259 	.globl _rfTxCurBufIdx
                            260 	.globl _rfRxLargeLen
                            261 	.globl _rfRxTotalRXLen
                            262 	.globl _rfRxInfMode
                            263 	.globl _byte_shuffle_PARM_3
                            264 	.globl _byte_shuffle_PARM_2
                            265 	.globl _transmit_PARM_4
                            266 	.globl _transmit_PARM_3
                            267 	.globl _transmit_PARM_2
                            268 	.globl _macdata
                            269 	.globl _rf_tLastRecv
                            270 	.globl _rf_MAC_timer
                            271 	.globl _rf_status
                            272 	.globl _txTotal
                            273 	.globl _rftxbuf
                            274 	.globl _rfRxProcessed
                            275 	.globl _rfRxCounter
                            276 	.globl _rfrxbuf
                            277 	.globl _rfRxCurrentBuffer
                            278 	.globl _USBF5
                            279 	.globl _USBF4
                            280 	.globl _USBF3
                            281 	.globl _USBF2
                            282 	.globl _USBF1
                            283 	.globl _USBF0
                            284 	.globl _USBCNTH
                            285 	.globl _USBCNTL
                            286 	.globl _USBCNT0
                            287 	.globl _USBCSOH
                            288 	.globl _USBCSOL
                            289 	.globl _USBMAXO
                            290 	.globl _USBCSIH
                            291 	.globl _USBCSIL
                            292 	.globl _USBCS0
                            293 	.globl _USBMAXI
                            294 	.globl _USBINDEX
                            295 	.globl _USBFRMH
                            296 	.globl _USBFRML
                            297 	.globl _USBCIE
                            298 	.globl _USBOIE
                            299 	.globl _USBIIE
                            300 	.globl _USBCIF
                            301 	.globl _USBOIF
                            302 	.globl _USBIIF
                            303 	.globl _USBPOW
                            304 	.globl _USBADDR
                            305 	.globl _X_P2DIR
                            306 	.globl _X_P1DIR
                            307 	.globl _X_P0DIR
                            308 	.globl _X_U1GCR
                            309 	.globl _X_U1UCR
                            310 	.globl _X_U1BAUD
                            311 	.globl _X_U1DBUF
                            312 	.globl _X_U1CSR
                            313 	.globl _X_P2INP
                            314 	.globl _X_P1INP
                            315 	.globl _X_P2SEL
                            316 	.globl _X_P1SEL
                            317 	.globl _X_P0SEL
                            318 	.globl _X_ADCCFG
                            319 	.globl _X_PERCFG
                            320 	.globl __NA_B
                            321 	.globl _X_T4CC1
                            322 	.globl _X_T4CCTL1
                            323 	.globl _X_T4CC0
                            324 	.globl _X_T4CCTL0
                            325 	.globl _X_T4CTL
                            326 	.globl _X_T4CNT
                            327 	.globl _X_RFIF
                            328 	.globl __NA_IRCON2
                            329 	.globl _X_T1CCTL2
                            330 	.globl _X_T1CCTL1
                            331 	.globl _X_T1CCTL0
                            332 	.globl _X_T1CTL
                            333 	.globl _X_T1CNTH
                            334 	.globl _X_T1CNTL
                            335 	.globl _X_RFST
                            336 	.globl __NA_ACC
                            337 	.globl _X_T1CC2H
                            338 	.globl _X_T1CC2L
                            339 	.globl _X_T1CC1H
                            340 	.globl _X_T1CC1L
                            341 	.globl _X_T1CC0H
                            342 	.globl _X_T1CC0L
                            343 	.globl _X_RFD
                            344 	.globl _X_TIMIF
                            345 	.globl _X_DMAREQ
                            346 	.globl _X_DMAARM
                            347 	.globl _X_DMA0CFGH
                            348 	.globl _X_DMA0CFGL
                            349 	.globl _X_DMA1CFGH
                            350 	.globl _X_DMA1CFGL
                            351 	.globl _X_DMAIRQ
                            352 	.globl __NA_PSW
                            353 	.globl _X_T3CC1
                            354 	.globl _X_T3CCTL1
                            355 	.globl _X_T3CC0
                            356 	.globl _X_T3CCTL0
                            357 	.globl _X_T3CTL
                            358 	.globl _X_T3CNT
                            359 	.globl _X_WDCTL
                            360 	.globl __X_SFRC8
                            361 	.globl _X_MEMCTR
                            362 	.globl _X_CLKCON
                            363 	.globl _X_U0GCR
                            364 	.globl _X_U0UCR
                            365 	.globl __X_SFRC3
                            366 	.globl _X_U0BAUD
                            367 	.globl _X_U0DBUF
                            368 	.globl __NA_IRCON
                            369 	.globl __X_SFRBF
                            370 	.globl _X_SLEEP
                            371 	.globl _X_RNDH
                            372 	.globl _X_RNDL
                            373 	.globl _X_ADCH
                            374 	.globl _X_ADCL
                            375 	.globl __NA_IP1
                            376 	.globl __NA_IEN1
                            377 	.globl __X_SFRB7
                            378 	.globl _X_ADCCON3
                            379 	.globl _X_ADCCON2
                            380 	.globl _X_ADCCON1
                            381 	.globl _X_ENCCS
                            382 	.globl _X_ENCDO
                            383 	.globl _X_ENCDI
                            384 	.globl __X_SFRB0
                            385 	.globl _X_FWDATA
                            386 	.globl _X_FCTL
                            387 	.globl _X_FADDRH
                            388 	.globl _X_FADDRL
                            389 	.globl _X_FWT
                            390 	.globl __X_SFRAA
                            391 	.globl __NA_IP0
                            392 	.globl __NA_IEN0
                            393 	.globl __X_SFRA7
                            394 	.globl _X_WORTIME1
                            395 	.globl _X_WORTIME0
                            396 	.globl _X_WOREVT1
                            397 	.globl _X_WOREVT0
                            398 	.globl _X_WORCTRL
                            399 	.globl _X_WORIRQ
                            400 	.globl __NA_P2
                            401 	.globl __X_SFR9F
                            402 	.globl _X_T2CTL
                            403 	.globl _X_T2PR
                            404 	.globl _X_T2CT
                            405 	.globl __NA_S1CON
                            406 	.globl __NA_IEN2
                            407 	.globl __X_SFR99
                            408 	.globl __NA_S0CON
                            409 	.globl __X_SFR97
                            410 	.globl __X_SFR96
                            411 	.globl __X_SFR95
                            412 	.globl __X_SFR94
                            413 	.globl _X_MPAGE
                            414 	.globl __NA_DPS
                            415 	.globl _X_RFIM
                            416 	.globl __NA_P1
                            417 	.globl _X_P0INP
                            418 	.globl __X_SFR8E
                            419 	.globl _X_P1IEN
                            420 	.globl _X_PICTL
                            421 	.globl _X_P2IFG
                            422 	.globl _X_P1IFG
                            423 	.globl _X_P0IFG
                            424 	.globl __NA_TCON
                            425 	.globl __NA_PCON
                            426 	.globl _X_U0CSR
                            427 	.globl __NA_DPH1
                            428 	.globl __NA_DPL1
                            429 	.globl __NA_DPH0
                            430 	.globl __NA_DPL0
                            431 	.globl __NA_SP
                            432 	.globl __NA_P0
                            433 	.globl _I2SCLKF2
                            434 	.globl _I2SCLKF1
                            435 	.globl _I2SCLKF0
                            436 	.globl _I2SSTAT
                            437 	.globl _I2SWCNT
                            438 	.globl _I2SDATH
                            439 	.globl _I2SDATL
                            440 	.globl _I2SCFG1
                            441 	.globl _I2SCFG0
                            442 	.globl _VCO_VC_DAC
                            443 	.globl _PKTSTATUS
                            444 	.globl _MARCSTATE
                            445 	.globl _RSSI
                            446 	.globl _LQI
                            447 	.globl _FREQEST
                            448 	.globl _VERSION
                            449 	.globl _PARTNUM
                            450 	.globl __XREGDF35
                            451 	.globl __XREGDF34
                            452 	.globl __XREGDF33
                            453 	.globl __XREGDF32
                            454 	.globl _IOCFG0
                            455 	.globl _IOCFG1
                            456 	.globl _IOCFG2
                            457 	.globl _PA_TABLE0
                            458 	.globl _PA_TABLE1
                            459 	.globl _PA_TABLE2
                            460 	.globl _PA_TABLE3
                            461 	.globl _PA_TABLE4
                            462 	.globl _PA_TABLE5
                            463 	.globl _PA_TABLE6
                            464 	.globl _PA_TABLE7
                            465 	.globl __XREGDF26
                            466 	.globl _TEST0
                            467 	.globl _TEST1
                            468 	.globl _TEST2
                            469 	.globl __XREGDF22
                            470 	.globl __XREGDF21
                            471 	.globl __XREGDF20
                            472 	.globl _FSCAL0
                            473 	.globl _FSCAL1
                            474 	.globl _FSCAL2
                            475 	.globl _FSCAL3
                            476 	.globl _FREND0
                            477 	.globl _FREND1
                            478 	.globl _AGCCTRL0
                            479 	.globl _AGCCTRL1
                            480 	.globl _AGCCTRL2
                            481 	.globl _BSCFG
                            482 	.globl _FOCCFG
                            483 	.globl _MCSM0
                            484 	.globl _MCSM1
                            485 	.globl _MCSM2
                            486 	.globl _DEVIATN
                            487 	.globl _MDMCFG0
                            488 	.globl _MDMCFG1
                            489 	.globl _MDMCFG2
                            490 	.globl _MDMCFG3
                            491 	.globl _MDMCFG4
                            492 	.globl _FREQ0
                            493 	.globl _FREQ1
                            494 	.globl _FREQ2
                            495 	.globl _FSCTRL0
                            496 	.globl _FSCTRL1
                            497 	.globl _CHANNR
                            498 	.globl _ADDR
                            499 	.globl _PKTCTRL0
                            500 	.globl _PKTCTRL1
                            501 	.globl _PKTLEN
                            502 	.globl _SYNC0
                            503 	.globl _SYNC1
                            504 	.globl _MDMCTRL0H
                            505 	.globl _rfif
                            506 	.globl _resetRFSTATE
                            507 	.globl _RxMode
                            508 	.globl _TxMode
                            509 	.globl _IdleMode
                            510 	.globl _init_RF
                            511 	.globl _waitRSSI
                            512 	.globl _transmit
                            513 	.globl _startRX
                            514 	.globl _rfTxRxIntHandler
                            515 	.globl _rfIntHandler
                            516 	.globl _byte_shuffle
                            517 ;--------------------------------------------------------
                            518 ; special function registers
                            519 ;--------------------------------------------------------
                            520 	.area RSEG    (ABS,DATA)
   0000                     521 	.org 0x0000
                     0080   522 _P0	=	0x0080
                     0081   523 _SP	=	0x0081
                     0082   524 _DPL0	=	0x0082
                     0083   525 _DPH0	=	0x0083
                     0084   526 _DPL1	=	0x0084
                     0085   527 _DPH1	=	0x0085
                     0086   528 _U0CSR	=	0x0086
                     0087   529 _PCON	=	0x0087
                     0088   530 _TCON	=	0x0088
                     0089   531 _P0IFG	=	0x0089
                     008A   532 _P1IFG	=	0x008a
                     008B   533 _P2IFG	=	0x008b
                     008C   534 _PICTL	=	0x008c
                     008D   535 _P1IEN	=	0x008d
                     008E   536 __SFR8E	=	0x008e
                     008F   537 _P0INP	=	0x008f
                     0090   538 _P1	=	0x0090
                     0091   539 _RFIM	=	0x0091
                     0092   540 _DPS	=	0x0092
                     0093   541 _MPAGE	=	0x0093
                     0093   542 __XPAGE	=	0x0093
                     0094   543 __SFR94	=	0x0094
                     0095   544 __SFR95	=	0x0095
                     0096   545 __SFR96	=	0x0096
                     0097   546 __SFR97	=	0x0097
                     0098   547 _S0CON	=	0x0098
                     0099   548 __SFR99	=	0x0099
                     009A   549 _IEN2	=	0x009a
                     009B   550 _S1CON	=	0x009b
                     009C   551 _T2CT	=	0x009c
                     009D   552 _T2PR	=	0x009d
                     009E   553 _T2CTL	=	0x009e
                     009F   554 __SFR9F	=	0x009f
                     00A0   555 _P2	=	0x00a0
                     00A1   556 _WORIRQ	=	0x00a1
                     00A2   557 _WORCTRL	=	0x00a2
                     00A3   558 _WOREVT0	=	0x00a3
                     00A4   559 _WOREVT1	=	0x00a4
                     00A5   560 _WORTIME0	=	0x00a5
                     00A6   561 _WORTIME1	=	0x00a6
                     00A7   562 __SFRA7	=	0x00a7
                     00A8   563 _IEN0	=	0x00a8
                     00A9   564 _IP0	=	0x00a9
                     00AA   565 __SFRAA	=	0x00aa
                     00AB   566 _FWT	=	0x00ab
                     00AC   567 _FADDRL	=	0x00ac
                     00AD   568 _FADDRH	=	0x00ad
                     00AE   569 _FCTL	=	0x00ae
                     00AF   570 _FWDATA	=	0x00af
                     00B0   571 __SFRB0	=	0x00b0
                     00B1   572 _ENCDI	=	0x00b1
                     00B2   573 _ENCDO	=	0x00b2
                     00B3   574 _ENCCS	=	0x00b3
                     00B4   575 _ADCCON1	=	0x00b4
                     00B5   576 _ADCCON2	=	0x00b5
                     00B6   577 _ADCCON3	=	0x00b6
                     00B7   578 __SFRB7	=	0x00b7
                     00B8   579 _IEN1	=	0x00b8
                     00B9   580 _IP1	=	0x00b9
                     00BA   581 _ADCL	=	0x00ba
                     00BB   582 _ADCH	=	0x00bb
                     00BC   583 _RNDL	=	0x00bc
                     00BD   584 _RNDH	=	0x00bd
                     00BE   585 _SLEEP	=	0x00be
                     00BF   586 __SFRBF	=	0x00bf
                     00C0   587 _IRCON	=	0x00c0
                     00C1   588 _U0DBUF	=	0x00c1
                     00C2   589 _U0BAUD	=	0x00c2
                     00C3   590 __SFRC3	=	0x00c3
                     00C4   591 _U0UCR	=	0x00c4
                     00C5   592 _U0GCR	=	0x00c5
                     00C6   593 _CLKCON	=	0x00c6
                     00C7   594 _MEMCTR	=	0x00c7
                     00C8   595 __SFRC8	=	0x00c8
                     00C9   596 _WDCTL	=	0x00c9
                     00CA   597 _T3CNT	=	0x00ca
                     00CB   598 _T3CTL	=	0x00cb
                     00CC   599 _T3CCTL0	=	0x00cc
                     00CD   600 _T3CC0	=	0x00cd
                     00CE   601 _T3CCTL1	=	0x00ce
                     00CF   602 _T3CC1	=	0x00cf
                     00D0   603 _PSW	=	0x00d0
                     00D1   604 _DMAIRQ	=	0x00d1
                     00D2   605 _DMA1CFGL	=	0x00d2
                     00D3   606 _DMA1CFGH	=	0x00d3
                     00D4   607 _DMA0CFGL	=	0x00d4
                     00D5   608 _DMA0CFGH	=	0x00d5
                     00D6   609 _DMAARM	=	0x00d6
                     00D7   610 _DMAREQ	=	0x00d7
                     00D8   611 _TIMIF	=	0x00d8
                     00D9   612 _RFD	=	0x00d9
                     00DA   613 _T1CC0L	=	0x00da
                     00DB   614 _T1CC0H	=	0x00db
                     00DC   615 _T1CC1L	=	0x00dc
                     00DD   616 _T1CC1H	=	0x00dd
                     00DE   617 _T1CC2L	=	0x00de
                     00DF   618 _T1CC2H	=	0x00df
                     00E0   619 _ACC	=	0x00e0
                     00E1   620 _RFST	=	0x00e1
                     00E2   621 _T1CNTL	=	0x00e2
                     00E3   622 _T1CNTH	=	0x00e3
                     00E4   623 _T1CTL	=	0x00e4
                     00E5   624 _T1CCTL0	=	0x00e5
                     00E6   625 _T1CCTL1	=	0x00e6
                     00E7   626 _T1CCTL2	=	0x00e7
                     00E8   627 _IRCON2	=	0x00e8
                     00E9   628 _RFIF	=	0x00e9
                     00EA   629 _T4CNT	=	0x00ea
                     00EB   630 _T4CTL	=	0x00eb
                     00EC   631 _T4CCTL0	=	0x00ec
                     00ED   632 _T4CC0	=	0x00ed
                     00EE   633 _T4CCTL1	=	0x00ee
                     00EF   634 _T4CC1	=	0x00ef
                     00F0   635 _B	=	0x00f0
                     00F1   636 _PERCFG	=	0x00f1
                     00F2   637 _ADCCFG	=	0x00f2
                     00F3   638 _P0SEL	=	0x00f3
                     00F4   639 _P1SEL	=	0x00f4
                     00F5   640 _P2SEL	=	0x00f5
                     00F6   641 _P1INP	=	0x00f6
                     00F7   642 _P2INP	=	0x00f7
                     00F8   643 _U1CSR	=	0x00f8
                     00F9   644 _U1DBUF	=	0x00f9
                     00FA   645 _U1BAUD	=	0x00fa
                     00FB   646 _U1UCR	=	0x00fb
                     00FC   647 _U1GCR	=	0x00fc
                     00FD   648 _P0DIR	=	0x00fd
                     00FE   649 _P1DIR	=	0x00fe
                     00FF   650 _P2DIR	=	0x00ff
                            651 ;--------------------------------------------------------
                            652 ; special function bits
                            653 ;--------------------------------------------------------
                            654 	.area RSEG    (ABS,DATA)
   0000                     655 	.org 0x0000
                     0080   656 _P0_0	=	0x0080
                     0081   657 _P0_1	=	0x0081
                     0082   658 _P0_2	=	0x0082
                     0083   659 _P0_3	=	0x0083
                     0084   660 _P0_4	=	0x0084
                     0085   661 _P0_5	=	0x0085
                     0086   662 _P0_6	=	0x0086
                     0087   663 _P0_7	=	0x0087
                     0088   664 _IT0	=	0x0088
                     0089   665 _RFTXRXIF	=	0x0089
                     008A   666 _IT1	=	0x008a
                     008B   667 _URX0IF	=	0x008b
                     008D   668 _ADCIF	=	0x008d
                     008F   669 _URX1IF	=	0x008f
                     0090   670 _P1_0	=	0x0090
                     0091   671 _P1_1	=	0x0091
                     0092   672 _P1_2	=	0x0092
                     0093   673 _P1_3	=	0x0093
                     0094   674 _P1_4	=	0x0094
                     0095   675 _P1_5	=	0x0095
                     0096   676 _P1_6	=	0x0096
                     0097   677 _P1_7	=	0x0097
                     0098   678 _ENCIF_0	=	0x0098
                     0099   679 _ENCIF_1	=	0x0099
                     00A0   680 _P2_0	=	0x00a0
                     00A1   681 _P2_1	=	0x00a1
                     00A2   682 _P2_2	=	0x00a2
                     00A3   683 _P2_3	=	0x00a3
                     00A4   684 _P2_4	=	0x00a4
                     00A5   685 _P2_5	=	0x00a5
                     00A6   686 _P2_6	=	0x00a6
                     00A7   687 _P2_7	=	0x00a7
                     00A8   688 _RFTXRXIE	=	0x00a8
                     00A9   689 _ADCIE	=	0x00a9
                     00AA   690 _URX0IE	=	0x00aa
                     00AB   691 _URX1IE	=	0x00ab
                     00AC   692 _ENCIE	=	0x00ac
                     00AD   693 _STIE	=	0x00ad
                     00AF   694 _EA	=	0x00af
                     00B8   695 _DMAIE	=	0x00b8
                     00B9   696 _T1IE	=	0x00b9
                     00BA   697 _T2IE	=	0x00ba
                     00BB   698 _T3IE	=	0x00bb
                     00BC   699 _T4IE	=	0x00bc
                     00BD   700 _P0IE	=	0x00bd
                     00C0   701 _DMAIF	=	0x00c0
                     00C1   702 _T1IF	=	0x00c1
                     00C2   703 _T2IF	=	0x00c2
                     00C3   704 _T3IF	=	0x00c3
                     00C4   705 _T4IF	=	0x00c4
                     00C5   706 _P0IF	=	0x00c5
                     00C7   707 _STIF	=	0x00c7
                     00D0   708 _P	=	0x00d0
                     00D1   709 _F1	=	0x00d1
                     00D2   710 _OV	=	0x00d2
                     00D3   711 _RS0	=	0x00d3
                     00D4   712 _RS1	=	0x00d4
                     00D5   713 _F0	=	0x00d5
                     00D6   714 _AC	=	0x00d6
                     00D7   715 _CY	=	0x00d7
                     00D8   716 _T3OVFIF	=	0x00d8
                     00D9   717 _T3CH0IF	=	0x00d9
                     00DA   718 _T3CH1IF	=	0x00da
                     00DB   719 _T4OVFIF	=	0x00db
                     00DC   720 _T4CH0IF	=	0x00dc
                     00DD   721 _T4CH1IF	=	0x00dd
                     00DE   722 _OVFIM	=	0x00de
                     00E0   723 _ACC_0	=	0x00e0
                     00E1   724 _ACC_1	=	0x00e1
                     00E2   725 _ACC_2	=	0x00e2
                     00E3   726 _ACC_3	=	0x00e3
                     00E4   727 _ACC_4	=	0x00e4
                     00E5   728 _ACC_5	=	0x00e5
                     00E6   729 _ACC_6	=	0x00e6
                     00E7   730 _ACC_7	=	0x00e7
                     00E8   731 _P2IF	=	0x00e8
                     00E9   732 _UTX0IF	=	0x00e9
                     00EA   733 _UTX1IF	=	0x00ea
                     00EB   734 _P1IF	=	0x00eb
                     00EC   735 _WDTIF	=	0x00ec
                     00F0   736 _B_0	=	0x00f0
                     00F1   737 _B_1	=	0x00f1
                     00F2   738 _B_2	=	0x00f2
                     00F3   739 _B_3	=	0x00f3
                     00F4   740 _B_4	=	0x00f4
                     00F5   741 _B_5	=	0x00f5
                     00F6   742 _B_6	=	0x00f6
                     00F7   743 _B_7	=	0x00f7
                     00F8   744 _ACTIVE	=	0x00f8
                     00F9   745 _TX_BYTE	=	0x00f9
                     00FA   746 _RX_BYTE	=	0x00fa
                     00FB   747 _ERR	=	0x00fb
                     00FC   748 _FE	=	0x00fc
                     00FD   749 _SLAVE	=	0x00fd
                     00FE   750 _RE	=	0x00fe
                     00FF   751 _MODE	=	0x00ff
                     00E8   752 _USBIF	=	0x00e8
                            753 ;--------------------------------------------------------
                            754 ; overlayable register banks
                            755 ;--------------------------------------------------------
                            756 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     757 	.ds 8
                            758 ;--------------------------------------------------------
                            759 ; overlayable bit register bank
                            760 ;--------------------------------------------------------
                            761 	.area BIT_BANK	(REL,OVR,DATA)
   0000                     762 bits:
   0000                     763 	.ds 1
                     8000   764 	b0 = bits[0]
                     8100   765 	b1 = bits[1]
                     8200   766 	b2 = bits[2]
                     8300   767 	b3 = bits[3]
                     8400   768 	b4 = bits[4]
                     8500   769 	b5 = bits[5]
                     8600   770 	b6 = bits[6]
                     8700   771 	b7 = bits[7]
                            772 ;--------------------------------------------------------
                            773 ; internal ram data
                            774 ;--------------------------------------------------------
                            775 	.area DSEG    (DATA)
   0000                     776 _rfif::
   0000                     777 	.ds 1
   0001                     778 _transmit_sloc1_1_0:
   0001                     779 	.ds 2
   0003                     780 _rfIntHandler_encoffset_1_136:
   0003                     781 	.ds 1
                            782 ;--------------------------------------------------------
                            783 ; overlayable items in internal ram 
                            784 ;--------------------------------------------------------
                            785 ;--------------------------------------------------------
                            786 ; indirectly addressable internal ram data
                            787 ;--------------------------------------------------------
                            788 	.area ISEG    (DATA)
                            789 ;--------------------------------------------------------
                            790 ; absolute internal ram data
                            791 ;--------------------------------------------------------
                            792 	.area IABS    (ABS,DATA)
                            793 	.area IABS    (ABS,DATA)
                            794 ;--------------------------------------------------------
                            795 ; bit data
                            796 ;--------------------------------------------------------
                            797 	.area BSEG    (BIT)
   0000                     798 _transmit_sloc0_1_0:
   0000                     799 	.ds 1
   0001                     800 _rfIntHandler_sloc0_1_0:
   0001                     801 	.ds 1
                            802 ;--------------------------------------------------------
                            803 ; paged external ram data
                            804 ;--------------------------------------------------------
                            805 	.area PSEG    (PAG,XDATA)
                            806 ;--------------------------------------------------------
                            807 ; external ram data
                            808 ;--------------------------------------------------------
                            809 	.area XSEG    (XDATA)
                     DF02   810 _MDMCTRL0H	=	0xdf02
                     DF00   811 _SYNC1	=	0xdf00
                     DF01   812 _SYNC0	=	0xdf01
                     DF02   813 _PKTLEN	=	0xdf02
                     DF03   814 _PKTCTRL1	=	0xdf03
                     DF04   815 _PKTCTRL0	=	0xdf04
                     DF05   816 _ADDR	=	0xdf05
                     DF06   817 _CHANNR	=	0xdf06
                     DF07   818 _FSCTRL1	=	0xdf07
                     DF08   819 _FSCTRL0	=	0xdf08
                     DF09   820 _FREQ2	=	0xdf09
                     DF0A   821 _FREQ1	=	0xdf0a
                     DF0B   822 _FREQ0	=	0xdf0b
                     DF0C   823 _MDMCFG4	=	0xdf0c
                     DF0D   824 _MDMCFG3	=	0xdf0d
                     DF0E   825 _MDMCFG2	=	0xdf0e
                     DF0F   826 _MDMCFG1	=	0xdf0f
                     DF10   827 _MDMCFG0	=	0xdf10
                     DF11   828 _DEVIATN	=	0xdf11
                     DF12   829 _MCSM2	=	0xdf12
                     DF13   830 _MCSM1	=	0xdf13
                     DF14   831 _MCSM0	=	0xdf14
                     DF15   832 _FOCCFG	=	0xdf15
                     DF16   833 _BSCFG	=	0xdf16
                     DF17   834 _AGCCTRL2	=	0xdf17
                     DF18   835 _AGCCTRL1	=	0xdf18
                     DF19   836 _AGCCTRL0	=	0xdf19
                     DF1A   837 _FREND1	=	0xdf1a
                     DF1B   838 _FREND0	=	0xdf1b
                     DF1C   839 _FSCAL3	=	0xdf1c
                     DF1D   840 _FSCAL2	=	0xdf1d
                     DF1E   841 _FSCAL1	=	0xdf1e
                     DF1F   842 _FSCAL0	=	0xdf1f
                     DF20   843 __XREGDF20	=	0xdf20
                     DF21   844 __XREGDF21	=	0xdf21
                     DF22   845 __XREGDF22	=	0xdf22
                     DF23   846 _TEST2	=	0xdf23
                     DF24   847 _TEST1	=	0xdf24
                     DF25   848 _TEST0	=	0xdf25
                     DF26   849 __XREGDF26	=	0xdf26
                     DF27   850 _PA_TABLE7	=	0xdf27
                     DF28   851 _PA_TABLE6	=	0xdf28
                     DF29   852 _PA_TABLE5	=	0xdf29
                     DF2A   853 _PA_TABLE4	=	0xdf2a
                     DF2B   854 _PA_TABLE3	=	0xdf2b
                     DF2C   855 _PA_TABLE2	=	0xdf2c
                     DF2D   856 _PA_TABLE1	=	0xdf2d
                     DF2E   857 _PA_TABLE0	=	0xdf2e
                     DF2F   858 _IOCFG2	=	0xdf2f
                     DF30   859 _IOCFG1	=	0xdf30
                     DF31   860 _IOCFG0	=	0xdf31
                     DF32   861 __XREGDF32	=	0xdf32
                     DF33   862 __XREGDF33	=	0xdf33
                     DF34   863 __XREGDF34	=	0xdf34
                     DF35   864 __XREGDF35	=	0xdf35
                     DF36   865 _PARTNUM	=	0xdf36
                     DF37   866 _VERSION	=	0xdf37
                     DF38   867 _FREQEST	=	0xdf38
                     DF39   868 _LQI	=	0xdf39
                     DF3A   869 _RSSI	=	0xdf3a
                     DF3B   870 _MARCSTATE	=	0xdf3b
                     DF3C   871 _PKTSTATUS	=	0xdf3c
                     DF3D   872 _VCO_VC_DAC	=	0xdf3d
                     DF40   873 _I2SCFG0	=	0xdf40
                     DF41   874 _I2SCFG1	=	0xdf41
                     DF42   875 _I2SDATL	=	0xdf42
                     DF43   876 _I2SDATH	=	0xdf43
                     DF44   877 _I2SWCNT	=	0xdf44
                     DF45   878 _I2SSTAT	=	0xdf45
                     DF46   879 _I2SCLKF0	=	0xdf46
                     DF47   880 _I2SCLKF1	=	0xdf47
                     DF48   881 _I2SCLKF2	=	0xdf48
                     DF80   882 __NA_P0	=	0xdf80
                     DF81   883 __NA_SP	=	0xdf81
                     DF82   884 __NA_DPL0	=	0xdf82
                     DF83   885 __NA_DPH0	=	0xdf83
                     DF84   886 __NA_DPL1	=	0xdf84
                     DF85   887 __NA_DPH1	=	0xdf85
                     DF86   888 _X_U0CSR	=	0xdf86
                     DF87   889 __NA_PCON	=	0xdf87
                     DF88   890 __NA_TCON	=	0xdf88
                     DF89   891 _X_P0IFG	=	0xdf89
                     DF8A   892 _X_P1IFG	=	0xdf8a
                     DF8B   893 _X_P2IFG	=	0xdf8b
                     DF8C   894 _X_PICTL	=	0xdf8c
                     DF8D   895 _X_P1IEN	=	0xdf8d
                     DF8E   896 __X_SFR8E	=	0xdf8e
                     DF8F   897 _X_P0INP	=	0xdf8f
                     DF90   898 __NA_P1	=	0xdf90
                     DF91   899 _X_RFIM	=	0xdf91
                     DF92   900 __NA_DPS	=	0xdf92
                     DF93   901 _X_MPAGE	=	0xdf93
                     DF94   902 __X_SFR94	=	0xdf94
                     DF95   903 __X_SFR95	=	0xdf95
                     DF96   904 __X_SFR96	=	0xdf96
                     DF97   905 __X_SFR97	=	0xdf97
                     DF98   906 __NA_S0CON	=	0xdf98
                     DF99   907 __X_SFR99	=	0xdf99
                     DF9A   908 __NA_IEN2	=	0xdf9a
                     DF9B   909 __NA_S1CON	=	0xdf9b
                     DF9C   910 _X_T2CT	=	0xdf9c
                     DF9D   911 _X_T2PR	=	0xdf9d
                     DF9E   912 _X_T2CTL	=	0xdf9e
                     DF9F   913 __X_SFR9F	=	0xdf9f
                     DFA0   914 __NA_P2	=	0xdfa0
                     DFA1   915 _X_WORIRQ	=	0xdfa1
                     DFA2   916 _X_WORCTRL	=	0xdfa2
                     DFA3   917 _X_WOREVT0	=	0xdfa3
                     DFA4   918 _X_WOREVT1	=	0xdfa4
                     DFA5   919 _X_WORTIME0	=	0xdfa5
                     DFA6   920 _X_WORTIME1	=	0xdfa6
                     DFA7   921 __X_SFRA7	=	0xdfa7
                     DFA8   922 __NA_IEN0	=	0xdfa8
                     DFA9   923 __NA_IP0	=	0xdfa9
                     DFAA   924 __X_SFRAA	=	0xdfaa
                     DFAB   925 _X_FWT	=	0xdfab
                     DFAC   926 _X_FADDRL	=	0xdfac
                     DFAD   927 _X_FADDRH	=	0xdfad
                     DFAE   928 _X_FCTL	=	0xdfae
                     DFAF   929 _X_FWDATA	=	0xdfaf
                     DFB0   930 __X_SFRB0	=	0xdfb0
                     DFB1   931 _X_ENCDI	=	0xdfb1
                     DFB2   932 _X_ENCDO	=	0xdfb2
                     DFB3   933 _X_ENCCS	=	0xdfb3
                     DFB4   934 _X_ADCCON1	=	0xdfb4
                     DFB5   935 _X_ADCCON2	=	0xdfb5
                     DFB6   936 _X_ADCCON3	=	0xdfb6
                     DFB7   937 __X_SFRB7	=	0xdfb7
                     DFB8   938 __NA_IEN1	=	0xdfb8
                     DFB9   939 __NA_IP1	=	0xdfb9
                     DFBA   940 _X_ADCL	=	0xdfba
                     DFBB   941 _X_ADCH	=	0xdfbb
                     DFBC   942 _X_RNDL	=	0xdfbc
                     DFBD   943 _X_RNDH	=	0xdfbd
                     DFBE   944 _X_SLEEP	=	0xdfbe
                     DFBF   945 __X_SFRBF	=	0xdfbf
                     DFC0   946 __NA_IRCON	=	0xdfc0
                     DFC1   947 _X_U0DBUF	=	0xdfc1
                     DFC2   948 _X_U0BAUD	=	0xdfc2
                     DFC3   949 __X_SFRC3	=	0xdfc3
                     DFC4   950 _X_U0UCR	=	0xdfc4
                     DFC5   951 _X_U0GCR	=	0xdfc5
                     DFC6   952 _X_CLKCON	=	0xdfc6
                     DFC7   953 _X_MEMCTR	=	0xdfc7
                     DFC8   954 __X_SFRC8	=	0xdfc8
                     DFC9   955 _X_WDCTL	=	0xdfc9
                     DFCA   956 _X_T3CNT	=	0xdfca
                     DFCB   957 _X_T3CTL	=	0xdfcb
                     DFCC   958 _X_T3CCTL0	=	0xdfcc
                     DFCD   959 _X_T3CC0	=	0xdfcd
                     DFCE   960 _X_T3CCTL1	=	0xdfce
                     DFCF   961 _X_T3CC1	=	0xdfcf
                     DFD0   962 __NA_PSW	=	0xdfd0
                     DFD1   963 _X_DMAIRQ	=	0xdfd1
                     DFD2   964 _X_DMA1CFGL	=	0xdfd2
                     DFD3   965 _X_DMA1CFGH	=	0xdfd3
                     DFD4   966 _X_DMA0CFGL	=	0xdfd4
                     DFD5   967 _X_DMA0CFGH	=	0xdfd5
                     DFD6   968 _X_DMAARM	=	0xdfd6
                     DFD7   969 _X_DMAREQ	=	0xdfd7
                     DFD8   970 _X_TIMIF	=	0xdfd8
                     DFD9   971 _X_RFD	=	0xdfd9
                     DFDA   972 _X_T1CC0L	=	0xdfda
                     DFDB   973 _X_T1CC0H	=	0xdfdb
                     DFDC   974 _X_T1CC1L	=	0xdfdc
                     DFDD   975 _X_T1CC1H	=	0xdfdd
                     DFDE   976 _X_T1CC2L	=	0xdfde
                     DFDF   977 _X_T1CC2H	=	0xdfdf
                     DFE0   978 __NA_ACC	=	0xdfe0
                     DFE1   979 _X_RFST	=	0xdfe1
                     DFE2   980 _X_T1CNTL	=	0xdfe2
                     DFE3   981 _X_T1CNTH	=	0xdfe3
                     DFE4   982 _X_T1CTL	=	0xdfe4
                     DFE5   983 _X_T1CCTL0	=	0xdfe5
                     DFE6   984 _X_T1CCTL1	=	0xdfe6
                     DFE7   985 _X_T1CCTL2	=	0xdfe7
                     DFE8   986 __NA_IRCON2	=	0xdfe8
                     DFE9   987 _X_RFIF	=	0xdfe9
                     DFEA   988 _X_T4CNT	=	0xdfea
                     DFEB   989 _X_T4CTL	=	0xdfeb
                     DFEC   990 _X_T4CCTL0	=	0xdfec
                     DFED   991 _X_T4CC0	=	0xdfed
                     DFEE   992 _X_T4CCTL1	=	0xdfee
                     DFEF   993 _X_T4CC1	=	0xdfef
                     DFF0   994 __NA_B	=	0xdff0
                     DFF1   995 _X_PERCFG	=	0xdff1
                     DFF2   996 _X_ADCCFG	=	0xdff2
                     DFF3   997 _X_P0SEL	=	0xdff3
                     DFF4   998 _X_P1SEL	=	0xdff4
                     DFF5   999 _X_P2SEL	=	0xdff5
                     DFF6  1000 _X_P1INP	=	0xdff6
                     DFF7  1001 _X_P2INP	=	0xdff7
                     DFF8  1002 _X_U1CSR	=	0xdff8
                     DFF9  1003 _X_U1DBUF	=	0xdff9
                     DFFA  1004 _X_U1BAUD	=	0xdffa
                     DFFB  1005 _X_U1UCR	=	0xdffb
                     DFFC  1006 _X_U1GCR	=	0xdffc
                     DFFD  1007 _X_P0DIR	=	0xdffd
                     DFFE  1008 _X_P1DIR	=	0xdffe
                     DFFF  1009 _X_P2DIR	=	0xdfff
                     DE00  1010 _USBADDR	=	0xde00
                     DE01  1011 _USBPOW	=	0xde01
                     DE02  1012 _USBIIF	=	0xde02
                     DE04  1013 _USBOIF	=	0xde04
                     DE06  1014 _USBCIF	=	0xde06
                     DE07  1015 _USBIIE	=	0xde07
                     DE09  1016 _USBOIE	=	0xde09
                     DE0B  1017 _USBCIE	=	0xde0b
                     DE0C  1018 _USBFRML	=	0xde0c
                     DE0D  1019 _USBFRMH	=	0xde0d
                     DE0E  1020 _USBINDEX	=	0xde0e
                     DE10  1021 _USBMAXI	=	0xde10
                     DE11  1022 _USBCS0	=	0xde11
                     DE11  1023 _USBCSIL	=	0xde11
                     DE12  1024 _USBCSIH	=	0xde12
                     DE13  1025 _USBMAXO	=	0xde13
                     DE14  1026 _USBCSOL	=	0xde14
                     DE15  1027 _USBCSOH	=	0xde15
                     DE16  1028 _USBCNT0	=	0xde16
                     DE16  1029 _USBCNTL	=	0xde16
                     DE17  1030 _USBCNTH	=	0xde17
                     DE20  1031 _USBF0	=	0xde20
                     DE22  1032 _USBF1	=	0xde22
                     DE24  1033 _USBF2	=	0xde24
                     DE26  1034 _USBF3	=	0xde26
                     DE28  1035 _USBF4	=	0xde28
                     DE2A  1036 _USBF5	=	0xde2a
   0000                    1037 _rfRxCurrentBuffer::
   0000                    1038 	.ds 1
   0001                    1039 _rfrxbuf::
   0001                    1040 	.ds 1024
   0401                    1041 _rfRxCounter::
   0401                    1042 	.ds 4
   0405                    1043 _rfRxProcessed::
   0405                    1044 	.ds 2
   0407                    1045 _rftxbuf::
   0407                    1046 	.ds 2
   0409                    1047 _txTotal::
   0409                    1048 	.ds 2
   040B                    1049 _rf_status::
   040B                    1050 	.ds 1
   040C                    1051 _rf_MAC_timer::
   040C                    1052 	.ds 2
   040E                    1053 _rf_tLastRecv::
   040E                    1054 	.ds 2
   0410                    1055 _macdata::
   0410                    1056 	.ds 21
   0425                    1057 _transmit_PARM_2:
   0425                    1058 	.ds 2
   0427                    1059 _transmit_PARM_3:
   0427                    1060 	.ds 2
   0429                    1061 _transmit_PARM_4:
   0429                    1062 	.ds 2
   042B                    1063 _transmit_buf_1_96:
   042B                    1064 	.ds 2
   042D                    1065 _transmit_encoffset_1_97:
   042D                    1066 	.ds 1
   042E                    1067 _byte_shuffle_PARM_2:
   042E                    1068 	.ds 2
   0430                    1069 _byte_shuffle_PARM_3:
   0430                    1070 	.ds 2
   0432                    1071 _byte_shuffle_buf_1_146:
   0432                    1072 	.ds 2
                           1073 ;--------------------------------------------------------
                           1074 ; absolute external ram data
                           1075 ;--------------------------------------------------------
                           1076 	.area XABS    (ABS,XDATA)
                           1077 ;--------------------------------------------------------
                           1078 ; external initialized ram data
                           1079 ;--------------------------------------------------------
                           1080 	.area XISEG   (XDATA)
   0000                    1081 _rfRxInfMode::
   0000                    1082 	.ds 1
   0001                    1083 _rfRxTotalRXLen::
   0001                    1084 	.ds 2
   0003                    1085 _rfRxLargeLen::
   0003                    1086 	.ds 2
   0005                    1087 _rfTxCurBufIdx::
   0005                    1088 	.ds 1
   0006                    1089 _rfTxBufCount::
   0006                    1090 	.ds 1
   0007                    1091 _rfTxCounter::
   0007                    1092 	.ds 2
   0009                    1093 _rfTxRepeatCounter::
   0009                    1094 	.ds 2
   000B                    1095 _rfTxBufferEnd::
   000B                    1096 	.ds 2
   000D                    1097 _rfTxRepeatLen::
   000D                    1098 	.ds 2
   000F                    1099 _rfTxRepeatOffset::
   000F                    1100 	.ds 2
   0011                    1101 _rfTxTotalTXLen::
   0011                    1102 	.ds 2
   0013                    1103 _rfTxInfMode::
   0013                    1104 	.ds 1
   0014                    1105 _rfAESMode::
   0014                    1106 	.ds 1
   0015                    1107 _rfAmpMode::
   0015                    1108 	.ds 1
   0016                    1109 _bRepeatMode::
   0016                    1110 	.ds 1
                           1111 	.area HOME    (CODE)
                           1112 	.area GSINIT0 (CODE)
                           1113 	.area GSINIT1 (CODE)
                           1114 	.area GSINIT2 (CODE)
                           1115 	.area GSINIT3 (CODE)
                           1116 	.area GSINIT4 (CODE)
                           1117 	.area GSINIT5 (CODE)
                           1118 	.area GSINIT  (CODE)
                           1119 	.area GSFINAL (CODE)
                           1120 	.area CSEG    (CODE)
                           1121 ;--------------------------------------------------------
                           1122 ; global & static initialisations
                           1123 ;--------------------------------------------------------
                           1124 	.area HOME    (CODE)
                           1125 	.area GSINIT  (CODE)
                           1126 	.area GSFINAL (CODE)
                           1127 	.area GSINIT  (CODE)
                           1128 ;--------------------------------------------------------
                           1129 ; Home
                           1130 ;--------------------------------------------------------
                           1131 	.area HOME    (CODE)
                           1132 	.area HOME    (CODE)
                           1133 ;--------------------------------------------------------
                           1134 ; code
                           1135 ;--------------------------------------------------------
                           1136 	.area CSEG    (CODE)
                           1137 ;------------------------------------------------------------
                           1138 ;Allocation info for local variables in function 'setFreq'
                           1139 ;------------------------------------------------------------
                           1140 ;freq                      Allocated to registers r4 r5 r6 r7 
                           1141 ;num                       Allocated to registers r4 r5 r6 r7 
                           1142 ;------------------------------------------------------------
                           1143 ;	cc1111rf.c:56: void setFreq(u32 freq)
                           1144 ;	-----------------------------------------
                           1145 ;	 function setFreq
                           1146 ;	-----------------------------------------
   0000                    1147 _setFreq:
                     0007  1148 	ar7 = 0x07
                     0006  1149 	ar6 = 0x06
                     0005  1150 	ar5 = 0x05
                     0004  1151 	ar4 = 0x04
                     0003  1152 	ar3 = 0x03
                     0002  1153 	ar2 = 0x02
                     0001  1154 	ar1 = 0x01
                     0000  1155 	ar0 = 0x00
                           1156 ;	cc1111rf.c:61: num = freq * (0x10000 / 1000000.0) / PLATFORM_CLOCK_FREQ;
   0000 12r00r00      [24] 1157 	lcall	___ulong2fs
   0003 AC 82         [24] 1158 	mov	r4,dpl
   0005 AD 83         [24] 1159 	mov	r5,dph
   0007 AE F0         [24] 1160 	mov	r6,b
   0009 FF            [12] 1161 	mov	r7,a
   000A C0 04         [24] 1162 	push	ar4
   000C C0 05         [24] 1163 	push	ar5
   000E C0 06         [24] 1164 	push	ar6
   0010 C0 07         [24] 1165 	push	ar7
   0012 90 37 BD      [24] 1166 	mov	dptr,#0x37BD
   0015 75 F0 86      [24] 1167 	mov	b,#0x86
   0018 74 3D         [12] 1168 	mov	a,#0x3D
   001A 12r00r00      [24] 1169 	lcall	___fsmul
   001D AC 82         [24] 1170 	mov	r4,dpl
   001F AD 83         [24] 1171 	mov	r5,dph
   0021 AE F0         [24] 1172 	mov	r6,b
   0023 FF            [12] 1173 	mov	r7,a
   0024 E5 81         [12] 1174 	mov	a,sp
   0026 24 FC         [12] 1175 	add	a,#0xfc
   0028 F5 81         [12] 1176 	mov	sp,a
   002A E4            [12] 1177 	clr	a
   002B C0 E0         [24] 1178 	push	acc
   002D C0 E0         [24] 1179 	push	acc
   002F 74 C0         [12] 1180 	mov	a,#0xC0
   0031 C0 E0         [24] 1181 	push	acc
   0033 74 41         [12] 1182 	mov	a,#0x41
   0035 C0 E0         [24] 1183 	push	acc
   0037 8C 82         [24] 1184 	mov	dpl,r4
   0039 8D 83         [24] 1185 	mov	dph,r5
   003B 8E F0         [24] 1186 	mov	b,r6
   003D EF            [12] 1187 	mov	a,r7
   003E 12r00r00      [24] 1188 	lcall	___fsdiv
   0041 AC 82         [24] 1189 	mov	r4,dpl
   0043 AD 83         [24] 1190 	mov	r5,dph
   0045 AE F0         [24] 1191 	mov	r6,b
   0047 FF            [12] 1192 	mov	r7,a
   0048 E5 81         [12] 1193 	mov	a,sp
   004A 24 FC         [12] 1194 	add	a,#0xfc
   004C F5 81         [12] 1195 	mov	sp,a
   004E 8C 82         [24] 1196 	mov	dpl,r4
   0050 8D 83         [24] 1197 	mov	dph,r5
   0052 8E F0         [24] 1198 	mov	b,r6
   0054 EF            [12] 1199 	mov	a,r7
   0055 12r00r00      [24] 1200 	lcall	___fs2ulong
   0058 AC 82         [24] 1201 	mov	r4,dpl
   005A AD 83         [24] 1202 	mov	r5,dph
   005C AE F0         [24] 1203 	mov	r6,b
                           1204 ;	cc1111rf.c:62: FREQ2 = num >> 16;
   005E 90 DF 09      [24] 1205 	mov	dptr,#_FREQ2
   0061 EE            [12] 1206 	mov	a,r6
   0062 F0            [24] 1207 	movx	@dptr,a
                           1208 ;	cc1111rf.c:63: FREQ1 = (num>>8) & 0xff;
   0063 8D 03         [24] 1209 	mov	ar3,r5
   0065 90 DF 0A      [24] 1210 	mov	dptr,#_FREQ1
   0068 EB            [12] 1211 	mov	a,r3
   0069 F0            [24] 1212 	movx	@dptr,a
                           1213 ;	cc1111rf.c:64: FREQ0 = num & 0xff;
   006A 90 DF 0B      [24] 1214 	mov	dptr,#_FREQ0
   006D EC            [12] 1215 	mov	a,r4
   006E F0            [24] 1216 	movx	@dptr,a
   006F 22            [24] 1217 	ret
                           1218 ;------------------------------------------------------------
                           1219 ;Allocation info for local variables in function 'resetRFSTATE'
                           1220 ;------------------------------------------------------------
                           1221 ;	cc1111rf.c:67: void resetRFSTATE(void)
                           1222 ;	-----------------------------------------
                           1223 ;	 function resetRFSTATE
                           1224 ;	-----------------------------------------
   0070                    1225 _resetRFSTATE:
                           1226 ;	cc1111rf.c:70: RFST = RFST_SIDLE; while ((MARCSTATE) != MARC_STATE_IDLE);
   0070 75 E1 04      [24] 1227 	mov	_RFST,#0x04
   0073                    1228 00101$:
   0073 90 DF 3B      [24] 1229 	mov	dptr,#_MARCSTATE
   0076 E0            [24] 1230 	movx	a,@dptr
   0077 FF            [12] 1231 	mov	r7,a
   0078 BF 01 F8      [24] 1232 	cjne	r7,#0x01,00101$
                           1233 ;	cc1111rf.c:72: RFST = rf_status;
   007B 90r04r0B      [24] 1234 	mov	dptr,#_rf_status
   007E E0            [24] 1235 	movx	a,@dptr
   007F F5 E1         [12] 1236 	mov	_RFST,a
                           1237 ;	cc1111rf.c:73: while (rf_status != RFST_SIDLE && MARCSTATE == MARC_STATE_IDLE)
   0081                    1238 00105$:
   0081 90r04r0B      [24] 1239 	mov	dptr,#_rf_status
   0084 E0            [24] 1240 	movx	a,@dptr
   0085 FF            [12] 1241 	mov	r7,a
   0086 BF 04 01      [24] 1242 	cjne	r7,#0x04,00124$
   0089 22            [24] 1243 	ret
   008A                    1244 00124$:
   008A 90 DF 3B      [24] 1245 	mov	dptr,#_MARCSTATE
   008D E0            [24] 1246 	movx	a,@dptr
   008E FF            [12] 1247 	mov	r7,a
   008F BF 01 02      [24] 1248 	cjne	r7,#0x01,00125$
   0092 80 ED         [24] 1249 	sjmp	00105$
   0094                    1250 00125$:
   0094 22            [24] 1251 	ret
                           1252 ;------------------------------------------------------------
                           1253 ;Allocation info for local variables in function 'RxMode'
                           1254 ;------------------------------------------------------------
                           1255 ;	cc1111rf.c:78: void RxMode(void)
                           1256 ;	-----------------------------------------
                           1257 ;	 function RxMode
                           1258 ;	-----------------------------------------
   0095                    1259 _RxMode:
                           1260 ;	cc1111rf.c:80: if (rf_status != RFST_SRX)
   0095 90r04r0B      [24] 1261 	mov	dptr,#_rf_status
   0098 E0            [24] 1262 	movx	a,@dptr
   0099 FF            [12] 1263 	mov	r7,a
   009A BF 02 01      [24] 1264 	cjne	r7,#0x02,00108$
   009D 22            [24] 1265 	ret
   009E                    1266 00108$:
                           1267 ;	cc1111rf.c:82: MCSM1 &= 0xf0;
                           1268 ;	cc1111rf.c:83: MCSM1 |= 0x0f;
   009E 90 DF 13      [24] 1269 	mov	dptr,#_MCSM1
   00A1 E0            [24] 1270 	movx	a,@dptr
   00A2 54 F0         [12] 1271 	anl	a,#0xF0
   00A4 F0            [24] 1272 	movx	@dptr,a
   00A5 E0            [24] 1273 	movx	a,@dptr
   00A6 44 0F         [12] 1274 	orl	a,#0x0F
   00A8 F0            [24] 1275 	movx	@dptr,a
                           1276 ;	cc1111rf.c:84: rf_status = RFST_SRX;
   00A9 90r04r0B      [24] 1277 	mov	dptr,#_rf_status
   00AC 74 02         [12] 1278 	mov	a,#0x02
   00AE F0            [24] 1279 	movx	@dptr,a
                           1280 ;	cc1111rf.c:86: startRX();
   00AF 02r04rC3      [24] 1281 	ljmp	_startRX
                           1282 ;------------------------------------------------------------
                           1283 ;Allocation info for local variables in function 'TxMode'
                           1284 ;------------------------------------------------------------
                           1285 ;	cc1111rf.c:91: void TxMode(void)
                           1286 ;	-----------------------------------------
                           1287 ;	 function TxMode
                           1288 ;	-----------------------------------------
   00B2                    1289 _TxMode:
                           1290 ;	cc1111rf.c:93: if (rf_status != RFST_STX)
   00B2 90r04r0B      [24] 1291 	mov	dptr,#_rf_status
   00B5 E0            [24] 1292 	movx	a,@dptr
   00B6 FF            [12] 1293 	mov	r7,a
   00B7 BF 03 01      [24] 1294 	cjne	r7,#0x03,00117$
   00BA 22            [24] 1295 	ret
   00BB                    1296 00117$:
                           1297 ;	cc1111rf.c:95: MCSM1 &= 0xf0;
                           1298 ;	cc1111rf.c:96: MCSM1 |= 0x0a;
   00BB 90 DF 13      [24] 1299 	mov	dptr,#_MCSM1
   00BE E0            [24] 1300 	movx	a,@dptr
   00BF 54 F0         [12] 1301 	anl	a,#0xF0
   00C1 F0            [24] 1302 	movx	@dptr,a
   00C2 E0            [24] 1303 	movx	a,@dptr
   00C3 FF            [12] 1304 	mov	r7,a
   00C4 44 0A         [12] 1305 	orl	a,#0x0A
   00C6 F0            [24] 1306 	movx	@dptr,a
                           1307 ;	cc1111rf.c:98: rf_status = RFST_STX;
   00C7 90r04r0B      [24] 1308 	mov	dptr,#_rf_status
   00CA 74 03         [12] 1309 	mov	a,#0x03
   00CC F0            [24] 1310 	movx	@dptr,a
                           1311 ;	cc1111rf.c:99: RFTX;
   00CD 75 E1 03      [24] 1312 	mov	_RFST,#0x03
   00D0                    1313 00101$:
   00D0 90 DF 3B      [24] 1314 	mov	dptr,#_MARCSTATE
   00D3 E0            [24] 1315 	movx	a,@dptr
   00D4 FF            [12] 1316 	mov	r7,a
   00D5 BF 13 F8      [24] 1317 	cjne	r7,#0x13,00101$
   00D8 22            [24] 1318 	ret
                           1319 ;------------------------------------------------------------
                           1320 ;Allocation info for local variables in function 'IdleMode'
                           1321 ;------------------------------------------------------------
                           1322 ;	cc1111rf.c:104: void IdleMode(void)
                           1323 ;	-----------------------------------------
                           1324 ;	 function IdleMode
                           1325 ;	-----------------------------------------
   00D9                    1326 _IdleMode:
                           1327 ;	cc1111rf.c:106: if (rf_status != RFST_SIDLE)
   00D9 90r04r0B      [24] 1328 	mov	dptr,#_rf_status
   00DC E0            [24] 1329 	movx	a,@dptr
   00DD FF            [12] 1330 	mov	r7,a
   00DE BF 04 01      [24] 1331 	cjne	r7,#0x04,00120$
   00E1 22            [24] 1332 	ret
   00E2                    1333 00120$:
                           1334 ;	cc1111rf.c:109: MCSM1 &= 0xf0;
   00E2 90 DF 13      [24] 1335 	mov	dptr,#_MCSM1
   00E5 E0            [24] 1336 	movx	a,@dptr
   00E6 54 F0         [12] 1337 	anl	a,#0xF0
   00E8 F0            [24] 1338 	movx	@dptr,a
                           1339 ;	cc1111rf.c:110: RFIM &= ~RFIF_IRQ_DONE;
   00E9 AF 91         [24] 1340 	mov	r7,_RFIM
   00EB 74 EF         [12] 1341 	mov	a,#0xEF
   00ED 5F            [12] 1342 	anl	a,r7
   00EE F5 91         [12] 1343 	mov	_RFIM,a
                           1344 ;	cc1111rf.c:111: RFOFF;
   00F0 75 E1 04      [24] 1345 	mov	_RFST,#0x04
   00F3                    1346 00101$:
   00F3 90 DF 3B      [24] 1347 	mov	dptr,#_MARCSTATE
   00F6 E0            [24] 1348 	movx	a,@dptr
   00F7 FF            [12] 1349 	mov	r7,a
   00F8 BF 01 F8      [24] 1350 	cjne	r7,#0x01,00101$
                           1351 ;	cc1111rf.c:118: S1CON &= ~(S1CON_RFIF_0|S1CON_RFIF_1);  // clear RFIF interrupts
   00FB AF 9B         [24] 1352 	mov	r7,_S1CON
   00FD 74 FC         [12] 1353 	mov	a,#0xFC
   00FF 5F            [12] 1354 	anl	a,r7
   0100 F5 9B         [12] 1355 	mov	_S1CON,a
                           1356 ;	cc1111rf.c:119: RFIF &= ~RFIF_IRQ_DONE;
   0102 AF E9         [24] 1357 	mov	r7,_RFIF
   0104 74 EF         [12] 1358 	mov	a,#0xEF
   0106 5F            [12] 1359 	anl	a,r7
   0107 F5 E9         [12] 1360 	mov	_RFIF,a
                           1361 ;	cc1111rf.c:121: rf_status = RFST_SIDLE;
   0109 90r04r0B      [24] 1362 	mov	dptr,#_rf_status
   010C 74 04         [12] 1363 	mov	a,#0x04
   010E F0            [24] 1364 	movx	@dptr,a
   010F 22            [24] 1365 	ret
                           1366 ;------------------------------------------------------------
                           1367 ;Allocation info for local variables in function 'init_RF'
                           1368 ;------------------------------------------------------------
                           1369 ;	cc1111rf.c:130: void init_RF()
                           1370 ;	-----------------------------------------
                           1371 ;	 function init_RF
                           1372 ;	-----------------------------------------
   0110                    1373 _init_RF:
                           1374 ;	cc1111rf.c:133: rf_tLastRecv = 0;
   0110 90r04r0E      [24] 1375 	mov	dptr,#_rf_tLastRecv
   0113 E4            [12] 1376 	clr	a
   0114 F0            [24] 1377 	movx	@dptr,a
   0115 E4            [12] 1378 	clr	a
   0116 A3            [24] 1379 	inc	dptr
   0117 F0            [24] 1380 	movx	@dptr,a
                           1381 ;	cc1111rf.c:136: rfRxCounter[FIRST_BUFFER] = 0;
   0118 90r04r01      [24] 1382 	mov	dptr,#_rfRxCounter
   011B E4            [12] 1383 	clr	a
   011C F0            [24] 1384 	movx	@dptr,a
   011D E4            [12] 1385 	clr	a
   011E A3            [24] 1386 	inc	dptr
   011F F0            [24] 1387 	movx	@dptr,a
                           1388 ;	cc1111rf.c:137: rfRxCounter[SECOND_BUFFER] = 0;
   0120 90r04r03      [24] 1389 	mov	dptr,#(_rfRxCounter + 0x0002)
   0123 E4            [12] 1390 	clr	a
   0124 F0            [24] 1391 	movx	@dptr,a
   0125 E4            [12] 1392 	clr	a
   0126 A3            [24] 1393 	inc	dptr
   0127 F0            [24] 1394 	movx	@dptr,a
                           1395 ;	cc1111rf.c:150: CLKCON &= 0xc7;
   0128 53 C6 C7      [24] 1396 	anl	_CLKCON,#0xC7
                           1397 ;	cc1111rf.c:152: T2PR = 0;
   012B 75 9D 00      [24] 1398 	mov	_T2PR,#0x00
                           1399 ;	cc1111rf.c:153: T2CTL |= T2CTL_TIP_64;  // 64, 128, 256, 1024
   012E 85 9E 9E      [24] 1400 	mov	_T2CTL,_T2CTL
                           1401 ;	cc1111rf.c:154: T2CTL |= T2CTL_TIG;
   0131 43 9E 04      [24] 1402 	orl	_T2CTL,#0x04
                           1403 ;	cc1111rf.c:158: IP0 |= 0;       // grp0 is RF/RFTXRX/DMA
   0134 85 A9 A9      [24] 1404 	mov	_IP0,_IP0
                           1405 ;	cc1111rf.c:159: IP1 |= BIT0;
   0137 43 B9 01      [24] 1406 	orl	_IP1,#0x01
                           1407 ;	cc1111rf.c:162: rf_status = RFST_SIDLE;
   013A 90r04r0B      [24] 1408 	mov	dptr,#_rf_status
   013D 74 04         [12] 1409 	mov	a,#0x04
   013F F0            [24] 1410 	movx	@dptr,a
                           1411 ;	cc1111rf.c:171: memset(rfrxbuf,0,(BUFFER_AMOUNT * BUFFER_SIZE));
   0140 75*00 00      [24] 1412 	mov	_memset_PARM_2,#0x00
   0143 75*00 00      [24] 1413 	mov	_memset_PARM_3,#0x00
   0146 75*01 04      [24] 1414 	mov	(_memset_PARM_3 + 1),#0x04
   0149 90r00r01      [24] 1415 	mov	dptr,#_rfrxbuf
   014C 75 F0 00      [24] 1416 	mov	b,#0x00
   014F 12r00r00      [24] 1417 	lcall	_memset
                           1418 ;	cc1111rf.c:173: appInitRf();
   0152 12r00r00      [24] 1419 	lcall	_appInitRf
                           1420 ;	cc1111rf.c:176: RFTXRXIE = 1;                   // FIXME: should this be something that is enabled/disabled by usb?
   0155 D2 A8         [12] 1421 	setb	_RFTXRXIE
                           1422 ;	cc1111rf.c:177: RFIM = 0xd1;    // TXUNF, RXOVF, DONE, SFD  (SFD to mark time of receipt)
   0157 75 91 D1      [24] 1423 	mov	_RFIM,#0xD1
                           1424 ;	cc1111rf.c:178: RFIF = 0;
   015A 75 E9 00      [24] 1425 	mov	_RFIF,#0x00
                           1426 ;	cc1111rf.c:179: rfif = 0;
   015D 75*00 00      [24] 1427 	mov	_rfif,#0x00
                           1428 ;	cc1111rf.c:180: IEN2 |= IEN2_RFIE;
   0160 43 9A 01      [24] 1429 	orl	_IEN2,#0x01
                           1430 ;	cc1111rf.c:183: RFOFF;
   0163 75 E1 04      [24] 1431 	mov	_RFST,#0x04
   0166                    1432 00101$:
   0166 90 DF 3B      [24] 1433 	mov	dptr,#_MARCSTATE
   0169 E0            [24] 1434 	movx	a,@dptr
   016A FF            [12] 1435 	mov	r7,a
   016B BF 01 F8      [24] 1436 	cjne	r7,#0x01,00101$
   016E 22            [24] 1437 	ret
                           1438 ;------------------------------------------------------------
                           1439 ;Allocation info for local variables in function 'waitRSSI'
                           1440 ;------------------------------------------------------------
                           1441 ;u16WaitTime               Allocated to registers r6 r7 
                           1442 ;------------------------------------------------------------
                           1443 ;	cc1111rf.c:188: int waitRSSI()
                           1444 ;	-----------------------------------------
                           1445 ;	 function waitRSSI
                           1446 ;	-----------------------------------------
   016F                    1447 _waitRSSI:
                           1448 ;	cc1111rf.c:191: while(u16WaitTime < RSSI_TIMEOUT_US)
   016F 7E 00         [12] 1449 	mov	r6,#0x00
   0171 7F 00         [12] 1450 	mov	r7,#0x00
   0173                    1451 00104$:
   0173 C3            [12] 1452 	clr	c
   0174 EE            [12] 1453 	mov	a,r6
   0175 94 DC         [12] 1454 	subb	a,#0xDC
   0177 EF            [12] 1455 	mov	a,r7
   0178 94 05         [12] 1456 	subb	a,#0x05
   017A 50 24         [24] 1457 	jnc	00106$
                           1458 ;	cc1111rf.c:193: if(PKTSTATUS & (PKTSTATUS_CCA | PKTSTATUS_CS))
   017C 90 DF 3C      [24] 1459 	mov	dptr,#_PKTSTATUS
   017F E0            [24] 1460 	movx	a,@dptr
   0180 FD            [12] 1461 	mov	r5,a
   0181 54 50         [12] 1462 	anl	a,#0x50
   0183 60 04         [24] 1463 	jz	00102$
                           1464 ;	cc1111rf.c:195: return 1;
   0185 90 00 01      [24] 1465 	mov	dptr,#0x0001
   0188 22            [24] 1466 	ret
   0189                    1467 00102$:
                           1468 ;	cc1111rf.c:199: sleepMicros(50);
   0189 90 00 32      [24] 1469 	mov	dptr,#0x0032
   018C C0 07         [24] 1470 	push	ar7
   018E C0 06         [24] 1471 	push	ar6
   0190 12r00r00      [24] 1472 	lcall	_sleepMicros
   0193 D0 06         [24] 1473 	pop	ar6
   0195 D0 07         [24] 1474 	pop	ar7
                           1475 ;	cc1111rf.c:200: u16WaitTime += 50;
   0197 74 32         [12] 1476 	mov	a,#0x32
   0199 2E            [12] 1477 	add	a,r6
   019A FE            [12] 1478 	mov	r6,a
   019B E4            [12] 1479 	clr	a
   019C 3F            [12] 1480 	addc	a,r7
   019D FF            [12] 1481 	mov	r7,a
   019E 80 D3         [24] 1482 	sjmp	00104$
   01A0                    1483 00106$:
                           1484 ;	cc1111rf.c:203: return 0;
   01A0 90 00 00      [24] 1485 	mov	dptr,#0x0000
   01A3 22            [24] 1486 	ret
                           1487 ;------------------------------------------------------------
                           1488 ;Allocation info for local variables in function 'transmit'
                           1489 ;------------------------------------------------------------
                           1490 ;sloc1                     Allocated with name '_transmit_sloc1_1_0'
                           1491 ;len                       Allocated with name '_transmit_PARM_2'
                           1492 ;repeat                    Allocated with name '_transmit_PARM_3'
                           1493 ;offset                    Allocated with name '_transmit_PARM_4'
                           1494 ;buf                       Allocated with name '_transmit_buf_1_96'
                           1495 ;countdown                 Allocated with name '_transmit_countdown_1_97'
                           1496 ;encoffset                 Allocated with name '_transmit_encoffset_1_97'
                           1497 ;original_pktlen           Allocated with name '_transmit_original_pktlen_1_97'
                           1498 ;------------------------------------------------------------
                           1499 ;	cc1111rf.c:214: u8 transmit(__xdata u8* __xdata buf, __xdata u16 len, __xdata u16 repeat, __xdata u16 offset)
                           1500 ;	-----------------------------------------
                           1501 ;	 function transmit
                           1502 ;	-----------------------------------------
   01A4                    1503 _transmit:
   01A4 AF 83         [24] 1504 	mov	r7,dph
   01A6 E5 82         [12] 1505 	mov	a,dpl
   01A8 90r04r2B      [24] 1506 	mov	dptr,#_transmit_buf_1_96
   01AB F0            [24] 1507 	movx	@dptr,a
   01AC EF            [12] 1508 	mov	a,r7
   01AD A3            [24] 1509 	inc	dptr
   01AE F0            [24] 1510 	movx	@dptr,a
                           1511 ;	cc1111rf.c:217: __xdata u8 encoffset = 0;
   01AF 90r04r2D      [24] 1512 	mov	dptr,#_transmit_encoffset_1_97
   01B2 E4            [12] 1513 	clr	a
   01B3 F0            [24] 1514 	movx	@dptr,a
                           1515 ;	cc1111rf.c:218: __xdata u8 original_pktlen = PKTLEN;
   01B4 90 DF 02      [24] 1516 	mov	dptr,#_PKTLEN
   01B7 E0            [24] 1517 	movx	a,@dptr
   01B8 FF            [12] 1518 	mov	r7,a
                           1519 ;	cc1111rf.c:220: while (MARCSTATE == MARC_STATE_TX)
   01B9                    1520 00101$:
   01B9 90 DF 3B      [24] 1521 	mov	dptr,#_MARCSTATE
   01BC E0            [24] 1522 	movx	a,@dptr
   01BD FE            [12] 1523 	mov	r6,a
   01BE BE 13 09      [24] 1524 	cjne	r6,#0x13,00103$
                           1525 ;	cc1111rf.c:222: LED = !LED;
   01C1 A2 A4         [12] 1526 	mov	c,_P2_4
   01C3 B3            [12] 1527 	cpl	c
   01C4 92*00         [24] 1528 	mov  _transmit_sloc0_1_0,c
   01C6 92 A4         [24] 1529 	mov	_P2_4,c
   01C8 80 EF         [24] 1530 	sjmp	00101$
   01CA                    1531 00103$:
                           1532 ;	cc1111rf.c:228: LED = 0;
   01CA C2 A4         [12] 1533 	clr	_P2_4
                           1534 ;	cc1111rf.c:231: rfTxInfMode = 0;
   01CC 90r00r13      [24] 1535 	mov	dptr,#_rfTxInfMode
   01CF E4            [12] 1536 	clr	a
   01D0 F0            [24] 1537 	movx	@dptr,a
                           1538 ;	cc1111rf.c:232: rfTxRepeatCounter = repeat;
   01D1 90r04r27      [24] 1539 	mov	dptr,#_transmit_PARM_3
   01D4 E0            [24] 1540 	movx	a,@dptr
   01D5 FD            [12] 1541 	mov	r5,a
   01D6 A3            [24] 1542 	inc	dptr
   01D7 E0            [24] 1543 	movx	a,@dptr
   01D8 FE            [12] 1544 	mov	r6,a
   01D9 90r00r09      [24] 1545 	mov	dptr,#_rfTxRepeatCounter
   01DC ED            [12] 1546 	mov	a,r5
   01DD F0            [24] 1547 	movx	@dptr,a
   01DE EE            [12] 1548 	mov	a,r6
   01DF A3            [24] 1549 	inc	dptr
   01E0 F0            [24] 1550 	movx	@dptr,a
                           1551 ;	cc1111rf.c:233: rfTxRepeatOffset = offset;
   01E1 90r04r29      [24] 1552 	mov	dptr,#_transmit_PARM_4
   01E4 E0            [24] 1553 	movx	a,@dptr
   01E5 FB            [12] 1554 	mov	r3,a
   01E6 A3            [24] 1555 	inc	dptr
   01E7 E0            [24] 1556 	movx	a,@dptr
   01E8 FC            [12] 1557 	mov	r4,a
   01E9 90r00r0F      [24] 1558 	mov	dptr,#_rfTxRepeatOffset
   01EC EB            [12] 1559 	mov	a,r3
   01ED F0            [24] 1560 	movx	@dptr,a
   01EE EC            [12] 1561 	mov	a,r4
   01EF A3            [24] 1562 	inc	dptr
   01F0 F0            [24] 1563 	movx	@dptr,a
                           1564 ;	cc1111rf.c:234: rfTxBufferEnd = len;
   01F1 90r04r25      [24] 1565 	mov	dptr,#_transmit_PARM_2
   01F4 E0            [24] 1566 	movx	a,@dptr
   01F5 F9            [12] 1567 	mov	r1,a
   01F6 A3            [24] 1568 	inc	dptr
   01F7 E0            [24] 1569 	movx	a,@dptr
   01F8 FA            [12] 1570 	mov	r2,a
   01F9 90r00r0B      [24] 1571 	mov	dptr,#_rfTxBufferEnd
   01FC E9            [12] 1572 	mov	a,r1
   01FD F0            [24] 1573 	movx	@dptr,a
   01FE EA            [12] 1574 	mov	a,r2
   01FF A3            [24] 1575 	inc	dptr
   0200 F0            [24] 1576 	movx	@dptr,a
                           1577 ;	cc1111rf.c:235: rfTxRepeatLen = len - offset;
   0201 90r00r0D      [24] 1578 	mov	dptr,#_rfTxRepeatLen
   0204 E9            [12] 1579 	mov	a,r1
   0205 C3            [12] 1580 	clr	c
   0206 9B            [12] 1581 	subb	a,r3
   0207 F0            [24] 1582 	movx	@dptr,a
   0208 EA            [12] 1583 	mov	a,r2
   0209 9C            [12] 1584 	subb	a,r4
   020A A3            [24] 1585 	inc	dptr
   020B F0            [24] 1586 	movx	@dptr,a
                           1587 ;	cc1111rf.c:237: rfTxTotalTXLen = len + (rfTxRepeatLen * repeat);
   020C 90r00r0D      [24] 1588 	mov	dptr,#_rfTxRepeatLen
   020F E0            [24] 1589 	movx	a,@dptr
   0210 FB            [12] 1590 	mov	r3,a
   0211 A3            [24] 1591 	inc	dptr
   0212 E0            [24] 1592 	movx	a,@dptr
   0213 FC            [12] 1593 	mov	r4,a
   0214 8D*00         [24] 1594 	mov	__mulint_PARM_2,r5
   0216 8E*01         [24] 1595 	mov	(__mulint_PARM_2 + 1),r6
   0218 8B 82         [24] 1596 	mov	dpl,r3
   021A 8C 83         [24] 1597 	mov	dph,r4
   021C C0 07         [24] 1598 	push	ar7
   021E C0 06         [24] 1599 	push	ar6
   0220 C0 05         [24] 1600 	push	ar5
   0222 C0 02         [24] 1601 	push	ar2
   0224 C0 01         [24] 1602 	push	ar1
   0226 12r00r00      [24] 1603 	lcall	__mulint
   0229 AB 82         [24] 1604 	mov	r3,dpl
   022B AC 83         [24] 1605 	mov	r4,dph
   022D D0 01         [24] 1606 	pop	ar1
   022F D0 02         [24] 1607 	pop	ar2
   0231 D0 05         [24] 1608 	pop	ar5
   0233 D0 06         [24] 1609 	pop	ar6
   0235 D0 07         [24] 1610 	pop	ar7
   0237 90r00r11      [24] 1611 	mov	dptr,#_rfTxTotalTXLen
   023A EB            [12] 1612 	mov	a,r3
   023B 29            [12] 1613 	add	a,r1
   023C F0            [24] 1614 	movx	@dptr,a
   023D EC            [12] 1615 	mov	a,r4
   023E 3A            [12] 1616 	addc	a,r2
   023F A3            [24] 1617 	inc	dptr
   0240 F0            [24] 1618 	movx	@dptr,a
                           1619 ;	cc1111rf.c:242: if(len == 0)
   0241 E9            [12] 1620 	mov	a,r1
   0242 4A            [12] 1621 	orl	a,r2
   0243 70 5D         [24] 1622 	jnz	00118$
                           1623 ;	cc1111rf.c:244: len = buf[0];
   0245 90r04r2B      [24] 1624 	mov	dptr,#_transmit_buf_1_96
   0248 E0            [24] 1625 	movx	a,@dptr
   0249 FB            [12] 1626 	mov	r3,a
   024A A3            [24] 1627 	inc	dptr
   024B E0            [24] 1628 	movx	a,@dptr
   024C FC            [12] 1629 	mov	r4,a
   024D 8B 82         [24] 1630 	mov	dpl,r3
   024F 8C 83         [24] 1631 	mov	dph,r4
   0251 E0            [24] 1632 	movx	a,@dptr
   0252 F8            [12] 1633 	mov	r0,a
   0253 88*01         [24] 1634 	mov	_transmit_sloc1_1_0,r0
   0255 75*02 00      [24] 1635 	mov	(_transmit_sloc1_1_0 + 1),#0x00
   0258 90r04r25      [24] 1636 	mov	dptr,#_transmit_PARM_2
   025B E5*01         [12] 1637 	mov	a,_transmit_sloc1_1_0
   025D F0            [24] 1638 	movx	@dptr,a
   025E E5*02         [12] 1639 	mov	a,(_transmit_sloc1_1_0 + 1)
   0260 A3            [24] 1640 	inc	dptr
   0261 F0            [24] 1641 	movx	@dptr,a
                           1642 ;	cc1111rf.c:246: switch (PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG)
   0262 90 DF 04      [24] 1643 	mov	dptr,#_PKTCTRL0
   0265 E0            [24] 1644 	movx	a,@dptr
   0266 F8            [12] 1645 	mov	r0,a
   0267 53 00 03      [24] 1646 	anl	ar0,#0x03
   026A B8 00 02      [24] 1647 	cjne	r0,#0x00,00214$
   026D 80 18         [24] 1648 	sjmp	00105$
   026F                    1649 00214$:
   026F B8 01 02      [24] 1650 	cjne	r0,#0x01,00215$
   0272 80 03         [24] 1651 	sjmp	00216$
   0274                    1652 00215$:
   0274 02r03r2B      [24] 1653 	ljmp	00119$
   0277                    1654 00216$:
                           1655 ;	cc1111rf.c:249: len++;  // we need to send the length byte too...
   0277 90r04r25      [24] 1656 	mov	dptr,#_transmit_PARM_2
   027A 74 01         [12] 1657 	mov	a,#0x01
   027C 25*01         [12] 1658 	add	a,_transmit_sloc1_1_0
   027E F0            [24] 1659 	movx	@dptr,a
   027F E4            [12] 1660 	clr	a
   0280 35*02         [12] 1661 	addc	a,(_transmit_sloc1_1_0 + 1)
   0282 A3            [24] 1662 	inc	dptr
   0283 F0            [24] 1663 	movx	@dptr,a
                           1664 ;	cc1111rf.c:250: break;
   0284 02r03r2B      [24] 1665 	ljmp	00119$
                           1666 ;	cc1111rf.c:251: case PKTCTRL0_LENGTH_CONFIG_FIX:
   0287                    1667 00105$:
                           1668 ;	cc1111rf.c:252: buf++;  // skip sending the length byte
   0287 90r04r2B      [24] 1669 	mov	dptr,#_transmit_buf_1_96
   028A 74 01         [12] 1670 	mov	a,#0x01
   028C 2B            [12] 1671 	add	a,r3
   028D F0            [24] 1672 	movx	@dptr,a
   028E E4            [12] 1673 	clr	a
   028F 3C            [12] 1674 	addc	a,r4
   0290 A3            [24] 1675 	inc	dptr
   0291 F0            [24] 1676 	movx	@dptr,a
                           1677 ;	cc1111rf.c:253: PKTLEN= len;
   0292 90r04r25      [24] 1678 	mov	dptr,#_transmit_PARM_2
   0295 E0            [24] 1679 	movx	a,@dptr
   0296 FB            [12] 1680 	mov	r3,a
   0297 A3            [24] 1681 	inc	dptr
   0298 E0            [24] 1682 	movx	a,@dptr
   0299 FC            [12] 1683 	mov	r4,a
   029A 90 DF 02      [24] 1684 	mov	dptr,#_PKTLEN
   029D EB            [12] 1685 	mov	a,r3
   029E F0            [24] 1686 	movx	@dptr,a
                           1687 ;	cc1111rf.c:254: break;
   029F 02r03r2B      [24] 1688 	ljmp	00119$
                           1689 ;	cc1111rf.c:257: }
   02A2                    1690 00118$:
                           1691 ;	cc1111rf.c:263: switch (PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG)
   02A2 90 DF 04      [24] 1692 	mov	dptr,#_PKTCTRL0
   02A5 E0            [24] 1693 	movx	a,@dptr
   02A6 FC            [12] 1694 	mov	r4,a
   02A7 53 04 03      [24] 1695 	anl	ar4,#0x03
   02AA BC 00 02      [24] 1696 	cjne	r4,#0x00,00217$
   02AD 80 46         [24] 1697 	sjmp	00109$
   02AF                    1698 00217$:
   02AF BC 01 02      [24] 1699 	cjne	r4,#0x01,00218$
   02B2 80 03         [24] 1700 	sjmp	00219$
   02B4                    1701 00218$:
   02B4 02r03r2B      [24] 1702 	ljmp	00119$
   02B7                    1703 00219$:
                           1704 ;	cc1111rf.c:267: byte_shuffle(buf, len, 1);
   02B7 90r04r2B      [24] 1705 	mov	dptr,#_transmit_buf_1_96
   02BA E0            [24] 1706 	movx	a,@dptr
   02BB FB            [12] 1707 	mov	r3,a
   02BC A3            [24] 1708 	inc	dptr
   02BD E0            [24] 1709 	movx	a,@dptr
   02BE FC            [12] 1710 	mov	r4,a
   02BF 90r04r2E      [24] 1711 	mov	dptr,#_byte_shuffle_PARM_2
   02C2 E9            [12] 1712 	mov	a,r1
   02C3 F0            [24] 1713 	movx	@dptr,a
   02C4 EA            [12] 1714 	mov	a,r2
   02C5 A3            [24] 1715 	inc	dptr
   02C6 F0            [24] 1716 	movx	@dptr,a
   02C7 90r04r30      [24] 1717 	mov	dptr,#_byte_shuffle_PARM_3
   02CA 74 01         [12] 1718 	mov	a,#0x01
   02CC F0            [24] 1719 	movx	@dptr,a
   02CD E4            [12] 1720 	clr	a
   02CE A3            [24] 1721 	inc	dptr
   02CF F0            [24] 1722 	movx	@dptr,a
   02D0 8B 82         [24] 1723 	mov	dpl,r3
   02D2 8C 83         [24] 1724 	mov	dph,r4
   02D4 C0 07         [24] 1725 	push	ar7
   02D6 C0 02         [24] 1726 	push	ar2
   02D8 C0 01         [24] 1727 	push	ar1
   02DA 12r0Ar95      [24] 1728 	lcall	_byte_shuffle
   02DD D0 01         [24] 1729 	pop	ar1
   02DF D0 02         [24] 1730 	pop	ar2
   02E1 D0 07         [24] 1731 	pop	ar7
                           1732 ;	cc1111rf.c:268: buf[0] = (u8) len;
   02E3 90r04r2B      [24] 1733 	mov	dptr,#_transmit_buf_1_96
   02E6 E0            [24] 1734 	movx	a,@dptr
   02E7 FB            [12] 1735 	mov	r3,a
   02E8 A3            [24] 1736 	inc	dptr
   02E9 E0            [24] 1737 	movx	a,@dptr
   02EA FC            [12] 1738 	mov	r4,a
   02EB 89 00         [24] 1739 	mov	ar0,r1
   02ED 8B 82         [24] 1740 	mov	dpl,r3
   02EF 8C 83         [24] 1741 	mov	dph,r4
   02F1 E8            [12] 1742 	mov	a,r0
   02F2 F0            [24] 1743 	movx	@dptr,a
                           1744 ;	cc1111rf.c:269: break;
                           1745 ;	cc1111rf.c:270: case PKTCTRL0_LENGTH_CONFIG_FIX:
   02F3 80 36         [24] 1746 	sjmp	00119$
   02F5                    1747 00109$:
                           1748 ;	cc1111rf.c:274: if(repeat)
   02F5 ED            [12] 1749 	mov	a,r5
   02F6 4E            [12] 1750 	orl	a,r6
   02F7 60 2D         [24] 1751 	jz	00113$
                           1752 ;	cc1111rf.c:278: PKTLEN = (u8) (rfTxTotalTXLen % 256);
   02F9 90r00r11      [24] 1753 	mov	dptr,#_rfTxTotalTXLen
   02FC E0            [24] 1754 	movx	a,@dptr
   02FD FD            [12] 1755 	mov	r5,a
   02FE A3            [24] 1756 	inc	dptr
   02FF E0            [24] 1757 	movx	a,@dptr
   0300 90 DF 02      [24] 1758 	mov	dptr,#_PKTLEN
   0303 ED            [12] 1759 	mov	a,r5
   0304 F0            [24] 1760 	movx	@dptr,a
                           1761 ;	cc1111rf.c:279: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
   0305 90 DF 04      [24] 1762 	mov	dptr,#_PKTCTRL0
   0308 E0            [24] 1763 	movx	a,@dptr
   0309 54 FC         [12] 1764 	anl	a,#0xFC
   030B F0            [24] 1765 	movx	@dptr,a
                           1766 ;	cc1111rf.c:281: if(rfTxTotalTXLen > RF_MAX_TX_BLOCK)
   030C 90r00r11      [24] 1767 	mov	dptr,#_rfTxTotalTXLen
   030F E0            [24] 1768 	movx	a,@dptr
   0310 FD            [12] 1769 	mov	r5,a
   0311 A3            [24] 1770 	inc	dptr
   0312 E0            [24] 1771 	movx	a,@dptr
   0313 FE            [12] 1772 	mov	r6,a
   0314 60 08         [24] 1773 	jz	00111$
                           1774 ;	cc1111rf.c:282: PKTCTRL0 |= PKTCTRL0_LENGTH_CONFIG_INF;
   0316 90 DF 04      [24] 1775 	mov	dptr,#_PKTCTRL0
   0319 E0            [24] 1776 	movx	a,@dptr
   031A FE            [12] 1777 	mov	r6,a
   031B 44 02         [12] 1778 	orl	a,#0x02
   031D F0            [24] 1779 	movx	@dptr,a
   031E                    1780 00111$:
                           1781 ;	cc1111rf.c:284: rfTxInfMode = 1;
   031E 90r00r13      [24] 1782 	mov	dptr,#_rfTxInfMode
   0321 74 01         [12] 1783 	mov	a,#0x01
   0323 F0            [24] 1784 	movx	@dptr,a
   0324 80 05         [24] 1785 	sjmp	00119$
   0326                    1786 00113$:
                           1787 ;	cc1111rf.c:287: PKTLEN = len;
   0326 90 DF 02      [24] 1788 	mov	dptr,#_PKTLEN
   0329 E9            [12] 1789 	mov	a,r1
   032A F0            [24] 1790 	movx	@dptr,a
                           1791 ;	cc1111rf.c:291: }
   032B                    1792 00119$:
                           1793 ;	cc1111rf.c:296: RFTXRXIE = 1;
   032B D2 A8         [12] 1794 	setb	_RFTXRXIE
                           1795 ;	cc1111rf.c:302: if(rfAESMode & AES_CRYPTO_OUT_ENABLE)
   032D 90r00r14      [24] 1796 	mov	dptr,#_rfAESMode
   0330 E0            [24] 1797 	movx	a,@dptr
   0331 FE            [12] 1798 	mov	r6,a
   0332 20 E3 03      [24] 1799 	jb	acc.3,00222$
   0335 02r04r59      [24] 1800 	ljmp	00135$
   0338                    1801 00222$:
                           1802 ;	cc1111rf.c:304: if((PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG) == PKTCTRL0_LENGTH_CONFIG_VAR)
   0338 90 DF 04      [24] 1803 	mov	dptr,#_PKTCTRL0
   033B E0            [24] 1804 	movx	a,@dptr
   033C FE            [12] 1805 	mov	r6,a
   033D 53 06 03      [24] 1806 	anl	ar6,#0x03
   0340 BE 01 06      [24] 1807 	cjne	r6,#0x01,00121$
                           1808 ;	cc1111rf.c:305: encoffset= 1;
   0343 90r04r2D      [24] 1809 	mov	dptr,#_transmit_encoffset_1_97
   0346 74 01         [12] 1810 	mov	a,#0x01
   0348 F0            [24] 1811 	movx	@dptr,a
   0349                    1812 00121$:
                           1813 ;	cc1111rf.c:307: len= padAES(buf + encoffset, len);
   0349 90r04r2D      [24] 1814 	mov	dptr,#_transmit_encoffset_1_97
   034C E0            [24] 1815 	movx	a,@dptr
   034D FE            [12] 1816 	mov	r6,a
   034E 90r04r2B      [24] 1817 	mov	dptr,#_transmit_buf_1_96
   0351 E0            [24] 1818 	movx	a,@dptr
   0352 FC            [12] 1819 	mov	r4,a
   0353 A3            [24] 1820 	inc	dptr
   0354 E0            [24] 1821 	movx	a,@dptr
   0355 FD            [12] 1822 	mov	r5,a
   0356 EE            [12] 1823 	mov	a,r6
   0357 2C            [12] 1824 	add	a,r4
   0358 FA            [12] 1825 	mov	r2,a
   0359 E4            [12] 1826 	clr	a
   035A 3D            [12] 1827 	addc	a,r5
   035B FB            [12] 1828 	mov	r3,a
   035C 90r04r25      [24] 1829 	mov	dptr,#_transmit_PARM_2
   035F E0            [24] 1830 	movx	a,@dptr
   0360 F8            [12] 1831 	mov	r0,a
   0361 A3            [24] 1832 	inc	dptr
   0362 E0            [24] 1833 	movx	a,@dptr
   0363 F9            [12] 1834 	mov	r1,a
   0364 90r00r00      [24] 1835 	mov	dptr,#_padAES_PARM_2
   0367 E8            [12] 1836 	mov	a,r0
   0368 F0            [24] 1837 	movx	@dptr,a
   0369 E9            [12] 1838 	mov	a,r1
   036A A3            [24] 1839 	inc	dptr
   036B F0            [24] 1840 	movx	@dptr,a
   036C 8A 82         [24] 1841 	mov	dpl,r2
   036E 8B 83         [24] 1842 	mov	dph,r3
   0370 C0 07         [24] 1843 	push	ar7
   0372 C0 06         [24] 1844 	push	ar6
   0374 C0 05         [24] 1845 	push	ar5
   0376 C0 04         [24] 1846 	push	ar4
   0378 12r00r00      [24] 1847 	lcall	_padAES
   037B AA 82         [24] 1848 	mov	r2,dpl
   037D AB 83         [24] 1849 	mov	r3,dph
   037F D0 04         [24] 1850 	pop	ar4
   0381 D0 05         [24] 1851 	pop	ar5
   0383 D0 06         [24] 1852 	pop	ar6
   0385 D0 07         [24] 1853 	pop	ar7
                           1854 ;	cc1111rf.c:309: if((rfAESMode & AES_CRYPTO_OUT_TYPE) == AES_CRYPTO_OUT_ENCRYPT)
   0387 90r00r14      [24] 1855 	mov	dptr,#_rfAESMode
   038A E0            [24] 1856 	movx	a,@dptr
   038B F9            [12] 1857 	mov	r1,a
   038C 53 01 04      [24] 1858 	anl	ar1,#0x04
   038F B9 04 48      [24] 1859 	cjne	r1,#0x04,00123$
                           1860 ;	cc1111rf.c:310: encAES(buf + encoffset, buf + encoffset, len, (rfAESMode & AES_CRYPTO_MODE));
   0392 C0 07         [24] 1861 	push	ar7
   0394 EE            [12] 1862 	mov	a,r6
   0395 2C            [12] 1863 	add	a,r4
   0396 F8            [12] 1864 	mov	r0,a
   0397 E4            [12] 1865 	clr	a
   0398 3D            [12] 1866 	addc	a,r5
   0399 F9            [12] 1867 	mov	r1,a
   039A 90r00r14      [24] 1868 	mov	dptr,#_rfAESMode
   039D E0            [24] 1869 	movx	a,@dptr
   039E FF            [12] 1870 	mov	r7,a
   039F 53 07 F0      [24] 1871 	anl	ar7,#0xF0
   03A2 90r00r00      [24] 1872 	mov	dptr,#_encAES_PARM_2
   03A5 E8            [12] 1873 	mov	a,r0
   03A6 F0            [24] 1874 	movx	@dptr,a
   03A7 E9            [12] 1875 	mov	a,r1
   03A8 A3            [24] 1876 	inc	dptr
   03A9 F0            [24] 1877 	movx	@dptr,a
   03AA 90r00r00      [24] 1878 	mov	dptr,#_encAES_PARM_3
   03AD EA            [12] 1879 	mov	a,r2
   03AE F0            [24] 1880 	movx	@dptr,a
   03AF EB            [12] 1881 	mov	a,r3
   03B0 A3            [24] 1882 	inc	dptr
   03B1 F0            [24] 1883 	movx	@dptr,a
   03B2 90r00r00      [24] 1884 	mov	dptr,#_encAES_PARM_4
   03B5 EF            [12] 1885 	mov	a,r7
   03B6 F0            [24] 1886 	movx	@dptr,a
   03B7 88 82         [24] 1887 	mov	dpl,r0
   03B9 89 83         [24] 1888 	mov	dph,r1
   03BB C0 07         [24] 1889 	push	ar7
   03BD C0 06         [24] 1890 	push	ar6
   03BF C0 05         [24] 1891 	push	ar5
   03C1 C0 04         [24] 1892 	push	ar4
   03C3 C0 03         [24] 1893 	push	ar3
   03C5 C0 02         [24] 1894 	push	ar2
   03C7 12r00r00      [24] 1895 	lcall	_encAES
   03CA D0 02         [24] 1896 	pop	ar2
   03CC D0 03         [24] 1897 	pop	ar3
   03CE D0 04         [24] 1898 	pop	ar4
   03D0 D0 05         [24] 1899 	pop	ar5
   03D2 D0 06         [24] 1900 	pop	ar6
   03D4 D0 07         [24] 1901 	pop	ar7
   03D6 D0 07         [24] 1902 	pop	ar7
   03D8 80 46         [24] 1903 	sjmp	00124$
   03DA                    1904 00123$:
                           1905 ;	cc1111rf.c:312: decAES(buf + encoffset, buf + encoffset, len, (rfAESMode & AES_CRYPTO_MODE));
   03DA C0 07         [24] 1906 	push	ar7
   03DC EE            [12] 1907 	mov	a,r6
   03DD 2C            [12] 1908 	add	a,r4
   03DE F8            [12] 1909 	mov	r0,a
   03DF E4            [12] 1910 	clr	a
   03E0 3D            [12] 1911 	addc	a,r5
   03E1 F9            [12] 1912 	mov	r1,a
   03E2 90r00r14      [24] 1913 	mov	dptr,#_rfAESMode
   03E5 E0            [24] 1914 	movx	a,@dptr
   03E6 FF            [12] 1915 	mov	r7,a
   03E7 53 07 F0      [24] 1916 	anl	ar7,#0xF0
   03EA 90r00r00      [24] 1917 	mov	dptr,#_decAES_PARM_2
   03ED E8            [12] 1918 	mov	a,r0
   03EE F0            [24] 1919 	movx	@dptr,a
   03EF E9            [12] 1920 	mov	a,r1
   03F0 A3            [24] 1921 	inc	dptr
   03F1 F0            [24] 1922 	movx	@dptr,a
   03F2 90r00r00      [24] 1923 	mov	dptr,#_decAES_PARM_3
   03F5 EA            [12] 1924 	mov	a,r2
   03F6 F0            [24] 1925 	movx	@dptr,a
   03F7 EB            [12] 1926 	mov	a,r3
   03F8 A3            [24] 1927 	inc	dptr
   03F9 F0            [24] 1928 	movx	@dptr,a
   03FA 90r00r00      [24] 1929 	mov	dptr,#_decAES_PARM_4
   03FD EF            [12] 1930 	mov	a,r7
   03FE F0            [24] 1931 	movx	@dptr,a
   03FF 88 82         [24] 1932 	mov	dpl,r0
   0401 89 83         [24] 1933 	mov	dph,r1
   0403 C0 07         [24] 1934 	push	ar7
   0405 C0 06         [24] 1935 	push	ar6
   0407 C0 05         [24] 1936 	push	ar5
   0409 C0 04         [24] 1937 	push	ar4
   040B C0 03         [24] 1938 	push	ar3
   040D C0 02         [24] 1939 	push	ar2
   040F 12r00r00      [24] 1940 	lcall	_decAES
   0412 D0 02         [24] 1941 	pop	ar2
   0414 D0 03         [24] 1942 	pop	ar3
   0416 D0 04         [24] 1943 	pop	ar4
   0418 D0 05         [24] 1944 	pop	ar5
   041A D0 06         [24] 1945 	pop	ar6
   041C D0 07         [24] 1946 	pop	ar7
                           1947 ;	cc1111rf.c:426: return 1;
   041E D0 07         [24] 1948 	pop	ar7
                           1949 ;	cc1111rf.c:312: decAES(buf + encoffset, buf + encoffset, len, (rfAESMode & AES_CRYPTO_MODE));
   0420                    1950 00124$:
                           1951 ;	cc1111rf.c:314: if(encoffset)
   0420 EE            [12] 1952 	mov	a,r6
   0421 60 1E         [24] 1953 	jz	00132$
                           1954 ;	cc1111rf.c:318: if((rfAESMode & AES_CRYPTO_MODE) == ENCCS_MODE_CBCMAC)
   0423 90r00r14      [24] 1955 	mov	dptr,#_rfAESMode
   0426 E0            [24] 1956 	movx	a,@dptr
   0427 FE            [12] 1957 	mov	r6,a
   0428 53 06 F0      [24] 1958 	anl	ar6,#0xF0
   042B BE 50 09      [24] 1959 	cjne	r6,#0x50,00126$
                           1960 ;	cc1111rf.c:319: buf[0] = 16;
   042E 8C 82         [24] 1961 	mov	dpl,r4
   0430 8D 83         [24] 1962 	mov	dph,r5
   0432 74 10         [12] 1963 	mov	a,#0x10
   0434 F0            [24] 1964 	movx	@dptr,a
   0435 80 22         [24] 1965 	sjmp	00135$
   0437                    1966 00126$:
                           1967 ;	cc1111rf.c:321: buf[0] = (u8) len;
   0437 8A 06         [24] 1968 	mov	ar6,r2
   0439 8C 82         [24] 1969 	mov	dpl,r4
   043B 8D 83         [24] 1970 	mov	dph,r5
   043D EE            [12] 1971 	mov	a,r6
   043E F0            [24] 1972 	movx	@dptr,a
   043F 80 18         [24] 1973 	sjmp	00135$
   0441                    1974 00132$:
                           1975 ;	cc1111rf.c:325: if((rfAESMode & AES_CRYPTO_MODE) == ENCCS_MODE_CBCMAC)
   0441 90r00r14      [24] 1976 	mov	dptr,#_rfAESMode
   0444 E0            [24] 1977 	movx	a,@dptr
   0445 FE            [12] 1978 	mov	r6,a
   0446 53 06 F0      [24] 1979 	anl	ar6,#0xF0
   0449 BE 50 08      [24] 1980 	cjne	r6,#0x50,00129$
                           1981 ;	cc1111rf.c:326: PKTLEN = 16;
   044C 90 DF 02      [24] 1982 	mov	dptr,#_PKTLEN
   044F 74 10         [12] 1983 	mov	a,#0x10
   0451 F0            [24] 1984 	movx	@dptr,a
   0452 80 05         [24] 1985 	sjmp	00135$
   0454                    1986 00129$:
                           1987 ;	cc1111rf.c:328: PKTLEN = (u8) len;
   0454 90 DF 02      [24] 1988 	mov	dptr,#_PKTLEN
   0457 EA            [12] 1989 	mov	a,r2
   0458 F0            [24] 1990 	movx	@dptr,a
   0459                    1991 00135$:
                           1992 ;	cc1111rf.c:333: rftxbuf = buf;
   0459 90r04r2B      [24] 1993 	mov	dptr,#_transmit_buf_1_96
   045C E0            [24] 1994 	movx	a,@dptr
   045D FD            [12] 1995 	mov	r5,a
   045E A3            [24] 1996 	inc	dptr
   045F E0            [24] 1997 	movx	a,@dptr
   0460 FE            [12] 1998 	mov	r6,a
   0461 90r04r07      [24] 1999 	mov	dptr,#_rftxbuf
   0464 ED            [12] 2000 	mov	a,r5
   0465 F0            [24] 2001 	movx	@dptr,a
   0466 EE            [12] 2002 	mov	a,r6
   0467 A3            [24] 2003 	inc	dptr
   0468 F0            [24] 2004 	movx	@dptr,a
                           2005 ;	cc1111rf.c:336: rfTxCounter = 0;
   0469 90r00r07      [24] 2006 	mov	dptr,#_rfTxCounter
   046C E4            [12] 2007 	clr	a
   046D F0            [24] 2008 	movx	@dptr,a
   046E E4            [12] 2009 	clr	a
   046F A3            [24] 2010 	inc	dptr
   0470 F0            [24] 2011 	movx	@dptr,a
                           2012 ;	cc1111rf.c:393: RFST = RFST_STX;
   0471 75 E1 03      [24] 2013 	mov	_RFST,#0x03
                           2014 ;	cc1111rf.c:397: while (MARCSTATE != MARC_STATE_TX && --countdown)
   0474 7D 60         [12] 2015 	mov	r5,#0x60
   0476 7E EA         [12] 2016 	mov	r6,#0xEA
   0478                    2017 00137$:
   0478 90 DF 3B      [24] 2018 	mov	dptr,#_MARCSTATE
   047B E0            [24] 2019 	movx	a,@dptr
   047C FC            [12] 2020 	mov	r4,a
   047D BC 13 02      [24] 2021 	cjne	r4,#0x13,00232$
   0480 80 12         [24] 2022 	sjmp	00139$
   0482                    2023 00232$:
   0482 1D            [12] 2024 	dec	r5
   0483 BD FF 01      [24] 2025 	cjne	r5,#0xFF,00233$
   0486 1E            [12] 2026 	dec	r6
   0487                    2027 00233$:
   0487 ED            [12] 2028 	mov	a,r5
   0488 4E            [12] 2029 	orl	a,r6
   0489 60 09         [24] 2030 	jz	00139$
                           2031 ;	cc1111rf.c:400: LED = !LED;
   048B A2 A4         [12] 2032 	mov	c,_P2_4
   048D B3            [12] 2033 	cpl	c
   048E 92*00         [24] 2034 	mov  _transmit_sloc0_1_0,c
   0490 92 A4         [24] 2035 	mov	_P2_4,c
   0492 80 E4         [24] 2036 	sjmp	00137$
   0494                    2037 00139$:
                           2038 ;	cc1111rf.c:406: LED = 1;
   0494 D2 A4         [12] 2039 	setb	_P2_4
                           2040 ;	cc1111rf.c:407: if (!countdown)
   0496 ED            [12] 2041 	mov	a,r5
   0497 4E            [12] 2042 	orl	a,r6
   0498 70 06         [24] 2043 	jnz	00142$
                           2044 ;	cc1111rf.c:409: lastCode[1] = LCE_RFTX_NEVER_TX;
   049A 90r00r01      [24] 2045 	mov	dptr,#(_lastCode + 0x0001)
   049D 74 13         [12] 2046 	mov	a,#0x13
   049F F0            [24] 2047 	movx	@dptr,a
                           2048 ;	cc1111rf.c:412: while (MARCSTATE == MARC_STATE_TX)
   04A0                    2049 00142$:
   04A0 90 DF 3B      [24] 2050 	mov	dptr,#_MARCSTATE
   04A3 E0            [24] 2051 	movx	a,@dptr
   04A4 FE            [12] 2052 	mov	r6,a
   04A5 BE 13 10      [24] 2053 	cjne	r6,#0x13,00144$
                           2054 ;	cc1111rf.c:414: LED = !LED;
   04A8 A2 A4         [12] 2055 	mov	c,_P2_4
   04AA B3            [12] 2056 	cpl	c
   04AB 92*00         [24] 2057 	mov  _transmit_sloc0_1_0,c
   04AD 92 A4         [24] 2058 	mov	_P2_4,c
                           2059 ;	cc1111rf.c:416: usbProcessEvents();
   04AF C0 07         [24] 2060 	push	ar7
   04B1 12r00r00      [24] 2061 	lcall	_usbProcessEvents
   04B4 D0 07         [24] 2062 	pop	ar7
   04B6 80 E8         [24] 2063 	sjmp	00142$
   04B8                    2064 00144$:
                           2065 ;	cc1111rf.c:421: LED = 0;
   04B8 C2 A4         [12] 2066 	clr	_P2_4
                           2067 ;	cc1111rf.c:424: PKTLEN = original_pktlen;
   04BA 90 DF 02      [24] 2068 	mov	dptr,#_PKTLEN
   04BD EF            [12] 2069 	mov	a,r7
   04BE F0            [24] 2070 	movx	@dptr,a
                           2071 ;	cc1111rf.c:426: return 1;
   04BF 75 82 01      [24] 2072 	mov	dpl,#0x01
   04C2 22            [24] 2073 	ret
                           2074 ;------------------------------------------------------------
                           2075 ;Allocation info for local variables in function 'startRX'
                           2076 ;------------------------------------------------------------
                           2077 ;	cc1111rf.c:433: void startRX(void)
                           2078 ;	-----------------------------------------
                           2079 ;	 function startRX
                           2080 ;	-----------------------------------------
   04C3                    2081 _startRX:
                           2082 ;	cc1111rf.c:439: RFTXRXIE = 1;
   04C3 D2 A8         [12] 2083 	setb	_RFTXRXIE
                           2084 ;	cc1111rf.c:443: memset(rfrxbuf,0,BUFFER_SIZE);
   04C5 75*00 00      [24] 2085 	mov	_memset_PARM_2,#0x00
   04C8 75*00 00      [24] 2086 	mov	_memset_PARM_3,#0x00
   04CB 75*01 02      [24] 2087 	mov	(_memset_PARM_3 + 1),#0x02
   04CE 90r00r01      [24] 2088 	mov	dptr,#_rfrxbuf
   04D1 75 F0 00      [24] 2089 	mov	b,#0x00
   04D4 12r00r00      [24] 2090 	lcall	_memset
                           2091 ;	cc1111rf.c:446: rfRxCounter[FIRST_BUFFER] = 0;
   04D7 90r04r01      [24] 2092 	mov	dptr,#_rfRxCounter
   04DA E4            [12] 2093 	clr	a
   04DB F0            [24] 2094 	movx	@dptr,a
   04DC E4            [12] 2095 	clr	a
   04DD A3            [24] 2096 	inc	dptr
   04DE F0            [24] 2097 	movx	@dptr,a
                           2098 ;	cc1111rf.c:447: rfRxCounter[SECOND_BUFFER] = 0;
   04DF 90r04r03      [24] 2099 	mov	dptr,#(_rfRxCounter + 0x0002)
   04E2 E4            [12] 2100 	clr	a
   04E3 F0            [24] 2101 	movx	@dptr,a
   04E4 E4            [12] 2102 	clr	a
   04E5 A3            [24] 2103 	inc	dptr
   04E6 F0            [24] 2104 	movx	@dptr,a
                           2105 ;	cc1111rf.c:453: rfRxProcessed[FIRST_BUFFER] = RX_UNPROCESSED;
   04E7 90r04r05      [24] 2106 	mov	dptr,#_rfRxProcessed
   04EA E4            [12] 2107 	clr	a
   04EB F0            [24] 2108 	movx	@dptr,a
                           2109 ;	cc1111rf.c:454: rfRxProcessed[SECOND_BUFFER] = RX_PROCESSED;
   04EC 90r04r06      [24] 2110 	mov	dptr,#(_rfRxProcessed + 0x0001)
   04EF 74 01         [12] 2111 	mov	a,#0x01
   04F1 F0            [24] 2112 	movx	@dptr,a
                           2113 ;	cc1111rf.c:457: rfRxCurrentBuffer = 0;
   04F2 90r00r00      [24] 2114 	mov	dptr,#_rfRxCurrentBuffer
   04F5 E4            [12] 2115 	clr	a
   04F6 F0            [24] 2116 	movx	@dptr,a
                           2117 ;	cc1111rf.c:459: S1CON &= ~(S1CON_RFIF_0|S1CON_RFIF_1);
   04F7 AF 9B         [24] 2118 	mov	r7,_S1CON
   04F9 74 FC         [12] 2119 	mov	a,#0xFC
   04FB 5F            [12] 2120 	anl	a,r7
   04FC F5 9B         [12] 2121 	mov	_S1CON,a
                           2122 ;	cc1111rf.c:460: RFIF &= ~RFIF_IRQ_DONE;
   04FE AF E9         [24] 2123 	mov	r7,_RFIF
   0500 74 EF         [12] 2124 	mov	a,#0xEF
   0502 5F            [12] 2125 	anl	a,r7
   0503 F5 E9         [12] 2126 	mov	_RFIF,a
                           2127 ;	cc1111rf.c:493: RFRX;
   0505 75 E1 02      [24] 2128 	mov	_RFST,#0x02
   0508                    2129 00101$:
   0508 90 DF 3B      [24] 2130 	mov	dptr,#_MARCSTATE
   050B E0            [24] 2131 	movx	a,@dptr
   050C FF            [12] 2132 	mov	r7,a
   050D BF 0D F8      [24] 2133 	cjne	r7,#0x0D,00101$
                           2134 ;	cc1111rf.c:495: RFIM |= RFIF_IRQ_DONE;
   0510 43 91 10      [24] 2135 	orl	_RFIM,#0x10
   0513 22            [24] 2136 	ret
                           2137 ;------------------------------------------------------------
                           2138 ;Allocation info for local variables in function 'RepeaterStart'
                           2139 ;------------------------------------------------------------
                           2140 ;	cc1111rf.c:506: void RepeaterStart()
                           2141 ;	-----------------------------------------
                           2142 ;	 function RepeaterStart
                           2143 ;	-----------------------------------------
   0514                    2144 _RepeaterStart:
                           2145 ;	cc1111rf.c:508: bRepeatMode = 1;
   0514 90r00r16      [24] 2146 	mov	dptr,#_bRepeatMode
   0517 74 01         [12] 2147 	mov	a,#0x01
   0519 F0            [24] 2148 	movx	@dptr,a
   051A 22            [24] 2149 	ret
                           2150 ;------------------------------------------------------------
                           2151 ;Allocation info for local variables in function 'RepeaterStop'
                           2152 ;------------------------------------------------------------
                           2153 ;	cc1111rf.c:511: void RepeaterStop()
                           2154 ;	-----------------------------------------
                           2155 ;	 function RepeaterStop
                           2156 ;	-----------------------------------------
   051B                    2157 _RepeaterStop:
                           2158 ;	cc1111rf.c:513: bRepeatMode = 0;
   051B 90r00r16      [24] 2159 	mov	dptr,#_bRepeatMode
   051E E4            [12] 2160 	clr	a
   051F F0            [24] 2161 	movx	@dptr,a
   0520 22            [24] 2162 	ret
                           2163 ;------------------------------------------------------------
                           2164 ;Allocation info for local variables in function 'rfTxRxIntHandler'
                           2165 ;------------------------------------------------------------
                           2166 ;	cc1111rf.c:525: void rfTxRxIntHandler(void) __interrupt RFTXRX_VECTOR  // interrupt handler should transmit or receive the next byte
                           2167 ;	-----------------------------------------
                           2168 ;	 function rfTxRxIntHandler
                           2169 ;	-----------------------------------------
   0521                    2170 _rfTxRxIntHandler:
   0521 C0*00         [24] 2171 	push	bits
   0523 C0 E0         [24] 2172 	push	acc
   0525 C0 F0         [24] 2173 	push	b
   0527 C0 82         [24] 2174 	push	dpl
   0529 C0 83         [24] 2175 	push	dph
   052B C0 07         [24] 2176 	push	(0+7)
   052D C0 06         [24] 2177 	push	(0+6)
   052F C0 05         [24] 2178 	push	(0+5)
   0531 C0 04         [24] 2179 	push	(0+4)
   0533 C0 03         [24] 2180 	push	(0+3)
   0535 C0 02         [24] 2181 	push	(0+2)
   0537 C0 01         [24] 2182 	push	(0+1)
   0539 C0 00         [24] 2183 	push	(0+0)
   053B C0 D0         [24] 2184 	push	psw
   053D 75 D0 00      [24] 2185 	mov	psw,#0x00
                           2186 ;	cc1111rf.c:527: lastCode[0] = LC_RFTXRX_VECTOR;
   0540 90r00r00      [24] 2187 	mov	dptr,#_lastCode
   0543 74 11         [12] 2188 	mov	a,#0x11
   0545 F0            [24] 2189 	movx	@dptr,a
                           2190 ;	cc1111rf.c:531: RFTXRXIF = 0;
   0546 C2 89         [12] 2191 	clr	_RFTXRXIF
                           2192 ;	cc1111rf.c:533: if(MARCSTATE == MARC_STATE_RX)
   0548 90 DF 3B      [24] 2193 	mov	dptr,#_MARCSTATE
   054B E0            [24] 2194 	movx	a,@dptr
   054C FF            [12] 2195 	mov	r7,a
   054D BF 0D 02      [24] 2196 	cjne	r7,#0x0D,00176$
   0550 80 03         [24] 2197 	sjmp	00177$
   0552                    2198 00176$:
   0552 02r06r60      [24] 2199 	ljmp	00130$
   0555                    2200 00177$:
                           2201 ;	cc1111rf.c:536: LED = 1;
   0555 D2 A4         [12] 2202 	setb	_P2_4
                           2203 ;	cc1111rf.c:538: if(rfRxInfMode)
   0557 90r00r00      [24] 2204 	mov	dptr,#_rfRxInfMode
   055A E0            [24] 2205 	movx	a,@dptr
   055B FF            [12] 2206 	mov	r7,a
   055C 60 27         [24] 2207 	jz	00104$
                           2208 ;	cc1111rf.c:539: if(rfRxTotalRXLen-- < 256)
   055E 90r00r01      [24] 2209 	mov	dptr,#_rfRxTotalRXLen
   0561 E0            [24] 2210 	movx	a,@dptr
   0562 FE            [12] 2211 	mov	r6,a
   0563 A3            [24] 2212 	inc	dptr
   0564 E0            [24] 2213 	movx	a,@dptr
   0565 FF            [12] 2214 	mov	r7,a
   0566 90r00r01      [24] 2215 	mov	dptr,#_rfRxTotalRXLen
   0569 E0            [24] 2216 	movx	a,@dptr
   056A 24 FF         [12] 2217 	add	a,#0xFF
   056C FC            [12] 2218 	mov	r4,a
   056D A3            [24] 2219 	inc	dptr
   056E E0            [24] 2220 	movx	a,@dptr
   056F 34 FF         [12] 2221 	addc	a,#0xFF
   0571 FD            [12] 2222 	mov	r5,a
   0572 90r00r01      [24] 2223 	mov	dptr,#_rfRxTotalRXLen
   0575 EC            [12] 2224 	mov	a,r4
   0576 F0            [24] 2225 	movx	@dptr,a
   0577 ED            [12] 2226 	mov	a,r5
   0578 A3            [24] 2227 	inc	dptr
   0579 F0            [24] 2228 	movx	@dptr,a
   057A EF            [12] 2229 	mov	a,r7
   057B 70 08         [24] 2230 	jnz	00104$
                           2231 ;	cc1111rf.c:540: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
   057D 90 DF 04      [24] 2232 	mov	dptr,#_PKTCTRL0
   0580 E0            [24] 2233 	movx	a,@dptr
   0581 FF            [12] 2234 	mov	r7,a
   0582 54 FC         [12] 2235 	anl	a,#0xFC
   0584 F0            [24] 2236 	movx	@dptr,a
   0585                    2237 00104$:
                           2238 ;	cc1111rf.c:541: rf_status = RFST_SRX;
   0585 90r04r0B      [24] 2239 	mov	dptr,#_rf_status
   0588 74 02         [12] 2240 	mov	a,#0x02
   058A F0            [24] 2241 	movx	@dptr,a
                           2242 ;	cc1111rf.c:542: rfrxbuf[rfRxCurrentBuffer][rfRxCounter[rfRxCurrentBuffer]++] = RFD;
   058B 90r00r00      [24] 2243 	mov	dptr,#_rfRxCurrentBuffer
   058E E0            [24] 2244 	movx	a,@dptr
   058F 25 E0         [12] 2245 	add	a,acc
   0591 FE            [12] 2246 	mov	r6,a
   0592 E4            [12] 2247 	clr	a
   0593 24r01         [12] 2248 	add	a,#_rfrxbuf
   0595 FF            [12] 2249 	mov	r7,a
   0596 EE            [12] 2250 	mov	a,r6
   0597 34s00         [12] 2251 	addc	a,#(_rfrxbuf >> 8)
   0599 FE            [12] 2252 	mov	r6,a
   059A 90r00r00      [24] 2253 	mov	dptr,#_rfRxCurrentBuffer
   059D E0            [24] 2254 	movx	a,@dptr
   059E 75 F0 02      [24] 2255 	mov	b,#0x02
   05A1 A4            [48] 2256 	mul	ab
   05A2 24r01         [12] 2257 	add	a,#_rfRxCounter
   05A4 FC            [12] 2258 	mov	r4,a
   05A5 74s04         [12] 2259 	mov	a,#(_rfRxCounter >> 8)
   05A7 35 F0         [12] 2260 	addc	a,b
   05A9 FD            [12] 2261 	mov	r5,a
   05AA 8C 82         [24] 2262 	mov	dpl,r4
   05AC 8D 83         [24] 2263 	mov	dph,r5
   05AE E0            [24] 2264 	movx	a,@dptr
   05AF FA            [12] 2265 	mov	r2,a
   05B0 A3            [24] 2266 	inc	dptr
   05B1 E0            [24] 2267 	movx	a,@dptr
   05B2 FB            [12] 2268 	mov	r3,a
   05B3 74 01         [12] 2269 	mov	a,#0x01
   05B5 2A            [12] 2270 	add	a,r2
   05B6 F8            [12] 2271 	mov	r0,a
   05B7 E4            [12] 2272 	clr	a
   05B8 3B            [12] 2273 	addc	a,r3
   05B9 F9            [12] 2274 	mov	r1,a
   05BA 8C 82         [24] 2275 	mov	dpl,r4
   05BC 8D 83         [24] 2276 	mov	dph,r5
   05BE E8            [12] 2277 	mov	a,r0
   05BF F0            [24] 2278 	movx	@dptr,a
   05C0 E9            [12] 2279 	mov	a,r1
   05C1 A3            [24] 2280 	inc	dptr
   05C2 F0            [24] 2281 	movx	@dptr,a
   05C3 EA            [12] 2282 	mov	a,r2
   05C4 2F            [12] 2283 	add	a,r7
   05C5 F5 82         [12] 2284 	mov	dpl,a
   05C7 EB            [12] 2285 	mov	a,r3
   05C8 3E            [12] 2286 	addc	a,r6
   05C9 F5 83         [12] 2287 	mov	dph,a
   05CB E5 D9         [12] 2288 	mov	a,_RFD
   05CD F0            [24] 2289 	movx	@dptr,a
                           2290 ;	cc1111rf.c:543: if(rfRxCounter[rfRxCurrentBuffer] >= BUFFER_SIZE || rfRxCounter[rfRxCurrentBuffer] == 0)
   05CE 90r00r00      [24] 2291 	mov	dptr,#_rfRxCurrentBuffer
   05D1 E0            [24] 2292 	movx	a,@dptr
   05D2 75 F0 02      [24] 2293 	mov	b,#0x02
   05D5 A4            [48] 2294 	mul	ab
   05D6 24r01         [12] 2295 	add	a,#_rfRxCounter
   05D8 F5 82         [12] 2296 	mov	dpl,a
   05DA 74s04         [12] 2297 	mov	a,#(_rfRxCounter >> 8)
   05DC 35 F0         [12] 2298 	addc	a,b
   05DE F5 83         [12] 2299 	mov	dph,a
   05E0 E0            [24] 2300 	movx	a,@dptr
   05E1 FE            [12] 2301 	mov	r6,a
   05E2 A3            [24] 2302 	inc	dptr
   05E3 E0            [24] 2303 	movx	a,@dptr
   05E4 FF            [12] 2304 	mov	r7,a
   05E5 54 FE         [12] 2305 	anl	a,#0xFE
   05E7 70 1A         [24] 2306 	jnz	00105$
   05E9 90r00r00      [24] 2307 	mov	dptr,#_rfRxCurrentBuffer
   05EC E0            [24] 2308 	movx	a,@dptr
   05ED 75 F0 02      [24] 2309 	mov	b,#0x02
   05F0 A4            [48] 2310 	mul	ab
   05F1 24r01         [12] 2311 	add	a,#_rfRxCounter
   05F3 F5 82         [12] 2312 	mov	dpl,a
   05F5 74s04         [12] 2313 	mov	a,#(_rfRxCounter >> 8)
   05F7 35 F0         [12] 2314 	addc	a,b
   05F9 F5 83         [12] 2315 	mov	dph,a
   05FB E0            [24] 2316 	movx	a,@dptr
   05FC FE            [12] 2317 	mov	r6,a
   05FD A3            [24] 2318 	inc	dptr
   05FE E0            [24] 2319 	movx	a,@dptr
   05FF FF            [12] 2320 	mov	r7,a
   0600 4E            [12] 2321 	orl	a,r6
   0601 70 1A         [24] 2322 	jnz	00106$
   0603                    2323 00105$:
                           2324 ;	cc1111rf.c:545: rfRxCounter[rfRxCurrentBuffer] = BUFFER_SIZE-1;
   0603 90r00r00      [24] 2325 	mov	dptr,#_rfRxCurrentBuffer
   0606 E0            [24] 2326 	movx	a,@dptr
   0607 FF            [12] 2327 	mov	r7,a
   0608 75 F0 02      [24] 2328 	mov	b,#0x02
   060B A4            [48] 2329 	mul	ab
   060C 24r01         [12] 2330 	add	a,#_rfRxCounter
   060E F5 82         [12] 2331 	mov	dpl,a
   0610 74s04         [12] 2332 	mov	a,#(_rfRxCounter >> 8)
   0612 35 F0         [12] 2333 	addc	a,b
   0614 F5 83         [12] 2334 	mov	dph,a
   0616 74 FF         [12] 2335 	mov	a,#0xFF
   0618 F0            [24] 2336 	movx	@dptr,a
   0619 74 01         [12] 2337 	mov	a,#0x01
   061B A3            [24] 2338 	inc	dptr
   061C F0            [24] 2339 	movx	@dptr,a
   061D                    2340 00106$:
                           2341 ;	cc1111rf.c:548: if(!rfRxTotalRXLen && rfRxInfMode)
   061D 90r00r01      [24] 2342 	mov	dptr,#_rfRxTotalRXLen
   0620 E0            [24] 2343 	movx	a,@dptr
   0621 FE            [12] 2344 	mov	r6,a
   0622 A3            [24] 2345 	inc	dptr
   0623 E0            [24] 2346 	movx	a,@dptr
   0624 FF            [12] 2347 	mov	r7,a
   0625 4E            [12] 2348 	orl	a,r6
   0626 60 03         [24] 2349 	jz	00184$
   0628 02r08r18      [24] 2350 	ljmp	00132$
   062B                    2351 00184$:
   062B 90r00r00      [24] 2352 	mov	dptr,#_rfRxInfMode
   062E E0            [24] 2353 	movx	a,@dptr
   062F FF            [12] 2354 	mov	r7,a
   0630 70 03         [24] 2355 	jnz	00185$
   0632 02r08r18      [24] 2356 	ljmp	00132$
   0635                    2357 00185$:
                           2358 ;	cc1111rf.c:550: rfRxTotalRXLen = rfRxLargeLen;
   0635 90r00r03      [24] 2359 	mov	dptr,#_rfRxLargeLen
   0638 E0            [24] 2360 	movx	a,@dptr
   0639 FE            [12] 2361 	mov	r6,a
   063A A3            [24] 2362 	inc	dptr
   063B E0            [24] 2363 	movx	a,@dptr
   063C FF            [12] 2364 	mov	r7,a
   063D 90r00r01      [24] 2365 	mov	dptr,#_rfRxTotalRXLen
   0640 EE            [12] 2366 	mov	a,r6
   0641 F0            [24] 2367 	movx	@dptr,a
   0642 EF            [12] 2368 	mov	a,r7
   0643 A3            [24] 2369 	inc	dptr
   0644 F0            [24] 2370 	movx	@dptr,a
                           2371 ;	cc1111rf.c:551: PKTLEN = (u8) (rfRxTotalRXLen % 256);
   0645 90r00r01      [24] 2372 	mov	dptr,#_rfRxTotalRXLen
   0648 E0            [24] 2373 	movx	a,@dptr
   0649 FE            [12] 2374 	mov	r6,a
   064A A3            [24] 2375 	inc	dptr
   064B E0            [24] 2376 	movx	a,@dptr
   064C 90 DF 02      [24] 2377 	mov	dptr,#_PKTLEN
   064F EE            [12] 2378 	mov	a,r6
   0650 F0            [24] 2379 	movx	@dptr,a
                           2380 ;	cc1111rf.c:552: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
                           2381 ;	cc1111rf.c:553: PKTCTRL0 |= PKTCTRL0_LENGTH_CONFIG_INF;
   0651 90 DF 04      [24] 2382 	mov	dptr,#_PKTCTRL0
   0654 E0            [24] 2383 	movx	a,@dptr
   0655 54 FC         [12] 2384 	anl	a,#0xFC
   0657 F0            [24] 2385 	movx	@dptr,a
   0658 E0            [24] 2386 	movx	a,@dptr
   0659 FF            [12] 2387 	mov	r7,a
   065A 44 02         [12] 2388 	orl	a,#0x02
   065C F0            [24] 2389 	movx	@dptr,a
   065D 02r08r18      [24] 2390 	ljmp	00132$
   0660                    2391 00130$:
                           2392 ;	cc1111rf.c:557: else if(MARCSTATE == MARC_STATE_TX)
   0660 90 DF 3B      [24] 2393 	mov	dptr,#_MARCSTATE
   0663 E0            [24] 2394 	movx	a,@dptr
   0664 FF            [12] 2395 	mov	r7,a
   0665 BF 13 02      [24] 2396 	cjne	r7,#0x13,00186$
   0668 80 03         [24] 2397 	sjmp	00187$
   066A                    2398 00186$:
   066A 02r08r18      [24] 2399 	ljmp	00132$
   066D                    2400 00187$:
                           2401 ;	cc1111rf.c:560: if (rfTxInfMode)
   066D 90r00r13      [24] 2402 	mov	dptr,#_rfTxInfMode
   0670 E0            [24] 2403 	movx	a,@dptr
   0671 FF            [12] 2404 	mov	r7,a
   0672 70 03         [24] 2405 	jnz	00188$
   0674 02r07rA9      [24] 2406 	ljmp	00125$
   0677                    2407 00188$:
                           2408 ;	cc1111rf.c:567: macdata.tLastHop ++;
   0677 90r04r1D      [24] 2409 	mov	dptr,#(_macdata + 0x000d)
   067A E0            [24] 2410 	movx	a,@dptr
   067B FE            [12] 2411 	mov	r6,a
   067C A3            [24] 2412 	inc	dptr
   067D E0            [24] 2413 	movx	a,@dptr
   067E FF            [12] 2414 	mov	r7,a
   067F 0E            [12] 2415 	inc	r6
   0680 BE 00 01      [24] 2416 	cjne	r6,#0x00,00189$
   0683 0F            [12] 2417 	inc	r7
   0684                    2418 00189$:
   0684 90r04r1D      [24] 2419 	mov	dptr,#(_macdata + 0x000d)
   0687 EE            [12] 2420 	mov	a,r6
   0688 F0            [24] 2421 	movx	@dptr,a
   0689 EF            [12] 2422 	mov	a,r7
   068A A3            [24] 2423 	inc	dptr
   068B F0            [24] 2424 	movx	@dptr,a
                           2425 ;	cc1111rf.c:569: if (rfTxCounter == rfTxBufferEnd)
   068C 90r00r07      [24] 2426 	mov	dptr,#_rfTxCounter
   068F E0            [24] 2427 	movx	a,@dptr
   0690 FE            [12] 2428 	mov	r6,a
   0691 A3            [24] 2429 	inc	dptr
   0692 E0            [24] 2430 	movx	a,@dptr
   0693 FF            [12] 2431 	mov	r7,a
   0694 90r00r0B      [24] 2432 	mov	dptr,#_rfTxBufferEnd
   0697 E0            [24] 2433 	movx	a,@dptr
   0698 FC            [12] 2434 	mov	r4,a
   0699 A3            [24] 2435 	inc	dptr
   069A E0            [24] 2436 	movx	a,@dptr
   069B FD            [12] 2437 	mov	r5,a
   069C EE            [12] 2438 	mov	a,r6
   069D B5 04 06      [24] 2439 	cjne	a,ar4,00190$
   06A0 EF            [12] 2440 	mov	a,r7
   06A1 B5 05 02      [24] 2441 	cjne	a,ar5,00190$
   06A4 80 03         [24] 2442 	sjmp	00191$
   06A6                    2443 00190$:
   06A6 02r07r7D      [24] 2444 	ljmp	00121$
   06A9                    2445 00191$:
                           2446 ;	cc1111rf.c:571: if (rfTxRepeatCounter)
   06A9 90r00r09      [24] 2447 	mov	dptr,#_rfTxRepeatCounter
   06AC E0            [24] 2448 	movx	a,@dptr
   06AD FE            [12] 2449 	mov	r6,a
   06AE A3            [24] 2450 	inc	dptr
   06AF E0            [24] 2451 	movx	a,@dptr
   06B0 FF            [12] 2452 	mov	r7,a
   06B1 4E            [12] 2453 	orl	a,r6
   06B2 60 37         [24] 2454 	jz	00118$
                           2455 ;	cc1111rf.c:573: if(rfTxRepeatCounter != 0xff)
   06B4 90r00r09      [24] 2456 	mov	dptr,#_rfTxRepeatCounter
   06B7 E0            [24] 2457 	movx	a,@dptr
   06B8 FE            [12] 2458 	mov	r6,a
   06B9 A3            [24] 2459 	inc	dptr
   06BA E0            [24] 2460 	movx	a,@dptr
   06BB FF            [12] 2461 	mov	r7,a
   06BC BE FF 05      [24] 2462 	cjne	r6,#0xFF,00193$
   06BF BF 00 02      [24] 2463 	cjne	r7,#0x00,00193$
   06C2 80 14         [24] 2464 	sjmp	00112$
   06C4                    2465 00193$:
                           2466 ;	cc1111rf.c:574: rfTxRepeatCounter--;
   06C4 90r00r09      [24] 2467 	mov	dptr,#_rfTxRepeatCounter
   06C7 E0            [24] 2468 	movx	a,@dptr
   06C8 24 FF         [12] 2469 	add	a,#0xFF
   06CA FE            [12] 2470 	mov	r6,a
   06CB A3            [24] 2471 	inc	dptr
   06CC E0            [24] 2472 	movx	a,@dptr
   06CD 34 FF         [12] 2473 	addc	a,#0xFF
   06CF FF            [12] 2474 	mov	r7,a
   06D0 90r00r09      [24] 2475 	mov	dptr,#_rfTxRepeatCounter
   06D3 EE            [12] 2476 	mov	a,r6
   06D4 F0            [24] 2477 	movx	@dptr,a
   06D5 EF            [12] 2478 	mov	a,r7
   06D6 A3            [24] 2479 	inc	dptr
   06D7 F0            [24] 2480 	movx	@dptr,a
   06D8                    2481 00112$:
                           2482 ;	cc1111rf.c:575: rfTxCounter = rfTxRepeatOffset;
   06D8 90r00r0F      [24] 2483 	mov	dptr,#_rfTxRepeatOffset
   06DB E0            [24] 2484 	movx	a,@dptr
   06DC FE            [12] 2485 	mov	r6,a
   06DD A3            [24] 2486 	inc	dptr
   06DE E0            [24] 2487 	movx	a,@dptr
   06DF FF            [12] 2488 	mov	r7,a
   06E0 90r00r07      [24] 2489 	mov	dptr,#_rfTxCounter
   06E3 EE            [12] 2490 	mov	a,r6
   06E4 F0            [24] 2491 	movx	@dptr,a
   06E5 EF            [12] 2492 	mov	a,r7
   06E6 A3            [24] 2493 	inc	dptr
   06E7 F0            [24] 2494 	movx	@dptr,a
   06E8 02r07r7D      [24] 2495 	ljmp	00121$
   06EB                    2496 00118$:
                           2497 ;	cc1111rf.c:581: rftxbuf[(rfTxCurBufIdx * rfTxBufferEnd)] = BUFFER_AVAILABLE;
   06EB 90r00r0B      [24] 2498 	mov	dptr,#_rfTxBufferEnd
   06EE E0            [24] 2499 	movx	a,@dptr
   06EF F5*00         [12] 2500 	mov	__mulint_PARM_2,a
   06F1 A3            [24] 2501 	inc	dptr
   06F2 E0            [24] 2502 	movx	a,@dptr
   06F3 F5*01         [12] 2503 	mov	(__mulint_PARM_2 + 1),a
   06F5 90r00r05      [24] 2504 	mov	dptr,#_rfTxCurBufIdx
   06F8 E0            [24] 2505 	movx	a,@dptr
   06F9 FF            [12] 2506 	mov	r7,a
   06FA 7E 00         [12] 2507 	mov	r6,#0x00
   06FC 8F 82         [24] 2508 	mov	dpl,r7
   06FE 8E 83         [24] 2509 	mov	dph,r6
   0700 12r00r00      [24] 2510 	lcall	__mulint
   0703 AE 82         [24] 2511 	mov	r6,dpl
   0705 AF 83         [24] 2512 	mov	r7,dph
   0707 90r04r07      [24] 2513 	mov	dptr,#_rftxbuf
   070A E0            [24] 2514 	movx	a,@dptr
   070B FC            [12] 2515 	mov	r4,a
   070C A3            [24] 2516 	inc	dptr
   070D E0            [24] 2517 	movx	a,@dptr
   070E FD            [12] 2518 	mov	r5,a
   070F EE            [12] 2519 	mov	a,r6
   0710 2C            [12] 2520 	add	a,r4
   0711 F5 82         [12] 2521 	mov	dpl,a
   0713 EF            [12] 2522 	mov	a,r7
   0714 3D            [12] 2523 	addc	a,r5
   0715 F5 83         [12] 2524 	mov	dph,a
   0717 E4            [12] 2525 	clr	a
   0718 F0            [24] 2526 	movx	@dptr,a
                           2527 ;	cc1111rf.c:583: if (++rfTxCurBufIdx == rfTxBufCount)
   0719 90r00r05      [24] 2528 	mov	dptr,#_rfTxCurBufIdx
   071C E0            [24] 2529 	movx	a,@dptr
   071D 24 01         [12] 2530 	add	a,#0x01
   071F F0            [24] 2531 	movx	@dptr,a
   0720 90r00r05      [24] 2532 	mov	dptr,#_rfTxCurBufIdx
   0723 E0            [24] 2533 	movx	a,@dptr
   0724 FF            [12] 2534 	mov	r7,a
   0725 90r00r06      [24] 2535 	mov	dptr,#_rfTxBufCount
   0728 E0            [24] 2536 	movx	a,@dptr
   0729 FE            [12] 2537 	mov	r6,a
   072A EF            [12] 2538 	mov	a,r7
   072B B5 06 05      [24] 2539 	cjne	a,ar6,00114$
                           2540 ;	cc1111rf.c:585: rfTxCurBufIdx = 0;
   072E 90r00r05      [24] 2541 	mov	dptr,#_rfTxCurBufIdx
   0731 E4            [12] 2542 	clr	a
   0732 F0            [24] 2543 	movx	@dptr,a
   0733                    2544 00114$:
                           2545 ;	cc1111rf.c:588: if (rftxbuf[(rfTxCurBufIdx * rfTxBufferEnd)] == BUFFER_AVAILABLE)
   0733 90r00r0B      [24] 2546 	mov	dptr,#_rfTxBufferEnd
   0736 E0            [24] 2547 	movx	a,@dptr
   0737 F5*00         [12] 2548 	mov	__mulint_PARM_2,a
   0739 A3            [24] 2549 	inc	dptr
   073A E0            [24] 2550 	movx	a,@dptr
   073B F5*01         [12] 2551 	mov	(__mulint_PARM_2 + 1),a
   073D 90r00r05      [24] 2552 	mov	dptr,#_rfTxCurBufIdx
   0740 E0            [24] 2553 	movx	a,@dptr
   0741 FF            [12] 2554 	mov	r7,a
   0742 7E 00         [12] 2555 	mov	r6,#0x00
   0744 8F 82         [24] 2556 	mov	dpl,r7
   0746 8E 83         [24] 2557 	mov	dph,r6
   0748 12r00r00      [24] 2558 	lcall	__mulint
   074B AE 82         [24] 2559 	mov	r6,dpl
   074D AF 83         [24] 2560 	mov	r7,dph
   074F 90r04r07      [24] 2561 	mov	dptr,#_rftxbuf
   0752 E0            [24] 2562 	movx	a,@dptr
   0753 FC            [12] 2563 	mov	r4,a
   0754 A3            [24] 2564 	inc	dptr
   0755 E0            [24] 2565 	movx	a,@dptr
   0756 FD            [12] 2566 	mov	r5,a
   0757 EE            [12] 2567 	mov	a,r6
   0758 2C            [12] 2568 	add	a,r4
   0759 FE            [12] 2569 	mov	r6,a
   075A EF            [12] 2570 	mov	a,r7
   075B 3D            [12] 2571 	addc	a,r5
   075C FF            [12] 2572 	mov	r7,a
   075D 8E 82         [24] 2573 	mov	dpl,r6
   075F 8F 83         [24] 2574 	mov	dph,r7
   0761 E0            [24] 2575 	movx	a,@dptr
   0762 70 10         [24] 2576 	jnz	00116$
                           2577 ;	cc1111rf.c:591: macdata.mac_state = MAC_STATE_NONHOPPING;
   0764 90r04r10      [24] 2578 	mov	dptr,#_macdata
   0767 E4            [12] 2579 	clr	a
   0768 F0            [24] 2580 	movx	@dptr,a
                           2581 ;	cc1111rf.c:592: lastCode[1] = LCE_DROPPED_PACKET;
   0769 90r00r01      [24] 2582 	mov	dptr,#(_lastCode + 0x0001)
   076C 74 12         [12] 2583 	mov	a,#0x12
   076E F0            [24] 2584 	movx	@dptr,a
                           2585 ;	cc1111rf.c:593: resetRFSTATE();
   076F 12r00r70      [24] 2586 	lcall	_resetRFSTATE
                           2587 ;	cc1111rf.c:594: LED = 0;
   0772 C2 A4         [12] 2588 	clr	_P2_4
   0774                    2589 00116$:
                           2590 ;	cc1111rf.c:598: rfTxCounter = 1;
   0774 90r00r07      [24] 2591 	mov	dptr,#_rfTxCounter
   0777 74 01         [12] 2592 	mov	a,#0x01
   0779 F0            [24] 2593 	movx	@dptr,a
   077A E4            [12] 2594 	clr	a
   077B A3            [24] 2595 	inc	dptr
   077C F0            [24] 2596 	movx	@dptr,a
   077D                    2597 00121$:
                           2598 ;	cc1111rf.c:602: if(rfTxTotalTXLen-- == 255)
   077D 90r00r11      [24] 2599 	mov	dptr,#_rfTxTotalTXLen
   0780 E0            [24] 2600 	movx	a,@dptr
   0781 FE            [12] 2601 	mov	r6,a
   0782 A3            [24] 2602 	inc	dptr
   0783 E0            [24] 2603 	movx	a,@dptr
   0784 FF            [12] 2604 	mov	r7,a
   0785 90r00r11      [24] 2605 	mov	dptr,#_rfTxTotalTXLen
   0788 E0            [24] 2606 	movx	a,@dptr
   0789 24 FF         [12] 2607 	add	a,#0xFF
   078B FC            [12] 2608 	mov	r4,a
   078C A3            [24] 2609 	inc	dptr
   078D E0            [24] 2610 	movx	a,@dptr
   078E 34 FF         [12] 2611 	addc	a,#0xFF
   0790 FD            [12] 2612 	mov	r5,a
   0791 90r00r11      [24] 2613 	mov	dptr,#_rfTxTotalTXLen
   0794 EC            [12] 2614 	mov	a,r4
   0795 F0            [24] 2615 	movx	@dptr,a
   0796 ED            [12] 2616 	mov	a,r5
   0797 A3            [24] 2617 	inc	dptr
   0798 F0            [24] 2618 	movx	@dptr,a
   0799 BE FF 21      [24] 2619 	cjne	r6,#0xFF,00126$
   079C BF 00 1E      [24] 2620 	cjne	r7,#0x00,00126$
                           2621 ;	cc1111rf.c:604: PKTCTRL0 &= ~PKTCTRL0_LENGTH_CONFIG;
   079F 90 DF 04      [24] 2622 	mov	dptr,#_PKTCTRL0
   07A2 E0            [24] 2623 	movx	a,@dptr
   07A3 FF            [12] 2624 	mov	r7,a
   07A4 54 FC         [12] 2625 	anl	a,#0xFC
   07A6 F0            [24] 2626 	movx	@dptr,a
   07A7 80 14         [24] 2627 	sjmp	00126$
   07A9                    2628 00125$:
                           2629 ;	cc1111rf.c:611: rfTxTotalTXLen--;
   07A9 90r00r11      [24] 2630 	mov	dptr,#_rfTxTotalTXLen
   07AC E0            [24] 2631 	movx	a,@dptr
   07AD 24 FF         [12] 2632 	add	a,#0xFF
   07AF FE            [12] 2633 	mov	r6,a
   07B0 A3            [24] 2634 	inc	dptr
   07B1 E0            [24] 2635 	movx	a,@dptr
   07B2 34 FF         [12] 2636 	addc	a,#0xFF
   07B4 FF            [12] 2637 	mov	r7,a
   07B5 90r00r11      [24] 2638 	mov	dptr,#_rfTxTotalTXLen
   07B8 EE            [12] 2639 	mov	a,r6
   07B9 F0            [24] 2640 	movx	@dptr,a
   07BA EF            [12] 2641 	mov	a,r7
   07BB A3            [24] 2642 	inc	dptr
   07BC F0            [24] 2643 	movx	@dptr,a
   07BD                    2644 00126$:
                           2645 ;	cc1111rf.c:612: rf_status = RFST_STX;
   07BD 90r04r0B      [24] 2646 	mov	dptr,#_rf_status
   07C0 74 03         [12] 2647 	mov	a,#0x03
   07C2 F0            [24] 2648 	movx	@dptr,a
                           2649 ;	cc1111rf.c:614: RFD = rftxbuf[(rfTxCurBufIdx * rfTxBufferEnd) + rfTxCounter++];
   07C3 90r00r0B      [24] 2650 	mov	dptr,#_rfTxBufferEnd
   07C6 E0            [24] 2651 	movx	a,@dptr
   07C7 F5*00         [12] 2652 	mov	__mulint_PARM_2,a
   07C9 A3            [24] 2653 	inc	dptr
   07CA E0            [24] 2654 	movx	a,@dptr
   07CB F5*01         [12] 2655 	mov	(__mulint_PARM_2 + 1),a
   07CD 90r00r05      [24] 2656 	mov	dptr,#_rfTxCurBufIdx
   07D0 E0            [24] 2657 	movx	a,@dptr
   07D1 FF            [12] 2658 	mov	r7,a
   07D2 7E 00         [12] 2659 	mov	r6,#0x00
   07D4 8F 82         [24] 2660 	mov	dpl,r7
   07D6 8E 83         [24] 2661 	mov	dph,r6
   07D8 12r00r00      [24] 2662 	lcall	__mulint
   07DB AE 82         [24] 2663 	mov	r6,dpl
   07DD AF 83         [24] 2664 	mov	r7,dph
   07DF 90r00r07      [24] 2665 	mov	dptr,#_rfTxCounter
   07E2 E0            [24] 2666 	movx	a,@dptr
   07E3 FC            [12] 2667 	mov	r4,a
   07E4 A3            [24] 2668 	inc	dptr
   07E5 E0            [24] 2669 	movx	a,@dptr
   07E6 FD            [12] 2670 	mov	r5,a
   07E7 90r00r07      [24] 2671 	mov	dptr,#_rfTxCounter
   07EA E0            [24] 2672 	movx	a,@dptr
   07EB 24 01         [12] 2673 	add	a,#0x01
   07ED F0            [24] 2674 	movx	@dptr,a
   07EE A3            [24] 2675 	inc	dptr
   07EF E0            [24] 2676 	movx	a,@dptr
   07F0 34 00         [12] 2677 	addc	a,#0x00
   07F2 F0            [24] 2678 	movx	@dptr,a
   07F3 EC            [12] 2679 	mov	a,r4
   07F4 2E            [12] 2680 	add	a,r6
   07F5 FE            [12] 2681 	mov	r6,a
   07F6 ED            [12] 2682 	mov	a,r5
   07F7 3F            [12] 2683 	addc	a,r7
   07F8 FF            [12] 2684 	mov	r7,a
   07F9 90r04r07      [24] 2685 	mov	dptr,#_rftxbuf
   07FC E0            [24] 2686 	movx	a,@dptr
   07FD FC            [12] 2687 	mov	r4,a
   07FE A3            [24] 2688 	inc	dptr
   07FF E0            [24] 2689 	movx	a,@dptr
   0800 FD            [12] 2690 	mov	r5,a
   0801 EE            [12] 2691 	mov	a,r6
   0802 2C            [12] 2692 	add	a,r4
   0803 F5 82         [12] 2693 	mov	dpl,a
   0805 EF            [12] 2694 	mov	a,r7
   0806 3D            [12] 2695 	addc	a,r5
   0807 F5 83         [12] 2696 	mov	dph,a
   0809 E0            [24] 2697 	movx	a,@dptr
   080A F5 D9         [12] 2698 	mov	_RFD,a
                           2699 ;	cc1111rf.c:615: txTotal++;
   080C 90r04r09      [24] 2700 	mov	dptr,#_txTotal
   080F E0            [24] 2701 	movx	a,@dptr
   0810 24 01         [12] 2702 	add	a,#0x01
   0812 F0            [24] 2703 	movx	@dptr,a
   0813 A3            [24] 2704 	inc	dptr
   0814 E0            [24] 2705 	movx	a,@dptr
   0815 34 00         [12] 2706 	addc	a,#0x00
   0817 F0            [24] 2707 	movx	@dptr,a
   0818                    2708 00132$:
   0818 D0 D0         [24] 2709 	pop	psw
   081A D0 00         [24] 2710 	pop	(0+0)
   081C D0 01         [24] 2711 	pop	(0+1)
   081E D0 02         [24] 2712 	pop	(0+2)
   0820 D0 03         [24] 2713 	pop	(0+3)
   0822 D0 04         [24] 2714 	pop	(0+4)
   0824 D0 05         [24] 2715 	pop	(0+5)
   0826 D0 06         [24] 2716 	pop	(0+6)
   0828 D0 07         [24] 2717 	pop	(0+7)
   082A D0 83         [24] 2718 	pop	dph
   082C D0 82         [24] 2719 	pop	dpl
   082E D0 F0         [24] 2720 	pop	b
   0830 D0 E0         [24] 2721 	pop	acc
   0832 D0*00         [24] 2722 	pop	bits
   0834 32            [24] 2723 	reti
                           2724 ;------------------------------------------------------------
                           2725 ;Allocation info for local variables in function 'rfIntHandler'
                           2726 ;------------------------------------------------------------
                           2727 ;encoffset                 Allocated with name '_rfIntHandler_encoffset_1_136'
                           2728 ;------------------------------------------------------------
                           2729 ;	cc1111rf.c:619: void rfIntHandler(void) __interrupt RF_VECTOR  // interrupt handler should trigger on rf events
                           2730 ;	-----------------------------------------
                           2731 ;	 function rfIntHandler
                           2732 ;	-----------------------------------------
   0835                    2733 _rfIntHandler:
   0835 C0*00         [24] 2734 	push	bits
   0837 C0 E0         [24] 2735 	push	acc
   0839 C0 F0         [24] 2736 	push	b
   083B C0 82         [24] 2737 	push	dpl
   083D C0 83         [24] 2738 	push	dph
   083F C0 07         [24] 2739 	push	(0+7)
   0841 C0 06         [24] 2740 	push	(0+6)
   0843 C0 05         [24] 2741 	push	(0+5)
   0845 C0 04         [24] 2742 	push	(0+4)
   0847 C0 03         [24] 2743 	push	(0+3)
   0849 C0 02         [24] 2744 	push	(0+2)
   084B C0 01         [24] 2745 	push	(0+1)
   084D C0 00         [24] 2746 	push	(0+0)
   084F C0 D0         [24] 2747 	push	psw
   0851 75 D0 00      [24] 2748 	mov	psw,#0x00
                           2749 ;	cc1111rf.c:621: u8 encoffset= 0;
   0854 75*03 00      [24] 2750 	mov	_rfIntHandler_encoffset_1_136,#0x00
                           2751 ;	cc1111rf.c:624: lastCode[0] = LC_RF_VECTOR;
   0857 90r00r00      [24] 2752 	mov	dptr,#_lastCode
   085A 74 10         [12] 2753 	mov	a,#0x10
   085C F0            [24] 2754 	movx	@dptr,a
                           2755 ;	cc1111rf.c:625: S1CON &= ~(S1CON_RFIF_0 | S1CON_RFIF_1);
   085D AE 9B         [24] 2756 	mov	r6,_S1CON
   085F 74 FC         [12] 2757 	mov	a,#0xFC
   0861 5E            [12] 2758 	anl	a,r6
   0862 F5 9B         [12] 2759 	mov	_S1CON,a
                           2760 ;	cc1111rf.c:628: rfif |= RFIF;
   0864 E5 E9         [12] 2761 	mov	a,_RFIF
   0866 42*00         [12] 2762 	orl	_rfif,a
                           2763 ;	cc1111rf.c:630: if (RFIF & RFIF_IRQ_SFD)
   0868 E5 E9         [12] 2764 	mov	a,_RFIF
   086A 30 E0 20      [24] 2765 	jnb	acc.0,00102$
                           2766 ;	cc1111rf.c:634: rf_tLastRecv = T2CT | (rf_MAC_timer << 8);
   086D 90r04r0C      [24] 2767 	mov	dptr,#_rf_MAC_timer
   0870 E0            [24] 2768 	movx	a,@dptr
   0871 FD            [12] 2769 	mov	r5,a
   0872 A3            [24] 2770 	inc	dptr
   0873 E0            [24] 2771 	movx	a,@dptr
   0874 8D 06         [24] 2772 	mov	ar6,r5
   0876 7D 00         [12] 2773 	mov	r5,#0x00
   0878 AB 9C         [24] 2774 	mov	r3,_T2CT
   087A 7C 00         [12] 2775 	mov	r4,#0x00
   087C 90r04r0E      [24] 2776 	mov	dptr,#_rf_tLastRecv
   087F ED            [12] 2777 	mov	a,r5
   0880 4B            [12] 2778 	orl	a,r3
   0881 F0            [24] 2779 	movx	@dptr,a
   0882 EE            [12] 2780 	mov	a,r6
   0883 4C            [12] 2781 	orl	a,r4
   0884 A3            [24] 2782 	inc	dptr
   0885 F0            [24] 2783 	movx	@dptr,a
                           2784 ;	cc1111rf.c:635: RFIF &= ~RFIF_IRQ_SFD;
   0886 AE E9         [24] 2785 	mov	r6,_RFIF
   0888 74 FE         [12] 2786 	mov	a,#0xFE
   088A 5E            [12] 2787 	anl	a,r6
   088B F5 E9         [12] 2788 	mov	_RFIF,a
   088D                    2789 00102$:
                           2790 ;	cc1111rf.c:640: if (RFIF & ( RFIF_IRQ_DONE | RFIF_IRQ_RXOVF | RFIF_IRQ_TIMEOUT ))
   088D E5 E9         [12] 2791 	mov	a,_RFIF
   088F 54 70         [12] 2792 	anl	a,#0x70
   0891 70 03         [24] 2793 	jnz	00152$
   0893 02r0Ar32      [24] 2794 	ljmp	00117$
   0896                    2795 00152$:
                           2796 ;	cc1111rf.c:643: if(rf_status == RFST_STX)
   0896 90r04r0B      [24] 2797 	mov	dptr,#_rf_status
   0899 E0            [24] 2798 	movx	a,@dptr
   089A FE            [12] 2799 	mov	r6,a
   089B BE 03 0A      [24] 2800 	cjne	r6,#0x03,00114$
                           2801 ;	cc1111rf.c:649: rfif &= ~( RFIF_IRQ_DONE | RFIF_IRQ_RXOVF | RFIF_IRQ_TIMEOUT );
   089E AE*00         [24] 2802 	mov	r6,_rfif
   08A0 74 8F         [12] 2803 	mov	a,#0x8F
   08A2 5E            [12] 2804 	anl	a,r6
   08A3 F5*00         [12] 2805 	mov	_rfif,a
   08A5 02r0Ar2B      [24] 2806 	ljmp	00115$
   08A8                    2807 00114$:
                           2808 ;	cc1111rf.c:655: if(rfRxProcessed[!rfRxCurrentBuffer] == RX_PROCESSED)
   08A8 90r00r00      [24] 2809 	mov	dptr,#_rfRxCurrentBuffer
   08AB E0            [24] 2810 	movx	a,@dptr
   08AC FE            [12] 2811 	mov	r6,a
   08AD B4 01 00      [24] 2812 	cjne	a,#0x01,00155$
   08B0                    2813 00155$:
   08B0 E4            [12] 2814 	clr	a
   08B1 33            [12] 2815 	rlc	a
   08B2 24r05         [12] 2816 	add	a,#_rfRxProcessed
   08B4 F5 82         [12] 2817 	mov	dpl,a
   08B6 E4            [12] 2818 	clr	a
   08B7 34s04         [12] 2819 	addc	a,#(_rfRxProcessed >> 8)
   08B9 F5 83         [12] 2820 	mov	dph,a
   08BB E0            [24] 2821 	movx	a,@dptr
   08BC FE            [12] 2822 	mov	r6,a
   08BD BE 01 02      [24] 2823 	cjne	r6,#0x01,00156$
   08C0 80 03         [24] 2824 	sjmp	00157$
   08C2                    2825 00156$:
   08C2 02r09rFD      [24] 2826 	ljmp	00111$
   08C5                    2827 00157$:
                           2828 ;	cc1111rf.c:660: if(rfAESMode & AES_CRYPTO_IN_ENABLE)
   08C5 90r00r14      [24] 2829 	mov	dptr,#_rfAESMode
   08C8 E0            [24] 2830 	movx	a,@dptr
   08C9 FE            [12] 2831 	mov	r6,a
   08CA 20 E1 03      [24] 2832 	jb	acc.1,00158$
   08CD 02r09rD3      [24] 2833 	ljmp	00109$
   08D0                    2834 00158$:
                           2835 ;	cc1111rf.c:662: if((PKTCTRL0 & PKTCTRL0_LENGTH_CONFIG) == PKTCTRL0_LENGTH_CONFIG_VAR)
   08D0 90 DF 04      [24] 2836 	mov	dptr,#_PKTCTRL0
   08D3 E0            [24] 2837 	movx	a,@dptr
   08D4 FE            [12] 2838 	mov	r6,a
   08D5 53 06 03      [24] 2839 	anl	ar6,#0x03
   08D8 BE 01 03      [24] 2840 	cjne	r6,#0x01,00104$
                           2841 ;	cc1111rf.c:663: encoffset= 1;
   08DB 75*03 01      [24] 2842 	mov	_rfIntHandler_encoffset_1_136,#0x01
   08DE                    2843 00104$:
                           2844 ;	cc1111rf.c:664: if((rfAESMode & AES_CRYPTO_IN_TYPE) == AES_CRYPTO_IN_ENCRYPT)
   08DE 90r00r14      [24] 2845 	mov	dptr,#_rfAESMode
   08E1 E0            [24] 2846 	movx	a,@dptr
   08E2 FE            [12] 2847 	mov	r6,a
   08E3 53 06 01      [24] 2848 	anl	ar6,#0x01
   08E6 BE 01 76      [24] 2849 	cjne	r6,#0x01,00106$
                           2850 ;	cc1111rf.c:665: encAES(&rfrxbuf[rfRxCurrentBuffer][encoffset], &rfrxbuf[rfRxCurrentBuffer][encoffset], rfRxCounter[rfRxCurrentBuffer] - encoffset, (rfAESMode & AES_CRYPTO_MODE));
   08E9 90r00r00      [24] 2851 	mov	dptr,#_rfRxCurrentBuffer
   08EC E0            [24] 2852 	movx	a,@dptr
   08ED 25 E0         [12] 2853 	add	a,acc
   08EF FD            [12] 2854 	mov	r5,a
   08F0 E4            [12] 2855 	clr	a
   08F1 24r01         [12] 2856 	add	a,#_rfrxbuf
   08F3 FE            [12] 2857 	mov	r6,a
   08F4 ED            [12] 2858 	mov	a,r5
   08F5 34s00         [12] 2859 	addc	a,#(_rfrxbuf >> 8)
   08F7 FD            [12] 2860 	mov	r5,a
   08F8 AB*03         [24] 2861 	mov	r3,_rfIntHandler_encoffset_1_136
   08FA 7C 00         [12] 2862 	mov	r4,#0x00
   08FC EB            [12] 2863 	mov	a,r3
   08FD 2E            [12] 2864 	add	a,r6
   08FE FE            [12] 2865 	mov	r6,a
   08FF EC            [12] 2866 	mov	a,r4
   0900 3D            [12] 2867 	addc	a,r5
   0901 FD            [12] 2868 	mov	r5,a
   0902 90r00r00      [24] 2869 	mov	dptr,#_rfRxCurrentBuffer
   0905 E0            [24] 2870 	movx	a,@dptr
   0906 F9            [12] 2871 	mov	r1,a
   0907 29            [12] 2872 	add	a,r1
   0908 FA            [12] 2873 	mov	r2,a
   0909 E4            [12] 2874 	clr	a
   090A 24r01         [12] 2875 	add	a,#_rfrxbuf
   090C F9            [12] 2876 	mov	r1,a
   090D EA            [12] 2877 	mov	a,r2
   090E 34s00         [12] 2878 	addc	a,#(_rfrxbuf >> 8)
   0910 FA            [12] 2879 	mov	r2,a
   0911 EB            [12] 2880 	mov	a,r3
   0912 29            [12] 2881 	add	a,r1
   0913 FB            [12] 2882 	mov	r3,a
   0914 EC            [12] 2883 	mov	a,r4
   0915 3A            [12] 2884 	addc	a,r2
   0916 FC            [12] 2885 	mov	r4,a
   0917 90r00r00      [24] 2886 	mov	dptr,#_rfRxCurrentBuffer
   091A E0            [24] 2887 	movx	a,@dptr
   091B 75 F0 02      [24] 2888 	mov	b,#0x02
   091E A4            [48] 2889 	mul	ab
   091F 24r01         [12] 2890 	add	a,#_rfRxCounter
   0921 F5 82         [12] 2891 	mov	dpl,a
   0923 74s04         [12] 2892 	mov	a,#(_rfRxCounter >> 8)
   0925 35 F0         [12] 2893 	addc	a,b
   0927 F5 83         [12] 2894 	mov	dph,a
   0929 E0            [24] 2895 	movx	a,@dptr
   092A F9            [12] 2896 	mov	r1,a
   092B A3            [24] 2897 	inc	dptr
   092C E0            [24] 2898 	movx	a,@dptr
   092D FA            [12] 2899 	mov	r2,a
   092E A8*03         [24] 2900 	mov	r0,_rfIntHandler_encoffset_1_136
   0930 7F 00         [12] 2901 	mov	r7,#0x00
   0932 E9            [12] 2902 	mov	a,r1
   0933 C3            [12] 2903 	clr	c
   0934 98            [12] 2904 	subb	a,r0
   0935 F9            [12] 2905 	mov	r1,a
   0936 EA            [12] 2906 	mov	a,r2
   0937 9F            [12] 2907 	subb	a,r7
   0938 FA            [12] 2908 	mov	r2,a
   0939 90r00r14      [24] 2909 	mov	dptr,#_rfAESMode
   093C E0            [24] 2910 	movx	a,@dptr
   093D FF            [12] 2911 	mov	r7,a
   093E 53 07 F0      [24] 2912 	anl	ar7,#0xF0
   0941 90r00r00      [24] 2913 	mov	dptr,#_encAES_PARM_2
   0944 EB            [12] 2914 	mov	a,r3
   0945 F0            [24] 2915 	movx	@dptr,a
   0946 EC            [12] 2916 	mov	a,r4
   0947 A3            [24] 2917 	inc	dptr
   0948 F0            [24] 2918 	movx	@dptr,a
   0949 90r00r00      [24] 2919 	mov	dptr,#_encAES_PARM_3
   094C E9            [12] 2920 	mov	a,r1
   094D F0            [24] 2921 	movx	@dptr,a
   094E EA            [12] 2922 	mov	a,r2
   094F A3            [24] 2923 	inc	dptr
   0950 F0            [24] 2924 	movx	@dptr,a
   0951 90r00r00      [24] 2925 	mov	dptr,#_encAES_PARM_4
   0954 EF            [12] 2926 	mov	a,r7
   0955 F0            [24] 2927 	movx	@dptr,a
   0956 8E 82         [24] 2928 	mov	dpl,r6
   0958 8D 83         [24] 2929 	mov	dph,r5
   095A 12r00r00      [24] 2930 	lcall	_encAES
   095D 80 74         [24] 2931 	sjmp	00109$
   095F                    2932 00106$:
                           2933 ;	cc1111rf.c:667: decAES(&rfrxbuf[rfRxCurrentBuffer][encoffset], &rfrxbuf[rfRxCurrentBuffer][encoffset], rfRxCounter[rfRxCurrentBuffer] - encoffset, (rfAESMode & AES_CRYPTO_MODE));
   095F 90r00r00      [24] 2934 	mov	dptr,#_rfRxCurrentBuffer
   0962 E0            [24] 2935 	movx	a,@dptr
   0963 25 E0         [12] 2936 	add	a,acc
   0965 FE            [12] 2937 	mov	r6,a
   0966 E4            [12] 2938 	clr	a
   0967 24r01         [12] 2939 	add	a,#_rfrxbuf
   0969 FF            [12] 2940 	mov	r7,a
   096A EE            [12] 2941 	mov	a,r6
   096B 34s00         [12] 2942 	addc	a,#(_rfrxbuf >> 8)
   096D FE            [12] 2943 	mov	r6,a
   096E AC*03         [24] 2944 	mov	r4,_rfIntHandler_encoffset_1_136
   0970 7D 00         [12] 2945 	mov	r5,#0x00
   0972 EC            [12] 2946 	mov	a,r4
   0973 2F            [12] 2947 	add	a,r7
   0974 FF            [12] 2948 	mov	r7,a
   0975 ED            [12] 2949 	mov	a,r5
   0976 3E            [12] 2950 	addc	a,r6
   0977 FE            [12] 2951 	mov	r6,a
   0978 90r00r00      [24] 2952 	mov	dptr,#_rfRxCurrentBuffer
   097B E0            [24] 2953 	movx	a,@dptr
   097C 25 E0         [12] 2954 	add	a,acc
   097E FA            [12] 2955 	mov	r2,a
   097F E4            [12] 2956 	clr	a
   0980 24r01         [12] 2957 	add	a,#_rfrxbuf
   0982 FB            [12] 2958 	mov	r3,a
   0983 EA            [12] 2959 	mov	a,r2
   0984 34s00         [12] 2960 	addc	a,#(_rfrxbuf >> 8)
   0986 FA            [12] 2961 	mov	r2,a
   0987 EC            [12] 2962 	mov	a,r4
   0988 2B            [12] 2963 	add	a,r3
   0989 FC            [12] 2964 	mov	r4,a
   098A ED            [12] 2965 	mov	a,r5
   098B 3A            [12] 2966 	addc	a,r2
   098C FD            [12] 2967 	mov	r5,a
   098D 90r00r00      [24] 2968 	mov	dptr,#_rfRxCurrentBuffer
   0990 E0            [24] 2969 	movx	a,@dptr
   0991 75 F0 02      [24] 2970 	mov	b,#0x02
   0994 A4            [48] 2971 	mul	ab
   0995 24r01         [12] 2972 	add	a,#_rfRxCounter
   0997 F5 82         [12] 2973 	mov	dpl,a
   0999 74s04         [12] 2974 	mov	a,#(_rfRxCounter >> 8)
   099B 35 F0         [12] 2975 	addc	a,b
   099D F5 83         [12] 2976 	mov	dph,a
   099F E0            [24] 2977 	movx	a,@dptr
   09A0 FA            [12] 2978 	mov	r2,a
   09A1 A3            [24] 2979 	inc	dptr
   09A2 E0            [24] 2980 	movx	a,@dptr
   09A3 FB            [12] 2981 	mov	r3,a
   09A4 A8*03         [24] 2982 	mov	r0,_rfIntHandler_encoffset_1_136
   09A6 79 00         [12] 2983 	mov	r1,#0x00
   09A8 EA            [12] 2984 	mov	a,r2
   09A9 C3            [12] 2985 	clr	c
   09AA 98            [12] 2986 	subb	a,r0
   09AB FA            [12] 2987 	mov	r2,a
   09AC EB            [12] 2988 	mov	a,r3
   09AD 99            [12] 2989 	subb	a,r1
   09AE FB            [12] 2990 	mov	r3,a
   09AF 90r00r14      [24] 2991 	mov	dptr,#_rfAESMode
   09B2 E0            [24] 2992 	movx	a,@dptr
   09B3 F9            [12] 2993 	mov	r1,a
   09B4 53 01 F0      [24] 2994 	anl	ar1,#0xF0
   09B7 90r00r00      [24] 2995 	mov	dptr,#_decAES_PARM_2
   09BA EC            [12] 2996 	mov	a,r4
   09BB F0            [24] 2997 	movx	@dptr,a
   09BC ED            [12] 2998 	mov	a,r5
   09BD A3            [24] 2999 	inc	dptr
   09BE F0            [24] 3000 	movx	@dptr,a
   09BF 90r00r00      [24] 3001 	mov	dptr,#_decAES_PARM_3
   09C2 EA            [12] 3002 	mov	a,r2
   09C3 F0            [24] 3003 	movx	@dptr,a
   09C4 EB            [12] 3004 	mov	a,r3
   09C5 A3            [24] 3005 	inc	dptr
   09C6 F0            [24] 3006 	movx	@dptr,a
   09C7 90r00r00      [24] 3007 	mov	dptr,#_decAES_PARM_4
   09CA E9            [12] 3008 	mov	a,r1
   09CB F0            [24] 3009 	movx	@dptr,a
   09CC 8F 82         [24] 3010 	mov	dpl,r7
   09CE 8E 83         [24] 3011 	mov	dph,r6
   09D0 12r00r00      [24] 3012 	lcall	_decAES
   09D3                    3013 00109$:
                           3014 ;	cc1111rf.c:671: rfRxCurrentBuffer ^= 1;
   09D3 90r00r00      [24] 3015 	mov	dptr,#_rfRxCurrentBuffer
   09D6 E0            [24] 3016 	movx	a,@dptr
   09D7 64 01         [12] 3017 	xrl	a,#0x01
   09D9 F0            [24] 3018 	movx	@dptr,a
                           3019 ;	cc1111rf.c:672: rfRxCounter[rfRxCurrentBuffer] = 0;
   09DA 90r00r00      [24] 3020 	mov	dptr,#_rfRxCurrentBuffer
   09DD E0            [24] 3021 	movx	a,@dptr
   09DE FF            [12] 3022 	mov	r7,a
   09DF 75 F0 02      [24] 3023 	mov	b,#0x02
   09E2 A4            [48] 3024 	mul	ab
   09E3 24r01         [12] 3025 	add	a,#_rfRxCounter
   09E5 F5 82         [12] 3026 	mov	dpl,a
   09E7 74s04         [12] 3027 	mov	a,#(_rfRxCounter >> 8)
   09E9 35 F0         [12] 3028 	addc	a,b
   09EB F5 83         [12] 3029 	mov	dph,a
   09ED E4            [12] 3030 	clr	a
   09EE F0            [24] 3031 	movx	@dptr,a
   09EF E4            [12] 3032 	clr	a
   09F0 A3            [24] 3033 	inc	dptr
   09F1 F0            [24] 3034 	movx	@dptr,a
                           3035 ;	cc1111rf.c:674: rfRxProcessed[FIRST_BUFFER] = RX_UNPROCESSED;
   09F2 90r04r05      [24] 3036 	mov	dptr,#_rfRxProcessed
                           3037 ;	cc1111rf.c:675: rfRxProcessed[SECOND_BUFFER] = RX_UNPROCESSED;
   09F5 E4            [12] 3038 	clr	a
   09F6 F0            [24] 3039 	movx	@dptr,a
   09F7 90r04r06      [24] 3040 	mov	dptr,#(_rfRxProcessed + 0x0001)
   09FA F0            [24] 3041 	movx	@dptr,a
   09FB 80 2C         [24] 3042 	sjmp	00112$
   09FD                    3043 00111$:
                           3044 ;	cc1111rf.c:692: lastCode[1] = LCE_DROPPED_PACKET;
   09FD 90r00r01      [24] 3045 	mov	dptr,#(_lastCode + 0x0001)
   0A00 74 12         [12] 3046 	mov	a,#0x12
   0A02 F0            [24] 3047 	movx	@dptr,a
                           3048 ;	cc1111rf.c:693: LED = !LED;
   0A03 A2 A4         [12] 3049 	mov	c,_P2_4
   0A05 B3            [12] 3050 	cpl	c
   0A06 92*01         [24] 3051 	mov  _rfIntHandler_sloc0_1_0,c
   0A08 92 A4         [24] 3052 	mov	_P2_4,c
                           3053 ;	cc1111rf.c:694: rfRxCounter[rfRxCurrentBuffer] = 0;
   0A0A 90r00r00      [24] 3054 	mov	dptr,#_rfRxCurrentBuffer
   0A0D E0            [24] 3055 	movx	a,@dptr
   0A0E FF            [12] 3056 	mov	r7,a
   0A0F 75 F0 02      [24] 3057 	mov	b,#0x02
   0A12 A4            [48] 3058 	mul	ab
   0A13 24r01         [12] 3059 	add	a,#_rfRxCounter
   0A15 F5 82         [12] 3060 	mov	dpl,a
   0A17 74s04         [12] 3061 	mov	a,#(_rfRxCounter >> 8)
   0A19 35 F0         [12] 3062 	addc	a,b
   0A1B F5 83         [12] 3063 	mov	dph,a
   0A1D E4            [12] 3064 	clr	a
   0A1E F0            [24] 3065 	movx	@dptr,a
   0A1F E4            [12] 3066 	clr	a
   0A20 A3            [24] 3067 	inc	dptr
   0A21 F0            [24] 3068 	movx	@dptr,a
                           3069 ;	cc1111rf.c:695: LED = !LED;
   0A22 A2 A4         [12] 3070 	mov	c,_P2_4
   0A24 B3            [12] 3071 	cpl	c
   0A25 92*01         [24] 3072 	mov  _rfIntHandler_sloc0_1_0,c
   0A27 92 A4         [24] 3073 	mov	_P2_4,c
   0A29                    3074 00112$:
                           3075 ;	cc1111rf.c:698: LED = 0;
   0A29 C2 A4         [12] 3076 	clr	_P2_4
   0A2B                    3077 00115$:
                           3078 ;	cc1111rf.c:700: RFIF &= ~(RFIF_IRQ_DONE | RFIF_IRQ_TIMEOUT);        // OVF needs to be handled next...
   0A2B AF E9         [24] 3079 	mov	r7,_RFIF
   0A2D 74 CF         [12] 3080 	mov	a,#0xCF
   0A2F 5F            [12] 3081 	anl	a,r7
   0A30 F5 E9         [12] 3082 	mov	_RFIF,a
   0A32                    3083 00117$:
                           3084 ;	cc1111rf.c:704: if(RFIF & RFIF_IRQ_RXOVF)
   0A32 E5 E9         [12] 3085 	mov	a,_RFIF
   0A34 30 E6 1E      [24] 3086 	jnb	acc.6,00119$
                           3087 ;	cc1111rf.c:709: lastCode[1] = LCE_RF_RXOVF;
   0A37 90r00r01      [24] 3088 	mov	dptr,#(_lastCode + 0x0001)
   0A3A 74 10         [12] 3089 	mov	a,#0x10
   0A3C F0            [24] 3090 	movx	@dptr,a
                           3091 ;	cc1111rf.c:710: LED = !LED;
   0A3D A2 A4         [12] 3092 	mov	c,_P2_4
   0A3F B3            [12] 3093 	cpl	c
   0A40 92*01         [24] 3094 	mov  _rfIntHandler_sloc0_1_0,c
   0A42 92 A4         [24] 3095 	mov	_P2_4,c
                           3096 ;	cc1111rf.c:712: resetRFSTATE();
   0A44 12r00r70      [24] 3097 	lcall	_resetRFSTATE
                           3098 ;	cc1111rf.c:714: LED = !LED;
   0A47 A2 A4         [12] 3099 	mov	c,_P2_4
   0A49 B3            [12] 3100 	cpl	c
   0A4A 92*01         [24] 3101 	mov  _rfIntHandler_sloc0_1_0,c
   0A4C 92 A4         [24] 3102 	mov	_P2_4,c
                           3103 ;	cc1111rf.c:715: RFIF &= ~RFIF_IRQ_RXOVF;
   0A4E AF E9         [24] 3104 	mov	r7,_RFIF
   0A50 74 BF         [12] 3105 	mov	a,#0xBF
   0A52 5F            [12] 3106 	anl	a,r7
   0A53 F5 E9         [12] 3107 	mov	_RFIF,a
   0A55                    3108 00119$:
                           3109 ;	cc1111rf.c:718: if(RFIF & RFIF_IRQ_TXUNF)
   0A55 E5 E9         [12] 3110 	mov	a,_RFIF
   0A57 30 E7 1E      [24] 3111 	jnb	acc.7,00122$
                           3112 ;	cc1111rf.c:721: lastCode[1] = LCE_RF_TXUNF;
   0A5A 90r00r01      [24] 3113 	mov	dptr,#(_lastCode + 0x0001)
   0A5D 74 11         [12] 3114 	mov	a,#0x11
   0A5F F0            [24] 3115 	movx	@dptr,a
                           3116 ;	cc1111rf.c:722: LED = !LED;
   0A60 A2 A4         [12] 3117 	mov	c,_P2_4
   0A62 B3            [12] 3118 	cpl	c
   0A63 92*01         [24] 3119 	mov  _rfIntHandler_sloc0_1_0,c
   0A65 92 A4         [24] 3120 	mov	_P2_4,c
                           3121 ;	cc1111rf.c:724: resetRFSTATE();
   0A67 12r00r70      [24] 3122 	lcall	_resetRFSTATE
                           3123 ;	cc1111rf.c:726: LED = !LED;
   0A6A A2 A4         [12] 3124 	mov	c,_P2_4
   0A6C B3            [12] 3125 	cpl	c
   0A6D 92*01         [24] 3126 	mov  _rfIntHandler_sloc0_1_0,c
   0A6F 92 A4         [24] 3127 	mov	_P2_4,c
                           3128 ;	cc1111rf.c:728: RFIF &= ~RFIF_IRQ_TXUNF;
   0A71 AF E9         [24] 3129 	mov	r7,_RFIF
   0A73 74 7F         [12] 3130 	mov	a,#0x7F
   0A75 5F            [12] 3131 	anl	a,r7
   0A76 F5 E9         [12] 3132 	mov	_RFIF,a
   0A78                    3133 00122$:
   0A78 D0 D0         [24] 3134 	pop	psw
   0A7A D0 00         [24] 3135 	pop	(0+0)
   0A7C D0 01         [24] 3136 	pop	(0+1)
   0A7E D0 02         [24] 3137 	pop	(0+2)
   0A80 D0 03         [24] 3138 	pop	(0+3)
   0A82 D0 04         [24] 3139 	pop	(0+4)
   0A84 D0 05         [24] 3140 	pop	(0+5)
   0A86 D0 06         [24] 3141 	pop	(0+6)
   0A88 D0 07         [24] 3142 	pop	(0+7)
   0A8A D0 83         [24] 3143 	pop	dph
   0A8C D0 82         [24] 3144 	pop	dpl
   0A8E D0 F0         [24] 3145 	pop	b
   0A90 D0 E0         [24] 3146 	pop	acc
   0A92 D0*00         [24] 3147 	pop	bits
   0A94 32            [24] 3148 	reti
                           3149 ;------------------------------------------------------------
                           3150 ;Allocation info for local variables in function 'byte_shuffle'
                           3151 ;------------------------------------------------------------
                           3152 ;len                       Allocated with name '_byte_shuffle_PARM_2'
                           3153 ;offset                    Allocated with name '_byte_shuffle_PARM_3'
                           3154 ;buf                       Allocated with name '_byte_shuffle_buf_1_146'
                           3155 ;------------------------------------------------------------
                           3156 ;	cc1111rf.c:733: void byte_shuffle(__xdata u8* __xdata buf, __xdata u16 len, __xdata u16 offset)
                           3157 ;	-----------------------------------------
                           3158 ;	 function byte_shuffle
                           3159 ;	-----------------------------------------
   0A95                    3160 _byte_shuffle:
   0A95 AF 83         [24] 3161 	mov	r7,dph
   0A97 E5 82         [12] 3162 	mov	a,dpl
   0A99 90r04r32      [24] 3163 	mov	dptr,#_byte_shuffle_buf_1_146
   0A9C F0            [24] 3164 	movx	@dptr,a
   0A9D EF            [12] 3165 	mov	a,r7
   0A9E A3            [24] 3166 	inc	dptr
   0A9F F0            [24] 3167 	movx	@dptr,a
                           3168 ;	cc1111rf.c:735: while(len--)
   0AA0 90r04r30      [24] 3169 	mov	dptr,#_byte_shuffle_PARM_3
   0AA3 E0            [24] 3170 	movx	a,@dptr
   0AA4 FE            [12] 3171 	mov	r6,a
   0AA5 A3            [24] 3172 	inc	dptr
   0AA6 E0            [24] 3173 	movx	a,@dptr
   0AA7 FF            [12] 3174 	mov	r7,a
   0AA8 90r04r32      [24] 3175 	mov	dptr,#_byte_shuffle_buf_1_146
   0AAB E0            [24] 3176 	movx	a,@dptr
   0AAC FC            [12] 3177 	mov	r4,a
   0AAD A3            [24] 3178 	inc	dptr
   0AAE E0            [24] 3179 	movx	a,@dptr
   0AAF FD            [12] 3180 	mov	r5,a
   0AB0 90r04r2E      [24] 3181 	mov	dptr,#_byte_shuffle_PARM_2
   0AB3 E0            [24] 3182 	movx	a,@dptr
   0AB4 FA            [12] 3183 	mov	r2,a
   0AB5 A3            [24] 3184 	inc	dptr
   0AB6 E0            [24] 3185 	movx	a,@dptr
   0AB7 FB            [12] 3186 	mov	r3,a
   0AB8                    3187 00101$:
   0AB8 8A 00         [24] 3188 	mov	ar0,r2
   0ABA 8B 01         [24] 3189 	mov	ar1,r3
   0ABC 1A            [12] 3190 	dec	r2
   0ABD BA FF 01      [24] 3191 	cjne	r2,#0xFF,00113$
   0AC0 1B            [12] 3192 	dec	r3
   0AC1                    3193 00113$:
   0AC1 E8            [12] 3194 	mov	a,r0
   0AC2 49            [12] 3195 	orl	a,r1
   0AC3 60 24         [24] 3196 	jz	00104$
                           3197 ;	cc1111rf.c:736: buf[len + offset] = buf[len];
   0AC5 EE            [12] 3198 	mov	a,r6
   0AC6 2A            [12] 3199 	add	a,r2
   0AC7 F8            [12] 3200 	mov	r0,a
   0AC8 EF            [12] 3201 	mov	a,r7
   0AC9 3B            [12] 3202 	addc	a,r3
   0ACA F9            [12] 3203 	mov	r1,a
   0ACB E8            [12] 3204 	mov	a,r0
   0ACC 2C            [12] 3205 	add	a,r4
   0ACD F8            [12] 3206 	mov	r0,a
   0ACE E9            [12] 3207 	mov	a,r1
   0ACF 3D            [12] 3208 	addc	a,r5
   0AD0 F9            [12] 3209 	mov	r1,a
   0AD1 EA            [12] 3210 	mov	a,r2
   0AD2 2C            [12] 3211 	add	a,r4
   0AD3 F5 82         [12] 3212 	mov	dpl,a
   0AD5 EB            [12] 3213 	mov	a,r3
   0AD6 3D            [12] 3214 	addc	a,r5
   0AD7 F5 83         [12] 3215 	mov	dph,a
   0AD9 C0 06         [24] 3216 	push	ar6
   0ADB C0 07         [24] 3217 	push	ar7
   0ADD E0            [24] 3218 	movx	a,@dptr
   0ADE 88 82         [24] 3219 	mov	dpl,r0
   0AE0 89 83         [24] 3220 	mov	dph,r1
   0AE2 F0            [24] 3221 	movx	@dptr,a
   0AE3 D0 07         [24] 3222 	pop	ar7
   0AE5 D0 06         [24] 3223 	pop	ar6
   0AE7 80 CF         [24] 3224 	sjmp	00101$
   0AE9                    3225 00104$:
   0AE9 22            [24] 3226 	ret
                           3227 	.area CSEG    (CODE)
                           3228 	.area CONST   (CODE)
                           3229 	.area XINIT   (CODE)
   0000                    3230 __xinit__rfRxInfMode:
   0000 00                 3231 	.db #0x00	; 0
   0001                    3232 __xinit__rfRxTotalRXLen:
   0001 00 00              3233 	.byte #0x00,#0x00	; 0
   0003                    3234 __xinit__rfRxLargeLen:
   0003 00 00              3235 	.byte #0x00,#0x00	; 0
   0005                    3236 __xinit__rfTxCurBufIdx:
   0005 00                 3237 	.db #0x00	; 0
   0006                    3238 __xinit__rfTxBufCount:
   0006 01                 3239 	.db #0x01	; 1
   0007                    3240 __xinit__rfTxCounter:
   0007 00 00              3241 	.byte #0x00,#0x00	; 0
   0009                    3242 __xinit__rfTxRepeatCounter:
   0009 00 00              3243 	.byte #0x00,#0x00	; 0
   000B                    3244 __xinit__rfTxBufferEnd:
   000B 00 00              3245 	.byte #0x00,#0x00	; 0
   000D                    3246 __xinit__rfTxRepeatLen:
   000D 00 00              3247 	.byte #0x00,#0x00	; 0
   000F                    3248 __xinit__rfTxRepeatOffset:
   000F 00 00              3249 	.byte #0x00,#0x00	; 0
   0011                    3250 __xinit__rfTxTotalTXLen:
   0011 00 00              3251 	.byte #0x00,#0x00	; 0
   0013                    3252 __xinit__rfTxInfMode:
   0013 00                 3253 	.db #0x00	; 0
   0014                    3254 __xinit__rfAESMode:
   0014 00                 3255 	.db #0x00	; 0
   0015                    3256 __xinit__rfAmpMode:
   0015 00                 3257 	.db #0x00	; 0
   0016                    3258 __xinit__bRepeatMode:
   0016 00                 3259 	.db #0x00	; 0
                           3260 	.area CABS    (ABS,CODE)
